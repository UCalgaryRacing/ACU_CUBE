
AMS-Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bf8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08006dd0  08006dd0  00016dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006de4  08006de4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006de4  08006de4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006de4  08006de4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006de4  08006de4  00016de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006de8  08006de8  00016de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  20000070  08006e5c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08006e5c  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001194a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ca  00000000  00000000  000319ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  00033db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  00034de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002843c  00000000  00000000  00035d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a03  00000000  00000000  0005e13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108c02  00000000  00000000  0006eb3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00177741  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004778  00000000  00000000  00177794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006db8 	.word	0x08006db8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	08006db8 	.word	0x08006db8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <init_PEC15_Table>:

int16_t pec15Table[256];
const int16_t CRC15_POLY = 0x4599;

void init_PEC15_Table(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
    int16_t remainder;

    for (int i = 0; i < 256; i++)
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	e026      	b.n	8000b8a <init_PEC15_Table+0x5a>
    {
        remainder = i << 7;
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	01db      	lsls	r3, r3, #7
 8000b40:	81fb      	strh	r3, [r7, #14]
        for (int bit = 8; bit > 0; --bit)
 8000b42:	2308      	movs	r3, #8
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	e015      	b.n	8000b74 <init_PEC15_Table+0x44>
        {
            if (remainder & 0x4000)
 8000b48:	89fb      	ldrh	r3, [r7, #14]
 8000b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d009      	beq.n	8000b66 <init_PEC15_Table+0x36>
            {
                remainder = ((remainder << 1));
 8000b52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	81fb      	strh	r3, [r7, #14]
                remainder = (remainder ^ CRC15_POLY);
 8000b5a:	f244 5299 	movw	r2, #17817	; 0x4599
 8000b5e:	89fb      	ldrh	r3, [r7, #14]
 8000b60:	4053      	eors	r3, r2
 8000b62:	81fb      	strh	r3, [r7, #14]
 8000b64:	e003      	b.n	8000b6e <init_PEC15_Table+0x3e>
            }
            else
            {
                remainder = ((remainder << 1));
 8000b66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	81fb      	strh	r3, [r7, #14]
        for (int bit = 8; bit > 0; --bit)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3b01      	subs	r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	dce6      	bgt.n	8000b48 <init_PEC15_Table+0x18>
            }
        }
        pec15Table[i] = remainder & 0xFFFF;
 8000b7a:	4909      	ldr	r1, [pc, #36]	; (8000ba0 <init_PEC15_Table+0x70>)
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	89fa      	ldrh	r2, [r7, #14]
 8000b80:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int i = 0; i < 256; i++)
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	3301      	adds	r3, #1
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	2bff      	cmp	r3, #255	; 0xff
 8000b8e:	ddd5      	ble.n	8000b3c <init_PEC15_Table+0xc>
    }
}
 8000b90:	bf00      	nop
 8000b92:	bf00      	nop
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	2000008c 	.word	0x2000008c

08000ba4 <pec15>:


uint16_t pec15(uint8_t *data, int len)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b087      	sub	sp, #28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
    int16_t remainder, address;

    remainder = 16; // PEC seed
 8000bae:	2310      	movs	r3, #16
 8000bb0:	82fb      	strh	r3, [r7, #22]

    for (int i = 0; i < len; i++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	e01a      	b.n	8000bee <pec15+0x4a>
    {
        address = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 8000bb8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000bbc:	11db      	asrs	r3, r3, #7
 8000bbe:	b21a      	sxth	r2, r3
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	440b      	add	r3, r1
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	4053      	eors	r3, r2
 8000bcc:	b21b      	sxth	r3, r3
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	81fb      	strh	r3, [r7, #14]
        remainder = (remainder << 8) ^ pec15Table[address];
 8000bd2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000bd6:	021b      	lsls	r3, r3, #8
 8000bd8:	b21a      	sxth	r2, r3
 8000bda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bde:	490a      	ldr	r1, [pc, #40]	; (8000c08 <pec15+0x64>)
 8000be0:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000be4:	4053      	eors	r3, r2
 8000be6:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < len; i++)
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	3301      	adds	r3, #1
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	dbe0      	blt.n	8000bb8 <pec15+0x14>
    }
    return (remainder * 2); // The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 8000bf6:	8afb      	ldrh	r3, [r7, #22]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	b29b      	uxth	r3, r3
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	371c      	adds	r7, #28
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	2000008c 	.word	0x2000008c

08000c0c <init_LTC6811>:


void init_LTC6811(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
    init_PEC15_Table();
 8000c10:	f7ff ff8e 	bl	8000b30 <init_PEC15_Table>
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <update_config>:


void update_config(ltc6811_config *config)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
    uint8_t cfgr[6] = {0};
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	2300      	movs	r3, #0
 8000c26:	81bb      	strh	r3, [r7, #12]

    cfgr[0] = config->gpio_pulldowns << 3;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	723b      	strb	r3, [r7, #8]
    cfgr[0] |= config->refon << 2;
 8000c32:	7a3b      	ldrb	r3, [r7, #8]
 8000c34:	b25a      	sxtb	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	785b      	ldrb	r3, [r3, #1]
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	b25b      	sxtb	r3, r3
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	b25b      	sxtb	r3, r3
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	723b      	strb	r3, [r7, #8]
    cfgr[0] |= config->adcopt;
 8000c46:	7a3b      	ldrb	r3, [r7, #8]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	7892      	ldrb	r2, [r2, #2]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	723b      	strb	r3, [r7, #8]

    cfgr[1] = config->vuv;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	889b      	ldrh	r3, [r3, #4]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	727b      	strb	r3, [r7, #9]

    cfgr[2] = config->vuv >> 8;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	889b      	ldrh	r3, [r3, #4]
 8000c5e:	0a1b      	lsrs	r3, r3, #8
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	72bb      	strb	r3, [r7, #10]
    cfgr[2] |= config->vov << 4;
 8000c66:	7abb      	ldrb	r3, [r7, #10]
 8000c68:	b25a      	sxtb	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	88db      	ldrh	r3, [r3, #6]
 8000c6e:	011b      	lsls	r3, r3, #4
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	4313      	orrs	r3, r2
 8000c74:	b25b      	sxtb	r3, r3
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	72bb      	strb	r3, [r7, #10]

    cfgr[3] = config->vov >> 4;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	88db      	ldrh	r3, [r3, #6]
 8000c7e:	091b      	lsrs	r3, r3, #4
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	72fb      	strb	r3, [r7, #11]

    cfgr[4] = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	733b      	strb	r3, [r7, #12]

    cfgr[5] = config->dcto << 4;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	7a1b      	ldrb	r3, [r3, #8]
 8000c8e:	011b      	lsls	r3, r3, #4
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	737b      	strb	r3, [r7, #13]

    broadcast_write(WRCFGA, cfgr);
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	4619      	mov	r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f000 f878 	bl	8000d90 <broadcast_write>
}
 8000ca0:	bf00      	nop
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <wake_sleep>:

////NEED TO CHANGE TO HAL
void wake_sleep()
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb6:	f003 fcc3 	bl	8004640 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f001 fa40 	bl	8002140 <HAL_Delay>

    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cca:	f003 fcb9 	bl	8004640 <HAL_GPIO_WritePin>

    HAL_Delay(1);
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f001 fa36 	bl	8002140 <HAL_Delay>
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <wake_standby>:


void wake_standby()
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ce2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce6:	f003 fcab 	bl	8004640 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000cea:	2001      	movs	r0, #1
 8000cec:	f001 fa28 	bl	8002140 <HAL_Delay>

    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfa:	f003 fca1 	bl	8004640 <HAL_GPIO_WritePin>

    HAL_Delay(1);
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f001 fa1e 	bl	8002140 <HAL_Delay>
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <broadcast_command>:


void broadcast_command(uint16_t command_code)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	80fb      	strh	r3, [r7, #6]
    uint8_t CMD[2];

    // see Table 36 (Broadcast Command Format) in LTC6811 datasheet
    CMD[0] = 0;                  // CMD0 bits 3 thru 7  = 0
 8000d12:	2300      	movs	r3, #0
 8000d14:	733b      	strb	r3, [r7, #12]
    CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 8000d16:	7b3a      	ldrb	r2, [r7, #12]
 8000d18:	88fb      	ldrh	r3, [r7, #6]
 8000d1a:	0a1b      	lsrs	r3, r3, #8
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	4313      	orrs	r3, r2
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	733b      	strb	r3, [r7, #12]
    CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	737b      	strb	r3, [r7, #13]

    uint16_t crc = pec15(CMD, 2); // CRC for CMD
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	2102      	movs	r1, #2
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ff36 	bl	8000ba4 <pec15>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	81fb      	strh	r3, [r7, #14]

    uint8_t tx_msg[4];

    // Send 2-byte CMD and 2-byte PEC15.

    tx_msg[0] = CMD[0];
 8000d3c:	7b3b      	ldrb	r3, [r7, #12]
 8000d3e:	723b      	strb	r3, [r7, #8]
    tx_msg[1] = CMD[1];
 8000d40:	7b7b      	ldrb	r3, [r7, #13]
 8000d42:	727b      	strb	r3, [r7, #9]
    tx_msg[2] = crc >> 8;
 8000d44:	89fb      	ldrh	r3, [r7, #14]
 8000d46:	0a1b      	lsrs	r3, r3, #8
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	72bb      	strb	r3, [r7, #10]
    tx_msg[3] = crc;
 8000d4e:	89fb      	ldrh	r3, [r7, #14]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	72fb      	strb	r3, [r7, #11]




#ifdef ALWAYS_STANDBY_WAKE
    wake_standby();
 8000d54:	f7ff ffc0 	bl	8000cd8 <wake_standby>
#endif
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d62:	f003 fc6d 	bl	8004640 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, tx_msg, 4, 1000);
 8000d66:	f107 0108 	add.w	r1, r7, #8
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	2204      	movs	r2, #4
 8000d70:	4806      	ldr	r0, [pc, #24]	; (8000d8c <broadcast_command+0x84>)
 8000d72:	f004 ff7e 	bl	8005c72 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000d76:	2201      	movs	r2, #1
 8000d78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d80:	f003 fc5e 	bl	8004640 <HAL_GPIO_WritePin>
}
 8000d84:	bf00      	nop
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	200003e8 	.word	0x200003e8

08000d90 <broadcast_write>:


void broadcast_write(uint16_t command_code, uint8_t *tx_reg)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	80fb      	strh	r3, [r7, #6]
    uint8_t CMD[2];

    // see Table 36 (Broadcast Command Format) in LTC6811 datasheet
    CMD[0] = 0;                  // CMD0 bits 3 thru 7  = 0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	753b      	strb	r3, [r7, #20]
    CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 8000da0:	7d3a      	ldrb	r2, [r7, #20]
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	4313      	orrs	r3, r2
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	753b      	strb	r3, [r7, #20]
    CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	757b      	strb	r3, [r7, #21]

    uint16_t crc = pec15(CMD, 2); // CRC for CMD
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	2102      	movs	r1, #2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fef1 	bl	8000ba4 <pec15>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	82fb      	strh	r3, [r7, #22]

    uint8_t tx_msg[12];

    // Send 2-byte CMD and 2-byte PEC15, then 6-byte register and 2-byte PEC15. No shift bytes.

    tx_msg[0] = CMD[0];
 8000dc6:	7d3b      	ldrb	r3, [r7, #20]
 8000dc8:	723b      	strb	r3, [r7, #8]
    tx_msg[1] = CMD[1];
 8000dca:	7d7b      	ldrb	r3, [r7, #21]
 8000dcc:	727b      	strb	r3, [r7, #9]
    tx_msg[2] = crc >> 8;
 8000dce:	8afb      	ldrh	r3, [r7, #22]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	72bb      	strb	r3, [r7, #10]
    tx_msg[3] = crc;
 8000dd8:	8afb      	ldrh	r3, [r7, #22]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	72fb      	strb	r3, [r7, #11]

    crc = pec15(tx_reg, 6); // CRC for register value
 8000dde:	2106      	movs	r1, #6
 8000de0:	6838      	ldr	r0, [r7, #0]
 8000de2:	f7ff fedf 	bl	8000ba4 <pec15>
 8000de6:	4603      	mov	r3, r0
 8000de8:	82fb      	strh	r3, [r7, #22]

    tx_msg[4] = tx_reg[0];
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	733b      	strb	r3, [r7, #12]
    tx_msg[5] = tx_reg[1];
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	785b      	ldrb	r3, [r3, #1]
 8000df4:	737b      	strb	r3, [r7, #13]
    tx_msg[6] = tx_reg[2];
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	789b      	ldrb	r3, [r3, #2]
 8000dfa:	73bb      	strb	r3, [r7, #14]
    tx_msg[7] = tx_reg[3];
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	78db      	ldrb	r3, [r3, #3]
 8000e00:	73fb      	strb	r3, [r7, #15]
    tx_msg[8] = tx_reg[4];
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	791b      	ldrb	r3, [r3, #4]
 8000e06:	743b      	strb	r3, [r7, #16]
    tx_msg[9] = tx_reg[5];
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	795b      	ldrb	r3, [r3, #5]
 8000e0c:	747b      	strb	r3, [r7, #17]
    tx_msg[10] = crc >> 8;
 8000e0e:	8afb      	ldrh	r3, [r7, #22]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	74bb      	strb	r3, [r7, #18]
    tx_msg[11] = crc;
 8000e18:	8afb      	ldrh	r3, [r7, #22]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	74fb      	strb	r3, [r7, #19]




#ifdef ALWAYS_STANDBY_WAKE
    wake_standby();
 8000e1e:	f7ff ff5b 	bl	8000cd8 <wake_standby>
#endif
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2c:	f003 fc08 	bl	8004640 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, tx_msg, 12, 1000);
 8000e30:	f107 0108 	add.w	r1, r7, #8
 8000e34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e38:	220c      	movs	r2, #12
 8000e3a:	4807      	ldr	r0, [pc, #28]	; (8000e58 <broadcast_write+0xc8>)
 8000e3c:	f004 ff19 	bl	8005c72 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000e40:	2201      	movs	r2, #1
 8000e42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4a:	f003 fbf9 	bl	8004640 <HAL_GPIO_WritePin>
}
 8000e4e:	bf00      	nop
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200003e8 	.word	0x200003e8

08000e5c <address_write>:


void address_write(uint8_t address, uint16_t command_code, uint8_t *tx_reg)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	603a      	str	r2, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	80bb      	strh	r3, [r7, #4]
    uint8_t CMD[2];

    // see Table 37 (Address Command Format) in LTC6811 datasheet
    CMD[0] = 0x80;               // CMD0 bit 7          = 1
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	753b      	strb	r3, [r7, #20]
    CMD[0] |= address << 3;      // CMD0 bits 3 thu 6   = address
 8000e70:	7d3b      	ldrb	r3, [r7, #20]
 8000e72:	b25a      	sxtb	r2, r3
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	b25b      	sxtb	r3, r3
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	753b      	strb	r3, [r7, #20]
    CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 8000e82:	7d3a      	ldrb	r2, [r7, #20]
 8000e84:	88bb      	ldrh	r3, [r7, #4]
 8000e86:	0a1b      	lsrs	r3, r3, #8
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	753b      	strb	r3, [r7, #20]
    CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 8000e92:	88bb      	ldrh	r3, [r7, #4]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	757b      	strb	r3, [r7, #21]

    uint16_t crc = pec15(CMD, 2); // CRC for CMD
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fe80 	bl	8000ba4 <pec15>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	82fb      	strh	r3, [r7, #22]
    uint8_t tx_msg[12];

    // See Table 33 (Address Write Command) in LTC6811 datasheet.
    // Send 2-byte CMD and 2-byte PEC15, then 6-byte register and 2-byte PEC15

    tx_msg[0] = CMD[0];
 8000ea8:	7d3b      	ldrb	r3, [r7, #20]
 8000eaa:	723b      	strb	r3, [r7, #8]
    tx_msg[1] = CMD[1];
 8000eac:	7d7b      	ldrb	r3, [r7, #21]
 8000eae:	727b      	strb	r3, [r7, #9]
    tx_msg[2] = crc >> 8;
 8000eb0:	8afb      	ldrh	r3, [r7, #22]
 8000eb2:	0a1b      	lsrs	r3, r3, #8
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	72bb      	strb	r3, [r7, #10]
    tx_msg[3] = crc;
 8000eba:	8afb      	ldrh	r3, [r7, #22]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	72fb      	strb	r3, [r7, #11]

    crc = pec15(tx_reg, 6); // CRC for register value
 8000ec0:	2106      	movs	r1, #6
 8000ec2:	6838      	ldr	r0, [r7, #0]
 8000ec4:	f7ff fe6e 	bl	8000ba4 <pec15>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	82fb      	strh	r3, [r7, #22]

    tx_msg[4] = tx_reg[0];
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	733b      	strb	r3, [r7, #12]
    tx_msg[5] = tx_reg[1];
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	785b      	ldrb	r3, [r3, #1]
 8000ed6:	737b      	strb	r3, [r7, #13]
    tx_msg[6] = tx_reg[2];
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	789b      	ldrb	r3, [r3, #2]
 8000edc:	73bb      	strb	r3, [r7, #14]
    tx_msg[7] = tx_reg[3];
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	78db      	ldrb	r3, [r3, #3]
 8000ee2:	73fb      	strb	r3, [r7, #15]
    tx_msg[8] = tx_reg[4];
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	791b      	ldrb	r3, [r3, #4]
 8000ee8:	743b      	strb	r3, [r7, #16]
    tx_msg[9] = tx_reg[5];
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	795b      	ldrb	r3, [r3, #5]
 8000eee:	747b      	strb	r3, [r7, #17]
    tx_msg[10] = crc >> 8;
 8000ef0:	8afb      	ldrh	r3, [r7, #22]
 8000ef2:	0a1b      	lsrs	r3, r3, #8
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	74bb      	strb	r3, [r7, #18]
    tx_msg[11] = crc;
 8000efa:	8afb      	ldrh	r3, [r7, #22]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	74fb      	strb	r3, [r7, #19]


#ifdef ALWAYS_STANDBY_WAKE
    wake_standby();
 8000f00:	f7ff feea 	bl	8000cd8 <wake_standby>
#endif
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0e:	f003 fb97 	bl	8004640 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, tx_msg, 12, 1000);
 8000f12:	f107 0108 	add.w	r1, r7, #8
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	4806      	ldr	r0, [pc, #24]	; (8000f38 <address_write+0xdc>)
 8000f1e:	f004 fea8 	bl	8005c72 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000f22:	2201      	movs	r2, #1
 8000f24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2c:	f003 fb88 	bl	8004640 <HAL_GPIO_WritePin>
}
 8000f30:	bf00      	nop
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200003e8 	.word	0x200003e8

08000f3c <address_read>:



void address_read(uint8_t address, uint16_t command_code, uint8_t *rx_reg)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	603a      	str	r2, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	80bb      	strh	r3, [r7, #4]
    uint8_t CMD[2];

    // see Table 37 (Address Command Format) in LTC6811 datasheet
    CMD[0] = 0x80;               // CMD0 bit 7          = 1
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	773b      	strb	r3, [r7, #28]
    CMD[0] |= address << 3;      // CMD0 bits 3 thu 6   = address
 8000f50:	7f3b      	ldrb	r3, [r7, #28]
 8000f52:	b25a      	sxtb	r2, r3
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	b25b      	sxtb	r3, r3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	b25b      	sxtb	r3, r3
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	773b      	strb	r3, [r7, #28]
    CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 8000f62:	7f3a      	ldrb	r2, [r7, #28]
 8000f64:	88bb      	ldrh	r3, [r7, #4]
 8000f66:	0a1b      	lsrs	r3, r3, #8
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	773b      	strb	r3, [r7, #28]
    CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 8000f72:	88bb      	ldrh	r3, [r7, #4]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	777b      	strb	r3, [r7, #29]

    uint16_t crc = pec15(CMD, 2);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fe10 	bl	8000ba4 <pec15>
 8000f84:	4603      	mov	r3, r0
 8000f86:	847b      	strh	r3, [r7, #34]	; 0x22

    uint8_t tx_msg[12];

    // Send 2-byte CMD and PEC15, then read 6-byte register and 2-byte PEC15

    tx_msg[0] = CMD[0];
 8000f88:	7f3b      	ldrb	r3, [r7, #28]
 8000f8a:	743b      	strb	r3, [r7, #16]
    tx_msg[1] = CMD[1];
 8000f8c:	7f7b      	ldrb	r3, [r7, #29]
 8000f8e:	747b      	strb	r3, [r7, #17]
    tx_msg[2] = crc >> 8;
 8000f90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f92:	0a1b      	lsrs	r3, r3, #8
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	74bb      	strb	r3, [r7, #18]
    tx_msg[3] = crc;
 8000f9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	74fb      	strb	r3, [r7, #19]
    tx_msg[4] = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	753b      	strb	r3, [r7, #20]
    tx_msg[5] = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	757b      	strb	r3, [r7, #21]
    tx_msg[6] = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	75bb      	strb	r3, [r7, #22]
    tx_msg[7] = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	75fb      	strb	r3, [r7, #23]
    tx_msg[8] = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	763b      	strb	r3, [r7, #24]
    tx_msg[9] = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	767b      	strb	r3, [r7, #25]
    tx_msg[10] = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	76bb      	strb	r3, [r7, #26]
    tx_msg[11] = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	76fb      	strb	r3, [r7, #27]

    uint8_t rx_msg[8] = {0};
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]

	#ifdef ALWAYS_STANDBY_WAKE
		wake_standby();
 8000fc8:	f7ff fe86 	bl	8000cd8 <wake_standby>
	#endif
	HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd6:	f003 fb33 	bl	8004640 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, tx_msg, 4, 1000);
 8000fda:	f107 0110 	add.w	r1, r7, #16
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	2204      	movs	r2, #4
 8000fe4:	481d      	ldr	r0, [pc, #116]	; (800105c <address_read+0x120>)
 8000fe6:	f004 fe44 	bl	8005c72 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, rx_msg, 8, 1000);
 8000fea:	f107 0108 	add.w	r1, r7, #8
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	2208      	movs	r2, #8
 8000ff4:	4819      	ldr	r0, [pc, #100]	; (800105c <address_read+0x120>)
 8000ff6:	f004 ffaa 	bl	8005f4e <HAL_SPI_Receive>
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001004:	f003 fb1c 	bl	8004640 <HAL_GPIO_WritePin>
        crc = pec15(rx_msg, 6); // calculate PEC15 for received message (first 6 bytes)
 8001008:	f107 0308 	add.w	r3, r7, #8
 800100c:	2106      	movs	r1, #6
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fdc8 	bl	8000ba4 <pec15>
 8001014:	4603      	mov	r3, r0
 8001016:	847b      	strh	r3, [r7, #34]	; 0x22

        uint16_t rx_crc = (rx_msg[6] << 8) + rx_msg[7]; // received PEC15
 8001018:	7bbb      	ldrb	r3, [r7, #14]
 800101a:	b29b      	uxth	r3, r3
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	b29a      	uxth	r2, r3
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	b29b      	uxth	r3, r3
 8001024:	4413      	add	r3, r2
 8001026:	843b      	strh	r3, [r7, #32]

        if (crc == rx_crc)
 8001028:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800102a:	8c3b      	ldrh	r3, [r7, #32]
 800102c:	429a      	cmp	r2, r3
 800102e:	d111      	bne.n	8001054 <address_read+0x118>
        {
            for (int i = 0; i < 6; i++)
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
 8001034:	e00b      	b.n	800104e <address_read+0x112>
            {
                rx_reg[i] = rx_msg[i];
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	4413      	add	r3, r2
 800103c:	f107 0108 	add.w	r1, r7, #8
 8001040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001042:	440a      	add	r2, r1
 8001044:	7812      	ldrb	r2, [r2, #0]
 8001046:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 6; i++)
 8001048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104a:	3301      	adds	r3, #1
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
 800104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001050:	2b05      	cmp	r3, #5
 8001052:	ddf0      	ble.n	8001036 <address_read+0xfa>
            }
        }
}
 8001054:	bf00      	nop
 8001056:	3728      	adds	r7, #40	; 0x28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200003e8 	.word	0x200003e8

08001060 <extract_voltage_reg>:



void extract_voltage_reg(uint8_t *voltage_reg, float *voltages)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++)
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	e02f      	b.n	80010d0 <extract_voltage_reg+0x70>
    {
        if (voltage_reg[i * 2] == 0xFF && voltage_reg[(i * 2) + 1] == 0xFF)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	461a      	mov	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2bff      	cmp	r3, #255	; 0xff
 800107e:	d107      	bne.n	8001090 <extract_voltage_reg+0x30>
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	3301      	adds	r3, #1
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2bff      	cmp	r3, #255	; 0xff
 800108e:	d01c      	beq.n	80010ca <extract_voltage_reg+0x6a>
            voltages[i] = NAN;
#endif
        }
        else
        {
            voltages[i] = (float)(voltage_reg[i * 2] + (voltage_reg[(i * 2) + 1] << 8)) * 0.0001f;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	461a      	mov	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	3301      	adds	r3, #1
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	4413      	add	r3, r2
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	440b      	add	r3, r1
 80010ae:	ee07 3a90 	vmov	s15, r3
 80010b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	4413      	add	r3, r2
 80010be:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80010e4 <extract_voltage_reg+0x84>
 80010c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c6:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	3301      	adds	r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	ddcc      	ble.n	8001070 <extract_voltage_reg+0x10>
        }
    }
}
 80010d6:	bf00      	nop
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	38d1b717 	.word	0x38d1b717

080010e8 <extract_all_voltages>:


void extract_all_voltages(ltc6811 *ltc6811, float *cell_voltage, int slave_num)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b094      	sub	sp, #80	; 0x50
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]

    int cell = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	64fb      	str	r3, [r7, #76]	; 0x4c

    for (int slave = 0; slave < slave_num; slave++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80010fc:	e066      	b.n	80011cc <extract_all_voltages+0xe4>
    {
        int i_max = ltc6811[slave].cell_count;
 80010fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001100:	4613      	mov	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	461a      	mov	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4413      	add	r3, r2
 800110e:	785b      	ldrb	r3, [r3, #1]
 8001110:	643b      	str	r3, [r7, #64]	; 0x40

        float reg_voltages[12];

        extract_voltage_reg(ltc6811[slave].cva_reg, &reg_voltages[0]);
 8001112:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001114:	4613      	mov	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	461a      	mov	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4413      	add	r3, r2
 8001122:	3302      	adds	r3, #2
 8001124:	f107 0210 	add.w	r2, r7, #16
 8001128:	4611      	mov	r1, r2
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff98 	bl	8001060 <extract_voltage_reg>
        extract_voltage_reg(ltc6811[slave].cvb_reg, &reg_voltages[3]);
 8001130:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	f103 0208 	add.w	r2, r3, #8
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	330c      	adds	r3, #12
 800114a:	4619      	mov	r1, r3
 800114c:	4610      	mov	r0, r2
 800114e:	f7ff ff87 	bl	8001060 <extract_voltage_reg>
        extract_voltage_reg(ltc6811[slave].cvc_reg, &reg_voltages[6]);
 8001152:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	461a      	mov	r2, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4413      	add	r3, r2
 8001162:	f103 020e 	add.w	r2, r3, #14
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	3318      	adds	r3, #24
 800116c:	4619      	mov	r1, r3
 800116e:	4610      	mov	r0, r2
 8001170:	f7ff ff76 	bl	8001060 <extract_voltage_reg>
        extract_voltage_reg(ltc6811[slave].cvd_reg, &reg_voltages[9]);
 8001174:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001176:	4613      	mov	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	461a      	mov	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	f103 0214 	add.w	r2, r3, #20
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	3324      	adds	r3, #36	; 0x24
 800118e:	4619      	mov	r1, r3
 8001190:	4610      	mov	r0, r2
 8001192:	f7ff ff65 	bl	8001060 <extract_voltage_reg>

        for (int i = 0; i < i_max; i++)
 8001196:	2300      	movs	r3, #0
 8001198:	647b      	str	r3, [r7, #68]	; 0x44
 800119a:	e010      	b.n	80011be <extract_all_voltages+0xd6>
        {
            cell_voltage[cell] = reg_voltages[i];
 800119c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	68ba      	ldr	r2, [r7, #8]
 80011a2:	4413      	add	r3, r2
 80011a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80011a6:	0092      	lsls	r2, r2, #2
 80011a8:	3250      	adds	r2, #80	; 0x50
 80011aa:	443a      	add	r2, r7
 80011ac:	3a40      	subs	r2, #64	; 0x40
 80011ae:	6812      	ldr	r2, [r2, #0]
 80011b0:	601a      	str	r2, [r3, #0]
            cell++;
 80011b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011b4:	3301      	adds	r3, #1
 80011b6:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < i_max; i++)
 80011b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011ba:	3301      	adds	r3, #1
 80011bc:	647b      	str	r3, [r7, #68]	; 0x44
 80011be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80011c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011c2:	429a      	cmp	r2, r3
 80011c4:	dbea      	blt.n	800119c <extract_all_voltages+0xb4>
    for (int slave = 0; slave < slave_num; slave++)
 80011c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011c8:	3301      	adds	r3, #1
 80011ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80011cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	db94      	blt.n	80010fe <extract_all_voltages+0x16>
        }
    }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3750      	adds	r7, #80	; 0x50
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <read_all_voltages>:


void read_all_voltages(ltc6811 *ltc6811, int slave_num)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b084      	sub	sp, #16
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	6039      	str	r1, [r7, #0]

    for (int slave = 0; slave < slave_num; slave++)
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	e05a      	b.n	80012a4 <read_all_voltages+0xc6>
    {
        address_read(ltc6811[slave].address, RDCVA, ltc6811[slave].cva_reg);
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	461a      	mov	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	7818      	ldrb	r0, [r3, #0]
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	461a      	mov	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4413      	add	r3, r2
 8001210:	3302      	adds	r3, #2
 8001212:	461a      	mov	r2, r3
 8001214:	2104      	movs	r1, #4
 8001216:	f7ff fe91 	bl	8000f3c <address_read>
        address_read(ltc6811[slave].address, RDCVB, ltc6811[slave].cvb_reg);
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	461a      	mov	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	7818      	ldrb	r0, [r3, #0]
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	461a      	mov	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4413      	add	r3, r2
 800123c:	3308      	adds	r3, #8
 800123e:	461a      	mov	r2, r3
 8001240:	2106      	movs	r1, #6
 8001242:	f7ff fe7b 	bl	8000f3c <address_read>
        address_read(ltc6811[slave].address, RDCVC, ltc6811[slave].cvc_reg);
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	461a      	mov	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	7818      	ldrb	r0, [r3, #0]
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	461a      	mov	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4413      	add	r3, r2
 8001268:	330e      	adds	r3, #14
 800126a:	461a      	mov	r2, r3
 800126c:	2108      	movs	r1, #8
 800126e:	f7ff fe65 	bl	8000f3c <address_read>
        address_read(ltc6811[slave].address, RDCVD, ltc6811[slave].cvd_reg);
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	461a      	mov	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	7818      	ldrb	r0, [r3, #0]
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	4613      	mov	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	461a      	mov	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	3314      	adds	r3, #20
 8001296:	461a      	mov	r2, r3
 8001298:	210a      	movs	r1, #10
 800129a:	f7ff fe4f 	bl	8000f3c <address_read>
    for (int slave = 0; slave < slave_num; slave++)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	3301      	adds	r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	dba0      	blt.n	80011ee <read_all_voltages+0x10>
    }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <generate_i2c>:

void generate_i2c(uint8_t * comm_reg, uint8_t *comm_data, uint8_t len)
// comm_data is an array with maximum 3 bytes to be written to COMM register
// len is number of bytes to be written (how many are in comm_data)

{
 80012b6:	b480      	push	{r7}
 80012b8:	b085      	sub	sp, #20
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	60f8      	str	r0, [r7, #12]
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	4613      	mov	r3, r2
 80012c2:	71fb      	strb	r3, [r7, #7]

	switch (len) {
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d002      	beq.n	80012d0 <generate_i2c+0x1a>
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d02f      	beq.n	800132e <generate_i2c+0x78>
	    comm_reg[5] = ((comm_data[2] << 4) & 0b1111) | 0b00001001; //mask with lower half data byte and master ack bits

		//how to send stop bits (does it automatically if using all 5 bytes?)
	    break;
    }
}
 80012ce:	e05d      	b.n	800138c <generate_i2c+0xd6>
        comm_reg[0] = ((comm_data[0] >> 4) & 0b00001111) | 0b01100000; //mask with upper half data bit and start bits
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	091b      	lsrs	r3, r3, #4
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012de:	b25b      	sxtb	r3, r3
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	701a      	strb	r2, [r3, #0]
	    comm_reg[1] = (comm_data[0] << 4) & 0b11110000; //mask with lower half data byte and master ack bits
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	011a      	lsls	r2, r3, #4
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	3301      	adds	r3, #1
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	701a      	strb	r2, [r3, #0]
	    comm_reg[2] = (comm_data[1] >> 4) & 0b00001111; //mask with upper half data bit and blank bits
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	3301      	adds	r3, #1
 80012f8:	781a      	ldrb	r2, [r3, #0]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3302      	adds	r3, #2
 80012fe:	0912      	lsrs	r2, r2, #4
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	701a      	strb	r2, [r3, #0]
	    comm_reg[3] = ((comm_data[1] << 4) & 0b11110000) | 0b00001001; //mask with lower half data byte and master ack bits
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	3301      	adds	r3, #1
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	011b      	lsls	r3, r3, #4
 800130c:	b25b      	sxtb	r3, r3
 800130e:	f043 0309 	orr.w	r3, r3, #9
 8001312:	b25a      	sxtb	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3303      	adds	r3, #3
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	701a      	strb	r2, [r3, #0]
	    comm_reg[4] = 0x00;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	3304      	adds	r3, #4
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
	    comm_reg[5] = 0x00;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3305      	adds	r3, #5
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
	    break;
 800132c:	e02e      	b.n	800138c <generate_i2c+0xd6>
	    comm_reg[0] = ((comm_data[0] >> 4) & 0b00001111) | 0b01100000; //mask with upper half data bit and start bits
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	b2db      	uxtb	r3, r3
 8001336:	b25b      	sxtb	r3, r3
 8001338:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800133c:	b25b      	sxtb	r3, r3
 800133e:	b2da      	uxtb	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	701a      	strb	r2, [r3, #0]
	    comm_reg[1] = (comm_data[0] << 4) & 0b11110000; //mask with lower half data byte and master ack bits
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	011a      	lsls	r2, r3, #4
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	3301      	adds	r3, #1
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	701a      	strb	r2, [r3, #0]
	    comm_reg[2] = (comm_data[1] >> 4) & 0b00001111; //mask with upper half data bit and blank bits
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	3301      	adds	r3, #1
 8001356:	781a      	ldrb	r2, [r3, #0]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3302      	adds	r3, #2
 800135c:	0912      	lsrs	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	701a      	strb	r2, [r3, #0]
	    comm_reg[3] = (comm_data[1] << 4) & 0b11110000; //mask with lower half data byte and master ack bits
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	3301      	adds	r3, #1
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	011a      	lsls	r2, r3, #4
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	3303      	adds	r3, #3
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	701a      	strb	r2, [r3, #0]
	    comm_reg[4] = (comm_data[2] >> 4) & 0b00001111; //mask with upper half data bit and blank bits
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	3302      	adds	r3, #2
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	3304      	adds	r3, #4
 800137c:	0912      	lsrs	r2, r2, #4
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	701a      	strb	r2, [r3, #0]
	    comm_reg[5] = ((comm_data[2] << 4) & 0b1111) | 0b00001001; //mask with lower half data byte and master ack bits
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	3305      	adds	r3, #5
 8001386:	2209      	movs	r2, #9
 8001388:	701a      	strb	r2, [r3, #0]
	    break;
 800138a:	bf00      	nop
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <send_comm>:


void send_comm(ltc6811 *ltc6811, uint8_t * i2c_message, uint8_t len) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	4613      	mov	r3, r2
 80013a4:	71fb      	strb	r3, [r7, #7]

    uint8_t comm_reg[6];

    generate_i2c(comm_reg, i2c_message, len);
 80013a6:	79fa      	ldrb	r2, [r7, #7]
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ff81 	bl	80012b6 <generate_i2c>

    wake_sleep();
 80013b4:	f7ff fc78 	bl	8000ca8 <wake_sleep>

    address_write(ltc6811[0].address, WRCOMM, comm_reg);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	f107 0210 	add.w	r2, r7, #16
 80013c0:	f240 7121 	movw	r1, #1825	; 0x721
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fd49 	bl	8000e5c <address_write>

    broadcast_command_stcomm(STCOMM);
 80013ca:	f240 7023 	movw	r0, #1827	; 0x723
 80013ce:	f000 f805 	bl	80013dc <broadcast_command_stcomm>


}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <broadcast_command_stcomm>:


void broadcast_command_stcomm(uint16_t command_code)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	80fb      	strh	r3, [r7, #6]
uint8_t CMD[2];

// see Table 36 (Broadcast Command Format) in LTC6811 datasheet
CMD[0] = 0;                  // CMD0 bits 3 thru 7  = 0
 80013e6:	2300      	movs	r3, #0
 80013e8:	773b      	strb	r3, [r7, #28]
CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 80013ea:	7f3a      	ldrb	r2, [r7, #28]
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	0a1b      	lsrs	r3, r3, #8
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	773b      	strb	r3, [r7, #28]
CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	777b      	strb	r3, [r7, #29]

uint16_t crc = pec15(CMD, 2); // CRC for CMD
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	2102      	movs	r1, #2
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fbcc 	bl	8000ba4 <pec15>
 800140c:	4603      	mov	r3, r0
 800140e:	83fb      	strh	r3, [r7, #30]





uint8_t tx_msg[13] = {CMD[0], CMD[1], crc >> 8, crc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001410:	7f3b      	ldrb	r3, [r7, #28]
 8001412:	733b      	strb	r3, [r7, #12]
 8001414:	7f7b      	ldrb	r3, [r7, #29]
 8001416:	737b      	strb	r3, [r7, #13]
 8001418:	8bfb      	ldrh	r3, [r7, #30]
 800141a:	0a1b      	lsrs	r3, r3, #8
 800141c:	b29b      	uxth	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	73bb      	strb	r3, [r7, #14]
 8001422:	8bfb      	ldrh	r3, [r7, #30]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	73fb      	strb	r3, [r7, #15]
 8001428:	2300      	movs	r3, #0
 800142a:	743b      	strb	r3, [r7, #16]
 800142c:	2300      	movs	r3, #0
 800142e:	747b      	strb	r3, [r7, #17]
 8001430:	2300      	movs	r3, #0
 8001432:	74bb      	strb	r3, [r7, #18]
 8001434:	2300      	movs	r3, #0
 8001436:	74fb      	strb	r3, [r7, #19]
 8001438:	2300      	movs	r3, #0
 800143a:	753b      	strb	r3, [r7, #20]
 800143c:	2300      	movs	r3, #0
 800143e:	757b      	strb	r3, [r7, #21]
 8001440:	2300      	movs	r3, #0
 8001442:	75bb      	strb	r3, [r7, #22]
 8001444:	2300      	movs	r3, #0
 8001446:	75fb      	strb	r3, [r7, #23]
 8001448:	2300      	movs	r3, #0
 800144a:	763b      	strb	r3, [r7, #24]



#ifdef ALWAYS_STANDBY_WAKE
wake_standby();
 800144c:	f7ff fc44 	bl	8000cd8 <wake_standby>
#endif

HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145a:	f003 f8f1 	bl	8004640 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi3, tx_msg, 13, 1000);
 800145e:	f107 010c 	add.w	r1, r7, #12
 8001462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001466:	220d      	movs	r2, #13
 8001468:	4806      	ldr	r0, [pc, #24]	; (8001484 <broadcast_command_stcomm+0xa8>)
 800146a:	f004 fc02 	bl	8005c72 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 800146e:	2201      	movs	r2, #1
 8001470:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001478:	f003 f8e2 	bl	8004640 <HAL_GPIO_WritePin>
}
 800147c:	bf00      	nop
 800147e:	3720      	adds	r7, #32
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200003e8 	.word	0x200003e8

08001488 <vcu_adc_read_millivolts>:



//NEED TO UPDATE TO HAL
uint32_t vcu_adc_read_millivolts(ADC_HandleTypeDef* hadc, uint32_t channel)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08e      	sub	sp, #56	; 0x38
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]

	ADC_ChannelConfTypeDef sConfig = {0};
 8001492:	f107 0308 	add.w	r3, r7, #8
 8001496:	2220      	movs	r2, #32
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f005 fa80 	bl	80069a0 <memset>

	sConfig.Channel = ADC_CHANNEL_0;
 80014a0:	2301      	movs	r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]

	sConfig.Rank = 1;
 80014a4:	2301      	movs	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]

	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80014a8:	2300      	movs	r3, #0
 80014aa:	613b      	str	r3, [r7, #16]

	HAL_ADC_ConfigChannel(hadc, &sConfig);
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	4619      	mov	r1, r3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f001 fd1e 	bl	8002ef4 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(hadc);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f001 faef 	bl	8002a9c <HAL_ADC_Start>

	HAL_ADC_PollForConversion(hadc, 1000);
 80014be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f001 fc02 	bl	8002ccc <HAL_ADC_PollForConversion>

	uint16_t adc_val = HAL_ADC_GetValue(hadc);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f001 fd05 	bl	8002ed8 <HAL_ADC_GetValue>
 80014ce:	4603      	mov	r3, r0
 80014d0:	86fb      	strh	r3, [r7, #54]	; 0x36

	HAL_ADC_Stop(hadc);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f001 fbc6 	bl	8002c64 <HAL_ADC_Stop>


	double val_mv = adc_val * 2500 / 4096;
 80014d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80014da:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80014de:	fb02 f303 	mul.w	r3, r2, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	da01      	bge.n	80014ea <vcu_adc_read_millivolts+0x62>
 80014e6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80014ea:	131b      	asrs	r3, r3, #12
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe ffe5 	bl	80004bc <__aeabi_i2d>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return val_mv;
 80014fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80014fe:	f7ff faf7 	bl	8000af0 <__aeabi_d2uiz>
 8001502:	4603      	mov	r3, r0

}
 8001504:	4618      	mov	r0, r3
 8001506:	3738      	adds	r7, #56	; 0x38
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	0000      	movs	r0, r0
	...

08001510 <calc_temp>:

SOC += current * time_since_last_update / BATTERY_CAPCITY;

}

double calc_temp(double adc_voltage) {
 8001510:	b5b0      	push	{r4, r5, r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	ed87 0b00 	vstr	d0, [r7]
  double steinhart;
  double resistance = 10000 * adc_voltage / (3 - adc_voltage);
 800151a:	a333      	add	r3, pc, #204	; (adr r3, 80015e8 <calc_temp+0xd8>)
 800151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001520:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001524:	f7ff f834 	bl	8000590 <__aeabi_dmul>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4614      	mov	r4, r2
 800152e:	461d      	mov	r5, r3
 8001530:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001534:	f04f 0000 	mov.w	r0, #0
 8001538:	4933      	ldr	r1, [pc, #204]	; (8001608 <calc_temp+0xf8>)
 800153a:	f7fe fe71 	bl	8000220 <__aeabi_dsub>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4620      	mov	r0, r4
 8001544:	4629      	mov	r1, r5
 8001546:	f7ff f94d 	bl	80007e4 <__aeabi_ddiv>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  steinhart = resistance / 10000;     // (R/Ro)
 8001552:	a325      	add	r3, pc, #148	; (adr r3, 80015e8 <calc_temp+0xd8>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800155c:	f7ff f942 	bl	80007e4 <__aeabi_ddiv>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	e9c7 2302 	strd	r2, r3, [r7, #8]
  steinhart = log(steinhart);                  // ln(R/Ro)
 8001568:	ed97 0b02 	vldr	d0, [r7, #8]
 800156c:	f005 fa20 	bl	80069b0 <log>
 8001570:	ed87 0b02 	vstr	d0, [r7, #8]
  steinhart /= 3950;                   // 1/B * ln(R/Ro)
 8001574:	a31e      	add	r3, pc, #120	; (adr r3, 80015f0 <calc_temp+0xe0>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800157e:	f7ff f931 	bl	80007e4 <__aeabi_ddiv>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	e9c7 2302 	strd	r2, r3, [r7, #8]
  steinhart += 1.0 / (25 + 273.15); // + (1/To)
 800158a:	a31b      	add	r3, pc, #108	; (adr r3, 80015f8 <calc_temp+0xe8>)
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001594:	f7fe fe46 	bl	8000224 <__adddf3>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  steinhart = 1.0 / steinhart;                 // Invert
 80015a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015a4:	f04f 0000 	mov.w	r0, #0
 80015a8:	4918      	ldr	r1, [pc, #96]	; (800160c <calc_temp+0xfc>)
 80015aa:	f7ff f91b 	bl	80007e4 <__aeabi_ddiv>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  steinhart -= 273.15;
 80015b6:	a312      	add	r3, pc, #72	; (adr r3, 8001600 <calc_temp+0xf0>)
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015c0:	f7fe fe2e 	bl	8000220 <__aeabi_dsub>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	e9c7 2302 	strd	r2, r3, [r7, #8]

  return steinhart;
 80015cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015d0:	ec43 2b17 	vmov	d7, r2, r3
}
 80015d4:	eeb0 0a47 	vmov.f32	s0, s14
 80015d8:	eef0 0a67 	vmov.f32	s1, s15
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bdb0      	pop	{r4, r5, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	f3af 8000 	nop.w
 80015e8:	00000000 	.word	0x00000000
 80015ec:	40c38800 	.word	0x40c38800
 80015f0:	00000000 	.word	0x00000000
 80015f4:	40aedc00 	.word	0x40aedc00
 80015f8:	dcb5db83 	.word	0xdcb5db83
 80015fc:	3f6b79e1 	.word	0x3f6b79e1
 8001600:	66666666 	.word	0x66666666
 8001604:	40711266 	.word	0x40711266
 8001608:	40080000 	.word	0x40080000
 800160c:	3ff00000 	.word	0x3ff00000

08001610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b0ac      	sub	sp, #176	; 0xb0
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001616:	f000 fd22 	bl	800205e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800161a:	f000 f8ad 	bl	8001778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800161e:	f000 fa9d 	bl	8001b5c <MX_GPIO_Init>
  MX_RTC_Init();
 8001622:	f000 f9fb 	bl	8001a1c <MX_RTC_Init>
  MX_FDCAN1_Init();
 8001626:	f000 f96d 	bl	8001904 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800162a:	f000 f9b1 	bl	8001990 <MX_FDCAN2_Init>
  MX_SPI3_Init();
 800162e:	f000 fa57 	bl	8001ae0 <MX_SPI3_Init>
  MX_ADC1_Init();
 8001632:	f000 f8ef 	bl	8001814 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001636:	217f      	movs	r1, #127	; 0x7f
 8001638:	484d      	ldr	r0, [pc, #308]	; (8001770 <main+0x160>)
 800163a:	f002 fa6b 	bl	8003b14 <HAL_ADCEx_Calibration_Start>

  HAL_Delay(100); // 100ms should allow all relevant power circuitry to stabilize
 800163e:	2064      	movs	r0, #100	; 0x64
 8001640:	f000 fd7e 	bl	8002140 <HAL_Delay>

  //reset_SOC();

  init_LTC6811();
 8001644:	f7ff fae2 	bl	8000c0c <init_LTC6811>

  wake_sleep(); // wake LTC6811 from sleep
 8001648:	f7ff fb2e 	bl	8000ca8 <wake_sleep>

  // Configuration for all LTC6811s
  struct ltc6811_config ltc6811_config;
  ltc6811_config.gpio_pulldowns = GPIO1_NO_PULLDOWN | GPIO2_NO_PULLDOWN | GPIO3_NO_PULLDOWN | GPIO4_NO_PULLDOWN | GPIO5_NO_PULLDOWN;
 800164c:	231f      	movs	r3, #31
 800164e:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  ltc6811_config.refon = REFON_STAY_POWERED;
 8001652:	2301      	movs	r3, #1
 8001654:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  ltc6811_config.adcopt = ADCOPT_MODE_0;
 8001658:	2300      	movs	r3, #0
 800165a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  ltc6811_config.vuv = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
  ltc6811_config.vov = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  ltc6811_config.dcto = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  update_config(&ltc6811_config);
 8001670:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff facf 	bl	8000c18 <update_config>
  float cell_voltage[NUM_OF_CELLS];      // index 0 = lowest potential
  float cell_voltage_ma[NUM_OF_CELLS];   // index 0 = lowest potential
  struct ltc6811 ltc6811[NUM_OF_SLAVES]; // index 0 = lowest potential

  // configure LTC6811 structs to match real life setup
  for (int i = 0; i < NUM_OF_SLAVES; i++)
 800167a:	2300      	movs	r3, #0
 800167c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001680:	e01d      	b.n	80016be <main+0xae>
  {
      ltc6811[i].address = i;
 8001682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001686:	b2d9      	uxtb	r1, r3
 8001688:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	33b0      	adds	r3, #176	; 0xb0
 8001696:	443b      	add	r3, r7
 8001698:	3bac      	subs	r3, #172	; 0xac
 800169a:	460a      	mov	r2, r1
 800169c:	701a      	strb	r2, [r3, #0]
      ltc6811[i].cell_count = (i % 2 == 0) ? EVEN_SLAVE_CELLS : ODD_SLAVE_CELLS;
 800169e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	33b0      	adds	r3, #176	; 0xb0
 80016ac:	443b      	add	r3, r7
 80016ae:	3bab      	subs	r3, #171	; 0xab
 80016b0:	220c      	movs	r2, #12
 80016b2:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < NUM_OF_SLAVES; i++)
 80016b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016b8:	3301      	adds	r3, #1
 80016ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80016be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	dddd      	ble.n	8001682 <main+0x72>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_Delay(100);
 80016c6:	2064      	movs	r0, #100	; 0x64
 80016c8:	f000 fd3a 	bl	8002140 <HAL_Delay>

      wake_sleep(); // wake LTC6811 from sleep
 80016cc:	f7ff faec 	bl	8000ca8 <wake_sleep>

      // send command to read cell voltages
      broadcast_command(ADCV(MD_26_2k, DCP_NOT_PERMITTED, CH_ALL));
 80016d0:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 80016d4:	f7ff fb18 	bl	8000d08 <broadcast_command>

      HAL_Delay(220); // reading all cell voltages @ "26Hz" should take 210ms
 80016d8:	20dc      	movs	r0, #220	; 0xdc
 80016da:	f000 fd31 	bl	8002140 <HAL_Delay>

      // read cell voltage registers from all slaves on the bus
      read_all_voltages(ltc6811, NUM_OF_SLAVES);
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	2101      	movs	r1, #1
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fd7b 	bl	80011de <read_all_voltages>

      // calculate actual voltage values
      extract_all_voltages(ltc6811, cell_voltage, NUM_OF_SLAVES);
 80016e8:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	2201      	movs	r2, #1
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fcf9 	bl	80010e8 <extract_all_voltages>


	  wake_sleep(); // wake LTC6811 from sleep
 80016f6:	f7ff fad7 	bl	8000ca8 <wake_sleep>



	  vcu_adc_read_millivolts(&hadc1, ADC_CHANNEL_4);
 80016fa:	491e      	ldr	r1, [pc, #120]	; (8001774 <main+0x164>)
 80016fc:	481c      	ldr	r0, [pc, #112]	; (8001770 <main+0x160>)
 80016fe:	f7ff fec3 	bl	8001488 <vcu_adc_read_millivolts>


	  uint8_t i2c_data[2] = {0b10010000, 0b00001111};
 8001702:	f44f 6379 	mov.w	r3, #3984	; 0xf90
 8001706:	803b      	strh	r3, [r7, #0]

	  send_comm(ltc6811, i2c_data, 2);
 8001708:	4639      	mov	r1, r7
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2202      	movs	r2, #2
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fe42 	bl	8001398 <send_comm>

	  broadcast_command(ADAX(MD_27k_14k, CHG_ALL));
 8001714:	f44f 609c 	mov.w	r0, #1248	; 0x4e0
 8001718:	f7ff faf6 	bl	8000d08 <broadcast_command>

	  HAL_Delay(2);
 800171c:	2002      	movs	r0, #2
 800171e:	f000 fd0f 	bl	8002140 <HAL_Delay>

	  address_read(ltc6811[0].address, RDAUXA, ltc6811[0].auxa_reg);
 8001722:	7938      	ldrb	r0, [r7, #4]
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	331a      	adds	r3, #26
 8001728:	461a      	mov	r2, r3
 800172a:	210c      	movs	r1, #12
 800172c:	f7ff fc06 	bl	8000f3c <address_read>

	  double adc1 = ((ltc6811[0].auxa_reg[1] << 8) | ltc6811[0].auxa_reg[0]) * 0.0001;
 8001730:	7ffb      	ldrb	r3, [r7, #31]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	7fba      	ldrb	r2, [r7, #30]
 8001736:	4313      	orrs	r3, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe febf 	bl	80004bc <__aeabi_i2d>
 800173e:	a30a      	add	r3, pc, #40	; (adr r3, 8001768 <main+0x158>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7fe ff24 	bl	8000590 <__aeabi_dmul>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

	  double real_temp = calc_temp(adc1);
 8001750:	ed97 0b28 	vldr	d0, [r7, #160]	; 0xa0
 8001754:	f7ff fedc 	bl	8001510 <calc_temp>
 8001758:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98

	  HAL_Delay(1000);
 800175c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001760:	f000 fcee 	bl	8002140 <HAL_Delay>
  {
 8001764:	e7af      	b.n	80016c6 <main+0xb6>
 8001766:	bf00      	nop
 8001768:	eb1c432d 	.word	0xeb1c432d
 800176c:	3f1a36e2 	.word	0x3f1a36e2
 8001770:	2000028c 	.word	0x2000028c
 8001774:	10c00010 	.word	0x10c00010

08001778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b094      	sub	sp, #80	; 0x50
 800177c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800177e:	f107 0318 	add.w	r3, r7, #24
 8001782:	2238      	movs	r2, #56	; 0x38
 8001784:	2100      	movs	r1, #0
 8001786:	4618      	mov	r0, r3
 8001788:	f005 f90a 	bl	80069a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800179a:	2000      	movs	r0, #0
 800179c:	f002 ff68 	bl	8004670 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80017a0:	230a      	movs	r3, #10
 80017a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017aa:	2340      	movs	r3, #64	; 0x40
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80017ae:	2301      	movs	r3, #1
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b2:	2302      	movs	r3, #2
 80017b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017b6:	2302      	movs	r3, #2
 80017b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80017ba:	2304      	movs	r3, #4
 80017bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80017be:	2355      	movs	r3, #85	; 0x55
 80017c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017c2:	2302      	movs	r3, #2
 80017c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017c6:	2302      	movs	r3, #2
 80017c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017ca:	2302      	movs	r3, #2
 80017cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ce:	f107 0318 	add.w	r3, r7, #24
 80017d2:	4618      	mov	r0, r3
 80017d4:	f003 f800 	bl	80047d8 <HAL_RCC_OscConfig>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80017de:	f000 fa21 	bl	8001c24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e2:	230f      	movs	r3, #15
 80017e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017e6:	2303      	movs	r3, #3
 80017e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017ee:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80017f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	2104      	movs	r1, #4
 80017fc:	4618      	mov	r0, r3
 80017fe:	f003 fb03 	bl	8004e08 <HAL_RCC_ClockConfig>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001808:	f000 fa0c 	bl	8001c24 <Error_Handler>
  }
}
 800180c:	bf00      	nop
 800180e:	3750      	adds	r7, #80	; 0x50
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08c      	sub	sp, #48	; 0x30
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800181a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	2220      	movs	r2, #32
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f005 f8b7 	bl	80069a0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001832:	4b32      	ldr	r3, [pc, #200]	; (80018fc <MX_ADC1_Init+0xe8>)
 8001834:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001838:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800183a:	4b30      	ldr	r3, [pc, #192]	; (80018fc <MX_ADC1_Init+0xe8>)
 800183c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001840:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001842:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <MX_ADC1_Init+0xe8>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001848:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <MX_ADC1_Init+0xe8>)
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800184e:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <MX_ADC1_Init+0xe8>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001854:	4b29      	ldr	r3, [pc, #164]	; (80018fc <MX_ADC1_Init+0xe8>)
 8001856:	2200      	movs	r2, #0
 8001858:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800185a:	4b28      	ldr	r3, [pc, #160]	; (80018fc <MX_ADC1_Init+0xe8>)
 800185c:	2204      	movs	r2, #4
 800185e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001860:	4b26      	ldr	r3, [pc, #152]	; (80018fc <MX_ADC1_Init+0xe8>)
 8001862:	2200      	movs	r2, #0
 8001864:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001866:	4b25      	ldr	r3, [pc, #148]	; (80018fc <MX_ADC1_Init+0xe8>)
 8001868:	2200      	movs	r2, #0
 800186a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800186c:	4b23      	ldr	r3, [pc, #140]	; (80018fc <MX_ADC1_Init+0xe8>)
 800186e:	2201      	movs	r2, #1
 8001870:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001872:	4b22      	ldr	r3, [pc, #136]	; (80018fc <MX_ADC1_Init+0xe8>)
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <MX_ADC1_Init+0xe8>)
 800187c:	2200      	movs	r2, #0
 800187e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001880:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <MX_ADC1_Init+0xe8>)
 8001882:	2200      	movs	r2, #0
 8001884:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001886:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <MX_ADC1_Init+0xe8>)
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800188e:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <MX_ADC1_Init+0xe8>)
 8001890:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001894:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <MX_ADC1_Init+0xe8>)
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800189e:	4817      	ldr	r0, [pc, #92]	; (80018fc <MX_ADC1_Init+0xe8>)
 80018a0:	f000 ff3a 	bl	8002718 <HAL_ADC_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80018aa:	f000 f9bb 	bl	8001c24 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80018b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b6:	4619      	mov	r1, r3
 80018b8:	4810      	ldr	r0, [pc, #64]	; (80018fc <MX_ADC1_Init+0xe8>)
 80018ba:	f002 f98d 	bl	8003bd8 <HAL_ADCEx_MultiModeConfigChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80018c4:	f000 f9ae 	bl	8001c24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80018c8:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <MX_ADC1_Init+0xec>)
 80018ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018cc:	2306      	movs	r3, #6
 80018ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80018d0:	2307      	movs	r3, #7
 80018d2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018d4:	237f      	movs	r3, #127	; 0x7f
 80018d6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018d8:	2304      	movs	r3, #4
 80018da:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	4619      	mov	r1, r3
 80018e4:	4805      	ldr	r0, [pc, #20]	; (80018fc <MX_ADC1_Init+0xe8>)
 80018e6:	f001 fb05 	bl	8002ef4 <HAL_ADC_ConfigChannel>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80018f0:	f000 f998 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018f4:	bf00      	nop
 80018f6:	3730      	adds	r7, #48	; 0x30
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	2000028c 	.word	0x2000028c
 8001900:	10c00010 	.word	0x10c00010

08001904 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001908:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <MX_FDCAN1_Init+0x84>)
 800190a:	4a20      	ldr	r2, [pc, #128]	; (800198c <MX_FDCAN1_Init+0x88>)
 800190c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800190e:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <MX_FDCAN1_Init+0x84>)
 8001910:	2200      	movs	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001914:	4b1c      	ldr	r3, [pc, #112]	; (8001988 <MX_FDCAN1_Init+0x84>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800191a:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <MX_FDCAN1_Init+0x84>)
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <MX_FDCAN1_Init+0x84>)
 8001922:	2200      	movs	r2, #0
 8001924:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001926:	4b18      	ldr	r3, [pc, #96]	; (8001988 <MX_FDCAN1_Init+0x84>)
 8001928:	2200      	movs	r2, #0
 800192a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800192c:	4b16      	ldr	r3, [pc, #88]	; (8001988 <MX_FDCAN1_Init+0x84>)
 800192e:	2200      	movs	r2, #0
 8001930:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <MX_FDCAN1_Init+0x84>)
 8001934:	2210      	movs	r2, #16
 8001936:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <MX_FDCAN1_Init+0x84>)
 800193a:	2201      	movs	r2, #1
 800193c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800193e:	4b12      	ldr	r3, [pc, #72]	; (8001988 <MX_FDCAN1_Init+0x84>)
 8001940:	2202      	movs	r2, #2
 8001942:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <MX_FDCAN1_Init+0x84>)
 8001946:	2202      	movs	r2, #2
 8001948:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <MX_FDCAN1_Init+0x84>)
 800194c:	2201      	movs	r2, #1
 800194e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001950:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <MX_FDCAN1_Init+0x84>)
 8001952:	2201      	movs	r2, #1
 8001954:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <MX_FDCAN1_Init+0x84>)
 8001958:	2201      	movs	r2, #1
 800195a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800195c:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <MX_FDCAN1_Init+0x84>)
 800195e:	2201      	movs	r2, #1
 8001960:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <MX_FDCAN1_Init+0x84>)
 8001964:	2200      	movs	r2, #0
 8001966:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001968:	4b07      	ldr	r3, [pc, #28]	; (8001988 <MX_FDCAN1_Init+0x84>)
 800196a:	2200      	movs	r2, #0
 800196c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <MX_FDCAN1_Init+0x84>)
 8001970:	2200      	movs	r2, #0
 8001972:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001974:	4804      	ldr	r0, [pc, #16]	; (8001988 <MX_FDCAN1_Init+0x84>)
 8001976:	f002 fb1b 	bl	8003fb0 <HAL_FDCAN_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001980:	f000 f950 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200002f8 	.word	0x200002f8
 800198c:	40006400 	.word	0x40006400

08001990 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001994:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <MX_FDCAN2_Init+0x84>)
 8001996:	4a20      	ldr	r2, [pc, #128]	; (8001a18 <MX_FDCAN2_Init+0x88>)
 8001998:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800199a:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <MX_FDCAN2_Init+0x84>)
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80019a0:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <MX_FDCAN2_Init+0x84>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80019a6:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <MX_FDCAN2_Init+0x84>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <MX_FDCAN2_Init+0x84>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80019b2:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <MX_FDCAN2_Init+0x84>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80019b8:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <MX_FDCAN2_Init+0x84>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <MX_FDCAN2_Init+0x84>)
 80019c0:	2210      	movs	r2, #16
 80019c2:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80019c4:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <MX_FDCAN2_Init+0x84>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <MX_FDCAN2_Init+0x84>)
 80019cc:	2202      	movs	r2, #2
 80019ce:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80019d0:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <MX_FDCAN2_Init+0x84>)
 80019d2:	2202      	movs	r2, #2
 80019d4:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <MX_FDCAN2_Init+0x84>)
 80019d8:	2201      	movs	r2, #1
 80019da:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80019dc:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <MX_FDCAN2_Init+0x84>)
 80019de:	2201      	movs	r2, #1
 80019e0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <MX_FDCAN2_Init+0x84>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80019e8:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <MX_FDCAN2_Init+0x84>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <MX_FDCAN2_Init+0x84>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80019f4:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <MX_FDCAN2_Init+0x84>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <MX_FDCAN2_Init+0x84>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001a00:	4804      	ldr	r0, [pc, #16]	; (8001a14 <MX_FDCAN2_Init+0x84>)
 8001a02:	f002 fad5 	bl	8003fb0 <HAL_FDCAN_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8001a0c:	f000 f90a 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	2000035c 	.word	0x2000035c
 8001a18:	40006800 	.word	0x40006800

08001a1c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001a30:	2300      	movs	r3, #0
 8001a32:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a34:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <MX_RTC_Init+0xbc>)
 8001a36:	4a29      	ldr	r2, [pc, #164]	; (8001adc <MX_RTC_Init+0xc0>)
 8001a38:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a3a:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <MX_RTC_Init+0xbc>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a40:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <MX_RTC_Init+0xbc>)
 8001a42:	227f      	movs	r2, #127	; 0x7f
 8001a44:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a46:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <MX_RTC_Init+0xbc>)
 8001a48:	22ff      	movs	r2, #255	; 0xff
 8001a4a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a4c:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <MX_RTC_Init+0xbc>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a52:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <MX_RTC_Init+0xbc>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a58:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <MX_RTC_Init+0xbc>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <MX_RTC_Init+0xbc>)
 8001a60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a64:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <MX_RTC_Init+0xbc>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a6c:	481a      	ldr	r0, [pc, #104]	; (8001ad8 <MX_RTC_Init+0xbc>)
 8001a6e:	f003 fdfd 	bl	800566c <HAL_RTC_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001a78:	f000 f8d4 	bl	8001c24 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	2201      	movs	r2, #1
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480f      	ldr	r0, [pc, #60]	; (8001ad8 <MX_RTC_Init+0xbc>)
 8001a9c:	f003 fe5b 	bl	8005756 <HAL_RTC_SetTime>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_RTC_Init+0x8e>
  {
    Error_Handler();
 8001aa6:	f000 f8bd 	bl	8001c24 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001aba:	463b      	mov	r3, r7
 8001abc:	2201      	movs	r2, #1
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <MX_RTC_Init+0xbc>)
 8001ac2:	f003 fee5 	bl	8005890 <HAL_RTC_SetDate>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8001acc:	f000 f8aa 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ad0:	bf00      	nop
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	200003c0 	.word	0x200003c0
 8001adc:	40002800 	.word	0x40002800

08001ae0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <MX_SPI3_Init+0x74>)
 8001ae6:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <MX_SPI3_Init+0x78>)
 8001ae8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <MX_SPI3_Init+0x74>)
 8001aec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001af0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001af2:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <MX_SPI3_Init+0x74>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001af8:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <MX_SPI3_Init+0x74>)
 8001afa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001afe:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <MX_SPI3_Init+0x74>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b06:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <MX_SPI3_Init+0x74>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <MX_SPI3_Init+0x74>)
 8001b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b12:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <MX_SPI3_Init+0x74>)
 8001b16:	2238      	movs	r2, #56	; 0x38
 8001b18:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <MX_SPI3_Init+0x74>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <MX_SPI3_Init+0x74>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <MX_SPI3_Init+0x74>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <MX_SPI3_Init+0x74>)
 8001b2e:	2207      	movs	r2, #7
 8001b30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <MX_SPI3_Init+0x74>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <MX_SPI3_Init+0x74>)
 8001b3a:	2208      	movs	r2, #8
 8001b3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_SPI3_Init+0x74>)
 8001b40:	f003 ffec 	bl	8005b1c <HAL_SPI_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001b4a:	f000 f86b 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200003e8 	.word	0x200003e8
 8001b58:	40003c00 	.word	0x40003c00

08001b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b62:	f107 030c 	add.w	r3, r7, #12
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
 8001b70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	4b2a      	ldr	r3, [pc, #168]	; (8001c1c <MX_GPIO_Init+0xc0>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	4a29      	ldr	r2, [pc, #164]	; (8001c1c <MX_GPIO_Init+0xc0>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7e:	4b27      	ldr	r3, [pc, #156]	; (8001c1c <MX_GPIO_Init+0xc0>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8a:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <MX_GPIO_Init+0xc0>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8e:	4a23      	ldr	r2, [pc, #140]	; (8001c1c <MX_GPIO_Init+0xc0>)
 8001b90:	f043 0302 	orr.w	r3, r3, #2
 8001b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b96:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <MX_GPIO_Init+0xc0>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <MX_GPIO_Init+0xc0>)
 8001ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba6:	4a1d      	ldr	r2, [pc, #116]	; (8001c1c <MX_GPIO_Init+0xc0>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bae:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <MX_GPIO_Init+0xc0>)
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001bc0:	4817      	ldr	r0, [pc, #92]	; (8001c20 <MX_GPIO_Init+0xc4>)
 8001bc2:	f002 fd3d 	bl	8004640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd0:	f002 fd36 	bl	8004640 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001bd4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001bd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	4619      	mov	r1, r3
 8001bec:	480c      	ldr	r0, [pc, #48]	; (8001c20 <MX_GPIO_Init+0xc4>)
 8001bee:	f002 fba5 	bl	800433c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c04:	f107 030c 	add.w	r3, r7, #12
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c0e:	f002 fb95 	bl	800433c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c12:	bf00      	nop
 8001c14:	3720      	adds	r7, #32
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	48000400 	.word	0x48000400

08001c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c28:	b672      	cpsid	i
}
 8001c2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <Error_Handler+0x8>
	...

08001c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c36:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <HAL_MspInit+0x54>)
 8001c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3a:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <HAL_MspInit+0x54>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6613      	str	r3, [r2, #96]	; 0x60
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <HAL_MspInit+0x54>)
 8001c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <HAL_MspInit+0x54>)
 8001c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c52:	4a0c      	ldr	r2, [pc, #48]	; (8001c84 <HAL_MspInit+0x54>)
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c58:	6593      	str	r3, [r2, #88]	; 0x58
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <HAL_MspInit+0x54>)
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1);
 8001c66:	2010      	movs	r0, #16
 8001c68:	f000 fa8c 	bl	8002184 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8001c6c:	f000 fab2 	bl	80021d4 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8001c70:	2000      	movs	r0, #0
 8001c72:	f000 fa9b 	bl	80021ac <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c76:	f002 fd9f 	bl	80047b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000

08001c88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b09e      	sub	sp, #120	; 0x78
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ca0:	f107 0310 	add.w	r3, r7, #16
 8001ca4:	2254      	movs	r2, #84	; 0x54
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f004 fe79 	bl	80069a0 <memset>
  if(hadc->Instance==ADC1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cb6:	d134      	bne.n	8001d22 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001cb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cbc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001cbe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001cc2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc4:	f107 0310 	add.w	r3, r7, #16
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f003 fa81 	bl	80051d0 <HAL_RCCEx_PeriphCLKConfig>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001cd4:	f7ff ffa6 	bl	8001c24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <HAL_ADC_MspInit+0xa4>)
 8001cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cdc:	4a13      	ldr	r2, [pc, #76]	; (8001d2c <HAL_ADC_MspInit+0xa4>)
 8001cde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_ADC_MspInit+0xa4>)
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_ADC_MspInit+0xa4>)
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <HAL_ADC_MspInit+0xa4>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_ADC_MspInit+0xa4>)
 8001cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d08:	2308      	movs	r3, #8
 8001d0a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1e:	f002 fb0d 	bl	800433c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d22:	bf00      	nop
 8001d24:	3778      	adds	r7, #120	; 0x78
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40021000 	.word	0x40021000

08001d30 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b0a0      	sub	sp, #128	; 0x80
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d48:	f107 0318 	add.w	r3, r7, #24
 8001d4c:	2254      	movs	r2, #84	; 0x54
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f004 fe25 	bl	80069a0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a49      	ldr	r2, [pc, #292]	; (8001e80 <HAL_FDCAN_MspInit+0x150>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d143      	bne.n	8001de8 <HAL_FDCAN_MspInit+0xb8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d64:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d6a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d6c:	f107 0318 	add.w	r3, r7, #24
 8001d70:	4618      	mov	r0, r3
 8001d72:	f003 fa2d 	bl	80051d0 <HAL_RCCEx_PeriphCLKConfig>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001d7c:	f7ff ff52 	bl	8001c24 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001d80:	4b40      	ldr	r3, [pc, #256]	; (8001e84 <HAL_FDCAN_MspInit+0x154>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	3301      	adds	r3, #1
 8001d86:	4a3f      	ldr	r2, [pc, #252]	; (8001e84 <HAL_FDCAN_MspInit+0x154>)
 8001d88:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001d8a:	4b3e      	ldr	r3, [pc, #248]	; (8001e84 <HAL_FDCAN_MspInit+0x154>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d10b      	bne.n	8001daa <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001d92:	4b3d      	ldr	r3, [pc, #244]	; (8001e88 <HAL_FDCAN_MspInit+0x158>)
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	4a3c      	ldr	r2, [pc, #240]	; (8001e88 <HAL_FDCAN_MspInit+0x158>)
 8001d98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d9c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d9e:	4b3a      	ldr	r3, [pc, #232]	; (8001e88 <HAL_FDCAN_MspInit+0x158>)
 8001da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	4b37      	ldr	r3, [pc, #220]	; (8001e88 <HAL_FDCAN_MspInit+0x158>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dae:	4a36      	ldr	r2, [pc, #216]	; (8001e88 <HAL_FDCAN_MspInit+0x158>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db6:	4b34      	ldr	r3, [pc, #208]	; (8001e88 <HAL_FDCAN_MspInit+0x158>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001dc2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001dc6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001dd4:	2309      	movs	r3, #9
 8001dd6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de2:	f002 faab 	bl	800433c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001de6:	e046      	b.n	8001e76 <HAL_FDCAN_MspInit+0x146>
  else if(hfdcan->Instance==FDCAN2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a27      	ldr	r2, [pc, #156]	; (8001e8c <HAL_FDCAN_MspInit+0x15c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d141      	bne.n	8001e76 <HAL_FDCAN_MspInit+0x146>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001df8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dfc:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dfe:	f107 0318 	add.w	r3, r7, #24
 8001e02:	4618      	mov	r0, r3
 8001e04:	f003 f9e4 	bl	80051d0 <HAL_RCCEx_PeriphCLKConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_FDCAN_MspInit+0xe2>
      Error_Handler();
 8001e0e:	f7ff ff09 	bl	8001c24 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001e12:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <HAL_FDCAN_MspInit+0x154>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	3301      	adds	r3, #1
 8001e18:	4a1a      	ldr	r2, [pc, #104]	; (8001e84 <HAL_FDCAN_MspInit+0x154>)
 8001e1a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_FDCAN_MspInit+0x154>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d10b      	bne.n	8001e3c <HAL_FDCAN_MspInit+0x10c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001e24:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <HAL_FDCAN_MspInit+0x158>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e28:	4a17      	ldr	r2, [pc, #92]	; (8001e88 <HAL_FDCAN_MspInit+0x158>)
 8001e2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e30:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <HAL_FDCAN_MspInit+0x158>)
 8001e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3c:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_FDCAN_MspInit+0x158>)
 8001e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e40:	4a11      	ldr	r2, [pc, #68]	; (8001e88 <HAL_FDCAN_MspInit+0x158>)
 8001e42:	f043 0302 	orr.w	r3, r3, #2
 8001e46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <HAL_FDCAN_MspInit+0x158>)
 8001e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001e54:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e58:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	2300      	movs	r3, #0
 8001e64:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001e66:	2309      	movs	r3, #9
 8001e68:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4807      	ldr	r0, [pc, #28]	; (8001e90 <HAL_FDCAN_MspInit+0x160>)
 8001e72:	f002 fa63 	bl	800433c <HAL_GPIO_Init>
}
 8001e76:	bf00      	nop
 8001e78:	3780      	adds	r7, #128	; 0x80
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40006400 	.word	0x40006400
 8001e84:	2000044c 	.word	0x2000044c
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40006800 	.word	0x40006800
 8001e90:	48000400 	.word	0x48000400

08001e94 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b098      	sub	sp, #96	; 0x60
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e9c:	f107 030c 	add.w	r3, r7, #12
 8001ea0:	2254      	movs	r2, #84	; 0x54
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f004 fd7b 	bl	80069a0 <memset>
  if(hrtc->Instance==RTC)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a15      	ldr	r2, [pc, #84]	; (8001f04 <HAL_RTC_MspInit+0x70>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d123      	bne.n	8001efc <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001eb4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001eb8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001eba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ec0:	f107 030c 	add.w	r3, r7, #12
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f003 f983 	bl	80051d0 <HAL_RCCEx_PeriphCLKConfig>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001ed0:	f7ff fea8 	bl	8001c24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <HAL_RTC_MspInit+0x74>)
 8001ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eda:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <HAL_RTC_MspInit+0x74>)
 8001edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_RTC_MspInit+0x74>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	4a07      	ldr	r2, [pc, #28]	; (8001f08 <HAL_RTC_MspInit+0x74>)
 8001eea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eee:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <HAL_RTC_MspInit+0x74>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001efc:	bf00      	nop
 8001efe:	3760      	adds	r7, #96	; 0x60
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40002800 	.word	0x40002800
 8001f08:	40021000 	.word	0x40021000

08001f0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08a      	sub	sp, #40	; 0x28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a17      	ldr	r2, [pc, #92]	; (8001f88 <HAL_SPI_MspInit+0x7c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d128      	bne.n	8001f80 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f2e:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <HAL_SPI_MspInit+0x80>)
 8001f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f32:	4a16      	ldr	r2, [pc, #88]	; (8001f8c <HAL_SPI_MspInit+0x80>)
 8001f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f38:	6593      	str	r3, [r2, #88]	; 0x58
 8001f3a:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <HAL_SPI_MspInit+0x80>)
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_SPI_MspInit+0x80>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4a:	4a10      	ldr	r2, [pc, #64]	; (8001f8c <HAL_SPI_MspInit+0x80>)
 8001f4c:	f043 0304 	orr.w	r3, r3, #4
 8001f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <HAL_SPI_MspInit+0x80>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001f5e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f70:	2306      	movs	r3, #6
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4805      	ldr	r0, [pc, #20]	; (8001f90 <HAL_SPI_MspInit+0x84>)
 8001f7c:	f002 f9de 	bl	800433c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001f80:	bf00      	nop
 8001f82:	3728      	adds	r7, #40	; 0x28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40003c00 	.word	0x40003c00
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	48000800 	.word	0x48000800

08001f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <NMI_Handler+0x4>

08001f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <HardFault_Handler+0x4>

08001fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <MemManage_Handler+0x4>

08001fa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001faa:	e7fe      	b.n	8001faa <BusFault_Handler+0x4>

08001fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <UsageFault_Handler+0x4>

08001fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe0:	f000 f890 	bl	8002104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <SystemInit+0x20>)
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff2:	4a05      	ldr	r2, [pc, #20]	; (8002008 <SystemInit+0x20>)
 8001ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800200c:	480d      	ldr	r0, [pc, #52]	; (8002044 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800200e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002010:	480d      	ldr	r0, [pc, #52]	; (8002048 <LoopForever+0x6>)
  ldr r1, =_edata
 8002012:	490e      	ldr	r1, [pc, #56]	; (800204c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002014:	4a0e      	ldr	r2, [pc, #56]	; (8002050 <LoopForever+0xe>)
  movs r3, #0
 8002016:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002018:	e002      	b.n	8002020 <LoopCopyDataInit>

0800201a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800201a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800201c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800201e:	3304      	adds	r3, #4

08002020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002024:	d3f9      	bcc.n	800201a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002026:	4a0b      	ldr	r2, [pc, #44]	; (8002054 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002028:	4c0b      	ldr	r4, [pc, #44]	; (8002058 <LoopForever+0x16>)
  movs r3, #0
 800202a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800202c:	e001      	b.n	8002032 <LoopFillZerobss>

0800202e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800202e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002030:	3204      	adds	r2, #4

08002032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002034:	d3fb      	bcc.n	800202e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002036:	f7ff ffd7 	bl	8001fe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800203a:	f004 fc8d 	bl	8006958 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800203e:	f7ff fae7 	bl	8001610 <main>

08002042 <LoopForever>:

LoopForever:
    b LoopForever
 8002042:	e7fe      	b.n	8002042 <LoopForever>
  ldr   r0, =_estack
 8002044:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800204c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002050:	08006dec 	.word	0x08006dec
  ldr r2, =_sbss
 8002054:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002058:	20000454 	.word	0x20000454

0800205c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800205c:	e7fe      	b.n	800205c <ADC1_2_IRQHandler>

0800205e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002068:	2003      	movs	r0, #3
 800206a:	f001 ff6f 	bl	8003f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800206e:	2000      	movs	r0, #0
 8002070:	f000 f80e 	bl	8002090 <HAL_InitTick>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	71fb      	strb	r3, [r7, #7]
 800207e:	e001      	b.n	8002084 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002080:	f7ff fdd6 	bl	8001c30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002084:	79fb      	ldrb	r3, [r7, #7]

}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800209c:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <HAL_InitTick+0x68>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d022      	beq.n	80020ea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80020a4:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_InitTick+0x6c>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <HAL_InitTick+0x68>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	4618      	mov	r0, r3
 80020ba:	f001 ff6c 	bl	8003f96 <HAL_SYSTICK_Config>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10f      	bne.n	80020e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b0f      	cmp	r3, #15
 80020c8:	d809      	bhi.n	80020de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ca:	2200      	movs	r2, #0
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	f04f 30ff 	mov.w	r0, #4294967295
 80020d2:	f001 ff46 	bl	8003f62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <HAL_InitTick+0x70>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	e007      	b.n	80020ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
 80020e2:	e004      	b.n	80020ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
 80020e8:	e001      	b.n	80020ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20000008 	.word	0x20000008
 80020fc:	20000000 	.word	0x20000000
 8002100:	20000004 	.word	0x20000004

08002104 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_IncTick+0x1c>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <HAL_IncTick+0x20>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4413      	add	r3, r2
 8002112:	4a03      	ldr	r2, [pc, #12]	; (8002120 <HAL_IncTick+0x1c>)
 8002114:	6013      	str	r3, [r2, #0]
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	20000450 	.word	0x20000450
 8002124:	20000008 	.word	0x20000008

08002128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return uwTick;
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <HAL_GetTick+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20000450 	.word	0x20000450

08002140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002148:	f7ff ffee 	bl	8002128 <HAL_GetTick>
 800214c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d004      	beq.n	8002164 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_Delay+0x40>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4413      	add	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002164:	bf00      	nop
 8002166:	f7ff ffdf 	bl	8002128 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	429a      	cmp	r2, r3
 8002174:	d8f7      	bhi.n	8002166 <HAL_Delay+0x26>
  {
  }
}
 8002176:	bf00      	nop
 8002178:	bf00      	nop
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000008 	.word	0x20000008

08002184 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002194:	4904      	ldr	r1, [pc, #16]	; (80021a8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4313      	orrs	r3, r2
 800219a:	600b      	str	r3, [r1, #0]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	40010030 	.word	0x40010030

080021ac <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f023 0202 	bic.w	r2, r3, #2
 80021bc:	4904      	ldr	r1, [pc, #16]	; (80021d0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	600b      	str	r3, [r1, #0]
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	40010030 	.word	0x40010030

080021d4 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80021da:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a0e      	ldr	r2, [pc, #56]	; (8002218 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80021e6:	f7ff ff9f 	bl	8002128 <HAL_GetTick>
 80021ea:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80021ec:	e008      	b.n	8002200 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80021ee:	f7ff ff9b 	bl	8002128 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b0a      	cmp	r3, #10
 80021fa:	d901      	bls.n	8002200 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e006      	b.n	800220e <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0f0      	beq.n	80021ee <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40010030 	.word	0x40010030

0800221c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	609a      	str	r2, [r3, #8]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	609a      	str	r2, [r3, #8]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
 8002290:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	3360      	adds	r3, #96	; 0x60
 8002296:	461a      	mov	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <LL_ADC_SetOffset+0x44>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	4313      	orrs	r3, r2
 80022b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022bc:	bf00      	nop
 80022be:	371c      	adds	r7, #28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	03fff000 	.word	0x03fff000

080022cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3360      	adds	r3, #96	; 0x60
 80022da:	461a      	mov	r2, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	3360      	adds	r3, #96	; 0x60
 8002308:	461a      	mov	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	431a      	orrs	r2, r3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002322:	bf00      	nop
 8002324:	371c      	adds	r7, #28
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800232e:	b480      	push	{r7}
 8002330:	b087      	sub	sp, #28
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	3360      	adds	r3, #96	; 0x60
 800233e:	461a      	mov	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	431a      	orrs	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002358:	bf00      	nop
 800235a:	371c      	adds	r7, #28
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	3360      	adds	r3, #96	; 0x60
 8002374:	461a      	mov	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	431a      	orrs	r2, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800238e:	bf00      	nop
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	615a      	str	r2, [r3, #20]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80023d4:	2301      	movs	r3, #1
 80023d6:	e000      	b.n	80023da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b087      	sub	sp, #28
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3330      	adds	r3, #48	; 0x30
 80023f6:	461a      	mov	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	4413      	add	r3, r2
 8002404:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	211f      	movs	r1, #31
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	401a      	ands	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	0e9b      	lsrs	r3, r3, #26
 800241e:	f003 011f 	and.w	r1, r3, #31
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	fa01 f303 	lsl.w	r3, r1, r3
 800242c:	431a      	orrs	r2, r3
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002432:	bf00      	nop
 8002434:	371c      	adds	r7, #28
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800243e:	b480      	push	{r7}
 8002440:	b087      	sub	sp, #28
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	3314      	adds	r3, #20
 800244e:	461a      	mov	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	0e5b      	lsrs	r3, r3, #25
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	4413      	add	r3, r2
 800245c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	0d1b      	lsrs	r3, r3, #20
 8002466:	f003 031f 	and.w	r3, r3, #31
 800246a:	2107      	movs	r1, #7
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	401a      	ands	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	0d1b      	lsrs	r3, r3, #20
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	fa01 f303 	lsl.w	r3, r1, r3
 8002482:	431a      	orrs	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002488:	bf00      	nop
 800248a:	371c      	adds	r7, #28
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a0f      	ldr	r2, [pc, #60]	; (80024e0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d10a      	bne.n	80024be <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b4:	431a      	orrs	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80024bc:	e00a      	b.n	80024d4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ca:	43db      	mvns	r3, r3
 80024cc:	401a      	ands	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	407f0000 	.word	0x407f0000

080024e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 031f 	and.w	r3, r3, #31
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800252c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6093      	str	r3, [r2, #8]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002554:	d101      	bne.n	800255a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002578:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800257c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025a4:	d101      	bne.n	80025aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025cc:	f043 0201 	orr.w	r2, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025f4:	f043 0202 	orr.w	r2, r3, #2
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <LL_ADC_IsEnabled+0x18>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <LL_ADC_IsEnabled+0x1a>
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b02      	cmp	r3, #2
 8002640:	d101      	bne.n	8002646 <LL_ADC_IsDisableOngoing+0x18>
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <LL_ADC_IsDisableOngoing+0x1a>
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002664:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002668:	f043 0204 	orr.w	r2, r3, #4
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800268c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002690:	f043 0210 	orr.w	r2, r3, #16
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d101      	bne.n	80026bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026de:	f043 0220 	orr.w	r2, r3, #32
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b08      	cmp	r3, #8
 8002704:	d101      	bne.n	800270a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002718:	b590      	push	{r4, r7, lr}
 800271a:	b089      	sub	sp, #36	; 0x24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002724:	2300      	movs	r3, #0
 8002726:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e1af      	b.n	8002a92 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273c:	2b00      	cmp	r3, #0
 800273e:	d109      	bne.n	8002754 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff faa1 	bl	8001c88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fef1 	bl	8002540 <LL_ADC_IsDeepPowerDownEnabled>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d004      	beq.n	800276e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fed7 	bl	800251c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff ff0c 	bl	8002590 <LL_ADC_IsInternalRegulatorEnabled>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d115      	bne.n	80027aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fef0 	bl	8002568 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002788:	4b9f      	ldr	r3, [pc, #636]	; (8002a08 <HAL_ADC_Init+0x2f0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	099b      	lsrs	r3, r3, #6
 800278e:	4a9f      	ldr	r2, [pc, #636]	; (8002a0c <HAL_ADC_Init+0x2f4>)
 8002790:	fba2 2303 	umull	r2, r3, r2, r3
 8002794:	099b      	lsrs	r3, r3, #6
 8002796:	3301      	adds	r3, #1
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800279c:	e002      	b.n	80027a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f9      	bne.n	800279e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff feee 	bl	8002590 <LL_ADC_IsInternalRegulatorEnabled>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10d      	bne.n	80027d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027be:	f043 0210 	orr.w	r2, r3, #16
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ca:	f043 0201 	orr.w	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff ff62 	bl	80026a4 <LL_ADC_REG_IsConversionOngoing>
 80027e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f040 8148 	bne.w	8002a80 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f040 8144 	bne.w	8002a80 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002800:	f043 0202 	orr.w	r2, r3, #2
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fefb 	bl	8002608 <LL_ADC_IsEnabled>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d141      	bne.n	800289c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002820:	d004      	beq.n	800282c <HAL_ADC_Init+0x114>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a7a      	ldr	r2, [pc, #488]	; (8002a10 <HAL_ADC_Init+0x2f8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d10f      	bne.n	800284c <HAL_ADC_Init+0x134>
 800282c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002830:	f7ff feea 	bl	8002608 <LL_ADC_IsEnabled>
 8002834:	4604      	mov	r4, r0
 8002836:	4876      	ldr	r0, [pc, #472]	; (8002a10 <HAL_ADC_Init+0x2f8>)
 8002838:	f7ff fee6 	bl	8002608 <LL_ADC_IsEnabled>
 800283c:	4603      	mov	r3, r0
 800283e:	4323      	orrs	r3, r4
 8002840:	2b00      	cmp	r3, #0
 8002842:	bf0c      	ite	eq
 8002844:	2301      	moveq	r3, #1
 8002846:	2300      	movne	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	e012      	b.n	8002872 <HAL_ADC_Init+0x15a>
 800284c:	4871      	ldr	r0, [pc, #452]	; (8002a14 <HAL_ADC_Init+0x2fc>)
 800284e:	f7ff fedb 	bl	8002608 <LL_ADC_IsEnabled>
 8002852:	4604      	mov	r4, r0
 8002854:	4870      	ldr	r0, [pc, #448]	; (8002a18 <HAL_ADC_Init+0x300>)
 8002856:	f7ff fed7 	bl	8002608 <LL_ADC_IsEnabled>
 800285a:	4603      	mov	r3, r0
 800285c:	431c      	orrs	r4, r3
 800285e:	486f      	ldr	r0, [pc, #444]	; (8002a1c <HAL_ADC_Init+0x304>)
 8002860:	f7ff fed2 	bl	8002608 <LL_ADC_IsEnabled>
 8002864:	4603      	mov	r3, r0
 8002866:	4323      	orrs	r3, r4
 8002868:	2b00      	cmp	r3, #0
 800286a:	bf0c      	ite	eq
 800286c:	2301      	moveq	r3, #1
 800286e:	2300      	movne	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d012      	beq.n	800289c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800287e:	d004      	beq.n	800288a <HAL_ADC_Init+0x172>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a62      	ldr	r2, [pc, #392]	; (8002a10 <HAL_ADC_Init+0x2f8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d101      	bne.n	800288e <HAL_ADC_Init+0x176>
 800288a:	4a65      	ldr	r2, [pc, #404]	; (8002a20 <HAL_ADC_Init+0x308>)
 800288c:	e000      	b.n	8002890 <HAL_ADC_Init+0x178>
 800288e:	4a65      	ldr	r2, [pc, #404]	; (8002a24 <HAL_ADC_Init+0x30c>)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	4619      	mov	r1, r3
 8002896:	4610      	mov	r0, r2
 8002898:	f7ff fcc0 	bl	800221c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	7f5b      	ldrb	r3, [r3, #29]
 80028a0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028a6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80028ac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80028b2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028ba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d106      	bne.n	80028d8 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ce:	3b01      	subs	r3, #1
 80028d0:	045b      	lsls	r3, r3, #17
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d009      	beq.n	80028f4 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	4b4b      	ldr	r3, [pc, #300]	; (8002a28 <HAL_ADC_Init+0x310>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	69b9      	ldr	r1, [r7, #24]
 8002904:	430b      	orrs	r3, r1
 8002906:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff febe 	bl	80026a4 <LL_ADC_REG_IsConversionOngoing>
 8002928:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fedf 	bl	80026f2 <LL_ADC_INJ_IsConversionOngoing>
 8002934:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d17f      	bne.n	8002a3c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d17c      	bne.n	8002a3c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002946:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800294e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800295e:	f023 0302 	bic.w	r3, r3, #2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6812      	ldr	r2, [r2, #0]
 8002966:	69b9      	ldr	r1, [r7, #24]
 8002968:	430b      	orrs	r3, r1
 800296a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d017      	beq.n	80029a4 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	691a      	ldr	r2, [r3, #16]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002982:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800298c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002990:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6911      	ldr	r1, [r2, #16]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	430b      	orrs	r3, r1
 800299e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80029a2:	e013      	b.n	80029cc <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691a      	ldr	r2, [r3, #16]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80029b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80029c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029c8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d12a      	bne.n	8002a2c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80029e0:	f023 0304 	bic.w	r3, r3, #4
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029ec:	4311      	orrs	r1, r2
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80029f2:	4311      	orrs	r1, r2
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80029f8:	430a      	orrs	r2, r1
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0201 	orr.w	r2, r2, #1
 8002a04:	611a      	str	r2, [r3, #16]
 8002a06:	e019      	b.n	8002a3c <HAL_ADC_Init+0x324>
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	053e2d63 	.word	0x053e2d63
 8002a10:	50000100 	.word	0x50000100
 8002a14:	50000400 	.word	0x50000400
 8002a18:	50000500 	.word	0x50000500
 8002a1c:	50000600 	.word	0x50000600
 8002a20:	50000300 	.word	0x50000300
 8002a24:	50000700 	.word	0x50000700
 8002a28:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0201 	bic.w	r2, r2, #1
 8002a3a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d10c      	bne.n	8002a5e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	f023 010f 	bic.w	r1, r3, #15
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	1e5a      	subs	r2, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a5c:	e007      	b.n	8002a6e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 020f 	bic.w	r2, r2, #15
 8002a6c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a72:	f023 0303 	bic.w	r3, r3, #3
 8002a76:	f043 0201 	orr.w	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a7e:	e007      	b.n	8002a90 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a84:	f043 0210 	orr.w	r2, r3, #16
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a90:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3724      	adds	r7, #36	; 0x24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd90      	pop	{r4, r7, pc}
 8002a9a:	bf00      	nop

08002a9c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aac:	d004      	beq.n	8002ab8 <HAL_ADC_Start+0x1c>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a67      	ldr	r2, [pc, #412]	; (8002c50 <HAL_ADC_Start+0x1b4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d101      	bne.n	8002abc <HAL_ADC_Start+0x20>
 8002ab8:	4b66      	ldr	r3, [pc, #408]	; (8002c54 <HAL_ADC_Start+0x1b8>)
 8002aba:	e000      	b.n	8002abe <HAL_ADC_Start+0x22>
 8002abc:	4b66      	ldr	r3, [pc, #408]	; (8002c58 <HAL_ADC_Start+0x1bc>)
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fd10 	bl	80024e4 <LL_ADC_GetMultimode>
 8002ac4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fdea 	bl	80026a4 <LL_ADC_REG_IsConversionOngoing>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f040 80b4 	bne.w	8002c40 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_ADC_Start+0x4a>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e0af      	b.n	8002c46 <HAL_ADC_Start+0x1aa>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fefc 	bl	80038ec <ADC_Enable>
 8002af4:	4603      	mov	r3, r0
 8002af6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002af8:	7dfb      	ldrb	r3, [r7, #23]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f040 809b 	bne.w	8002c36 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b08:	f023 0301 	bic.w	r3, r3, #1
 8002b0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a4d      	ldr	r2, [pc, #308]	; (8002c50 <HAL_ADC_Start+0x1b4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d009      	beq.n	8002b32 <HAL_ADC_Start+0x96>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a4e      	ldr	r2, [pc, #312]	; (8002c5c <HAL_ADC_Start+0x1c0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d002      	beq.n	8002b2e <HAL_ADC_Start+0x92>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	e003      	b.n	8002b36 <HAL_ADC_Start+0x9a>
 8002b2e:	4b4c      	ldr	r3, [pc, #304]	; (8002c60 <HAL_ADC_Start+0x1c4>)
 8002b30:	e001      	b.n	8002b36 <HAL_ADC_Start+0x9a>
 8002b32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d002      	beq.n	8002b44 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d105      	bne.n	8002b50 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b48:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b5c:	d106      	bne.n	8002b6c <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b62:	f023 0206 	bic.w	r2, r3, #6
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	661a      	str	r2, [r3, #96]	; 0x60
 8002b6a:	e002      	b.n	8002b72 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	221c      	movs	r2, #28
 8002b78:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a32      	ldr	r2, [pc, #200]	; (8002c50 <HAL_ADC_Start+0x1b4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d009      	beq.n	8002ba0 <HAL_ADC_Start+0x104>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a32      	ldr	r2, [pc, #200]	; (8002c5c <HAL_ADC_Start+0x1c0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d002      	beq.n	8002b9c <HAL_ADC_Start+0x100>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	e003      	b.n	8002ba4 <HAL_ADC_Start+0x108>
 8002b9c:	4b30      	ldr	r3, [pc, #192]	; (8002c60 <HAL_ADC_Start+0x1c4>)
 8002b9e:	e001      	b.n	8002ba4 <HAL_ADC_Start+0x108>
 8002ba0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d008      	beq.n	8002bbe <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d005      	beq.n	8002bbe <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2b05      	cmp	r3, #5
 8002bb6:	d002      	beq.n	8002bbe <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	2b09      	cmp	r3, #9
 8002bbc:	d114      	bne.n	8002be8 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bd4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fd37 	bl	8002654 <LL_ADC_REG_StartConversion>
 8002be6:	e02d      	b.n	8002c44 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a15      	ldr	r2, [pc, #84]	; (8002c50 <HAL_ADC_Start+0x1b4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d009      	beq.n	8002c12 <HAL_ADC_Start+0x176>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a16      	ldr	r2, [pc, #88]	; (8002c5c <HAL_ADC_Start+0x1c0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d002      	beq.n	8002c0e <HAL_ADC_Start+0x172>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	e003      	b.n	8002c16 <HAL_ADC_Start+0x17a>
 8002c0e:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <HAL_ADC_Start+0x1c4>)
 8002c10:	e001      	b.n	8002c16 <HAL_ADC_Start+0x17a>
 8002c12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c16:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00f      	beq.n	8002c44 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c2c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c34:	e006      	b.n	8002c44 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002c3e:	e001      	b.n	8002c44 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c40:	2302      	movs	r3, #2
 8002c42:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	50000100 	.word	0x50000100
 8002c54:	50000300 	.word	0x50000300
 8002c58:	50000700 	.word	0x50000700
 8002c5c:	50000500 	.word	0x50000500
 8002c60:	50000400 	.word	0x50000400

08002c64 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <HAL_ADC_Stop+0x16>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e023      	b.n	8002cc2 <HAL_ADC_Stop+0x5e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002c82:	2103      	movs	r1, #3
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 fd75 	bl	8003774 <ADC_ConversionStop>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d111      	bne.n	8002cb8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 fe8b 	bl	80039b0 <ADC_Disable>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d109      	bne.n	8002cb8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cac:	f023 0301 	bic.w	r3, r3, #1
 8002cb0:	f043 0201 	orr.w	r2, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cde:	d004      	beq.n	8002cea <HAL_ADC_PollForConversion+0x1e>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a77      	ldr	r2, [pc, #476]	; (8002ec4 <HAL_ADC_PollForConversion+0x1f8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d101      	bne.n	8002cee <HAL_ADC_PollForConversion+0x22>
 8002cea:	4b77      	ldr	r3, [pc, #476]	; (8002ec8 <HAL_ADC_PollForConversion+0x1fc>)
 8002cec:	e000      	b.n	8002cf0 <HAL_ADC_PollForConversion+0x24>
 8002cee:	4b77      	ldr	r3, [pc, #476]	; (8002ecc <HAL_ADC_PollForConversion+0x200>)
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fbf7 	bl	80024e4 <LL_ADC_GetMultimode>
 8002cf6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d102      	bne.n	8002d06 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002d00:	2308      	movs	r3, #8
 8002d02:	61fb      	str	r3, [r7, #28]
 8002d04:	e037      	b.n	8002d76 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2b05      	cmp	r3, #5
 8002d10:	d002      	beq.n	8002d18 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2b09      	cmp	r3, #9
 8002d16:	d111      	bne.n	8002d3c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d007      	beq.n	8002d36 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2a:	f043 0220 	orr.w	r2, r3, #32
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e0c1      	b.n	8002eba <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002d36:	2304      	movs	r3, #4
 8002d38:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002d3a:	e01c      	b.n	8002d76 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d44:	d004      	beq.n	8002d50 <HAL_ADC_PollForConversion+0x84>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a5e      	ldr	r2, [pc, #376]	; (8002ec4 <HAL_ADC_PollForConversion+0x1f8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d101      	bne.n	8002d54 <HAL_ADC_PollForConversion+0x88>
 8002d50:	4b5d      	ldr	r3, [pc, #372]	; (8002ec8 <HAL_ADC_PollForConversion+0x1fc>)
 8002d52:	e000      	b.n	8002d56 <HAL_ADC_PollForConversion+0x8a>
 8002d54:	4b5d      	ldr	r3, [pc, #372]	; (8002ecc <HAL_ADC_PollForConversion+0x200>)
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fbd2 	bl	8002500 <LL_ADC_GetMultiDMATransfer>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d007      	beq.n	8002d72 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d66:	f043 0220 	orr.w	r2, r3, #32
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e0a3      	b.n	8002eba <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002d72:	2304      	movs	r3, #4
 8002d74:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002d76:	f7ff f9d7 	bl	8002128 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d7c:	e021      	b.n	8002dc2 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d01d      	beq.n	8002dc2 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002d86:	f7ff f9cf 	bl	8002128 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d302      	bcc.n	8002d9c <HAL_ADC_PollForConversion+0xd0>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d112      	bne.n	8002dc2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10b      	bne.n	8002dc2 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dae:	f043 0204 	orr.w	r2, r3, #4
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e07b      	b.n	8002eba <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0d6      	beq.n	8002d7e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff faed 	bl	80023c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01c      	beq.n	8002e26 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	7f5b      	ldrb	r3, [r3, #29]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d118      	bne.n	8002e26 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d111      	bne.n	8002e26 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d105      	bne.n	8002e26 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1e:	f043 0201 	orr.w	r2, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a26      	ldr	r2, [pc, #152]	; (8002ec4 <HAL_ADC_PollForConversion+0x1f8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d009      	beq.n	8002e44 <HAL_ADC_PollForConversion+0x178>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a26      	ldr	r2, [pc, #152]	; (8002ed0 <HAL_ADC_PollForConversion+0x204>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d002      	beq.n	8002e40 <HAL_ADC_PollForConversion+0x174>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	e003      	b.n	8002e48 <HAL_ADC_PollForConversion+0x17c>
 8002e40:	4b24      	ldr	r3, [pc, #144]	; (8002ed4 <HAL_ADC_PollForConversion+0x208>)
 8002e42:	e001      	b.n	8002e48 <HAL_ADC_PollForConversion+0x17c>
 8002e44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d008      	beq.n	8002e62 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d005      	beq.n	8002e62 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2b05      	cmp	r3, #5
 8002e5a:	d002      	beq.n	8002e62 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2b09      	cmp	r3, #9
 8002e60:	d104      	bne.n	8002e6c <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	61bb      	str	r3, [r7, #24]
 8002e6a:	e014      	b.n	8002e96 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a14      	ldr	r2, [pc, #80]	; (8002ec4 <HAL_ADC_PollForConversion+0x1f8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d009      	beq.n	8002e8a <HAL_ADC_PollForConversion+0x1be>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a15      	ldr	r2, [pc, #84]	; (8002ed0 <HAL_ADC_PollForConversion+0x204>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d002      	beq.n	8002e86 <HAL_ADC_PollForConversion+0x1ba>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	e003      	b.n	8002e8e <HAL_ADC_PollForConversion+0x1c2>
 8002e86:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <HAL_ADC_PollForConversion+0x208>)
 8002e88:	e001      	b.n	8002e8e <HAL_ADC_PollForConversion+0x1c2>
 8002e8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e8e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d104      	bne.n	8002ea6 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2208      	movs	r2, #8
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e008      	b.n	8002eb8 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d103      	bne.n	8002eb8 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	220c      	movs	r2, #12
 8002eb6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3720      	adds	r7, #32
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	50000100 	.word	0x50000100
 8002ec8:	50000300 	.word	0x50000300
 8002ecc:	50000700 	.word	0x50000700
 8002ed0:	50000500 	.word	0x50000500
 8002ed4:	50000400 	.word	0x50000400

08002ed8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
	...

08002ef4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b0b6      	sub	sp, #216	; 0xd8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d102      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x24>
 8002f12:	2302      	movs	r3, #2
 8002f14:	f000 bc13 	b.w	800373e <HAL_ADC_ConfigChannel+0x84a>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff fbbd 	bl	80026a4 <LL_ADC_REG_IsConversionOngoing>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f040 83f3 	bne.w	8003718 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6859      	ldr	r1, [r3, #4]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f7ff fa51 	bl	80023e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fbab 	bl	80026a4 <LL_ADC_REG_IsConversionOngoing>
 8002f4e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fbcb 	bl	80026f2 <LL_ADC_INJ_IsConversionOngoing>
 8002f5c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f60:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f040 81d9 	bne.w	800331c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f040 81d4 	bne.w	800331c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f7c:	d10f      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2200      	movs	r2, #0
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f7ff fa58 	bl	800243e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff f9ff 	bl	800239a <LL_ADC_SetSamplingTimeCommonConfig>
 8002f9c:	e00e      	b.n	8002fbc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6819      	ldr	r1, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f7ff fa47 	bl	800243e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff f9ef 	bl	800239a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	695a      	ldr	r2, [r3, #20]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	08db      	lsrs	r3, r3, #3
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d022      	beq.n	8003024 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6919      	ldr	r1, [r3, #16]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fee:	f7ff f949 	bl	8002284 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	6919      	ldr	r1, [r3, #16]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	461a      	mov	r2, r3
 8003000:	f7ff f995 	bl	800232e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6818      	ldr	r0, [r3, #0]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	6919      	ldr	r1, [r3, #16]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	7f1b      	ldrb	r3, [r3, #28]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d102      	bne.n	800301a <HAL_ADC_ConfigChannel+0x126>
 8003014:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003018:	e000      	b.n	800301c <HAL_ADC_ConfigChannel+0x128>
 800301a:	2300      	movs	r3, #0
 800301c:	461a      	mov	r2, r3
 800301e:	f7ff f9a1 	bl	8002364 <LL_ADC_SetOffsetSaturation>
 8003022:	e17b      	b.n	800331c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff f94e 	bl	80022cc <LL_ADC_GetOffsetChannel>
 8003030:	4603      	mov	r3, r0
 8003032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x15c>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2100      	movs	r1, #0
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff f943 	bl	80022cc <LL_ADC_GetOffsetChannel>
 8003046:	4603      	mov	r3, r0
 8003048:	0e9b      	lsrs	r3, r3, #26
 800304a:	f003 021f 	and.w	r2, r3, #31
 800304e:	e01e      	b.n	800308e <HAL_ADC_ConfigChannel+0x19a>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2100      	movs	r1, #0
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff f938 	bl	80022cc <LL_ADC_GetOffsetChannel>
 800305c:	4603      	mov	r3, r0
 800305e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003066:	fa93 f3a3 	rbit	r3, r3
 800306a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800306e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003072:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003076:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800307e:	2320      	movs	r3, #32
 8003080:	e004      	b.n	800308c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003082:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003086:	fab3 f383 	clz	r3, r3
 800308a:	b2db      	uxtb	r3, r3
 800308c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003096:	2b00      	cmp	r3, #0
 8003098:	d105      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x1b2>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	0e9b      	lsrs	r3, r3, #26
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	e018      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x1e4>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80030b2:	fa93 f3a3 	rbit	r3, r3
 80030b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80030ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80030c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80030ca:	2320      	movs	r3, #32
 80030cc:	e004      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80030ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030d2:	fab3 f383 	clz	r3, r3
 80030d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030d8:	429a      	cmp	r2, r3
 80030da:	d106      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2200      	movs	r2, #0
 80030e2:	2100      	movs	r1, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff f907 	bl	80022f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2101      	movs	r1, #1
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff f8eb 	bl	80022cc <LL_ADC_GetOffsetChannel>
 80030f6:	4603      	mov	r3, r0
 80030f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10a      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x222>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2101      	movs	r1, #1
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff f8e0 	bl	80022cc <LL_ADC_GetOffsetChannel>
 800310c:	4603      	mov	r3, r0
 800310e:	0e9b      	lsrs	r3, r3, #26
 8003110:	f003 021f 	and.w	r2, r3, #31
 8003114:	e01e      	b.n	8003154 <HAL_ADC_ConfigChannel+0x260>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2101      	movs	r1, #1
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff f8d5 	bl	80022cc <LL_ADC_GetOffsetChannel>
 8003122:	4603      	mov	r3, r0
 8003124:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003128:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800312c:	fa93 f3a3 	rbit	r3, r3
 8003130:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003134:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003138:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800313c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003144:	2320      	movs	r3, #32
 8003146:	e004      	b.n	8003152 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003148:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800314c:	fab3 f383 	clz	r3, r3
 8003150:	b2db      	uxtb	r3, r3
 8003152:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315c:	2b00      	cmp	r3, #0
 800315e:	d105      	bne.n	800316c <HAL_ADC_ConfigChannel+0x278>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	0e9b      	lsrs	r3, r3, #26
 8003166:	f003 031f 	and.w	r3, r3, #31
 800316a:	e018      	b.n	800319e <HAL_ADC_ConfigChannel+0x2aa>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003174:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003178:	fa93 f3a3 	rbit	r3, r3
 800317c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003180:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003184:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003188:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003190:	2320      	movs	r3, #32
 8003192:	e004      	b.n	800319e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003194:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003198:	fab3 f383 	clz	r3, r3
 800319c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800319e:	429a      	cmp	r2, r3
 80031a0:	d106      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2200      	movs	r2, #0
 80031a8:	2101      	movs	r1, #1
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff f8a4 	bl	80022f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2102      	movs	r1, #2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff f888 	bl	80022cc <LL_ADC_GetOffsetChannel>
 80031bc:	4603      	mov	r3, r0
 80031be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10a      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x2e8>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2102      	movs	r1, #2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff f87d 	bl	80022cc <LL_ADC_GetOffsetChannel>
 80031d2:	4603      	mov	r3, r0
 80031d4:	0e9b      	lsrs	r3, r3, #26
 80031d6:	f003 021f 	and.w	r2, r3, #31
 80031da:	e01e      	b.n	800321a <HAL_ADC_ConfigChannel+0x326>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2102      	movs	r1, #2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff f872 	bl	80022cc <LL_ADC_GetOffsetChannel>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031f2:	fa93 f3a3 	rbit	r3, r3
 80031f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80031fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003202:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800320a:	2320      	movs	r3, #32
 800320c:	e004      	b.n	8003218 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800320e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003212:	fab3 f383 	clz	r3, r3
 8003216:	b2db      	uxtb	r3, r3
 8003218:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003222:	2b00      	cmp	r3, #0
 8003224:	d105      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x33e>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	0e9b      	lsrs	r3, r3, #26
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	e016      	b.n	8003260 <HAL_ADC_ConfigChannel+0x36c>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800323e:	fa93 f3a3 	rbit	r3, r3
 8003242:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003244:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003246:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800324a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003252:	2320      	movs	r3, #32
 8003254:	e004      	b.n	8003260 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003256:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800325a:	fab3 f383 	clz	r3, r3
 800325e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003260:	429a      	cmp	r2, r3
 8003262:	d106      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2200      	movs	r2, #0
 800326a:	2102      	movs	r1, #2
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff f843 	bl	80022f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2103      	movs	r1, #3
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff f827 	bl	80022cc <LL_ADC_GetOffsetChannel>
 800327e:	4603      	mov	r3, r0
 8003280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10a      	bne.n	800329e <HAL_ADC_ConfigChannel+0x3aa>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2103      	movs	r1, #3
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff f81c 	bl	80022cc <LL_ADC_GetOffsetChannel>
 8003294:	4603      	mov	r3, r0
 8003296:	0e9b      	lsrs	r3, r3, #26
 8003298:	f003 021f 	and.w	r2, r3, #31
 800329c:	e017      	b.n	80032ce <HAL_ADC_ConfigChannel+0x3da>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2103      	movs	r1, #3
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff f811 	bl	80022cc <LL_ADC_GetOffsetChannel>
 80032aa:	4603      	mov	r3, r0
 80032ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032b0:	fa93 f3a3 	rbit	r3, r3
 80032b4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80032b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032b8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80032ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80032c0:	2320      	movs	r3, #32
 80032c2:	e003      	b.n	80032cc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80032c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032c6:	fab3 f383 	clz	r3, r3
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d105      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x3f2>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	0e9b      	lsrs	r3, r3, #26
 80032e0:	f003 031f 	and.w	r3, r3, #31
 80032e4:	e011      	b.n	800330a <HAL_ADC_ConfigChannel+0x416>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80032f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80032f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80032fe:	2320      	movs	r3, #32
 8003300:	e003      	b.n	800330a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003304:	fab3 f383 	clz	r3, r3
 8003308:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800330a:	429a      	cmp	r2, r3
 800330c:	d106      	bne.n	800331c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2200      	movs	r2, #0
 8003314:	2103      	movs	r1, #3
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe ffee 	bl	80022f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff f971 	bl	8002608 <LL_ADC_IsEnabled>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	f040 813d 	bne.w	80035a8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	6819      	ldr	r1, [r3, #0]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	461a      	mov	r2, r3
 800333c:	f7ff f8aa 	bl	8002494 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4aa2      	ldr	r2, [pc, #648]	; (80035d0 <HAL_ADC_ConfigChannel+0x6dc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	f040 812e 	bne.w	80035a8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10b      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x480>
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	0e9b      	lsrs	r3, r3, #26
 8003362:	3301      	adds	r3, #1
 8003364:	f003 031f 	and.w	r3, r3, #31
 8003368:	2b09      	cmp	r3, #9
 800336a:	bf94      	ite	ls
 800336c:	2301      	movls	r3, #1
 800336e:	2300      	movhi	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	e019      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x4b4>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800337c:	fa93 f3a3 	rbit	r3, r3
 8003380:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003382:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003384:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800338c:	2320      	movs	r3, #32
 800338e:	e003      	b.n	8003398 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003392:	fab3 f383 	clz	r3, r3
 8003396:	b2db      	uxtb	r3, r3
 8003398:	3301      	adds	r3, #1
 800339a:	f003 031f 	and.w	r3, r3, #31
 800339e:	2b09      	cmp	r3, #9
 80033a0:	bf94      	ite	ls
 80033a2:	2301      	movls	r3, #1
 80033a4:	2300      	movhi	r3, #0
 80033a6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d079      	beq.n	80034a0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d107      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x4d4>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	0e9b      	lsrs	r3, r3, #26
 80033be:	3301      	adds	r3, #1
 80033c0:	069b      	lsls	r3, r3, #26
 80033c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033c6:	e015      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x500>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033d0:	fa93 f3a3 	rbit	r3, r3
 80033d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80033d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80033da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80033e0:	2320      	movs	r3, #32
 80033e2:	e003      	b.n	80033ec <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80033e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033e6:	fab3 f383 	clz	r3, r3
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	3301      	adds	r3, #1
 80033ee:	069b      	lsls	r3, r3, #26
 80033f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d109      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x520>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	0e9b      	lsrs	r3, r3, #26
 8003406:	3301      	adds	r3, #1
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	2101      	movs	r1, #1
 800340e:	fa01 f303 	lsl.w	r3, r1, r3
 8003412:	e017      	b.n	8003444 <HAL_ADC_ConfigChannel+0x550>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800341c:	fa93 f3a3 	rbit	r3, r3
 8003420:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003424:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800342c:	2320      	movs	r3, #32
 800342e:	e003      	b.n	8003438 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003432:	fab3 f383 	clz	r3, r3
 8003436:	b2db      	uxtb	r3, r3
 8003438:	3301      	adds	r3, #1
 800343a:	f003 031f 	and.w	r3, r3, #31
 800343e:	2101      	movs	r1, #1
 8003440:	fa01 f303 	lsl.w	r3, r1, r3
 8003444:	ea42 0103 	orr.w	r1, r2, r3
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10a      	bne.n	800346a <HAL_ADC_ConfigChannel+0x576>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	0e9b      	lsrs	r3, r3, #26
 800345a:	3301      	adds	r3, #1
 800345c:	f003 021f 	and.w	r2, r3, #31
 8003460:	4613      	mov	r3, r2
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4413      	add	r3, r2
 8003466:	051b      	lsls	r3, r3, #20
 8003468:	e018      	b.n	800349c <HAL_ADC_ConfigChannel+0x5a8>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003472:	fa93 f3a3 	rbit	r3, r3
 8003476:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800347c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003482:	2320      	movs	r3, #32
 8003484:	e003      	b.n	800348e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003488:	fab3 f383 	clz	r3, r3
 800348c:	b2db      	uxtb	r3, r3
 800348e:	3301      	adds	r3, #1
 8003490:	f003 021f 	and.w	r2, r3, #31
 8003494:	4613      	mov	r3, r2
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	4413      	add	r3, r2
 800349a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800349c:	430b      	orrs	r3, r1
 800349e:	e07e      	b.n	800359e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d107      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x5c8>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	0e9b      	lsrs	r3, r3, #26
 80034b2:	3301      	adds	r3, #1
 80034b4:	069b      	lsls	r3, r3, #26
 80034b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034ba:	e015      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x5f4>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c4:	fa93 f3a3 	rbit	r3, r3
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80034ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034cc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80034ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80034d4:	2320      	movs	r3, #32
 80034d6:	e003      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80034d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034da:	fab3 f383 	clz	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	3301      	adds	r3, #1
 80034e2:	069b      	lsls	r3, r3, #26
 80034e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d109      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x614>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	0e9b      	lsrs	r3, r3, #26
 80034fa:	3301      	adds	r3, #1
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	2101      	movs	r1, #1
 8003502:	fa01 f303 	lsl.w	r3, r1, r3
 8003506:	e017      	b.n	8003538 <HAL_ADC_ConfigChannel+0x644>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	fa93 f3a3 	rbit	r3, r3
 8003514:	61fb      	str	r3, [r7, #28]
  return result;
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003520:	2320      	movs	r3, #32
 8003522:	e003      	b.n	800352c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	fab3 f383 	clz	r3, r3
 800352a:	b2db      	uxtb	r3, r3
 800352c:	3301      	adds	r3, #1
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	2101      	movs	r1, #1
 8003534:	fa01 f303 	lsl.w	r3, r1, r3
 8003538:	ea42 0103 	orr.w	r1, r2, r3
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10d      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x670>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	0e9b      	lsrs	r3, r3, #26
 800354e:	3301      	adds	r3, #1
 8003550:	f003 021f 	and.w	r2, r3, #31
 8003554:	4613      	mov	r3, r2
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	4413      	add	r3, r2
 800355a:	3b1e      	subs	r3, #30
 800355c:	051b      	lsls	r3, r3, #20
 800355e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003562:	e01b      	b.n	800359c <HAL_ADC_ConfigChannel+0x6a8>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	fa93 f3a3 	rbit	r3, r3
 8003570:	613b      	str	r3, [r7, #16]
  return result;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800357c:	2320      	movs	r3, #32
 800357e:	e003      	b.n	8003588 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	fab3 f383 	clz	r3, r3
 8003586:	b2db      	uxtb	r3, r3
 8003588:	3301      	adds	r3, #1
 800358a:	f003 021f 	and.w	r2, r3, #31
 800358e:	4613      	mov	r3, r2
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	4413      	add	r3, r2
 8003594:	3b1e      	subs	r3, #30
 8003596:	051b      	lsls	r3, r3, #20
 8003598:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800359c:	430b      	orrs	r3, r1
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	6892      	ldr	r2, [r2, #8]
 80035a2:	4619      	mov	r1, r3
 80035a4:	f7fe ff4b 	bl	800243e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <HAL_ADC_ConfigChannel+0x6e0>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 80be 	beq.w	8003732 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035be:	d004      	beq.n	80035ca <HAL_ADC_ConfigChannel+0x6d6>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a04      	ldr	r2, [pc, #16]	; (80035d8 <HAL_ADC_ConfigChannel+0x6e4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d10a      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x6ec>
 80035ca:	4b04      	ldr	r3, [pc, #16]	; (80035dc <HAL_ADC_ConfigChannel+0x6e8>)
 80035cc:	e009      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x6ee>
 80035ce:	bf00      	nop
 80035d0:	407f0000 	.word	0x407f0000
 80035d4:	80080000 	.word	0x80080000
 80035d8:	50000100 	.word	0x50000100
 80035dc:	50000300 	.word	0x50000300
 80035e0:	4b59      	ldr	r3, [pc, #356]	; (8003748 <HAL_ADC_ConfigChannel+0x854>)
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe fe40 	bl	8002268 <LL_ADC_GetCommonPathInternalCh>
 80035e8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a56      	ldr	r2, [pc, #344]	; (800374c <HAL_ADC_ConfigChannel+0x858>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d004      	beq.n	8003600 <HAL_ADC_ConfigChannel+0x70c>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a55      	ldr	r2, [pc, #340]	; (8003750 <HAL_ADC_ConfigChannel+0x85c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d13a      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003600:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003604:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d134      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003614:	d005      	beq.n	8003622 <HAL_ADC_ConfigChannel+0x72e>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a4e      	ldr	r2, [pc, #312]	; (8003754 <HAL_ADC_ConfigChannel+0x860>)
 800361c:	4293      	cmp	r3, r2
 800361e:	f040 8085 	bne.w	800372c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800362a:	d004      	beq.n	8003636 <HAL_ADC_ConfigChannel+0x742>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a49      	ldr	r2, [pc, #292]	; (8003758 <HAL_ADC_ConfigChannel+0x864>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d101      	bne.n	800363a <HAL_ADC_ConfigChannel+0x746>
 8003636:	4a49      	ldr	r2, [pc, #292]	; (800375c <HAL_ADC_ConfigChannel+0x868>)
 8003638:	e000      	b.n	800363c <HAL_ADC_ConfigChannel+0x748>
 800363a:	4a43      	ldr	r2, [pc, #268]	; (8003748 <HAL_ADC_ConfigChannel+0x854>)
 800363c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003640:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003644:	4619      	mov	r1, r3
 8003646:	4610      	mov	r0, r2
 8003648:	f7fe fdfb 	bl	8002242 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800364c:	4b44      	ldr	r3, [pc, #272]	; (8003760 <HAL_ADC_ConfigChannel+0x86c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	099b      	lsrs	r3, r3, #6
 8003652:	4a44      	ldr	r2, [pc, #272]	; (8003764 <HAL_ADC_ConfigChannel+0x870>)
 8003654:	fba2 2303 	umull	r2, r3, r2, r3
 8003658:	099b      	lsrs	r3, r3, #6
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	4613      	mov	r3, r2
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003666:	e002      	b.n	800366e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	3b01      	subs	r3, #1
 800366c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1f9      	bne.n	8003668 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003674:	e05a      	b.n	800372c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a3b      	ldr	r2, [pc, #236]	; (8003768 <HAL_ADC_ConfigChannel+0x874>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d125      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x7d8>
 8003680:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003684:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d11f      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a31      	ldr	r2, [pc, #196]	; (8003758 <HAL_ADC_ConfigChannel+0x864>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d104      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x7ac>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a34      	ldr	r2, [pc, #208]	; (800376c <HAL_ADC_ConfigChannel+0x878>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d047      	beq.n	8003730 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036a8:	d004      	beq.n	80036b4 <HAL_ADC_ConfigChannel+0x7c0>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a2a      	ldr	r2, [pc, #168]	; (8003758 <HAL_ADC_ConfigChannel+0x864>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d101      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x7c4>
 80036b4:	4a29      	ldr	r2, [pc, #164]	; (800375c <HAL_ADC_ConfigChannel+0x868>)
 80036b6:	e000      	b.n	80036ba <HAL_ADC_ConfigChannel+0x7c6>
 80036b8:	4a23      	ldr	r2, [pc, #140]	; (8003748 <HAL_ADC_ConfigChannel+0x854>)
 80036ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036c2:	4619      	mov	r1, r3
 80036c4:	4610      	mov	r0, r2
 80036c6:	f7fe fdbc 	bl	8002242 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036ca:	e031      	b.n	8003730 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a27      	ldr	r2, [pc, #156]	; (8003770 <HAL_ADC_ConfigChannel+0x87c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d12d      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d127      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1c      	ldr	r2, [pc, #112]	; (8003758 <HAL_ADC_ConfigChannel+0x864>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d022      	beq.n	8003732 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036f4:	d004      	beq.n	8003700 <HAL_ADC_ConfigChannel+0x80c>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a17      	ldr	r2, [pc, #92]	; (8003758 <HAL_ADC_ConfigChannel+0x864>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d101      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x810>
 8003700:	4a16      	ldr	r2, [pc, #88]	; (800375c <HAL_ADC_ConfigChannel+0x868>)
 8003702:	e000      	b.n	8003706 <HAL_ADC_ConfigChannel+0x812>
 8003704:	4a10      	ldr	r2, [pc, #64]	; (8003748 <HAL_ADC_ConfigChannel+0x854>)
 8003706:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800370a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800370e:	4619      	mov	r1, r3
 8003710:	4610      	mov	r0, r2
 8003712:	f7fe fd96 	bl	8002242 <LL_ADC_SetCommonPathInternalCh>
 8003716:	e00c      	b.n	8003732 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371c:	f043 0220 	orr.w	r2, r3, #32
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800372a:	e002      	b.n	8003732 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800372c:	bf00      	nop
 800372e:	e000      	b.n	8003732 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003730:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800373a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800373e:	4618      	mov	r0, r3
 8003740:	37d8      	adds	r7, #216	; 0xd8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	50000700 	.word	0x50000700
 800374c:	c3210000 	.word	0xc3210000
 8003750:	90c00010 	.word	0x90c00010
 8003754:	50000600 	.word	0x50000600
 8003758:	50000100 	.word	0x50000100
 800375c:	50000300 	.word	0x50000300
 8003760:	20000000 	.word	0x20000000
 8003764:	053e2d63 	.word	0x053e2d63
 8003768:	c7520000 	.word	0xc7520000
 800376c:	50000500 	.word	0x50000500
 8003770:	cb840000 	.word	0xcb840000

08003774 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800377e:	2300      	movs	r3, #0
 8003780:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7fe ff8a 	bl	80026a4 <LL_ADC_REG_IsConversionOngoing>
 8003790:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f7fe ffab 	bl	80026f2 <LL_ADC_INJ_IsConversionOngoing>
 800379c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d103      	bne.n	80037ac <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 8098 	beq.w	80038dc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d02a      	beq.n	8003810 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	7f5b      	ldrb	r3, [r3, #29]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d126      	bne.n	8003810 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	7f1b      	ldrb	r3, [r3, #28]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d122      	bne.n	8003810 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80037ca:	2301      	movs	r3, #1
 80037cc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80037ce:	e014      	b.n	80037fa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	4a45      	ldr	r2, [pc, #276]	; (80038e8 <ADC_ConversionStop+0x174>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d90d      	bls.n	80037f4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037dc:	f043 0210 	orr.w	r2, r3, #16
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e8:	f043 0201 	orr.w	r2, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e074      	b.n	80038de <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	3301      	adds	r3, #1
 80037f8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003804:	2b40      	cmp	r3, #64	; 0x40
 8003806:	d1e3      	bne.n	80037d0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2240      	movs	r2, #64	; 0x40
 800380e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	2b02      	cmp	r3, #2
 8003814:	d014      	beq.n	8003840 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe ff42 	bl	80026a4 <LL_ADC_REG_IsConversionOngoing>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00c      	beq.n	8003840 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7fe feff 	bl	800262e <LL_ADC_IsDisableOngoing>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d104      	bne.n	8003840 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f7fe ff1e 	bl	800267c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d014      	beq.n	8003870 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe ff51 	bl	80026f2 <LL_ADC_INJ_IsConversionOngoing>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00c      	beq.n	8003870 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f7fe fee7 	bl	800262e <LL_ADC_IsDisableOngoing>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d104      	bne.n	8003870 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f7fe ff2d 	bl	80026ca <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	2b02      	cmp	r3, #2
 8003874:	d005      	beq.n	8003882 <ADC_ConversionStop+0x10e>
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	2b03      	cmp	r3, #3
 800387a:	d105      	bne.n	8003888 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800387c:	230c      	movs	r3, #12
 800387e:	617b      	str	r3, [r7, #20]
        break;
 8003880:	e005      	b.n	800388e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003882:	2308      	movs	r3, #8
 8003884:	617b      	str	r3, [r7, #20]
        break;
 8003886:	e002      	b.n	800388e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003888:	2304      	movs	r3, #4
 800388a:	617b      	str	r3, [r7, #20]
        break;
 800388c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800388e:	f7fe fc4b 	bl	8002128 <HAL_GetTick>
 8003892:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003894:	e01b      	b.n	80038ce <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003896:	f7fe fc47 	bl	8002128 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b05      	cmp	r3, #5
 80038a2:	d914      	bls.n	80038ce <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00d      	beq.n	80038ce <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b6:	f043 0210 	orr.w	r2, r3, #16
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c2:	f043 0201 	orr.w	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e007      	b.n	80038de <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1dc      	bne.n	8003896 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3720      	adds	r7, #32
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	a33fffff 	.word	0xa33fffff

080038ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fe fe85 	bl	8002608 <LL_ADC_IsEnabled>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d14d      	bne.n	80039a0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	4b28      	ldr	r3, [pc, #160]	; (80039ac <ADC_Enable+0xc0>)
 800390c:	4013      	ands	r3, r2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00d      	beq.n	800392e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003916:	f043 0210 	orr.w	r2, r3, #16
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003922:	f043 0201 	orr.w	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e039      	b.n	80039a2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f7fe fe40 	bl	80025b8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003938:	f7fe fbf6 	bl	8002128 <HAL_GetTick>
 800393c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800393e:	e028      	b.n	8003992 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7fe fe5f 	bl	8002608 <LL_ADC_IsEnabled>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d104      	bne.n	800395a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f7fe fe2f 	bl	80025b8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800395a:	f7fe fbe5 	bl	8002128 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d914      	bls.n	8003992 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b01      	cmp	r3, #1
 8003974:	d00d      	beq.n	8003992 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397a:	f043 0210 	orr.w	r2, r3, #16
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003986:	f043 0201 	orr.w	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e007      	b.n	80039a2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b01      	cmp	r3, #1
 800399e:	d1cf      	bne.n	8003940 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	8000003f 	.word	0x8000003f

080039b0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fe fe36 	bl	800262e <LL_ADC_IsDisableOngoing>
 80039c2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fe fe1d 	bl	8002608 <LL_ADC_IsEnabled>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d047      	beq.n	8003a64 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d144      	bne.n	8003a64 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 030d 	and.w	r3, r3, #13
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d10c      	bne.n	8003a02 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fe fdf7 	bl	80025e0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2203      	movs	r2, #3
 80039f8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039fa:	f7fe fb95 	bl	8002128 <HAL_GetTick>
 80039fe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a00:	e029      	b.n	8003a56 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a06:	f043 0210 	orr.w	r2, r3, #16
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a12:	f043 0201 	orr.w	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e023      	b.n	8003a66 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a1e:	f7fe fb83 	bl	8002128 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d914      	bls.n	8003a56 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00d      	beq.n	8003a56 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3e:	f043 0210 	orr.w	r2, r3, #16
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a4a:	f043 0201 	orr.w	r2, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e007      	b.n	8003a66 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1dc      	bne.n	8003a1e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <LL_ADC_IsEnabled>:
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d101      	bne.n	8003a86 <LL_ADC_IsEnabled+0x18>
 8003a82:	2301      	movs	r3, #1
 8003a84:	e000      	b.n	8003a88 <LL_ADC_IsEnabled+0x1a>
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <LL_ADC_StartCalibration>:
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003aa6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	609a      	str	r2, [r3, #8]
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <LL_ADC_IsCalibrationOnGoing>:
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ada:	d101      	bne.n	8003ae0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003adc:	2301      	movs	r3, #1
 8003ade:	e000      	b.n	8003ae2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <LL_ADC_REG_IsConversionOngoing>:
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d101      	bne.n	8003b06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_ADCEx_Calibration_Start+0x1c>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e04d      	b.n	8003bcc <HAL_ADCEx_Calibration_Start+0xb8>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7ff ff39 	bl	80039b0 <ADC_Disable>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d136      	bne.n	8003bb6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b50:	f023 0302 	bic.w	r3, r3, #2
 8003b54:	f043 0202 	orr.w	r2, r3, #2
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6839      	ldr	r1, [r7, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff ff96 	bl	8003a94 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b68:	e014      	b.n	8003b94 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	4a18      	ldr	r2, [pc, #96]	; (8003bd4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d90d      	bls.n	8003b94 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7c:	f023 0312 	bic.w	r3, r3, #18
 8003b80:	f043 0210 	orr.w	r2, r3, #16
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e01b      	b.n	8003bcc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff ff94 	bl	8003ac6 <LL_ADC_IsCalibrationOnGoing>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1e2      	bne.n	8003b6a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba8:	f023 0303 	bic.w	r3, r3, #3
 8003bac:	f043 0201 	orr.w	r2, r3, #1
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bb4:	e005      	b.n	8003bc2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bba:	f043 0210 	orr.w	r2, r3, #16
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	0004de01 	.word	0x0004de01

08003bd8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003bd8:	b590      	push	{r4, r7, lr}
 8003bda:	b0a1      	sub	sp, #132	; 0x84
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e0e7      	b.n	8003dc6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003bfe:	2300      	movs	r3, #0
 8003c00:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003c02:	2300      	movs	r3, #0
 8003c04:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c0e:	d102      	bne.n	8003c16 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003c10:	4b6f      	ldr	r3, [pc, #444]	; (8003dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c12:	60bb      	str	r3, [r7, #8]
 8003c14:	e009      	b.n	8003c2a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a6e      	ldr	r2, [pc, #440]	; (8003dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d102      	bne.n	8003c26 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003c20:	4b6d      	ldr	r3, [pc, #436]	; (8003dd8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003c22:	60bb      	str	r3, [r7, #8]
 8003c24:	e001      	b.n	8003c2a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003c26:	2300      	movs	r3, #0
 8003c28:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10b      	bne.n	8003c48 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c34:	f043 0220 	orr.w	r2, r3, #32
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e0be      	b.n	8003dc6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff ff4f 	bl	8003aee <LL_ADC_REG_IsConversionOngoing>
 8003c50:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff ff49 	bl	8003aee <LL_ADC_REG_IsConversionOngoing>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f040 80a0 	bne.w	8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f040 809c 	bne.w	8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c74:	d004      	beq.n	8003c80 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a55      	ldr	r2, [pc, #340]	; (8003dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d101      	bne.n	8003c84 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003c80:	4b56      	ldr	r3, [pc, #344]	; (8003ddc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003c82:	e000      	b.n	8003c86 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003c84:	4b56      	ldr	r3, [pc, #344]	; (8003de0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003c86:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d04b      	beq.n	8003d28 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	6859      	ldr	r1, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ca2:	035b      	lsls	r3, r3, #13
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003caa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cb4:	d004      	beq.n	8003cc0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a45      	ldr	r2, [pc, #276]	; (8003dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d10f      	bne.n	8003ce0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003cc0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003cc4:	f7ff fed3 	bl	8003a6e <LL_ADC_IsEnabled>
 8003cc8:	4604      	mov	r4, r0
 8003cca:	4841      	ldr	r0, [pc, #260]	; (8003dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ccc:	f7ff fecf 	bl	8003a6e <LL_ADC_IsEnabled>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	4323      	orrs	r3, r4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bf0c      	ite	eq
 8003cd8:	2301      	moveq	r3, #1
 8003cda:	2300      	movne	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	e012      	b.n	8003d06 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003ce0:	483c      	ldr	r0, [pc, #240]	; (8003dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ce2:	f7ff fec4 	bl	8003a6e <LL_ADC_IsEnabled>
 8003ce6:	4604      	mov	r4, r0
 8003ce8:	483b      	ldr	r0, [pc, #236]	; (8003dd8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003cea:	f7ff fec0 	bl	8003a6e <LL_ADC_IsEnabled>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	431c      	orrs	r4, r3
 8003cf2:	483c      	ldr	r0, [pc, #240]	; (8003de4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003cf4:	f7ff febb 	bl	8003a6e <LL_ADC_IsEnabled>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	4323      	orrs	r3, r4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d056      	beq.n	8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003d12:	f023 030f 	bic.w	r3, r3, #15
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	6811      	ldr	r1, [r2, #0]
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	6892      	ldr	r2, [r2, #8]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	431a      	orrs	r2, r3
 8003d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d24:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d26:	e047      	b.n	8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d32:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d3c:	d004      	beq.n	8003d48 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a23      	ldr	r2, [pc, #140]	; (8003dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d10f      	bne.n	8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003d48:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003d4c:	f7ff fe8f 	bl	8003a6e <LL_ADC_IsEnabled>
 8003d50:	4604      	mov	r4, r0
 8003d52:	481f      	ldr	r0, [pc, #124]	; (8003dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d54:	f7ff fe8b 	bl	8003a6e <LL_ADC_IsEnabled>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	4323      	orrs	r3, r4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bf0c      	ite	eq
 8003d60:	2301      	moveq	r3, #1
 8003d62:	2300      	movne	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	e012      	b.n	8003d8e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003d68:	481a      	ldr	r0, [pc, #104]	; (8003dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d6a:	f7ff fe80 	bl	8003a6e <LL_ADC_IsEnabled>
 8003d6e:	4604      	mov	r4, r0
 8003d70:	4819      	ldr	r0, [pc, #100]	; (8003dd8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003d72:	f7ff fe7c 	bl	8003a6e <LL_ADC_IsEnabled>
 8003d76:	4603      	mov	r3, r0
 8003d78:	431c      	orrs	r4, r3
 8003d7a:	481a      	ldr	r0, [pc, #104]	; (8003de4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003d7c:	f7ff fe77 	bl	8003a6e <LL_ADC_IsEnabled>
 8003d80:	4603      	mov	r3, r0
 8003d82:	4323      	orrs	r3, r4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	bf0c      	ite	eq
 8003d88:	2301      	moveq	r3, #1
 8003d8a:	2300      	movne	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d012      	beq.n	8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003d9a:	f023 030f 	bic.w	r3, r3, #15
 8003d9e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003da0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003da2:	e009      	b.n	8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da8:	f043 0220 	orr.w	r2, r3, #32
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003db6:	e000      	b.n	8003dba <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003db8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003dc2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3784      	adds	r7, #132	; 0x84
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd90      	pop	{r4, r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	50000100 	.word	0x50000100
 8003dd4:	50000400 	.word	0x50000400
 8003dd8:	50000500 	.word	0x50000500
 8003ddc:	50000300 	.word	0x50000300
 8003de0:	50000700 	.word	0x50000700
 8003de4:	50000600 	.word	0x50000600

08003de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003df8:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <__NVIC_SetPriorityGrouping+0x44>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e04:	4013      	ands	r3, r2
 8003e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e1a:	4a04      	ldr	r2, [pc, #16]	; (8003e2c <__NVIC_SetPriorityGrouping+0x44>)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	60d3      	str	r3, [r2, #12]
}
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	e000ed00 	.word	0xe000ed00

08003e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e34:	4b04      	ldr	r3, [pc, #16]	; (8003e48 <__NVIC_GetPriorityGrouping+0x18>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	0a1b      	lsrs	r3, r3, #8
 8003e3a:	f003 0307 	and.w	r3, r3, #7
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	e000ed00 	.word	0xe000ed00

08003e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	6039      	str	r1, [r7, #0]
 8003e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	db0a      	blt.n	8003e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	490c      	ldr	r1, [pc, #48]	; (8003e98 <__NVIC_SetPriority+0x4c>)
 8003e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6a:	0112      	lsls	r2, r2, #4
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	440b      	add	r3, r1
 8003e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e74:	e00a      	b.n	8003e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	4908      	ldr	r1, [pc, #32]	; (8003e9c <__NVIC_SetPriority+0x50>)
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	3b04      	subs	r3, #4
 8003e84:	0112      	lsls	r2, r2, #4
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	440b      	add	r3, r1
 8003e8a:	761a      	strb	r2, [r3, #24]
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	e000e100 	.word	0xe000e100
 8003e9c:	e000ed00 	.word	0xe000ed00

08003ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b089      	sub	sp, #36	; 0x24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f1c3 0307 	rsb	r3, r3, #7
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	bf28      	it	cs
 8003ebe:	2304      	movcs	r3, #4
 8003ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	2b06      	cmp	r3, #6
 8003ec8:	d902      	bls.n	8003ed0 <NVIC_EncodePriority+0x30>
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	3b03      	subs	r3, #3
 8003ece:	e000      	b.n	8003ed2 <NVIC_EncodePriority+0x32>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43da      	mvns	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	401a      	ands	r2, r3
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef2:	43d9      	mvns	r1, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef8:	4313      	orrs	r3, r2
         );
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3724      	adds	r7, #36	; 0x24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f18:	d301      	bcc.n	8003f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e00f      	b.n	8003f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f1e:	4a0a      	ldr	r2, [pc, #40]	; (8003f48 <SysTick_Config+0x40>)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f26:	210f      	movs	r1, #15
 8003f28:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2c:	f7ff ff8e 	bl	8003e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <SysTick_Config+0x40>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f36:	4b04      	ldr	r3, [pc, #16]	; (8003f48 <SysTick_Config+0x40>)
 8003f38:	2207      	movs	r2, #7
 8003f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	e000e010 	.word	0xe000e010

08003f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff ff47 	bl	8003de8 <__NVIC_SetPriorityGrouping>
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b086      	sub	sp, #24
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	4603      	mov	r3, r0
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
 8003f6e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f70:	f7ff ff5e 	bl	8003e30 <__NVIC_GetPriorityGrouping>
 8003f74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	68b9      	ldr	r1, [r7, #8]
 8003f7a:	6978      	ldr	r0, [r7, #20]
 8003f7c:	f7ff ff90 	bl	8003ea0 <NVIC_EncodePriority>
 8003f80:	4602      	mov	r2, r0
 8003f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f86:	4611      	mov	r1, r2
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff ff5f 	bl	8003e4c <__NVIC_SetPriority>
}
 8003f8e:	bf00      	nop
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b082      	sub	sp, #8
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7ff ffb2 	bl	8003f08 <SysTick_Config>
 8003fa4:	4603      	mov	r3, r0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e147      	b.n	8004252 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d106      	bne.n	8003fdc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7fd feaa 	bl	8001d30 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699a      	ldr	r2, [r3, #24]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0210 	bic.w	r2, r2, #16
 8003fea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fec:	f7fe f89c 	bl	8002128 <HAL_GetTick>
 8003ff0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003ff2:	e012      	b.n	800401a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003ff4:	f7fe f898 	bl	8002128 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b0a      	cmp	r3, #10
 8004000:	d90b      	bls.n	800401a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004006:	f043 0201 	orr.w	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2203      	movs	r2, #3
 8004012:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e11b      	b.n	8004252 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b08      	cmp	r3, #8
 8004026:	d0e5      	beq.n	8003ff4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699a      	ldr	r2, [r3, #24]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004038:	f7fe f876 	bl	8002128 <HAL_GetTick>
 800403c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800403e:	e012      	b.n	8004066 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004040:	f7fe f872 	bl	8002128 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b0a      	cmp	r3, #10
 800404c:	d90b      	bls.n	8004066 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004052:	f043 0201 	orr.w	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2203      	movs	r2, #3
 800405e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e0f5      	b.n	8004252 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0e5      	beq.n	8004040 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699a      	ldr	r2, [r3, #24]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0202 	orr.w	r2, r2, #2
 8004082:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a74      	ldr	r2, [pc, #464]	; (800425c <HAL_FDCAN_Init+0x2ac>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d103      	bne.n	8004096 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800408e:	4a74      	ldr	r2, [pc, #464]	; (8004260 <HAL_FDCAN_Init+0x2b0>)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	7c1b      	ldrb	r3, [r3, #16]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d108      	bne.n	80040b0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	699a      	ldr	r2, [r3, #24]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ac:	619a      	str	r2, [r3, #24]
 80040ae:	e007      	b.n	80040c0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699a      	ldr	r2, [r3, #24]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040be:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	7c5b      	ldrb	r3, [r3, #17]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d108      	bne.n	80040da <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040d6:	619a      	str	r2, [r3, #24]
 80040d8:	e007      	b.n	80040ea <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699a      	ldr	r2, [r3, #24]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80040e8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	7c9b      	ldrb	r3, [r3, #18]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d108      	bne.n	8004104 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	699a      	ldr	r2, [r3, #24]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004100:	619a      	str	r2, [r3, #24]
 8004102:	e007      	b.n	8004114 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699a      	ldr	r2, [r3, #24]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004112:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	699a      	ldr	r2, [r3, #24]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004138:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0210 	bic.w	r2, r2, #16
 8004148:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d108      	bne.n	8004164 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699a      	ldr	r2, [r3, #24]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0204 	orr.w	r2, r2, #4
 8004160:	619a      	str	r2, [r3, #24]
 8004162:	e02c      	b.n	80041be <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d028      	beq.n	80041be <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d01c      	beq.n	80041ae <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699a      	ldr	r2, [r3, #24]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004182:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691a      	ldr	r2, [r3, #16]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0210 	orr.w	r2, r2, #16
 8004192:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2b03      	cmp	r3, #3
 800419a:	d110      	bne.n	80041be <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699a      	ldr	r2, [r3, #24]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0220 	orr.w	r2, r2, #32
 80041aa:	619a      	str	r2, [r3, #24]
 80041ac:	e007      	b.n	80041be <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	699a      	ldr	r2, [r3, #24]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0220 	orr.w	r2, r2, #32
 80041bc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80041ce:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80041d6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	3b01      	subs	r3, #1
 80041e0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80041e6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80041e8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041f2:	d115      	bne.n	8004220 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fe:	3b01      	subs	r3, #1
 8004200:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004202:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	3b01      	subs	r3, #1
 800420a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800420c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	3b01      	subs	r3, #1
 8004216:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800421c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800421e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f814 	bl	8004264 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40006400 	.word	0x40006400
 8004260:	40006500 	.word	0x40006500

08004264 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800426c:	4b30      	ldr	r3, [pc, #192]	; (8004330 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800426e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a2f      	ldr	r2, [pc, #188]	; (8004334 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d103      	bne.n	8004282 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004280:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a2c      	ldr	r2, [pc, #176]	; (8004338 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d103      	bne.n	8004294 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8004292:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042a2:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042aa:	041a      	lsls	r2, r3, #16
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042c8:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d0:	061a      	lsls	r2, r3, #24
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	e005      	b.n	8004316 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3304      	adds	r3, #4
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	429a      	cmp	r2, r3
 8004320:	d3f3      	bcc.n	800430a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8004322:	bf00      	nop
 8004324:	bf00      	nop
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	4000a400 	.word	0x4000a400
 8004334:	40006800 	.word	0x40006800
 8004338:	40006c00 	.word	0x40006c00

0800433c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800434a:	e15a      	b.n	8004602 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	2101      	movs	r1, #1
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	fa01 f303 	lsl.w	r3, r1, r3
 8004358:	4013      	ands	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 814c 	beq.w	80045fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	2b01      	cmp	r3, #1
 800436e:	d005      	beq.n	800437c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004378:	2b02      	cmp	r3, #2
 800437a:	d130      	bne.n	80043de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	2203      	movs	r2, #3
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4013      	ands	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68da      	ldr	r2, [r3, #12]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043b2:	2201      	movs	r2, #1
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	43db      	mvns	r3, r3
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4013      	ands	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	091b      	lsrs	r3, r3, #4
 80043c8:	f003 0201 	and.w	r2, r3, #1
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	2b03      	cmp	r3, #3
 80043e8:	d017      	beq.n	800441a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	2203      	movs	r2, #3
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	43db      	mvns	r3, r3
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4013      	ands	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d123      	bne.n	800446e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	08da      	lsrs	r2, r3, #3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3208      	adds	r2, #8
 800442e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004432:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	220f      	movs	r2, #15
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	43db      	mvns	r3, r3
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4013      	ands	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	691a      	ldr	r2, [r3, #16]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	4313      	orrs	r3, r2
 800445e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	08da      	lsrs	r2, r3, #3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3208      	adds	r2, #8
 8004468:	6939      	ldr	r1, [r7, #16]
 800446a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	2203      	movs	r2, #3
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	43db      	mvns	r3, r3
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4013      	ands	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f003 0203 	and.w	r2, r3, #3
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80a6 	beq.w	80045fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044b0:	4b5b      	ldr	r3, [pc, #364]	; (8004620 <HAL_GPIO_Init+0x2e4>)
 80044b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b4:	4a5a      	ldr	r2, [pc, #360]	; (8004620 <HAL_GPIO_Init+0x2e4>)
 80044b6:	f043 0301 	orr.w	r3, r3, #1
 80044ba:	6613      	str	r3, [r2, #96]	; 0x60
 80044bc:	4b58      	ldr	r3, [pc, #352]	; (8004620 <HAL_GPIO_Init+0x2e4>)
 80044be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044c8:	4a56      	ldr	r2, [pc, #344]	; (8004624 <HAL_GPIO_Init+0x2e8>)
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	089b      	lsrs	r3, r3, #2
 80044ce:	3302      	adds	r3, #2
 80044d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f003 0303 	and.w	r3, r3, #3
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	220f      	movs	r2, #15
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	43db      	mvns	r3, r3
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4013      	ands	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80044f2:	d01f      	beq.n	8004534 <HAL_GPIO_Init+0x1f8>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a4c      	ldr	r2, [pc, #304]	; (8004628 <HAL_GPIO_Init+0x2ec>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d019      	beq.n	8004530 <HAL_GPIO_Init+0x1f4>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a4b      	ldr	r2, [pc, #300]	; (800462c <HAL_GPIO_Init+0x2f0>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d013      	beq.n	800452c <HAL_GPIO_Init+0x1f0>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a4a      	ldr	r2, [pc, #296]	; (8004630 <HAL_GPIO_Init+0x2f4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00d      	beq.n	8004528 <HAL_GPIO_Init+0x1ec>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a49      	ldr	r2, [pc, #292]	; (8004634 <HAL_GPIO_Init+0x2f8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d007      	beq.n	8004524 <HAL_GPIO_Init+0x1e8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a48      	ldr	r2, [pc, #288]	; (8004638 <HAL_GPIO_Init+0x2fc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d101      	bne.n	8004520 <HAL_GPIO_Init+0x1e4>
 800451c:	2305      	movs	r3, #5
 800451e:	e00a      	b.n	8004536 <HAL_GPIO_Init+0x1fa>
 8004520:	2306      	movs	r3, #6
 8004522:	e008      	b.n	8004536 <HAL_GPIO_Init+0x1fa>
 8004524:	2304      	movs	r3, #4
 8004526:	e006      	b.n	8004536 <HAL_GPIO_Init+0x1fa>
 8004528:	2303      	movs	r3, #3
 800452a:	e004      	b.n	8004536 <HAL_GPIO_Init+0x1fa>
 800452c:	2302      	movs	r3, #2
 800452e:	e002      	b.n	8004536 <HAL_GPIO_Init+0x1fa>
 8004530:	2301      	movs	r3, #1
 8004532:	e000      	b.n	8004536 <HAL_GPIO_Init+0x1fa>
 8004534:	2300      	movs	r3, #0
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	f002 0203 	and.w	r2, r2, #3
 800453c:	0092      	lsls	r2, r2, #2
 800453e:	4093      	lsls	r3, r2
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4313      	orrs	r3, r2
 8004544:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004546:	4937      	ldr	r1, [pc, #220]	; (8004624 <HAL_GPIO_Init+0x2e8>)
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	089b      	lsrs	r3, r3, #2
 800454c:	3302      	adds	r3, #2
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004554:	4b39      	ldr	r3, [pc, #228]	; (800463c <HAL_GPIO_Init+0x300>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	43db      	mvns	r3, r3
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4013      	ands	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4313      	orrs	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004578:	4a30      	ldr	r2, [pc, #192]	; (800463c <HAL_GPIO_Init+0x300>)
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800457e:	4b2f      	ldr	r3, [pc, #188]	; (800463c <HAL_GPIO_Init+0x300>)
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	43db      	mvns	r3, r3
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4013      	ands	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4313      	orrs	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045a2:	4a26      	ldr	r2, [pc, #152]	; (800463c <HAL_GPIO_Init+0x300>)
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80045a8:	4b24      	ldr	r3, [pc, #144]	; (800463c <HAL_GPIO_Init+0x300>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	43db      	mvns	r3, r3
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4013      	ands	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045cc:	4a1b      	ldr	r2, [pc, #108]	; (800463c <HAL_GPIO_Init+0x300>)
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80045d2:	4b1a      	ldr	r3, [pc, #104]	; (800463c <HAL_GPIO_Init+0x300>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	43db      	mvns	r3, r3
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4013      	ands	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045f6:	4a11      	ldr	r2, [pc, #68]	; (800463c <HAL_GPIO_Init+0x300>)
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	3301      	adds	r3, #1
 8004600:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	fa22 f303 	lsr.w	r3, r2, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	f47f ae9d 	bne.w	800434c <HAL_GPIO_Init+0x10>
  }
}
 8004612:	bf00      	nop
 8004614:	bf00      	nop
 8004616:	371c      	adds	r7, #28
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	40021000 	.word	0x40021000
 8004624:	40010000 	.word	0x40010000
 8004628:	48000400 	.word	0x48000400
 800462c:	48000800 	.word	0x48000800
 8004630:	48000c00 	.word	0x48000c00
 8004634:	48001000 	.word	0x48001000
 8004638:	48001400 	.word	0x48001400
 800463c:	40010400 	.word	0x40010400

08004640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	807b      	strh	r3, [r7, #2]
 800464c:	4613      	mov	r3, r2
 800464e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004650:	787b      	ldrb	r3, [r7, #1]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004656:	887a      	ldrh	r2, [r7, #2]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800465c:	e002      	b.n	8004664 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800465e:	887a      	ldrh	r2, [r7, #2]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d141      	bne.n	8004702 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800467e:	4b4b      	ldr	r3, [pc, #300]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800468a:	d131      	bne.n	80046f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800468c:	4b47      	ldr	r3, [pc, #284]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800468e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004692:	4a46      	ldr	r2, [pc, #280]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004698:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800469c:	4b43      	ldr	r3, [pc, #268]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046a4:	4a41      	ldr	r2, [pc, #260]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046ac:	4b40      	ldr	r3, [pc, #256]	; (80047b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2232      	movs	r2, #50	; 0x32
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
 80046b6:	4a3f      	ldr	r2, [pc, #252]	; (80047b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046b8:	fba2 2303 	umull	r2, r3, r2, r3
 80046bc:	0c9b      	lsrs	r3, r3, #18
 80046be:	3301      	adds	r3, #1
 80046c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046c2:	e002      	b.n	80046ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046ca:	4b38      	ldr	r3, [pc, #224]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d6:	d102      	bne.n	80046de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f2      	bne.n	80046c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046de:	4b33      	ldr	r3, [pc, #204]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ea:	d158      	bne.n	800479e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e057      	b.n	80047a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046f0:	4b2e      	ldr	r3, [pc, #184]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046f6:	4a2d      	ldr	r2, [pc, #180]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004700:	e04d      	b.n	800479e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004708:	d141      	bne.n	800478e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800470a:	4b28      	ldr	r3, [pc, #160]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004716:	d131      	bne.n	800477c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004718:	4b24      	ldr	r3, [pc, #144]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800471e:	4a23      	ldr	r2, [pc, #140]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004724:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004728:	4b20      	ldr	r3, [pc, #128]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004730:	4a1e      	ldr	r2, [pc, #120]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004736:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004738:	4b1d      	ldr	r3, [pc, #116]	; (80047b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2232      	movs	r2, #50	; 0x32
 800473e:	fb02 f303 	mul.w	r3, r2, r3
 8004742:	4a1c      	ldr	r2, [pc, #112]	; (80047b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004744:	fba2 2303 	umull	r2, r3, r2, r3
 8004748:	0c9b      	lsrs	r3, r3, #18
 800474a:	3301      	adds	r3, #1
 800474c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800474e:	e002      	b.n	8004756 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3b01      	subs	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004756:	4b15      	ldr	r3, [pc, #84]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800475e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004762:	d102      	bne.n	800476a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f2      	bne.n	8004750 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800476a:	4b10      	ldr	r3, [pc, #64]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004776:	d112      	bne.n	800479e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e011      	b.n	80047a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800477c:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004782:	4a0a      	ldr	r2, [pc, #40]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004788:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800478c:	e007      	b.n	800479e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800478e:	4b07      	ldr	r3, [pc, #28]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004796:	4a05      	ldr	r2, [pc, #20]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004798:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800479c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	40007000 	.word	0x40007000
 80047b0:	20000000 	.word	0x20000000
 80047b4:	431bde83 	.word	0x431bde83

080047b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80047bc:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	4a04      	ldr	r2, [pc, #16]	; (80047d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047c6:	6093      	str	r3, [r2, #8]
}
 80047c8:	bf00      	nop
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40007000 	.word	0x40007000

080047d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e306      	b.n	8004df8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d075      	beq.n	80048e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047f6:	4b97      	ldr	r3, [pc, #604]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 030c 	and.w	r3, r3, #12
 80047fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004800:	4b94      	ldr	r3, [pc, #592]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f003 0303 	and.w	r3, r3, #3
 8004808:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2b0c      	cmp	r3, #12
 800480e:	d102      	bne.n	8004816 <HAL_RCC_OscConfig+0x3e>
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2b03      	cmp	r3, #3
 8004814:	d002      	beq.n	800481c <HAL_RCC_OscConfig+0x44>
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b08      	cmp	r3, #8
 800481a:	d10b      	bne.n	8004834 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800481c:	4b8d      	ldr	r3, [pc, #564]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d05b      	beq.n	80048e0 <HAL_RCC_OscConfig+0x108>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d157      	bne.n	80048e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e2e1      	b.n	8004df8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800483c:	d106      	bne.n	800484c <HAL_RCC_OscConfig+0x74>
 800483e:	4b85      	ldr	r3, [pc, #532]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a84      	ldr	r2, [pc, #528]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	e01d      	b.n	8004888 <HAL_RCC_OscConfig+0xb0>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004854:	d10c      	bne.n	8004870 <HAL_RCC_OscConfig+0x98>
 8004856:	4b7f      	ldr	r3, [pc, #508]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a7e      	ldr	r2, [pc, #504]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 800485c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	4b7c      	ldr	r3, [pc, #496]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a7b      	ldr	r2, [pc, #492]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	e00b      	b.n	8004888 <HAL_RCC_OscConfig+0xb0>
 8004870:	4b78      	ldr	r3, [pc, #480]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a77      	ldr	r2, [pc, #476]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	4b75      	ldr	r3, [pc, #468]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a74      	ldr	r2, [pc, #464]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d013      	beq.n	80048b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004890:	f7fd fc4a 	bl	8002128 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004898:	f7fd fc46 	bl	8002128 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b64      	cmp	r3, #100	; 0x64
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e2a6      	b.n	8004df8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048aa:	4b6a      	ldr	r3, [pc, #424]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCC_OscConfig+0xc0>
 80048b6:	e014      	b.n	80048e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b8:	f7fd fc36 	bl	8002128 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048c0:	f7fd fc32 	bl	8002128 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b64      	cmp	r3, #100	; 0x64
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e292      	b.n	8004df8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048d2:	4b60      	ldr	r3, [pc, #384]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f0      	bne.n	80048c0 <HAL_RCC_OscConfig+0xe8>
 80048de:	e000      	b.n	80048e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d075      	beq.n	80049da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ee:	4b59      	ldr	r3, [pc, #356]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 030c 	and.w	r3, r3, #12
 80048f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048f8:	4b56      	ldr	r3, [pc, #344]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	2b0c      	cmp	r3, #12
 8004906:	d102      	bne.n	800490e <HAL_RCC_OscConfig+0x136>
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2b02      	cmp	r3, #2
 800490c:	d002      	beq.n	8004914 <HAL_RCC_OscConfig+0x13c>
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	2b04      	cmp	r3, #4
 8004912:	d11f      	bne.n	8004954 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004914:	4b4f      	ldr	r3, [pc, #316]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800491c:	2b00      	cmp	r3, #0
 800491e:	d005      	beq.n	800492c <HAL_RCC_OscConfig+0x154>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e265      	b.n	8004df8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800492c:	4b49      	ldr	r3, [pc, #292]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	061b      	lsls	r3, r3, #24
 800493a:	4946      	ldr	r1, [pc, #280]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 800493c:	4313      	orrs	r3, r2
 800493e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004940:	4b45      	ldr	r3, [pc, #276]	; (8004a58 <HAL_RCC_OscConfig+0x280>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4618      	mov	r0, r3
 8004946:	f7fd fba3 	bl	8002090 <HAL_InitTick>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d043      	beq.n	80049d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e251      	b.n	8004df8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d023      	beq.n	80049a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800495c:	4b3d      	ldr	r3, [pc, #244]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a3c      	ldr	r2, [pc, #240]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004968:	f7fd fbde 	bl	8002128 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004970:	f7fd fbda 	bl	8002128 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e23a      	b.n	8004df8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004982:	4b34      	ldr	r3, [pc, #208]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0f0      	beq.n	8004970 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498e:	4b31      	ldr	r3, [pc, #196]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	061b      	lsls	r3, r3, #24
 800499c:	492d      	ldr	r1, [pc, #180]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	604b      	str	r3, [r1, #4]
 80049a2:	e01a      	b.n	80049da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049a4:	4b2b      	ldr	r3, [pc, #172]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a2a      	ldr	r2, [pc, #168]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 80049aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b0:	f7fd fbba 	bl	8002128 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049b8:	f7fd fbb6 	bl	8002128 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e216      	b.n	8004df8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049ca:	4b22      	ldr	r3, [pc, #136]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1f0      	bne.n	80049b8 <HAL_RCC_OscConfig+0x1e0>
 80049d6:	e000      	b.n	80049da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d041      	beq.n	8004a6a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d01c      	beq.n	8004a28 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ee:	4b19      	ldr	r3, [pc, #100]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 80049f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049f4:	4a17      	ldr	r2, [pc, #92]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 80049f6:	f043 0301 	orr.w	r3, r3, #1
 80049fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fe:	f7fd fb93 	bl	8002128 <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a06:	f7fd fb8f 	bl	8002128 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e1ef      	b.n	8004df8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a18:	4b0e      	ldr	r3, [pc, #56]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0ef      	beq.n	8004a06 <HAL_RCC_OscConfig+0x22e>
 8004a26:	e020      	b.n	8004a6a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a28:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a2e:	4a09      	ldr	r2, [pc, #36]	; (8004a54 <HAL_RCC_OscConfig+0x27c>)
 8004a30:	f023 0301 	bic.w	r3, r3, #1
 8004a34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a38:	f7fd fb76 	bl	8002128 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a3e:	e00d      	b.n	8004a5c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a40:	f7fd fb72 	bl	8002128 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d906      	bls.n	8004a5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e1d2      	b.n	8004df8 <HAL_RCC_OscConfig+0x620>
 8004a52:	bf00      	nop
 8004a54:	40021000 	.word	0x40021000
 8004a58:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a5c:	4b8c      	ldr	r3, [pc, #560]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1ea      	bne.n	8004a40 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 80a6 	beq.w	8004bc4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a7c:	4b84      	ldr	r3, [pc, #528]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_RCC_OscConfig+0x2b4>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e000      	b.n	8004a8e <HAL_RCC_OscConfig+0x2b6>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00d      	beq.n	8004aae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a92:	4b7f      	ldr	r3, [pc, #508]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a96:	4a7e      	ldr	r2, [pc, #504]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8004a9e:	4b7c      	ldr	r3, [pc, #496]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aae:	4b79      	ldr	r3, [pc, #484]	; (8004c94 <HAL_RCC_OscConfig+0x4bc>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d118      	bne.n	8004aec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004aba:	4b76      	ldr	r3, [pc, #472]	; (8004c94 <HAL_RCC_OscConfig+0x4bc>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a75      	ldr	r2, [pc, #468]	; (8004c94 <HAL_RCC_OscConfig+0x4bc>)
 8004ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ac6:	f7fd fb2f 	bl	8002128 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ace:	f7fd fb2b 	bl	8002128 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e18b      	b.n	8004df8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ae0:	4b6c      	ldr	r3, [pc, #432]	; (8004c94 <HAL_RCC_OscConfig+0x4bc>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0f0      	beq.n	8004ace <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d108      	bne.n	8004b06 <HAL_RCC_OscConfig+0x32e>
 8004af4:	4b66      	ldr	r3, [pc, #408]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afa:	4a65      	ldr	r2, [pc, #404]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004afc:	f043 0301 	orr.w	r3, r3, #1
 8004b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b04:	e024      	b.n	8004b50 <HAL_RCC_OscConfig+0x378>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2b05      	cmp	r3, #5
 8004b0c:	d110      	bne.n	8004b30 <HAL_RCC_OscConfig+0x358>
 8004b0e:	4b60      	ldr	r3, [pc, #384]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b14:	4a5e      	ldr	r2, [pc, #376]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004b16:	f043 0304 	orr.w	r3, r3, #4
 8004b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b1e:	4b5c      	ldr	r3, [pc, #368]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b24:	4a5a      	ldr	r2, [pc, #360]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004b26:	f043 0301 	orr.w	r3, r3, #1
 8004b2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b2e:	e00f      	b.n	8004b50 <HAL_RCC_OscConfig+0x378>
 8004b30:	4b57      	ldr	r3, [pc, #348]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b36:	4a56      	ldr	r2, [pc, #344]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004b38:	f023 0301 	bic.w	r3, r3, #1
 8004b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b40:	4b53      	ldr	r3, [pc, #332]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b46:	4a52      	ldr	r2, [pc, #328]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004b48:	f023 0304 	bic.w	r3, r3, #4
 8004b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d016      	beq.n	8004b86 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b58:	f7fd fae6 	bl	8002128 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b5e:	e00a      	b.n	8004b76 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b60:	f7fd fae2 	bl	8002128 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e140      	b.n	8004df8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b76:	4b46      	ldr	r3, [pc, #280]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0ed      	beq.n	8004b60 <HAL_RCC_OscConfig+0x388>
 8004b84:	e015      	b.n	8004bb2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b86:	f7fd facf 	bl	8002128 <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b8c:	e00a      	b.n	8004ba4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b8e:	f7fd facb 	bl	8002128 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e129      	b.n	8004df8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ba4:	4b3a      	ldr	r3, [pc, #232]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1ed      	bne.n	8004b8e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bb2:	7ffb      	ldrb	r3, [r7, #31]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d105      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bb8:	4b35      	ldr	r3, [pc, #212]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bbc:	4a34      	ldr	r2, [pc, #208]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004bbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bc2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0320 	and.w	r3, r3, #32
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d03c      	beq.n	8004c4a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01c      	beq.n	8004c12 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bd8:	4b2d      	ldr	r3, [pc, #180]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bde:	4a2c      	ldr	r2, [pc, #176]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004be0:	f043 0301 	orr.w	r3, r3, #1
 8004be4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be8:	f7fd fa9e 	bl	8002128 <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bf0:	f7fd fa9a 	bl	8002128 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e0fa      	b.n	8004df8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c02:	4b23      	ldr	r3, [pc, #140]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004c04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0ef      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x418>
 8004c10:	e01b      	b.n	8004c4a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c12:	4b1f      	ldr	r3, [pc, #124]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004c14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c18:	4a1d      	ldr	r2, [pc, #116]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004c1a:	f023 0301 	bic.w	r3, r3, #1
 8004c1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c22:	f7fd fa81 	bl	8002128 <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c2a:	f7fd fa7d 	bl	8002128 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e0dd      	b.n	8004df8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c3c:	4b14      	ldr	r3, [pc, #80]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004c3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1ef      	bne.n	8004c2a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80d1 	beq.w	8004df6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c54:	4b0e      	ldr	r3, [pc, #56]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 030c 	and.w	r3, r3, #12
 8004c5c:	2b0c      	cmp	r3, #12
 8004c5e:	f000 808b 	beq.w	8004d78 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d15e      	bne.n	8004d28 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c6a:	4b09      	ldr	r3, [pc, #36]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a08      	ldr	r2, [pc, #32]	; (8004c90 <HAL_RCC_OscConfig+0x4b8>)
 8004c70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c76:	f7fd fa57 	bl	8002128 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c7c:	e00c      	b.n	8004c98 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c7e:	f7fd fa53 	bl	8002128 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d905      	bls.n	8004c98 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e0b3      	b.n	8004df8 <HAL_RCC_OscConfig+0x620>
 8004c90:	40021000 	.word	0x40021000
 8004c94:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c98:	4b59      	ldr	r3, [pc, #356]	; (8004e00 <HAL_RCC_OscConfig+0x628>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1ec      	bne.n	8004c7e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ca4:	4b56      	ldr	r3, [pc, #344]	; (8004e00 <HAL_RCC_OscConfig+0x628>)
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	4b56      	ldr	r3, [pc, #344]	; (8004e04 <HAL_RCC_OscConfig+0x62c>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6a11      	ldr	r1, [r2, #32]
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cb4:	3a01      	subs	r2, #1
 8004cb6:	0112      	lsls	r2, r2, #4
 8004cb8:	4311      	orrs	r1, r2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004cbe:	0212      	lsls	r2, r2, #8
 8004cc0:	4311      	orrs	r1, r2
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004cc6:	0852      	lsrs	r2, r2, #1
 8004cc8:	3a01      	subs	r2, #1
 8004cca:	0552      	lsls	r2, r2, #21
 8004ccc:	4311      	orrs	r1, r2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cd2:	0852      	lsrs	r2, r2, #1
 8004cd4:	3a01      	subs	r2, #1
 8004cd6:	0652      	lsls	r2, r2, #25
 8004cd8:	4311      	orrs	r1, r2
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004cde:	06d2      	lsls	r2, r2, #27
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	4947      	ldr	r1, [pc, #284]	; (8004e00 <HAL_RCC_OscConfig+0x628>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ce8:	4b45      	ldr	r3, [pc, #276]	; (8004e00 <HAL_RCC_OscConfig+0x628>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a44      	ldr	r2, [pc, #272]	; (8004e00 <HAL_RCC_OscConfig+0x628>)
 8004cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cf2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cf4:	4b42      	ldr	r3, [pc, #264]	; (8004e00 <HAL_RCC_OscConfig+0x628>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	4a41      	ldr	r2, [pc, #260]	; (8004e00 <HAL_RCC_OscConfig+0x628>)
 8004cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cfe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d00:	f7fd fa12 	bl	8002128 <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d08:	f7fd fa0e 	bl	8002128 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e06e      	b.n	8004df8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d1a:	4b39      	ldr	r3, [pc, #228]	; (8004e00 <HAL_RCC_OscConfig+0x628>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0f0      	beq.n	8004d08 <HAL_RCC_OscConfig+0x530>
 8004d26:	e066      	b.n	8004df6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d28:	4b35      	ldr	r3, [pc, #212]	; (8004e00 <HAL_RCC_OscConfig+0x628>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a34      	ldr	r2, [pc, #208]	; (8004e00 <HAL_RCC_OscConfig+0x628>)
 8004d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d32:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004d34:	4b32      	ldr	r3, [pc, #200]	; (8004e00 <HAL_RCC_OscConfig+0x628>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4a31      	ldr	r2, [pc, #196]	; (8004e00 <HAL_RCC_OscConfig+0x628>)
 8004d3a:	f023 0303 	bic.w	r3, r3, #3
 8004d3e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d40:	4b2f      	ldr	r3, [pc, #188]	; (8004e00 <HAL_RCC_OscConfig+0x628>)
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	4a2e      	ldr	r2, [pc, #184]	; (8004e00 <HAL_RCC_OscConfig+0x628>)
 8004d46:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d4e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d50:	f7fd f9ea 	bl	8002128 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d58:	f7fd f9e6 	bl	8002128 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e046      	b.n	8004df8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d6a:	4b25      	ldr	r3, [pc, #148]	; (8004e00 <HAL_RCC_OscConfig+0x628>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f0      	bne.n	8004d58 <HAL_RCC_OscConfig+0x580>
 8004d76:	e03e      	b.n	8004df6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e039      	b.n	8004df8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004d84:	4b1e      	ldr	r3, [pc, #120]	; (8004e00 <HAL_RCC_OscConfig+0x628>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f003 0203 	and.w	r2, r3, #3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d12c      	bne.n	8004df2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	3b01      	subs	r3, #1
 8004da4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d123      	bne.n	8004df2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d11b      	bne.n	8004df2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d113      	bne.n	8004df2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd4:	085b      	lsrs	r3, r3, #1
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d109      	bne.n	8004df2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de8:	085b      	lsrs	r3, r3, #1
 8004dea:	3b01      	subs	r3, #1
 8004dec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d001      	beq.n	8004df6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3720      	adds	r7, #32
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	40021000 	.word	0x40021000
 8004e04:	019f800c 	.word	0x019f800c

08004e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e12:	2300      	movs	r3, #0
 8004e14:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e11e      	b.n	800505e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e20:	4b91      	ldr	r3, [pc, #580]	; (8005068 <HAL_RCC_ClockConfig+0x260>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 030f 	and.w	r3, r3, #15
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d910      	bls.n	8004e50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2e:	4b8e      	ldr	r3, [pc, #568]	; (8005068 <HAL_RCC_ClockConfig+0x260>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f023 020f 	bic.w	r2, r3, #15
 8004e36:	498c      	ldr	r1, [pc, #560]	; (8005068 <HAL_RCC_ClockConfig+0x260>)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3e:	4b8a      	ldr	r3, [pc, #552]	; (8005068 <HAL_RCC_ClockConfig+0x260>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d001      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e106      	b.n	800505e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d073      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2b03      	cmp	r3, #3
 8004e62:	d129      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e64:	4b81      	ldr	r3, [pc, #516]	; (800506c <HAL_RCC_ClockConfig+0x264>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e0f4      	b.n	800505e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e74:	f000 f966 	bl	8005144 <RCC_GetSysClockFreqFromPLLSource>
 8004e78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	4a7c      	ldr	r2, [pc, #496]	; (8005070 <HAL_RCC_ClockConfig+0x268>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d93f      	bls.n	8004f02 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e82:	4b7a      	ldr	r3, [pc, #488]	; (800506c <HAL_RCC_ClockConfig+0x264>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d009      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d033      	beq.n	8004f02 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d12f      	bne.n	8004f02 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ea2:	4b72      	ldr	r3, [pc, #456]	; (800506c <HAL_RCC_ClockConfig+0x264>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eaa:	4a70      	ldr	r2, [pc, #448]	; (800506c <HAL_RCC_ClockConfig+0x264>)
 8004eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004eb2:	2380      	movs	r3, #128	; 0x80
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	e024      	b.n	8004f02 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d107      	bne.n	8004ed0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ec0:	4b6a      	ldr	r3, [pc, #424]	; (800506c <HAL_RCC_ClockConfig+0x264>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d109      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e0c6      	b.n	800505e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ed0:	4b66      	ldr	r3, [pc, #408]	; (800506c <HAL_RCC_ClockConfig+0x264>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0be      	b.n	800505e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004ee0:	f000 f8ce 	bl	8005080 <HAL_RCC_GetSysClockFreq>
 8004ee4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	4a61      	ldr	r2, [pc, #388]	; (8005070 <HAL_RCC_ClockConfig+0x268>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d909      	bls.n	8004f02 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004eee:	4b5f      	ldr	r3, [pc, #380]	; (800506c <HAL_RCC_ClockConfig+0x264>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ef6:	4a5d      	ldr	r2, [pc, #372]	; (800506c <HAL_RCC_ClockConfig+0x264>)
 8004ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004efc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004efe:	2380      	movs	r3, #128	; 0x80
 8004f00:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f02:	4b5a      	ldr	r3, [pc, #360]	; (800506c <HAL_RCC_ClockConfig+0x264>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f023 0203 	bic.w	r2, r3, #3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	4957      	ldr	r1, [pc, #348]	; (800506c <HAL_RCC_ClockConfig+0x264>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f14:	f7fd f908 	bl	8002128 <HAL_GetTick>
 8004f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f1a:	e00a      	b.n	8004f32 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f1c:	f7fd f904 	bl	8002128 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e095      	b.n	800505e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f32:	4b4e      	ldr	r3, [pc, #312]	; (800506c <HAL_RCC_ClockConfig+0x264>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 020c 	and.w	r2, r3, #12
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d1eb      	bne.n	8004f1c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d023      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f5c:	4b43      	ldr	r3, [pc, #268]	; (800506c <HAL_RCC_ClockConfig+0x264>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	4a42      	ldr	r2, [pc, #264]	; (800506c <HAL_RCC_ClockConfig+0x264>)
 8004f62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f66:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d007      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f74:	4b3d      	ldr	r3, [pc, #244]	; (800506c <HAL_RCC_ClockConfig+0x264>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f7c:	4a3b      	ldr	r2, [pc, #236]	; (800506c <HAL_RCC_ClockConfig+0x264>)
 8004f7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f84:	4b39      	ldr	r3, [pc, #228]	; (800506c <HAL_RCC_ClockConfig+0x264>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	4936      	ldr	r1, [pc, #216]	; (800506c <HAL_RCC_ClockConfig+0x264>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	608b      	str	r3, [r1, #8]
 8004f96:	e008      	b.n	8004faa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	2b80      	cmp	r3, #128	; 0x80
 8004f9c:	d105      	bne.n	8004faa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f9e:	4b33      	ldr	r3, [pc, #204]	; (800506c <HAL_RCC_ClockConfig+0x264>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	4a32      	ldr	r2, [pc, #200]	; (800506c <HAL_RCC_ClockConfig+0x264>)
 8004fa4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fa8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004faa:	4b2f      	ldr	r3, [pc, #188]	; (8005068 <HAL_RCC_ClockConfig+0x260>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d21d      	bcs.n	8004ff4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fb8:	4b2b      	ldr	r3, [pc, #172]	; (8005068 <HAL_RCC_ClockConfig+0x260>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f023 020f 	bic.w	r2, r3, #15
 8004fc0:	4929      	ldr	r1, [pc, #164]	; (8005068 <HAL_RCC_ClockConfig+0x260>)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fc8:	f7fd f8ae 	bl	8002128 <HAL_GetTick>
 8004fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fce:	e00a      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fd0:	f7fd f8aa 	bl	8002128 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e03b      	b.n	800505e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe6:	4b20      	ldr	r3, [pc, #128]	; (8005068 <HAL_RCC_ClockConfig+0x260>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d1ed      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d008      	beq.n	8005012 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005000:	4b1a      	ldr	r3, [pc, #104]	; (800506c <HAL_RCC_ClockConfig+0x264>)
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	4917      	ldr	r1, [pc, #92]	; (800506c <HAL_RCC_ClockConfig+0x264>)
 800500e:	4313      	orrs	r3, r2
 8005010:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0308 	and.w	r3, r3, #8
 800501a:	2b00      	cmp	r3, #0
 800501c:	d009      	beq.n	8005032 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800501e:	4b13      	ldr	r3, [pc, #76]	; (800506c <HAL_RCC_ClockConfig+0x264>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	490f      	ldr	r1, [pc, #60]	; (800506c <HAL_RCC_ClockConfig+0x264>)
 800502e:	4313      	orrs	r3, r2
 8005030:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005032:	f000 f825 	bl	8005080 <HAL_RCC_GetSysClockFreq>
 8005036:	4602      	mov	r2, r0
 8005038:	4b0c      	ldr	r3, [pc, #48]	; (800506c <HAL_RCC_ClockConfig+0x264>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	091b      	lsrs	r3, r3, #4
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	490c      	ldr	r1, [pc, #48]	; (8005074 <HAL_RCC_ClockConfig+0x26c>)
 8005044:	5ccb      	ldrb	r3, [r1, r3]
 8005046:	f003 031f 	and.w	r3, r3, #31
 800504a:	fa22 f303 	lsr.w	r3, r2, r3
 800504e:	4a0a      	ldr	r2, [pc, #40]	; (8005078 <HAL_RCC_ClockConfig+0x270>)
 8005050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005052:	4b0a      	ldr	r3, [pc, #40]	; (800507c <HAL_RCC_ClockConfig+0x274>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4618      	mov	r0, r3
 8005058:	f7fd f81a 	bl	8002090 <HAL_InitTick>
 800505c:	4603      	mov	r3, r0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40022000 	.word	0x40022000
 800506c:	40021000 	.word	0x40021000
 8005070:	04c4b400 	.word	0x04c4b400
 8005074:	08006dd0 	.word	0x08006dd0
 8005078:	20000000 	.word	0x20000000
 800507c:	20000004 	.word	0x20000004

08005080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005086:	4b2c      	ldr	r3, [pc, #176]	; (8005138 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 030c 	and.w	r3, r3, #12
 800508e:	2b04      	cmp	r3, #4
 8005090:	d102      	bne.n	8005098 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005092:	4b2a      	ldr	r3, [pc, #168]	; (800513c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005094:	613b      	str	r3, [r7, #16]
 8005096:	e047      	b.n	8005128 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005098:	4b27      	ldr	r3, [pc, #156]	; (8005138 <HAL_RCC_GetSysClockFreq+0xb8>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f003 030c 	and.w	r3, r3, #12
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d102      	bne.n	80050aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80050a4:	4b26      	ldr	r3, [pc, #152]	; (8005140 <HAL_RCC_GetSysClockFreq+0xc0>)
 80050a6:	613b      	str	r3, [r7, #16]
 80050a8:	e03e      	b.n	8005128 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80050aa:	4b23      	ldr	r3, [pc, #140]	; (8005138 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 030c 	and.w	r3, r3, #12
 80050b2:	2b0c      	cmp	r3, #12
 80050b4:	d136      	bne.n	8005124 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050b6:	4b20      	ldr	r3, [pc, #128]	; (8005138 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050c0:	4b1d      	ldr	r3, [pc, #116]	; (8005138 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	3301      	adds	r3, #1
 80050cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d10c      	bne.n	80050ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050d4:	4a1a      	ldr	r2, [pc, #104]	; (8005140 <HAL_RCC_GetSysClockFreq+0xc0>)
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050dc:	4a16      	ldr	r2, [pc, #88]	; (8005138 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050de:	68d2      	ldr	r2, [r2, #12]
 80050e0:	0a12      	lsrs	r2, r2, #8
 80050e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050e6:	fb02 f303 	mul.w	r3, r2, r3
 80050ea:	617b      	str	r3, [r7, #20]
      break;
 80050ec:	e00c      	b.n	8005108 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050ee:	4a13      	ldr	r2, [pc, #76]	; (800513c <HAL_RCC_GetSysClockFreq+0xbc>)
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f6:	4a10      	ldr	r2, [pc, #64]	; (8005138 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050f8:	68d2      	ldr	r2, [r2, #12]
 80050fa:	0a12      	lsrs	r2, r2, #8
 80050fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005100:	fb02 f303 	mul.w	r3, r2, r3
 8005104:	617b      	str	r3, [r7, #20]
      break;
 8005106:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005108:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <HAL_RCC_GetSysClockFreq+0xb8>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	0e5b      	lsrs	r3, r3, #25
 800510e:	f003 0303 	and.w	r3, r3, #3
 8005112:	3301      	adds	r3, #1
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005120:	613b      	str	r3, [r7, #16]
 8005122:	e001      	b.n	8005128 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005128:	693b      	ldr	r3, [r7, #16]
}
 800512a:	4618      	mov	r0, r3
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40021000 	.word	0x40021000
 800513c:	00f42400 	.word	0x00f42400
 8005140:	016e3600 	.word	0x016e3600

08005144 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800514a:	4b1e      	ldr	r3, [pc, #120]	; (80051c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005154:	4b1b      	ldr	r3, [pc, #108]	; (80051c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	091b      	lsrs	r3, r3, #4
 800515a:	f003 030f 	and.w	r3, r3, #15
 800515e:	3301      	adds	r3, #1
 8005160:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	2b03      	cmp	r3, #3
 8005166:	d10c      	bne.n	8005182 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005168:	4a17      	ldr	r2, [pc, #92]	; (80051c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005170:	4a14      	ldr	r2, [pc, #80]	; (80051c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005172:	68d2      	ldr	r2, [r2, #12]
 8005174:	0a12      	lsrs	r2, r2, #8
 8005176:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800517a:	fb02 f303 	mul.w	r3, r2, r3
 800517e:	617b      	str	r3, [r7, #20]
    break;
 8005180:	e00c      	b.n	800519c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005182:	4a12      	ldr	r2, [pc, #72]	; (80051cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	fbb2 f3f3 	udiv	r3, r2, r3
 800518a:	4a0e      	ldr	r2, [pc, #56]	; (80051c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800518c:	68d2      	ldr	r2, [r2, #12]
 800518e:	0a12      	lsrs	r2, r2, #8
 8005190:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005194:	fb02 f303 	mul.w	r3, r2, r3
 8005198:	617b      	str	r3, [r7, #20]
    break;
 800519a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800519c:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	0e5b      	lsrs	r3, r3, #25
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	3301      	adds	r3, #1
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80051b6:	687b      	ldr	r3, [r7, #4]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	40021000 	.word	0x40021000
 80051c8:	016e3600 	.word	0x016e3600
 80051cc:	00f42400 	.word	0x00f42400

080051d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051d8:	2300      	movs	r3, #0
 80051da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051dc:	2300      	movs	r3, #0
 80051de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 8098 	beq.w	800531e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ee:	2300      	movs	r3, #0
 80051f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051f2:	4b43      	ldr	r3, [pc, #268]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10d      	bne.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051fe:	4b40      	ldr	r3, [pc, #256]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005202:	4a3f      	ldr	r2, [pc, #252]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005208:	6593      	str	r3, [r2, #88]	; 0x58
 800520a:	4b3d      	ldr	r3, [pc, #244]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800520c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005212:	60bb      	str	r3, [r7, #8]
 8005214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005216:	2301      	movs	r3, #1
 8005218:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800521a:	4b3a      	ldr	r3, [pc, #232]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a39      	ldr	r2, [pc, #228]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005224:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005226:	f7fc ff7f 	bl	8002128 <HAL_GetTick>
 800522a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800522c:	e009      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800522e:	f7fc ff7b 	bl	8002128 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d902      	bls.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	74fb      	strb	r3, [r7, #19]
        break;
 8005240:	e005      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005242:	4b30      	ldr	r3, [pc, #192]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0ef      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800524e:	7cfb      	ldrb	r3, [r7, #19]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d159      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005254:	4b2a      	ldr	r3, [pc, #168]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800525e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d01e      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	429a      	cmp	r2, r3
 800526e:	d019      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005270:	4b23      	ldr	r3, [pc, #140]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800527a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800527c:	4b20      	ldr	r3, [pc, #128]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800527e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005282:	4a1f      	ldr	r2, [pc, #124]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800528c:	4b1c      	ldr	r3, [pc, #112]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800528e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005292:	4a1b      	ldr	r2, [pc, #108]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800529c:	4a18      	ldr	r2, [pc, #96]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d016      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ae:	f7fc ff3b 	bl	8002128 <HAL_GetTick>
 80052b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052b4:	e00b      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b6:	f7fc ff37 	bl	8002128 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d902      	bls.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	74fb      	strb	r3, [r7, #19]
            break;
 80052cc:	e006      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ce:	4b0c      	ldr	r3, [pc, #48]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0ec      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80052dc:	7cfb      	ldrb	r3, [r7, #19]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10b      	bne.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052e2:	4b07      	ldr	r3, [pc, #28]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f0:	4903      	ldr	r1, [pc, #12]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80052f8:	e008      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052fa:	7cfb      	ldrb	r3, [r7, #19]
 80052fc:	74bb      	strb	r3, [r7, #18]
 80052fe:	e005      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005300:	40021000 	.word	0x40021000
 8005304:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005308:	7cfb      	ldrb	r3, [r7, #19]
 800530a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800530c:	7c7b      	ldrb	r3, [r7, #17]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d105      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005312:	4ba7      	ldr	r3, [pc, #668]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005316:	4aa6      	ldr	r2, [pc, #664]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800531c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800532a:	4ba1      	ldr	r3, [pc, #644]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800532c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005330:	f023 0203 	bic.w	r2, r3, #3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	499d      	ldr	r1, [pc, #628]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800534c:	4b98      	ldr	r3, [pc, #608]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800534e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005352:	f023 020c 	bic.w	r2, r3, #12
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	4995      	ldr	r1, [pc, #596]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0304 	and.w	r3, r3, #4
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800536e:	4b90      	ldr	r3, [pc, #576]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005374:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	498c      	ldr	r1, [pc, #560]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0308 	and.w	r3, r3, #8
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005390:	4b87      	ldr	r3, [pc, #540]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005396:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	4984      	ldr	r1, [pc, #528]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0310 	and.w	r3, r3, #16
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053b2:	4b7f      	ldr	r3, [pc, #508]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	497b      	ldr	r1, [pc, #492]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0320 	and.w	r3, r3, #32
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053d4:	4b76      	ldr	r3, [pc, #472]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	4973      	ldr	r1, [pc, #460]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053f6:	4b6e      	ldr	r3, [pc, #440]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	496a      	ldr	r1, [pc, #424]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005418:	4b65      	ldr	r3, [pc, #404]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	4962      	ldr	r1, [pc, #392]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800543a:	4b5d      	ldr	r3, [pc, #372]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800543c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005440:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	4959      	ldr	r1, [pc, #356]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800545c:	4b54      	ldr	r3, [pc, #336]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800545e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005462:	f023 0203 	bic.w	r2, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546a:	4951      	ldr	r1, [pc, #324]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800547e:	4b4c      	ldr	r3, [pc, #304]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005484:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548c:	4948      	ldr	r1, [pc, #288]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800549c:	2b00      	cmp	r3, #0
 800549e:	d015      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054a0:	4b43      	ldr	r3, [pc, #268]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ae:	4940      	ldr	r1, [pc, #256]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054be:	d105      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054c0:	4b3b      	ldr	r3, [pc, #236]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	4a3a      	ldr	r2, [pc, #232]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d015      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80054d8:	4b35      	ldr	r3, [pc, #212]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e6:	4932      	ldr	r1, [pc, #200]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054f6:	d105      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054f8:	4b2d      	ldr	r3, [pc, #180]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	4a2c      	ldr	r2, [pc, #176]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005502:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d015      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005510:	4b27      	ldr	r3, [pc, #156]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005516:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	4924      	ldr	r1, [pc, #144]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005520:	4313      	orrs	r3, r2
 8005522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800552e:	d105      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005530:	4b1f      	ldr	r3, [pc, #124]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	4a1e      	ldr	r2, [pc, #120]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800553a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d015      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005548:	4b19      	ldr	r3, [pc, #100]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800554a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005556:	4916      	ldr	r1, [pc, #88]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005558:	4313      	orrs	r3, r2
 800555a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005562:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005566:	d105      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005568:	4b11      	ldr	r3, [pc, #68]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	4a10      	ldr	r2, [pc, #64]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800556e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005572:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d019      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005580:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005586:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	4908      	ldr	r1, [pc, #32]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800559e:	d109      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055a0:	4b03      	ldr	r3, [pc, #12]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	4a02      	ldr	r2, [pc, #8]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055aa:	60d3      	str	r3, [r2, #12]
 80055ac:	e002      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80055ae:	bf00      	nop
 80055b0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d015      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80055c0:	4b29      	ldr	r3, [pc, #164]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ce:	4926      	ldr	r1, [pc, #152]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055de:	d105      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80055e0:	4b21      	ldr	r3, [pc, #132]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	4a20      	ldr	r2, [pc, #128]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d015      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80055f8:	4b1b      	ldr	r3, [pc, #108]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fe:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005606:	4918      	ldr	r1, [pc, #96]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005608:	4313      	orrs	r3, r2
 800560a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005616:	d105      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005618:	4b13      	ldr	r3, [pc, #76]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	4a12      	ldr	r2, [pc, #72]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800561e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005622:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d015      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005630:	4b0d      	ldr	r3, [pc, #52]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005632:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005636:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800563e:	490a      	ldr	r1, [pc, #40]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005640:	4313      	orrs	r3, r2
 8005642:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800564a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800564e:	d105      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005650:	4b05      	ldr	r3, [pc, #20]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	4a04      	ldr	r2, [pc, #16]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800565a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800565c:	7cbb      	ldrb	r3, [r7, #18]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	40021000 	.word	0x40021000

0800566c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d066      	beq.n	800574c <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d106      	bne.n	8005698 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7fc fbfe 	bl	8001e94 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	22ca      	movs	r2, #202	; 0xca
 80056a6:	625a      	str	r2, [r3, #36]	; 0x24
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2253      	movs	r2, #83	; 0x53
 80056ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f99a 	bl	80059ea <RTC_EnterInitMode>
 80056b6:	4603      	mov	r3, r0
 80056b8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d13a      	bne.n	8005736 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6812      	ldr	r2, [r2, #0]
 80056ca:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80056ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d2:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6999      	ldr	r1, [r3, #24]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	431a      	orrs	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	431a      	orrs	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68d9      	ldr	r1, [r3, #12]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	041a      	lsls	r2, r3, #16
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f9a6 	bl	8005a56 <RTC_ExitInitMode>
 800570a:	4603      	mov	r3, r0
 800570c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d110      	bne.n	8005736 <HAL_RTC_Init+0xca>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1a      	ldr	r2, [r3, #32]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	619a      	str	r2, [r3, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	22ff      	movs	r2, #255	; 0xff
 800573c:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800573e:	7bfb      	ldrb	r3, [r7, #15]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d103      	bne.n	800574c <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800574c:	7bfb      	ldrb	r3, [r7, #15]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005756:	b590      	push	{r4, r7, lr}
 8005758:	b087      	sub	sp, #28
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_RTC_SetTime+0x1a>
 800576c:	2302      	movs	r3, #2
 800576e:	e08b      	b.n	8005888 <HAL_RTC_SetTime+0x132>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	22ca      	movs	r2, #202	; 0xca
 8005786:	625a      	str	r2, [r3, #36]	; 0x24
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2253      	movs	r2, #83	; 0x53
 800578e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 f92a 	bl	80059ea <RTC_EnterInitMode>
 8005796:	4603      	mov	r3, r0
 8005798:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800579a:	7cfb      	ldrb	r3, [r7, #19]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d163      	bne.n	8005868 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d126      	bne.n	80057f4 <HAL_RTC_SetTime+0x9e>
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d102      	bne.n	80057ba <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2200      	movs	r2, #0
 80057b8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 f98c 	bl	8005adc <RTC_ByteToBcd2>
 80057c4:	4603      	mov	r3, r0
 80057c6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	785b      	ldrb	r3, [r3, #1]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 f985 	bl	8005adc <RTC_ByteToBcd2>
 80057d2:	4603      	mov	r3, r0
 80057d4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80057d6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	789b      	ldrb	r3, [r3, #2]
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 f97d 	bl	8005adc <RTC_ByteToBcd2>
 80057e2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80057e4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	78db      	ldrb	r3, [r3, #3]
 80057ec:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80057ee:	4313      	orrs	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]
 80057f2:	e018      	b.n	8005826 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d102      	bne.n	8005808 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2200      	movs	r2, #0
 8005806:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	785b      	ldrb	r3, [r3, #1]
 8005812:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005814:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800581a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	78db      	ldrb	r3, [r3, #3]
 8005820:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(hrtc->Instance->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005830:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005834:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BKP);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	699a      	ldr	r2, [r3, #24]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005844:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(hrtc->Instance->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6999      	ldr	r1, [r3, #24]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	431a      	orrs	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 f8f9 	bl	8005a56 <RTC_ExitInitMode>
 8005864:	4603      	mov	r3, r0
 8005866:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	22ff      	movs	r2, #255	; 0xff
 800586e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005870:	7cfb      	ldrb	r3, [r7, #19]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d103      	bne.n	800587e <HAL_RTC_SetTime+0x128>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
    __HAL_UNLOCK(hrtc);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005886:	7cfb      	ldrb	r3, [r7, #19]
}
 8005888:	4618      	mov	r0, r3
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	bd90      	pop	{r4, r7, pc}

08005890 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005890:	b590      	push	{r4, r7, lr}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d101      	bne.n	80058aa <HAL_RTC_SetDate+0x1a>
 80058a6:	2302      	movs	r3, #2
 80058a8:	e075      	b.n	8005996 <HAL_RTC_SetDate+0x106>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2202      	movs	r2, #2
 80058b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10e      	bne.n	80058de <HAL_RTC_SetDate+0x4e>
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	785b      	ldrb	r3, [r3, #1]
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d008      	beq.n	80058de <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	785b      	ldrb	r3, [r3, #1]
 80058d0:	f023 0310 	bic.w	r3, r3, #16
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	330a      	adds	r3, #10
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d11c      	bne.n	800591e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	78db      	ldrb	r3, [r3, #3]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 f8f7 	bl	8005adc <RTC_ByteToBcd2>
 80058ee:	4603      	mov	r3, r0
 80058f0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	785b      	ldrb	r3, [r3, #1]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 f8f0 	bl	8005adc <RTC_ByteToBcd2>
 80058fc:	4603      	mov	r3, r0
 80058fe:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005900:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	789b      	ldrb	r3, [r3, #2]
 8005906:	4618      	mov	r0, r3
 8005908:	f000 f8e8 	bl	8005adc <RTC_ByteToBcd2>
 800590c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800590e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005918:	4313      	orrs	r3, r2
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	e00e      	b.n	800593c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	78db      	ldrb	r3, [r3, #3]
 8005922:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	785b      	ldrb	r3, [r3, #1]
 8005928:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800592a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005930:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005938:	4313      	orrs	r3, r2
 800593a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	22ca      	movs	r2, #202	; 0xca
 8005942:	625a      	str	r2, [r3, #36]	; 0x24
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2253      	movs	r2, #83	; 0x53
 800594a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 f84c 	bl	80059ea <RTC_EnterInitMode>
 8005952:	4603      	mov	r3, r0
 8005954:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005956:	7cfb      	ldrb	r3, [r7, #19]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10c      	bne.n	8005976 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    WRITE_REG(hrtc->Instance->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005966:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800596a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 f872 	bl	8005a56 <RTC_ExitInitMode>
 8005972:	4603      	mov	r3, r0
 8005974:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	22ff      	movs	r2, #255	; 0xff
 800597c:	625a      	str	r2, [r3, #36]	; 0x24
 
  if (status == HAL_OK)
 800597e:	7cfb      	ldrb	r3, [r7, #19]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d103      	bne.n	800598c <HAL_RTC_SetDate+0xfc>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005994:	7cfb      	ldrb	r3, [r7, #19]
}
 8005996:	4618      	mov	r0, r3
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	bd90      	pop	{r4, r7, pc}

0800599e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b084      	sub	sp, #16
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68da      	ldr	r2, [r3, #12]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0220 	bic.w	r2, r2, #32
 80059b4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80059b6:	f7fc fbb7 	bl	8002128 <HAL_GetTick>
 80059ba:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80059bc:	e009      	b.n	80059d2 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80059be:	f7fc fbb3 	bl	8002128 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059cc:	d901      	bls.n	80059d2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e007      	b.n	80059e2 <HAL_RTC_WaitForSynchro+0x44>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f003 0320 	and.w	r3, r3, #32
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d0ee      	beq.n	80059be <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b084      	sub	sp, #16
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d123      	bne.n	8005a4c <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68da      	ldr	r2, [r3, #12]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a12:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005a14:	f7fc fb88 	bl	8002128 <HAL_GetTick>
 8005a18:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005a1a:	e00d      	b.n	8005a38 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005a1c:	f7fc fb84 	bl	8002128 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a2a:	d905      	bls.n	8005a38 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2203      	movs	r2, #3
 8005a34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d102      	bne.n	8005a4c <RTC_EnterInitMode+0x62>
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d1e7      	bne.n	8005a1c <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b084      	sub	sp, #16
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a70:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	f003 0320 	and.w	r3, r3, #32
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10c      	bne.n	8005a9a <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7ff ff8c 	bl	800599e <HAL_RTC_WaitForSynchro>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d022      	beq.n	8005ad2 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2203      	movs	r2, #3
 8005a90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	73fb      	strb	r3, [r7, #15]
 8005a98:	e01b      	b.n	8005ad2 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	699a      	ldr	r2, [r3, #24]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0220 	bic.w	r2, r2, #32
 8005aa8:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff ff77 	bl	800599e <HAL_RTC_WaitForSynchro>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d005      	beq.n	8005ac2 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2203      	movs	r2, #3
 8005aba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	699a      	ldr	r2, [r3, #24]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0220 	orr.w	r2, r2, #32
 8005ad0:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8005aea:	79fb      	ldrb	r3, [r7, #7]
 8005aec:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8005aee:	e005      	b.n	8005afc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3301      	adds	r3, #1
 8005af4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8005af6:	7afb      	ldrb	r3, [r7, #11]
 8005af8:	3b0a      	subs	r3, #10
 8005afa:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8005afc:	7afb      	ldrb	r3, [r7, #11]
 8005afe:	2b09      	cmp	r3, #9
 8005b00:	d8f6      	bhi.n	8005af0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	011b      	lsls	r3, r3, #4
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	7afb      	ldrb	r3, [r7, #11]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	b2db      	uxtb	r3, r3
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e09d      	b.n	8005c6a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d108      	bne.n	8005b48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b3e:	d009      	beq.n	8005b54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	61da      	str	r2, [r3, #28]
 8005b46:	e005      	b.n	8005b54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d106      	bne.n	8005b74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7fc f9cc 	bl	8001f0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b94:	d902      	bls.n	8005b9c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b96:	2300      	movs	r3, #0
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	e002      	b.n	8005ba2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ba0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005baa:	d007      	beq.n	8005bbc <HAL_SPI_Init+0xa0>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bb4:	d002      	beq.n	8005bbc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005bcc:	431a      	orrs	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	431a      	orrs	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bea:	431a      	orrs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	69db      	ldr	r3, [r3, #28]
 8005bf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bfe:	ea42 0103 	orr.w	r1, r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	0c1b      	lsrs	r3, r3, #16
 8005c18:	f003 0204 	and.w	r2, r3, #4
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	f003 0310 	and.w	r3, r3, #16
 8005c24:	431a      	orrs	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c38:	ea42 0103 	orr.w	r1, r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69da      	ldr	r2, [r3, #28]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b088      	sub	sp, #32
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	60f8      	str	r0, [r7, #12]
 8005c7a:	60b9      	str	r1, [r7, #8]
 8005c7c:	603b      	str	r3, [r7, #0]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <HAL_SPI_Transmit+0x22>
 8005c90:	2302      	movs	r3, #2
 8005c92:	e158      	b.n	8005f46 <HAL_SPI_Transmit+0x2d4>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c9c:	f7fc fa44 	bl	8002128 <HAL_GetTick>
 8005ca0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ca2:	88fb      	ldrh	r3, [r7, #6]
 8005ca4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d002      	beq.n	8005cb8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cb6:	e13d      	b.n	8005f34 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <HAL_SPI_Transmit+0x52>
 8005cbe:	88fb      	ldrh	r3, [r7, #6]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d102      	bne.n	8005cca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cc8:	e134      	b.n	8005f34 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2203      	movs	r2, #3
 8005cce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	88fa      	ldrh	r2, [r7, #6]
 8005ce2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	88fa      	ldrh	r2, [r7, #6]
 8005ce8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d14:	d10f      	bne.n	8005d36 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d40:	2b40      	cmp	r3, #64	; 0x40
 8005d42:	d007      	beq.n	8005d54 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d5c:	d94b      	bls.n	8005df6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d002      	beq.n	8005d6c <HAL_SPI_Transmit+0xfa>
 8005d66:	8afb      	ldrh	r3, [r7, #22]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d13e      	bne.n	8005dea <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d70:	881a      	ldrh	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	1c9a      	adds	r2, r3, #2
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d90:	e02b      	b.n	8005dea <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d112      	bne.n	8005dc6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da4:	881a      	ldrh	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db0:	1c9a      	adds	r2, r3, #2
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dc4:	e011      	b.n	8005dea <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dc6:	f7fc f9af 	bl	8002128 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d803      	bhi.n	8005dde <HAL_SPI_Transmit+0x16c>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ddc:	d102      	bne.n	8005de4 <HAL_SPI_Transmit+0x172>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d102      	bne.n	8005dea <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005de8:	e0a4      	b.n	8005f34 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1ce      	bne.n	8005d92 <HAL_SPI_Transmit+0x120>
 8005df4:	e07c      	b.n	8005ef0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d002      	beq.n	8005e04 <HAL_SPI_Transmit+0x192>
 8005dfe:	8afb      	ldrh	r3, [r7, #22]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d170      	bne.n	8005ee6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d912      	bls.n	8005e34 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e12:	881a      	ldrh	r2, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1e:	1c9a      	adds	r2, r3, #2
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	3b02      	subs	r3, #2
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e32:	e058      	b.n	8005ee6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	330c      	adds	r3, #12
 8005e3e:	7812      	ldrb	r2, [r2, #0]
 8005e40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005e5a:	e044      	b.n	8005ee6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d12b      	bne.n	8005ec2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d912      	bls.n	8005e9a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e78:	881a      	ldrh	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e84:	1c9a      	adds	r2, r3, #2
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	3b02      	subs	r3, #2
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e98:	e025      	b.n	8005ee6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	330c      	adds	r3, #12
 8005ea4:	7812      	ldrb	r2, [r2, #0]
 8005ea6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ec0:	e011      	b.n	8005ee6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ec2:	f7fc f931 	bl	8002128 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d803      	bhi.n	8005eda <HAL_SPI_Transmit+0x268>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed8:	d102      	bne.n	8005ee0 <HAL_SPI_Transmit+0x26e>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d102      	bne.n	8005ee6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ee4:	e026      	b.n	8005f34 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1b5      	bne.n	8005e5c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	6839      	ldr	r1, [r7, #0]
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 fce3 	bl	80068c0 <SPI_EndRxTxTransaction>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2220      	movs	r2, #32
 8005f04:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10a      	bne.n	8005f24 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f0e:	2300      	movs	r3, #0
 8005f10:	613b      	str	r3, [r7, #16]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	613b      	str	r3, [r7, #16]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	613b      	str	r3, [r7, #16]
 8005f22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d002      	beq.n	8005f32 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	77fb      	strb	r3, [r7, #31]
 8005f30:	e000      	b.n	8005f34 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005f32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005f44:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3720      	adds	r7, #32
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b088      	sub	sp, #32
 8005f52:	af02      	add	r7, sp, #8
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	603b      	str	r3, [r7, #0]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f6a:	d112      	bne.n	8005f92 <HAL_SPI_Receive+0x44>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10e      	bne.n	8005f92 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2204      	movs	r2, #4
 8005f78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005f7c:	88fa      	ldrh	r2, [r7, #6]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	4613      	mov	r3, r2
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	68b9      	ldr	r1, [r7, #8]
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 f910 	bl	80061ae <HAL_SPI_TransmitReceive>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	e109      	b.n	80061a6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d101      	bne.n	8005fa0 <HAL_SPI_Receive+0x52>
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	e102      	b.n	80061a6 <HAL_SPI_Receive+0x258>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fa8:	f7fc f8be 	bl	8002128 <HAL_GetTick>
 8005fac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d002      	beq.n	8005fc0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005fba:	2302      	movs	r3, #2
 8005fbc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fbe:	e0e9      	b.n	8006194 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d002      	beq.n	8005fcc <HAL_SPI_Receive+0x7e>
 8005fc6:	88fb      	ldrh	r3, [r7, #6]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d102      	bne.n	8005fd2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fd0:	e0e0      	b.n	8006194 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2204      	movs	r2, #4
 8005fd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	88fa      	ldrh	r2, [r7, #6]
 8005fea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	88fa      	ldrh	r2, [r7, #6]
 8005ff2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800601c:	d908      	bls.n	8006030 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800602c:	605a      	str	r2, [r3, #4]
 800602e:	e007      	b.n	8006040 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800603e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006048:	d10f      	bne.n	800606a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006058:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006068:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006074:	2b40      	cmp	r3, #64	; 0x40
 8006076:	d007      	beq.n	8006088 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006086:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006090:	d867      	bhi.n	8006162 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006092:	e030      	b.n	80060f6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d117      	bne.n	80060d2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f103 020c 	add.w	r2, r3, #12
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	7812      	ldrb	r2, [r2, #0]
 80060b0:	b2d2      	uxtb	r2, r2
 80060b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	3b01      	subs	r3, #1
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80060d0:	e011      	b.n	80060f6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060d2:	f7fc f829 	bl	8002128 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d803      	bhi.n	80060ea <HAL_SPI_Receive+0x19c>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e8:	d102      	bne.n	80060f0 <HAL_SPI_Receive+0x1a2>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d102      	bne.n	80060f6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80060f4:	e04e      	b.n	8006194 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1c8      	bne.n	8006094 <HAL_SPI_Receive+0x146>
 8006102:	e034      	b.n	800616e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b01      	cmp	r3, #1
 8006110:	d115      	bne.n	800613e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68da      	ldr	r2, [r3, #12]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611c:	b292      	uxth	r2, r2
 800611e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006124:	1c9a      	adds	r2, r3, #2
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006130:	b29b      	uxth	r3, r3
 8006132:	3b01      	subs	r3, #1
 8006134:	b29a      	uxth	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800613c:	e011      	b.n	8006162 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800613e:	f7fb fff3 	bl	8002128 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	429a      	cmp	r2, r3
 800614c:	d803      	bhi.n	8006156 <HAL_SPI_Receive+0x208>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006154:	d102      	bne.n	800615c <HAL_SPI_Receive+0x20e>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d102      	bne.n	8006162 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006160:	e018      	b.n	8006194 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006168:	b29b      	uxth	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1ca      	bne.n	8006104 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	6839      	ldr	r1, [r7, #0]
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 fb4c 	bl	8006810 <SPI_EndRxTransaction>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d002      	beq.n	8006184 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2220      	movs	r2, #32
 8006182:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	75fb      	strb	r3, [r7, #23]
 8006190:	e000      	b.n	8006194 <HAL_SPI_Receive+0x246>
  }

error :
 8006192:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80061a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b08a      	sub	sp, #40	; 0x28
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	607a      	str	r2, [r7, #4]
 80061ba:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80061bc:	2301      	movs	r3, #1
 80061be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d101      	bne.n	80061d4 <HAL_SPI_TransmitReceive+0x26>
 80061d0:	2302      	movs	r3, #2
 80061d2:	e1fb      	b.n	80065cc <HAL_SPI_TransmitReceive+0x41e>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061dc:	f7fb ffa4 	bl	8002128 <HAL_GetTick>
 80061e0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061e8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80061f0:	887b      	ldrh	r3, [r7, #2]
 80061f2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80061f4:	887b      	ldrh	r3, [r7, #2]
 80061f6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061f8:	7efb      	ldrb	r3, [r7, #27]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d00e      	beq.n	800621c <HAL_SPI_TransmitReceive+0x6e>
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006204:	d106      	bne.n	8006214 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d102      	bne.n	8006214 <HAL_SPI_TransmitReceive+0x66>
 800620e:	7efb      	ldrb	r3, [r7, #27]
 8006210:	2b04      	cmp	r3, #4
 8006212:	d003      	beq.n	800621c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006214:	2302      	movs	r3, #2
 8006216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800621a:	e1cd      	b.n	80065b8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d005      	beq.n	800622e <HAL_SPI_TransmitReceive+0x80>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <HAL_SPI_TransmitReceive+0x80>
 8006228:	887b      	ldrh	r3, [r7, #2]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d103      	bne.n	8006236 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006234:	e1c0      	b.n	80065b8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b04      	cmp	r3, #4
 8006240:	d003      	beq.n	800624a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2205      	movs	r2, #5
 8006246:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	887a      	ldrh	r2, [r7, #2]
 800625a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	887a      	ldrh	r2, [r7, #2]
 8006262:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	887a      	ldrh	r2, [r7, #2]
 8006270:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	887a      	ldrh	r2, [r7, #2]
 8006276:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800628c:	d802      	bhi.n	8006294 <HAL_SPI_TransmitReceive+0xe6>
 800628e:	8a3b      	ldrh	r3, [r7, #16]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d908      	bls.n	80062a6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062a2:	605a      	str	r2, [r3, #4]
 80062a4:	e007      	b.n	80062b6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062b4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c0:	2b40      	cmp	r3, #64	; 0x40
 80062c2:	d007      	beq.n	80062d4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062dc:	d97c      	bls.n	80063d8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <HAL_SPI_TransmitReceive+0x13e>
 80062e6:	8a7b      	ldrh	r3, [r7, #18]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d169      	bne.n	80063c0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f0:	881a      	ldrh	r2, [r3, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fc:	1c9a      	adds	r2, r3, #2
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006306:	b29b      	uxth	r3, r3
 8006308:	3b01      	subs	r3, #1
 800630a:	b29a      	uxth	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006310:	e056      	b.n	80063c0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b02      	cmp	r3, #2
 800631e:	d11b      	bne.n	8006358 <HAL_SPI_TransmitReceive+0x1aa>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006324:	b29b      	uxth	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d016      	beq.n	8006358 <HAL_SPI_TransmitReceive+0x1aa>
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632c:	2b01      	cmp	r3, #1
 800632e:	d113      	bne.n	8006358 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	881a      	ldrh	r2, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006340:	1c9a      	adds	r2, r3, #2
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800634a:	b29b      	uxth	r3, r3
 800634c:	3b01      	subs	r3, #1
 800634e:	b29a      	uxth	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b01      	cmp	r3, #1
 8006364:	d11c      	bne.n	80063a0 <HAL_SPI_TransmitReceive+0x1f2>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800636c:	b29b      	uxth	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d016      	beq.n	80063a0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68da      	ldr	r2, [r3, #12]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637c:	b292      	uxth	r2, r2
 800637e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006384:	1c9a      	adds	r2, r3, #2
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006390:	b29b      	uxth	r3, r3
 8006392:	3b01      	subs	r3, #1
 8006394:	b29a      	uxth	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800639c:	2301      	movs	r3, #1
 800639e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063a0:	f7fb fec2 	bl	8002128 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d807      	bhi.n	80063c0 <HAL_SPI_TransmitReceive+0x212>
 80063b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b6:	d003      	beq.n	80063c0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80063be:	e0fb      	b.n	80065b8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1a3      	bne.n	8006312 <HAL_SPI_TransmitReceive+0x164>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d19d      	bne.n	8006312 <HAL_SPI_TransmitReceive+0x164>
 80063d6:	e0df      	b.n	8006598 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <HAL_SPI_TransmitReceive+0x23a>
 80063e0:	8a7b      	ldrh	r3, [r7, #18]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	f040 80cb 	bne.w	800657e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d912      	bls.n	8006418 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f6:	881a      	ldrh	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006402:	1c9a      	adds	r2, r3, #2
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800640c:	b29b      	uxth	r3, r3
 800640e:	3b02      	subs	r3, #2
 8006410:	b29a      	uxth	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006416:	e0b2      	b.n	800657e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	330c      	adds	r3, #12
 8006422:	7812      	ldrb	r2, [r2, #0]
 8006424:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642a:	1c5a      	adds	r2, r3, #1
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006434:	b29b      	uxth	r3, r3
 8006436:	3b01      	subs	r3, #1
 8006438:	b29a      	uxth	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800643e:	e09e      	b.n	800657e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b02      	cmp	r3, #2
 800644c:	d134      	bne.n	80064b8 <HAL_SPI_TransmitReceive+0x30a>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006452:	b29b      	uxth	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d02f      	beq.n	80064b8 <HAL_SPI_TransmitReceive+0x30a>
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	2b01      	cmp	r3, #1
 800645c:	d12c      	bne.n	80064b8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006462:	b29b      	uxth	r3, r3
 8006464:	2b01      	cmp	r3, #1
 8006466:	d912      	bls.n	800648e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646c:	881a      	ldrh	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	1c9a      	adds	r2, r3, #2
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006482:	b29b      	uxth	r3, r3
 8006484:	3b02      	subs	r3, #2
 8006486:	b29a      	uxth	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800648c:	e012      	b.n	80064b4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	330c      	adds	r3, #12
 8006498:	7812      	ldrb	r2, [r2, #0]
 800649a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	3b01      	subs	r3, #1
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064b4:	2300      	movs	r3, #0
 80064b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d148      	bne.n	8006558 <HAL_SPI_TransmitReceive+0x3aa>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d042      	beq.n	8006558 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d923      	bls.n	8006526 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e8:	b292      	uxth	r2, r2
 80064ea:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f0:	1c9a      	adds	r2, r3, #2
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b02      	subs	r3, #2
 8006500:	b29a      	uxth	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800650e:	b29b      	uxth	r3, r3
 8006510:	2b01      	cmp	r3, #1
 8006512:	d81f      	bhi.n	8006554 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006522:	605a      	str	r2, [r3, #4]
 8006524:	e016      	b.n	8006554 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f103 020c 	add.w	r2, r3, #12
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	7812      	ldrb	r2, [r2, #0]
 8006534:	b2d2      	uxtb	r2, r2
 8006536:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653c:	1c5a      	adds	r2, r3, #1
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006548:	b29b      	uxth	r3, r3
 800654a:	3b01      	subs	r3, #1
 800654c:	b29a      	uxth	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006554:	2301      	movs	r3, #1
 8006556:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006558:	f7fb fde6 	bl	8002128 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006564:	429a      	cmp	r2, r3
 8006566:	d803      	bhi.n	8006570 <HAL_SPI_TransmitReceive+0x3c2>
 8006568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656e:	d102      	bne.n	8006576 <HAL_SPI_TransmitReceive+0x3c8>
 8006570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006572:	2b00      	cmp	r3, #0
 8006574:	d103      	bne.n	800657e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800657c:	e01c      	b.n	80065b8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006582:	b29b      	uxth	r3, r3
 8006584:	2b00      	cmp	r3, #0
 8006586:	f47f af5b 	bne.w	8006440 <HAL_SPI_TransmitReceive+0x292>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006590:	b29b      	uxth	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	f47f af54 	bne.w	8006440 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006598:	69fa      	ldr	r2, [r7, #28]
 800659a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 f98f 	bl	80068c0 <SPI_EndRxTxTransaction>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d006      	beq.n	80065b6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2220      	movs	r2, #32
 80065b2:	661a      	str	r2, [r3, #96]	; 0x60
 80065b4:	e000      	b.n	80065b8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80065b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80065c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3728      	adds	r7, #40	; 0x28
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b088      	sub	sp, #32
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	603b      	str	r3, [r7, #0]
 80065e0:	4613      	mov	r3, r2
 80065e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065e4:	f7fb fda0 	bl	8002128 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ec:	1a9b      	subs	r3, r3, r2
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	4413      	add	r3, r2
 80065f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065f4:	f7fb fd98 	bl	8002128 <HAL_GetTick>
 80065f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065fa:	4b39      	ldr	r3, [pc, #228]	; (80066e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	015b      	lsls	r3, r3, #5
 8006600:	0d1b      	lsrs	r3, r3, #20
 8006602:	69fa      	ldr	r2, [r7, #28]
 8006604:	fb02 f303 	mul.w	r3, r2, r3
 8006608:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800660a:	e054      	b.n	80066b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006612:	d050      	beq.n	80066b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006614:	f7fb fd88 	bl	8002128 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	69fa      	ldr	r2, [r7, #28]
 8006620:	429a      	cmp	r2, r3
 8006622:	d902      	bls.n	800662a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d13d      	bne.n	80066a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006638:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006642:	d111      	bne.n	8006668 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800664c:	d004      	beq.n	8006658 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006656:	d107      	bne.n	8006668 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006666:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006670:	d10f      	bne.n	8006692 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006690:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e017      	b.n	80066d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689a      	ldr	r2, [r3, #8]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	4013      	ands	r3, r2
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	bf0c      	ite	eq
 80066c6:	2301      	moveq	r3, #1
 80066c8:	2300      	movne	r3, #0
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	461a      	mov	r2, r3
 80066ce:	79fb      	ldrb	r3, [r7, #7]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d19b      	bne.n	800660c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3720      	adds	r7, #32
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	20000000 	.word	0x20000000

080066e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b08a      	sub	sp, #40	; 0x28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
 80066f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80066f2:	2300      	movs	r3, #0
 80066f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80066f6:	f7fb fd17 	bl	8002128 <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fe:	1a9b      	subs	r3, r3, r2
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	4413      	add	r3, r2
 8006704:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006706:	f7fb fd0f 	bl	8002128 <HAL_GetTick>
 800670a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	330c      	adds	r3, #12
 8006712:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006714:	4b3d      	ldr	r3, [pc, #244]	; (800680c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	4613      	mov	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	00da      	lsls	r2, r3, #3
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	0d1b      	lsrs	r3, r3, #20
 8006724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006726:	fb02 f303 	mul.w	r3, r2, r3
 800672a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800672c:	e060      	b.n	80067f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006734:	d107      	bne.n	8006746 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d104      	bne.n	8006746 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	b2db      	uxtb	r3, r3
 8006742:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006744:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674c:	d050      	beq.n	80067f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800674e:	f7fb fceb 	bl	8002128 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800675a:	429a      	cmp	r2, r3
 800675c:	d902      	bls.n	8006764 <SPI_WaitFifoStateUntilTimeout+0x80>
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	2b00      	cmp	r3, #0
 8006762:	d13d      	bne.n	80067e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006772:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800677c:	d111      	bne.n	80067a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006786:	d004      	beq.n	8006792 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006790:	d107      	bne.n	80067a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067aa:	d10f      	bne.n	80067cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e010      	b.n	8006802 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80067e6:	2300      	movs	r3, #0
 80067e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	3b01      	subs	r3, #1
 80067ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689a      	ldr	r2, [r3, #8]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	4013      	ands	r3, r2
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d196      	bne.n	800672e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3728      	adds	r7, #40	; 0x28
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	20000000 	.word	0x20000000

08006810 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af02      	add	r7, sp, #8
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006824:	d111      	bne.n	800684a <SPI_EndRxTransaction+0x3a>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800682e:	d004      	beq.n	800683a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006838:	d107      	bne.n	800684a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006848:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2200      	movs	r2, #0
 8006852:	2180      	movs	r1, #128	; 0x80
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f7ff febd 	bl	80065d4 <SPI_WaitFlagStateUntilTimeout>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d007      	beq.n	8006870 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006864:	f043 0220 	orr.w	r2, r3, #32
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e023      	b.n	80068b8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006878:	d11d      	bne.n	80068b6 <SPI_EndRxTransaction+0xa6>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006882:	d004      	beq.n	800688e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800688c:	d113      	bne.n	80068b6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2200      	movs	r2, #0
 8006896:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f7ff ff22 	bl	80066e4 <SPI_WaitFifoStateUntilTimeout>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d007      	beq.n	80068b6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068aa:	f043 0220 	orr.w	r2, r3, #32
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e000      	b.n	80068b8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af02      	add	r7, sp, #8
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f7ff ff03 	bl	80066e4 <SPI_WaitFifoStateUntilTimeout>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d007      	beq.n	80068f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068e8:	f043 0220 	orr.w	r2, r3, #32
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e027      	b.n	8006944 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2200      	movs	r2, #0
 80068fc:	2180      	movs	r1, #128	; 0x80
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f7ff fe68 	bl	80065d4 <SPI_WaitFlagStateUntilTimeout>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d007      	beq.n	800691a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800690e:	f043 0220 	orr.w	r2, r3, #32
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e014      	b.n	8006944 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2200      	movs	r2, #0
 8006922:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f7ff fedc 	bl	80066e4 <SPI_WaitFifoStateUntilTimeout>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d007      	beq.n	8006942 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006936:	f043 0220 	orr.w	r2, r3, #32
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e000      	b.n	8006944 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <__errno>:
 800694c:	4b01      	ldr	r3, [pc, #4]	; (8006954 <__errno+0x8>)
 800694e:	6818      	ldr	r0, [r3, #0]
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	2000000c 	.word	0x2000000c

08006958 <__libc_init_array>:
 8006958:	b570      	push	{r4, r5, r6, lr}
 800695a:	4d0d      	ldr	r5, [pc, #52]	; (8006990 <__libc_init_array+0x38>)
 800695c:	4c0d      	ldr	r4, [pc, #52]	; (8006994 <__libc_init_array+0x3c>)
 800695e:	1b64      	subs	r4, r4, r5
 8006960:	10a4      	asrs	r4, r4, #2
 8006962:	2600      	movs	r6, #0
 8006964:	42a6      	cmp	r6, r4
 8006966:	d109      	bne.n	800697c <__libc_init_array+0x24>
 8006968:	4d0b      	ldr	r5, [pc, #44]	; (8006998 <__libc_init_array+0x40>)
 800696a:	4c0c      	ldr	r4, [pc, #48]	; (800699c <__libc_init_array+0x44>)
 800696c:	f000 fa24 	bl	8006db8 <_init>
 8006970:	1b64      	subs	r4, r4, r5
 8006972:	10a4      	asrs	r4, r4, #2
 8006974:	2600      	movs	r6, #0
 8006976:	42a6      	cmp	r6, r4
 8006978:	d105      	bne.n	8006986 <__libc_init_array+0x2e>
 800697a:	bd70      	pop	{r4, r5, r6, pc}
 800697c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006980:	4798      	blx	r3
 8006982:	3601      	adds	r6, #1
 8006984:	e7ee      	b.n	8006964 <__libc_init_array+0xc>
 8006986:	f855 3b04 	ldr.w	r3, [r5], #4
 800698a:	4798      	blx	r3
 800698c:	3601      	adds	r6, #1
 800698e:	e7f2      	b.n	8006976 <__libc_init_array+0x1e>
 8006990:	08006de4 	.word	0x08006de4
 8006994:	08006de4 	.word	0x08006de4
 8006998:	08006de4 	.word	0x08006de4
 800699c:	08006de8 	.word	0x08006de8

080069a0 <memset>:
 80069a0:	4402      	add	r2, r0
 80069a2:	4603      	mov	r3, r0
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d100      	bne.n	80069aa <memset+0xa>
 80069a8:	4770      	bx	lr
 80069aa:	f803 1b01 	strb.w	r1, [r3], #1
 80069ae:	e7f9      	b.n	80069a4 <memset+0x4>

080069b0 <log>:
 80069b0:	b538      	push	{r3, r4, r5, lr}
 80069b2:	ed2d 8b02 	vpush	{d8}
 80069b6:	ec55 4b10 	vmov	r4, r5, d0
 80069ba:	f000 f839 	bl	8006a30 <__ieee754_log>
 80069be:	4622      	mov	r2, r4
 80069c0:	462b      	mov	r3, r5
 80069c2:	4620      	mov	r0, r4
 80069c4:	4629      	mov	r1, r5
 80069c6:	eeb0 8a40 	vmov.f32	s16, s0
 80069ca:	eef0 8a60 	vmov.f32	s17, s1
 80069ce:	f7fa f879 	bl	8000ac4 <__aeabi_dcmpun>
 80069d2:	b998      	cbnz	r0, 80069fc <log+0x4c>
 80069d4:	2200      	movs	r2, #0
 80069d6:	2300      	movs	r3, #0
 80069d8:	4620      	mov	r0, r4
 80069da:	4629      	mov	r1, r5
 80069dc:	f7fa f868 	bl	8000ab0 <__aeabi_dcmpgt>
 80069e0:	b960      	cbnz	r0, 80069fc <log+0x4c>
 80069e2:	2200      	movs	r2, #0
 80069e4:	2300      	movs	r3, #0
 80069e6:	4620      	mov	r0, r4
 80069e8:	4629      	mov	r1, r5
 80069ea:	f7fa f839 	bl	8000a60 <__aeabi_dcmpeq>
 80069ee:	b160      	cbz	r0, 8006a0a <log+0x5a>
 80069f0:	f7ff ffac 	bl	800694c <__errno>
 80069f4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8006a20 <log+0x70>
 80069f8:	2322      	movs	r3, #34	; 0x22
 80069fa:	6003      	str	r3, [r0, #0]
 80069fc:	eeb0 0a48 	vmov.f32	s0, s16
 8006a00:	eef0 0a68 	vmov.f32	s1, s17
 8006a04:	ecbd 8b02 	vpop	{d8}
 8006a08:	bd38      	pop	{r3, r4, r5, pc}
 8006a0a:	f7ff ff9f 	bl	800694c <__errno>
 8006a0e:	ecbd 8b02 	vpop	{d8}
 8006a12:	2321      	movs	r3, #33	; 0x21
 8006a14:	6003      	str	r3, [r0, #0]
 8006a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a1a:	4803      	ldr	r0, [pc, #12]	; (8006a28 <log+0x78>)
 8006a1c:	f000 b9c4 	b.w	8006da8 <nan>
 8006a20:	00000000 	.word	0x00000000
 8006a24:	fff00000 	.word	0xfff00000
 8006a28:	08006de0 	.word	0x08006de0
 8006a2c:	00000000 	.word	0x00000000

08006a30 <__ieee754_log>:
 8006a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a34:	ec51 0b10 	vmov	r0, r1, d0
 8006a38:	ed2d 8b04 	vpush	{d8-d9}
 8006a3c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006a40:	b083      	sub	sp, #12
 8006a42:	460d      	mov	r5, r1
 8006a44:	da29      	bge.n	8006a9a <__ieee754_log+0x6a>
 8006a46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006a4a:	4303      	orrs	r3, r0
 8006a4c:	ee10 2a10 	vmov	r2, s0
 8006a50:	d10c      	bne.n	8006a6c <__ieee754_log+0x3c>
 8006a52:	49cf      	ldr	r1, [pc, #828]	; (8006d90 <__ieee754_log+0x360>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	2300      	movs	r3, #0
 8006a58:	2000      	movs	r0, #0
 8006a5a:	f7f9 fec3 	bl	80007e4 <__aeabi_ddiv>
 8006a5e:	ec41 0b10 	vmov	d0, r0, r1
 8006a62:	b003      	add	sp, #12
 8006a64:	ecbd 8b04 	vpop	{d8-d9}
 8006a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a6c:	2900      	cmp	r1, #0
 8006a6e:	da05      	bge.n	8006a7c <__ieee754_log+0x4c>
 8006a70:	460b      	mov	r3, r1
 8006a72:	f7f9 fbd5 	bl	8000220 <__aeabi_dsub>
 8006a76:	2200      	movs	r2, #0
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e7ee      	b.n	8006a5a <__ieee754_log+0x2a>
 8006a7c:	4bc5      	ldr	r3, [pc, #788]	; (8006d94 <__ieee754_log+0x364>)
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f7f9 fd86 	bl	8000590 <__aeabi_dmul>
 8006a84:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8006a88:	460d      	mov	r5, r1
 8006a8a:	4ac3      	ldr	r2, [pc, #780]	; (8006d98 <__ieee754_log+0x368>)
 8006a8c:	4295      	cmp	r5, r2
 8006a8e:	dd06      	ble.n	8006a9e <__ieee754_log+0x6e>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	f7f9 fbc6 	bl	8000224 <__adddf3>
 8006a98:	e7e1      	b.n	8006a5e <__ieee754_log+0x2e>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	e7f5      	b.n	8006a8a <__ieee754_log+0x5a>
 8006a9e:	152c      	asrs	r4, r5, #20
 8006aa0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006aa4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006aa8:	441c      	add	r4, r3
 8006aaa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8006aae:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8006ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ab6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8006aba:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8006abe:	ea42 0105 	orr.w	r1, r2, r5
 8006ac2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	4bb4      	ldr	r3, [pc, #720]	; (8006d9c <__ieee754_log+0x36c>)
 8006aca:	f7f9 fba9 	bl	8000220 <__aeabi_dsub>
 8006ace:	1cab      	adds	r3, r5, #2
 8006ad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	4682      	mov	sl, r0
 8006ad8:	468b      	mov	fp, r1
 8006ada:	f04f 0200 	mov.w	r2, #0
 8006ade:	dc53      	bgt.n	8006b88 <__ieee754_log+0x158>
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f7f9 ffbd 	bl	8000a60 <__aeabi_dcmpeq>
 8006ae6:	b1d0      	cbz	r0, 8006b1e <__ieee754_log+0xee>
 8006ae8:	2c00      	cmp	r4, #0
 8006aea:	f000 8122 	beq.w	8006d32 <__ieee754_log+0x302>
 8006aee:	4620      	mov	r0, r4
 8006af0:	f7f9 fce4 	bl	80004bc <__aeabi_i2d>
 8006af4:	a390      	add	r3, pc, #576	; (adr r3, 8006d38 <__ieee754_log+0x308>)
 8006af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afa:	4606      	mov	r6, r0
 8006afc:	460f      	mov	r7, r1
 8006afe:	f7f9 fd47 	bl	8000590 <__aeabi_dmul>
 8006b02:	a38f      	add	r3, pc, #572	; (adr r3, 8006d40 <__ieee754_log+0x310>)
 8006b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b08:	4604      	mov	r4, r0
 8006b0a:	460d      	mov	r5, r1
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	4639      	mov	r1, r7
 8006b10:	f7f9 fd3e 	bl	8000590 <__aeabi_dmul>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4620      	mov	r0, r4
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	e7ba      	b.n	8006a94 <__ieee754_log+0x64>
 8006b1e:	a38a      	add	r3, pc, #552	; (adr r3, 8006d48 <__ieee754_log+0x318>)
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	4650      	mov	r0, sl
 8006b26:	4659      	mov	r1, fp
 8006b28:	f7f9 fd32 	bl	8000590 <__aeabi_dmul>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	2000      	movs	r0, #0
 8006b32:	499b      	ldr	r1, [pc, #620]	; (8006da0 <__ieee754_log+0x370>)
 8006b34:	f7f9 fb74 	bl	8000220 <__aeabi_dsub>
 8006b38:	4652      	mov	r2, sl
 8006b3a:	4606      	mov	r6, r0
 8006b3c:	460f      	mov	r7, r1
 8006b3e:	465b      	mov	r3, fp
 8006b40:	4650      	mov	r0, sl
 8006b42:	4659      	mov	r1, fp
 8006b44:	f7f9 fd24 	bl	8000590 <__aeabi_dmul>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	4639      	mov	r1, r7
 8006b50:	f7f9 fd1e 	bl	8000590 <__aeabi_dmul>
 8006b54:	4606      	mov	r6, r0
 8006b56:	460f      	mov	r7, r1
 8006b58:	b914      	cbnz	r4, 8006b60 <__ieee754_log+0x130>
 8006b5a:	4632      	mov	r2, r6
 8006b5c:	463b      	mov	r3, r7
 8006b5e:	e0a2      	b.n	8006ca6 <__ieee754_log+0x276>
 8006b60:	4620      	mov	r0, r4
 8006b62:	f7f9 fcab 	bl	80004bc <__aeabi_i2d>
 8006b66:	a374      	add	r3, pc, #464	; (adr r3, 8006d38 <__ieee754_log+0x308>)
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	4680      	mov	r8, r0
 8006b6e:	4689      	mov	r9, r1
 8006b70:	f7f9 fd0e 	bl	8000590 <__aeabi_dmul>
 8006b74:	a372      	add	r3, pc, #456	; (adr r3, 8006d40 <__ieee754_log+0x310>)
 8006b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	460d      	mov	r5, r1
 8006b7e:	4640      	mov	r0, r8
 8006b80:	4649      	mov	r1, r9
 8006b82:	f7f9 fd05 	bl	8000590 <__aeabi_dmul>
 8006b86:	e0a7      	b.n	8006cd8 <__ieee754_log+0x2a8>
 8006b88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b8c:	f7f9 fb4a 	bl	8000224 <__adddf3>
 8006b90:	4602      	mov	r2, r0
 8006b92:	460b      	mov	r3, r1
 8006b94:	4650      	mov	r0, sl
 8006b96:	4659      	mov	r1, fp
 8006b98:	f7f9 fe24 	bl	80007e4 <__aeabi_ddiv>
 8006b9c:	ec41 0b18 	vmov	d8, r0, r1
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f7f9 fc8b 	bl	80004bc <__aeabi_i2d>
 8006ba6:	ec53 2b18 	vmov	r2, r3, d8
 8006baa:	ec41 0b19 	vmov	d9, r0, r1
 8006bae:	ec51 0b18 	vmov	r0, r1, d8
 8006bb2:	f7f9 fced 	bl	8000590 <__aeabi_dmul>
 8006bb6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8006bba:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8006bbe:	9301      	str	r3, [sp, #4]
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4680      	mov	r8, r0
 8006bc6:	4689      	mov	r9, r1
 8006bc8:	f7f9 fce2 	bl	8000590 <__aeabi_dmul>
 8006bcc:	a360      	add	r3, pc, #384	; (adr r3, 8006d50 <__ieee754_log+0x320>)
 8006bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	460f      	mov	r7, r1
 8006bd6:	f7f9 fcdb 	bl	8000590 <__aeabi_dmul>
 8006bda:	a35f      	add	r3, pc, #380	; (adr r3, 8006d58 <__ieee754_log+0x328>)
 8006bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be0:	f7f9 fb20 	bl	8000224 <__adddf3>
 8006be4:	4632      	mov	r2, r6
 8006be6:	463b      	mov	r3, r7
 8006be8:	f7f9 fcd2 	bl	8000590 <__aeabi_dmul>
 8006bec:	a35c      	add	r3, pc, #368	; (adr r3, 8006d60 <__ieee754_log+0x330>)
 8006bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf2:	f7f9 fb17 	bl	8000224 <__adddf3>
 8006bf6:	4632      	mov	r2, r6
 8006bf8:	463b      	mov	r3, r7
 8006bfa:	f7f9 fcc9 	bl	8000590 <__aeabi_dmul>
 8006bfe:	a35a      	add	r3, pc, #360	; (adr r3, 8006d68 <__ieee754_log+0x338>)
 8006c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c04:	f7f9 fb0e 	bl	8000224 <__adddf3>
 8006c08:	4642      	mov	r2, r8
 8006c0a:	464b      	mov	r3, r9
 8006c0c:	f7f9 fcc0 	bl	8000590 <__aeabi_dmul>
 8006c10:	a357      	add	r3, pc, #348	; (adr r3, 8006d70 <__ieee754_log+0x340>)
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	4680      	mov	r8, r0
 8006c18:	4689      	mov	r9, r1
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	4639      	mov	r1, r7
 8006c1e:	f7f9 fcb7 	bl	8000590 <__aeabi_dmul>
 8006c22:	a355      	add	r3, pc, #340	; (adr r3, 8006d78 <__ieee754_log+0x348>)
 8006c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c28:	f7f9 fafc 	bl	8000224 <__adddf3>
 8006c2c:	4632      	mov	r2, r6
 8006c2e:	463b      	mov	r3, r7
 8006c30:	f7f9 fcae 	bl	8000590 <__aeabi_dmul>
 8006c34:	a352      	add	r3, pc, #328	; (adr r3, 8006d80 <__ieee754_log+0x350>)
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	f7f9 faf3 	bl	8000224 <__adddf3>
 8006c3e:	4632      	mov	r2, r6
 8006c40:	463b      	mov	r3, r7
 8006c42:	f7f9 fca5 	bl	8000590 <__aeabi_dmul>
 8006c46:	460b      	mov	r3, r1
 8006c48:	4602      	mov	r2, r0
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	4640      	mov	r0, r8
 8006c4e:	f7f9 fae9 	bl	8000224 <__adddf3>
 8006c52:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8006c56:	9b01      	ldr	r3, [sp, #4]
 8006c58:	3551      	adds	r5, #81	; 0x51
 8006c5a:	431d      	orrs	r5, r3
 8006c5c:	2d00      	cmp	r5, #0
 8006c5e:	4680      	mov	r8, r0
 8006c60:	4689      	mov	r9, r1
 8006c62:	dd48      	ble.n	8006cf6 <__ieee754_log+0x2c6>
 8006c64:	4b4e      	ldr	r3, [pc, #312]	; (8006da0 <__ieee754_log+0x370>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	4650      	mov	r0, sl
 8006c6a:	4659      	mov	r1, fp
 8006c6c:	f7f9 fc90 	bl	8000590 <__aeabi_dmul>
 8006c70:	4652      	mov	r2, sl
 8006c72:	465b      	mov	r3, fp
 8006c74:	f7f9 fc8c 	bl	8000590 <__aeabi_dmul>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	4606      	mov	r6, r0
 8006c7e:	460f      	mov	r7, r1
 8006c80:	4640      	mov	r0, r8
 8006c82:	4649      	mov	r1, r9
 8006c84:	f7f9 face 	bl	8000224 <__adddf3>
 8006c88:	ec53 2b18 	vmov	r2, r3, d8
 8006c8c:	f7f9 fc80 	bl	8000590 <__aeabi_dmul>
 8006c90:	4680      	mov	r8, r0
 8006c92:	4689      	mov	r9, r1
 8006c94:	b964      	cbnz	r4, 8006cb0 <__ieee754_log+0x280>
 8006c96:	4602      	mov	r2, r0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	4639      	mov	r1, r7
 8006c9e:	f7f9 fabf 	bl	8000220 <__aeabi_dsub>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4650      	mov	r0, sl
 8006ca8:	4659      	mov	r1, fp
 8006caa:	f7f9 fab9 	bl	8000220 <__aeabi_dsub>
 8006cae:	e6d6      	b.n	8006a5e <__ieee754_log+0x2e>
 8006cb0:	a321      	add	r3, pc, #132	; (adr r3, 8006d38 <__ieee754_log+0x308>)
 8006cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb6:	ec51 0b19 	vmov	r0, r1, d9
 8006cba:	f7f9 fc69 	bl	8000590 <__aeabi_dmul>
 8006cbe:	a320      	add	r3, pc, #128	; (adr r3, 8006d40 <__ieee754_log+0x310>)
 8006cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc4:	4604      	mov	r4, r0
 8006cc6:	460d      	mov	r5, r1
 8006cc8:	ec51 0b19 	vmov	r0, r1, d9
 8006ccc:	f7f9 fc60 	bl	8000590 <__aeabi_dmul>
 8006cd0:	4642      	mov	r2, r8
 8006cd2:	464b      	mov	r3, r9
 8006cd4:	f7f9 faa6 	bl	8000224 <__adddf3>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4630      	mov	r0, r6
 8006cde:	4639      	mov	r1, r7
 8006ce0:	f7f9 fa9e 	bl	8000220 <__aeabi_dsub>
 8006ce4:	4652      	mov	r2, sl
 8006ce6:	465b      	mov	r3, fp
 8006ce8:	f7f9 fa9a 	bl	8000220 <__aeabi_dsub>
 8006cec:	4602      	mov	r2, r0
 8006cee:	460b      	mov	r3, r1
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	e7d9      	b.n	8006caa <__ieee754_log+0x27a>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	4650      	mov	r0, sl
 8006cfc:	4659      	mov	r1, fp
 8006cfe:	f7f9 fa8f 	bl	8000220 <__aeabi_dsub>
 8006d02:	ec53 2b18 	vmov	r2, r3, d8
 8006d06:	f7f9 fc43 	bl	8000590 <__aeabi_dmul>
 8006d0a:	4606      	mov	r6, r0
 8006d0c:	460f      	mov	r7, r1
 8006d0e:	2c00      	cmp	r4, #0
 8006d10:	f43f af23 	beq.w	8006b5a <__ieee754_log+0x12a>
 8006d14:	a308      	add	r3, pc, #32	; (adr r3, 8006d38 <__ieee754_log+0x308>)
 8006d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1a:	ec51 0b19 	vmov	r0, r1, d9
 8006d1e:	f7f9 fc37 	bl	8000590 <__aeabi_dmul>
 8006d22:	a307      	add	r3, pc, #28	; (adr r3, 8006d40 <__ieee754_log+0x310>)
 8006d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d28:	4604      	mov	r4, r0
 8006d2a:	460d      	mov	r5, r1
 8006d2c:	ec51 0b19 	vmov	r0, r1, d9
 8006d30:	e727      	b.n	8006b82 <__ieee754_log+0x152>
 8006d32:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8006d88 <__ieee754_log+0x358>
 8006d36:	e694      	b.n	8006a62 <__ieee754_log+0x32>
 8006d38:	fee00000 	.word	0xfee00000
 8006d3c:	3fe62e42 	.word	0x3fe62e42
 8006d40:	35793c76 	.word	0x35793c76
 8006d44:	3dea39ef 	.word	0x3dea39ef
 8006d48:	55555555 	.word	0x55555555
 8006d4c:	3fd55555 	.word	0x3fd55555
 8006d50:	df3e5244 	.word	0xdf3e5244
 8006d54:	3fc2f112 	.word	0x3fc2f112
 8006d58:	96cb03de 	.word	0x96cb03de
 8006d5c:	3fc74664 	.word	0x3fc74664
 8006d60:	94229359 	.word	0x94229359
 8006d64:	3fd24924 	.word	0x3fd24924
 8006d68:	55555593 	.word	0x55555593
 8006d6c:	3fe55555 	.word	0x3fe55555
 8006d70:	d078c69f 	.word	0xd078c69f
 8006d74:	3fc39a09 	.word	0x3fc39a09
 8006d78:	1d8e78af 	.word	0x1d8e78af
 8006d7c:	3fcc71c5 	.word	0x3fcc71c5
 8006d80:	9997fa04 	.word	0x9997fa04
 8006d84:	3fd99999 	.word	0x3fd99999
	...
 8006d90:	c3500000 	.word	0xc3500000
 8006d94:	43500000 	.word	0x43500000
 8006d98:	7fefffff 	.word	0x7fefffff
 8006d9c:	3ff00000 	.word	0x3ff00000
 8006da0:	3fe00000 	.word	0x3fe00000
 8006da4:	00000000 	.word	0x00000000

08006da8 <nan>:
 8006da8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006db0 <nan+0x8>
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	00000000 	.word	0x00000000
 8006db4:	7ff80000 	.word	0x7ff80000

08006db8 <_init>:
 8006db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dba:	bf00      	nop
 8006dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dbe:	bc08      	pop	{r3}
 8006dc0:	469e      	mov	lr, r3
 8006dc2:	4770      	bx	lr

08006dc4 <_fini>:
 8006dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc6:	bf00      	nop
 8006dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dca:	bc08      	pop	{r3}
 8006dcc:	469e      	mov	lr, r3
 8006dce:	4770      	bx	lr
