
AMS-Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0f8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  0800a2d0  0800a2d0  0001a2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2e4  0800a2e4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800a2e4  0800a2e4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a2e4  0800a2e4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2e4  0800a2e4  0001a2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2e8  0800a2e8  0001a2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a2ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a8  20000078  0800a360  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000720  0800a360  00020720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000195d6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ddf  00000000  00000000  0003967a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001790  00000000  00000000  0003c460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a0  00000000  00000000  0003dbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029eee  00000000  00000000  0003f290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001838f  00000000  00000000  0006917e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011b523  00000000  00000000  0008150d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019ca30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000697c  00000000  00000000  0019ca80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000078 	.word	0x20000078
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a2b8 	.word	0x0800a2b8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000007c 	.word	0x2000007c
 8000214:	0800a2b8 	.word	0x0800a2b8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <init_PEC15_Table>:

int16_t pec15Table[256];
const int16_t CRC15_POLY = 0x4599;

void init_PEC15_Table(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
    int16_t remainder;

    for (int i = 0; i < 256; i++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	e026      	b.n	8000bea <init_PEC15_Table+0x5a>
    {
        remainder = i << 7;
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	01db      	lsls	r3, r3, #7
 8000ba0:	81fb      	strh	r3, [r7, #14]
        for (int bit = 8; bit > 0; --bit)
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	e015      	b.n	8000bd4 <init_PEC15_Table+0x44>
        {
            if (remainder & 0x4000)
 8000ba8:	89fb      	ldrh	r3, [r7, #14]
 8000baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d009      	beq.n	8000bc6 <init_PEC15_Table+0x36>
            {
                remainder = ((remainder << 1));
 8000bb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	81fb      	strh	r3, [r7, #14]
                remainder = (remainder ^ CRC15_POLY);
 8000bba:	f244 5299 	movw	r2, #17817	; 0x4599
 8000bbe:	89fb      	ldrh	r3, [r7, #14]
 8000bc0:	4053      	eors	r3, r2
 8000bc2:	81fb      	strh	r3, [r7, #14]
 8000bc4:	e003      	b.n	8000bce <init_PEC15_Table+0x3e>
            }
            else
            {
                remainder = ((remainder << 1));
 8000bc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	81fb      	strh	r3, [r7, #14]
        for (int bit = 8; bit > 0; --bit)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	dce6      	bgt.n	8000ba8 <init_PEC15_Table+0x18>
            }
        }
        pec15Table[i] = remainder & 0xFFFF;
 8000bda:	4909      	ldr	r1, [pc, #36]	; (8000c00 <init_PEC15_Table+0x70>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	89fa      	ldrh	r2, [r7, #14]
 8000be0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int i = 0; i < 256; i++)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	3301      	adds	r3, #1
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	2bff      	cmp	r3, #255	; 0xff
 8000bee:	ddd5      	ble.n	8000b9c <init_PEC15_Table+0xc>
    }
}
 8000bf0:	bf00      	nop
 8000bf2:	bf00      	nop
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000094 	.word	0x20000094

08000c04 <pec15>:


uint16_t pec15(uint8_t *data, int len)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b087      	sub	sp, #28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
    int16_t remainder, address;

    remainder = 16; // PEC seed
 8000c0e:	2310      	movs	r3, #16
 8000c10:	82fb      	strh	r3, [r7, #22]

    for (int i = 0; i < len; i++)
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	e01a      	b.n	8000c4e <pec15+0x4a>
    {
        address = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 8000c18:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c1c:	11db      	asrs	r3, r3, #7
 8000c1e:	b21a      	sxth	r2, r3
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	440b      	add	r3, r1
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	4053      	eors	r3, r2
 8000c2c:	b21b      	sxth	r3, r3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	81fb      	strh	r3, [r7, #14]
        remainder = (remainder << 8) ^ pec15Table[address];
 8000c32:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c36:	021b      	lsls	r3, r3, #8
 8000c38:	b21a      	sxth	r2, r3
 8000c3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c3e:	490a      	ldr	r1, [pc, #40]	; (8000c68 <pec15+0x64>)
 8000c40:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000c44:	4053      	eors	r3, r2
 8000c46:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < len; i++)
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	dbe0      	blt.n	8000c18 <pec15+0x14>
    }
    return (remainder * 2); // The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 8000c56:	8afb      	ldrh	r3, [r7, #22]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	b29b      	uxth	r3, r3
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	371c      	adds	r7, #28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	20000094 	.word	0x20000094

08000c6c <init_LTC6811>:


void init_LTC6811(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
    init_PEC15_Table();
 8000c70:	f7ff ff8e 	bl	8000b90 <init_PEC15_Table>
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <update_config>:


void update_config(ltc6811_config *config)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
    uint8_t cfgr[6] = {0};
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	2300      	movs	r3, #0
 8000c86:	81bb      	strh	r3, [r7, #12]

    cfgr[0] = config->gpio_pulldowns << 3;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	723b      	strb	r3, [r7, #8]
    cfgr[0] |= config->refon << 2;
 8000c92:	7a3b      	ldrb	r3, [r7, #8]
 8000c94:	b25a      	sxtb	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	785b      	ldrb	r3, [r3, #1]
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	b25b      	sxtb	r3, r3
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	b25b      	sxtb	r3, r3
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	723b      	strb	r3, [r7, #8]
    cfgr[0] |= config->adcopt;
 8000ca6:	7a3b      	ldrb	r3, [r7, #8]
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	7892      	ldrb	r2, [r2, #2]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	723b      	strb	r3, [r7, #8]

    cfgr[1] = config->vuv;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	889b      	ldrh	r3, [r3, #4]
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	727b      	strb	r3, [r7, #9]

    cfgr[2] = config->vuv >> 8;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	889b      	ldrh	r3, [r3, #4]
 8000cbe:	0a1b      	lsrs	r3, r3, #8
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	72bb      	strb	r3, [r7, #10]
    cfgr[2] |= config->vov << 4;
 8000cc6:	7abb      	ldrb	r3, [r7, #10]
 8000cc8:	b25a      	sxtb	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	88db      	ldrh	r3, [r3, #6]
 8000cce:	011b      	lsls	r3, r3, #4
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b25b      	sxtb	r3, r3
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	72bb      	strb	r3, [r7, #10]

    cfgr[3] = config->vov >> 4;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	88db      	ldrh	r3, [r3, #6]
 8000cde:	091b      	lsrs	r3, r3, #4
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	72fb      	strb	r3, [r7, #11]

    cfgr[4] = config -> dcc;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	895b      	ldrh	r3, [r3, #10]
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	733b      	strb	r3, [r7, #12]

    cfgr[5] = config->dcto << 4;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	7a1b      	ldrb	r3, [r3, #8]
 8000cf2:	011b      	lsls	r3, r3, #4
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	737b      	strb	r3, [r7, #13]
    cfgr[5] |= config -> dcc >> 4;
 8000cf8:	7b7a      	ldrb	r2, [r7, #13]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	895b      	ldrh	r3, [r3, #10]
 8000cfe:	091b      	lsrs	r3, r3, #4
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	4313      	orrs	r3, r2
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	737b      	strb	r3, [r7, #13]



    wake_sleep();
 8000d0a:	f000 f80a 	bl	8000d22 <wake_sleep>

    broadcast_write(WRCFGA, cfgr);
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	4619      	mov	r1, r3
 8000d14:	2001      	movs	r0, #1
 8000d16:	f000 f879 	bl	8000e0c <broadcast_write>
}
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <wake_sleep>:

////NEED TO CHANGE TO HAL
void wake_sleep()
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d30:	f004 fe18 	bl	8005964 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000d34:	2001      	movs	r0, #1
 8000d36:	f001 feed 	bl	8002b14 <HAL_Delay>

    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d44:	f004 fe0e 	bl	8005964 <HAL_GPIO_WritePin>

    HAL_Delay(1);
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f001 fee3 	bl	8002b14 <HAL_Delay>
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <wake_standby>:


void wake_standby()
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d60:	f004 fe00 	bl	8005964 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000d64:	2001      	movs	r0, #1
 8000d66:	f001 fed5 	bl	8002b14 <HAL_Delay>

    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d74:	f004 fdf6 	bl	8005964 <HAL_GPIO_WritePin>

    HAL_Delay(1);
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f001 fecb 	bl	8002b14 <HAL_Delay>
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <broadcast_command>:


void broadcast_command(uint16_t command_code)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	80fb      	strh	r3, [r7, #6]
    uint8_t CMD[2];

    // see Table 36 (Broadcast Command Format) in LTC6811 datasheet
    CMD[0] = 0;                  // CMD0 bits 3 thru 7  = 0
 8000d8e:	2300      	movs	r3, #0
 8000d90:	733b      	strb	r3, [r7, #12]
    CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 8000d92:	7b3a      	ldrb	r2, [r7, #12]
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	0a1b      	lsrs	r3, r3, #8
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	733b      	strb	r3, [r7, #12]
    CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	737b      	strb	r3, [r7, #13]

    uint16_t crc = pec15(CMD, 2); // CRC for CMD
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	2102      	movs	r1, #2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ff28 	bl	8000c04 <pec15>
 8000db4:	4603      	mov	r3, r0
 8000db6:	81fb      	strh	r3, [r7, #14]

    uint8_t tx_msg[4];

    // Send 2-byte CMD and 2-byte PEC15.

    tx_msg[0] = CMD[0];
 8000db8:	7b3b      	ldrb	r3, [r7, #12]
 8000dba:	723b      	strb	r3, [r7, #8]
    tx_msg[1] = CMD[1];
 8000dbc:	7b7b      	ldrb	r3, [r7, #13]
 8000dbe:	727b      	strb	r3, [r7, #9]
    tx_msg[2] = crc >> 8;
 8000dc0:	89fb      	ldrh	r3, [r7, #14]
 8000dc2:	0a1b      	lsrs	r3, r3, #8
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	72bb      	strb	r3, [r7, #10]
    tx_msg[3] = crc;
 8000dca:	89fb      	ldrh	r3, [r7, #14]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	72fb      	strb	r3, [r7, #11]




#ifdef ALWAYS_STANDBY_WAKE
    wake_standby();
 8000dd0:	f7ff ffbf 	bl	8000d52 <wake_standby>
#endif
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dde:	f004 fdc1 	bl	8005964 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, tx_msg, 4, 1000);
 8000de2:	f107 0108 	add.w	r1, r7, #8
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	2204      	movs	r2, #4
 8000dec:	4806      	ldr	r0, [pc, #24]	; (8000e08 <broadcast_command+0x84>)
 8000dee:	f006 f8d2 	bl	8006f96 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000df2:	2201      	movs	r2, #1
 8000df4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfc:	f004 fdb2 	bl	8005964 <HAL_GPIO_WritePin>
}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	2000051c 	.word	0x2000051c

08000e0c <broadcast_write>:


void broadcast_write(uint16_t command_code, uint8_t *tx_reg)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	80fb      	strh	r3, [r7, #6]
    uint8_t CMD[2];

    // see Table 36 (Broadcast Command Format) in LTC6811 datasheet
    CMD[0] = 0;                  // CMD0 bits 3 thru 7  = 0
 8000e18:	2300      	movs	r3, #0
 8000e1a:	753b      	strb	r3, [r7, #20]
    CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 8000e1c:	7d3a      	ldrb	r2, [r7, #20]
 8000e1e:	88fb      	ldrh	r3, [r7, #6]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	4313      	orrs	r3, r2
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	753b      	strb	r3, [r7, #20]
    CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	757b      	strb	r3, [r7, #21]

    uint16_t crc = pec15(CMD, 2); // CRC for CMD
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	2102      	movs	r1, #2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fee3 	bl	8000c04 <pec15>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	82fb      	strh	r3, [r7, #22]

    uint8_t tx_msg[12];

    // Send 2-byte CMD and 2-byte PEC15, then 6-byte register and 2-byte PEC15. No shift bytes.

    tx_msg[0] = CMD[0];
 8000e42:	7d3b      	ldrb	r3, [r7, #20]
 8000e44:	723b      	strb	r3, [r7, #8]
    tx_msg[1] = CMD[1];
 8000e46:	7d7b      	ldrb	r3, [r7, #21]
 8000e48:	727b      	strb	r3, [r7, #9]
    tx_msg[2] = crc >> 8;
 8000e4a:	8afb      	ldrh	r3, [r7, #22]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	72bb      	strb	r3, [r7, #10]
    tx_msg[3] = crc;
 8000e54:	8afb      	ldrh	r3, [r7, #22]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	72fb      	strb	r3, [r7, #11]

    crc = pec15(tx_reg, 6); // CRC for register value
 8000e5a:	2106      	movs	r1, #6
 8000e5c:	6838      	ldr	r0, [r7, #0]
 8000e5e:	f7ff fed1 	bl	8000c04 <pec15>
 8000e62:	4603      	mov	r3, r0
 8000e64:	82fb      	strh	r3, [r7, #22]

    tx_msg[4] = tx_reg[0];
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	733b      	strb	r3, [r7, #12]
    tx_msg[5] = tx_reg[1];
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	785b      	ldrb	r3, [r3, #1]
 8000e70:	737b      	strb	r3, [r7, #13]
    tx_msg[6] = tx_reg[2];
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	789b      	ldrb	r3, [r3, #2]
 8000e76:	73bb      	strb	r3, [r7, #14]
    tx_msg[7] = tx_reg[3];
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	78db      	ldrb	r3, [r3, #3]
 8000e7c:	73fb      	strb	r3, [r7, #15]
    tx_msg[8] = tx_reg[4];
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	791b      	ldrb	r3, [r3, #4]
 8000e82:	743b      	strb	r3, [r7, #16]
    tx_msg[9] = tx_reg[5];
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	795b      	ldrb	r3, [r3, #5]
 8000e88:	747b      	strb	r3, [r7, #17]
    tx_msg[10] = crc >> 8;
 8000e8a:	8afb      	ldrh	r3, [r7, #22]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	74bb      	strb	r3, [r7, #18]
    tx_msg[11] = crc;
 8000e94:	8afb      	ldrh	r3, [r7, #22]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	74fb      	strb	r3, [r7, #19]




#ifdef ALWAYS_STANDBY_WAKE
    wake_standby();
 8000e9a:	f7ff ff5a 	bl	8000d52 <wake_standby>
#endif
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea8:	f004 fd5c 	bl	8005964 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, tx_msg, 12, 1000);
 8000eac:	f107 0108 	add.w	r1, r7, #8
 8000eb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb4:	220c      	movs	r2, #12
 8000eb6:	4807      	ldr	r0, [pc, #28]	; (8000ed4 <broadcast_write+0xc8>)
 8000eb8:	f006 f86d 	bl	8006f96 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec6:	f004 fd4d 	bl	8005964 <HAL_GPIO_WritePin>
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000051c 	.word	0x2000051c

08000ed8 <address_read>:
}



void address_read(uint8_t address, uint16_t command_code, uint8_t *rx_reg)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	603a      	str	r2, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	80bb      	strh	r3, [r7, #4]
    uint8_t CMD[2];

    // see Table 37 (Address Command Format) in LTC6811 datasheet
    CMD[0] = 0x80;               // CMD0 bit 7          = 1
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	773b      	strb	r3, [r7, #28]
    CMD[0] |= address << 3;      // CMD0 bits 3 thu 6   = address
 8000eec:	7f3b      	ldrb	r3, [r7, #28]
 8000eee:	b25a      	sxtb	r2, r3
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	b25b      	sxtb	r3, r3
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	773b      	strb	r3, [r7, #28]
    CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 8000efe:	7f3a      	ldrb	r2, [r7, #28]
 8000f00:	88bb      	ldrh	r3, [r7, #4]
 8000f02:	0a1b      	lsrs	r3, r3, #8
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	773b      	strb	r3, [r7, #28]
    CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 8000f0e:	88bb      	ldrh	r3, [r7, #4]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	777b      	strb	r3, [r7, #29]

    uint16_t crc = pec15(CMD, 2);
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	2102      	movs	r1, #2
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fe72 	bl	8000c04 <pec15>
 8000f20:	4603      	mov	r3, r0
 8000f22:	847b      	strh	r3, [r7, #34]	; 0x22

    uint8_t tx_msg[12];

    // Send 2-byte CMD and PEC15, then read 6-byte register and 2-byte PEC15

    tx_msg[0] = CMD[0];
 8000f24:	7f3b      	ldrb	r3, [r7, #28]
 8000f26:	743b      	strb	r3, [r7, #16]
    tx_msg[1] = CMD[1];
 8000f28:	7f7b      	ldrb	r3, [r7, #29]
 8000f2a:	747b      	strb	r3, [r7, #17]
    tx_msg[2] = crc >> 8;
 8000f2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f2e:	0a1b      	lsrs	r3, r3, #8
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	74bb      	strb	r3, [r7, #18]
    tx_msg[3] = crc;
 8000f36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	74fb      	strb	r3, [r7, #19]
    tx_msg[4] = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	753b      	strb	r3, [r7, #20]
    tx_msg[5] = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	757b      	strb	r3, [r7, #21]
    tx_msg[6] = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	75bb      	strb	r3, [r7, #22]
    tx_msg[7] = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	75fb      	strb	r3, [r7, #23]
    tx_msg[8] = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	763b      	strb	r3, [r7, #24]
    tx_msg[9] = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	767b      	strb	r3, [r7, #25]
    tx_msg[10] = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	76bb      	strb	r3, [r7, #26]
    tx_msg[11] = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	76fb      	strb	r3, [r7, #27]

    uint8_t rx_msg[8] = {0};
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]

	#ifdef ALWAYS_STANDBY_WAKE
		wake_standby();
 8000f64:	f7ff fef5 	bl	8000d52 <wake_standby>
	#endif
	HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f72:	f004 fcf7 	bl	8005964 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, tx_msg, 4, 1000);
 8000f76:	f107 0110 	add.w	r1, r7, #16
 8000f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7e:	2204      	movs	r2, #4
 8000f80:	481d      	ldr	r0, [pc, #116]	; (8000ff8 <address_read+0x120>)
 8000f82:	f006 f808 	bl	8006f96 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, rx_msg, 8, 1000);
 8000f86:	f107 0108 	add.w	r1, r7, #8
 8000f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8e:	2208      	movs	r2, #8
 8000f90:	4819      	ldr	r0, [pc, #100]	; (8000ff8 <address_read+0x120>)
 8000f92:	f006 f96e 	bl	8007272 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa0:	f004 fce0 	bl	8005964 <HAL_GPIO_WritePin>
        crc = pec15(rx_msg, 6); // calculate PEC15 for received message (first 6 bytes)
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	2106      	movs	r1, #6
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fe2a 	bl	8000c04 <pec15>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	847b      	strh	r3, [r7, #34]	; 0x22

        uint16_t rx_crc = (rx_msg[6] << 8) + rx_msg[7]; // received PEC15
 8000fb4:	7bbb      	ldrb	r3, [r7, #14]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	843b      	strh	r3, [r7, #32]

        if (crc == rx_crc)
 8000fc4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000fc6:	8c3b      	ldrh	r3, [r7, #32]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d111      	bne.n	8000ff0 <address_read+0x118>
        {
            for (int i = 0; i < 6; i++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
 8000fd0:	e00b      	b.n	8000fea <address_read+0x112>
            {
                rx_reg[i] = rx_msg[i];
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	f107 0108 	add.w	r1, r7, #8
 8000fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fde:	440a      	add	r2, r1
 8000fe0:	7812      	ldrb	r2, [r2, #0]
 8000fe2:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 6; i++)
 8000fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	2b05      	cmp	r3, #5
 8000fee:	ddf0      	ble.n	8000fd2 <address_read+0xfa>
            }
        }
}
 8000ff0:	bf00      	nop
 8000ff2:	3728      	adds	r7, #40	; 0x28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	2000051c 	.word	0x2000051c

08000ffc <extract_voltage_reg>:



void extract_voltage_reg(uint8_t *voltage_reg, float *voltages)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++)
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e036      	b.n	800107a <extract_voltage_reg+0x7e>
    {
        if (voltage_reg[i * 2] == 0xFF && voltage_reg[(i * 2) + 1] == 0xFF)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	461a      	mov	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2bff      	cmp	r3, #255	; 0xff
 800101a:	d10e      	bne.n	800103a <extract_voltage_reg+0x3e>
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	3301      	adds	r3, #1
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2bff      	cmp	r3, #255	; 0xff
 800102a:	d106      	bne.n	800103a <extract_voltage_reg+0x3e>
        {
#ifdef NAN
            voltages[i] = NAN;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a16      	ldr	r2, [pc, #88]	; (8001090 <extract_voltage_reg+0x94>)
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	e01c      	b.n	8001074 <extract_voltage_reg+0x78>
#endif
        }
        else
        {
            voltages[i] = (float)(voltage_reg[i * 2] + (voltage_reg[(i * 2) + 1] << 8)) * 0.0001f;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	461a      	mov	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	4619      	mov	r1, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	3301      	adds	r3, #1
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	440b      	add	r3, r1
 8001058:	ee07 3a90 	vmov	s15, r3
 800105c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	4413      	add	r3, r2
 8001068:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001094 <extract_voltage_reg+0x98>
 800106c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001070:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	3301      	adds	r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2b02      	cmp	r3, #2
 800107e:	ddc5      	ble.n	800100c <extract_voltage_reg+0x10>
        }
    }
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	7fc00000 	.word	0x7fc00000
 8001094:	38d1b717 	.word	0x38d1b717

08001098 <extract_all_voltages>:


void extract_all_voltages(ltc6811 *ltc6811, float *cell_voltage, int slave_num)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b094      	sub	sp, #80	; 0x50
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]

    int cell = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	64fb      	str	r3, [r7, #76]	; 0x4c

    for (int slave = 0; slave < slave_num; slave++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80010ac:	e066      	b.n	800117c <extract_all_voltages+0xe4>
    {
        int i_max = ltc6811[slave].cell_count;
 80010ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	461a      	mov	r2, r3
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4413      	add	r3, r2
 80010be:	785b      	ldrb	r3, [r3, #1]
 80010c0:	643b      	str	r3, [r7, #64]	; 0x40

        float reg_voltages[12];

        extract_voltage_reg(ltc6811[slave].cva_reg, &reg_voltages[0]);
 80010c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	461a      	mov	r2, r3
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4413      	add	r3, r2
 80010d2:	3302      	adds	r3, #2
 80010d4:	f107 0210 	add.w	r2, r7, #16
 80010d8:	4611      	mov	r1, r2
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff8e 	bl	8000ffc <extract_voltage_reg>
        extract_voltage_reg(ltc6811[slave].cvb_reg, &reg_voltages[3]);
 80010e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	f103 0208 	add.w	r2, r3, #8
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	330c      	adds	r3, #12
 80010fa:	4619      	mov	r1, r3
 80010fc:	4610      	mov	r0, r2
 80010fe:	f7ff ff7d 	bl	8000ffc <extract_voltage_reg>
        extract_voltage_reg(ltc6811[slave].cvc_reg, &reg_voltages[6]);
 8001102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	461a      	mov	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4413      	add	r3, r2
 8001112:	f103 020e 	add.w	r2, r3, #14
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	3318      	adds	r3, #24
 800111c:	4619      	mov	r1, r3
 800111e:	4610      	mov	r0, r2
 8001120:	f7ff ff6c 	bl	8000ffc <extract_voltage_reg>
        extract_voltage_reg(ltc6811[slave].cvd_reg, &reg_voltages[9]);
 8001124:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	461a      	mov	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	f103 0214 	add.w	r2, r3, #20
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	3324      	adds	r3, #36	; 0x24
 800113e:	4619      	mov	r1, r3
 8001140:	4610      	mov	r0, r2
 8001142:	f7ff ff5b 	bl	8000ffc <extract_voltage_reg>

        for (int i = 0; i < i_max; i++)
 8001146:	2300      	movs	r3, #0
 8001148:	647b      	str	r3, [r7, #68]	; 0x44
 800114a:	e010      	b.n	800116e <extract_all_voltages+0xd6>
        {
            cell_voltage[cell] = reg_voltages[i];
 800114c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	68ba      	ldr	r2, [r7, #8]
 8001152:	4413      	add	r3, r2
 8001154:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001156:	0092      	lsls	r2, r2, #2
 8001158:	3250      	adds	r2, #80	; 0x50
 800115a:	443a      	add	r2, r7
 800115c:	3a40      	subs	r2, #64	; 0x40
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	601a      	str	r2, [r3, #0]
            cell++;
 8001162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001164:	3301      	adds	r3, #1
 8001166:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < i_max; i++)
 8001168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800116a:	3301      	adds	r3, #1
 800116c:	647b      	str	r3, [r7, #68]	; 0x44
 800116e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001172:	429a      	cmp	r2, r3
 8001174:	dbea      	blt.n	800114c <extract_all_voltages+0xb4>
    for (int slave = 0; slave < slave_num; slave++)
 8001176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001178:	3301      	adds	r3, #1
 800117a:	64bb      	str	r3, [r7, #72]	; 0x48
 800117c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	429a      	cmp	r2, r3
 8001182:	db94      	blt.n	80010ae <extract_all_voltages+0x16>
        }
    }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3750      	adds	r7, #80	; 0x50
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <read_all_voltages>:


void read_all_voltages(ltc6811 *ltc6811, int slave_num)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b084      	sub	sp, #16
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	6039      	str	r1, [r7, #0]

    for (int slave = 0; slave < slave_num; slave++)
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	e05a      	b.n	8001254 <read_all_voltages+0xc6>
    {
        address_read(ltc6811[slave].address, RDCVA, ltc6811[slave].cva_reg);
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	461a      	mov	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	7818      	ldrb	r0, [r3, #0]
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	4613      	mov	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	461a      	mov	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4413      	add	r3, r2
 80011c0:	3302      	adds	r3, #2
 80011c2:	461a      	mov	r2, r3
 80011c4:	2104      	movs	r1, #4
 80011c6:	f7ff fe87 	bl	8000ed8 <address_read>
        address_read(ltc6811[slave].address, RDCVB, ltc6811[slave].cvb_reg);
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	4613      	mov	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	461a      	mov	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	7818      	ldrb	r0, [r3, #0]
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	461a      	mov	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4413      	add	r3, r2
 80011ec:	3308      	adds	r3, #8
 80011ee:	461a      	mov	r2, r3
 80011f0:	2106      	movs	r1, #6
 80011f2:	f7ff fe71 	bl	8000ed8 <address_read>
        address_read(ltc6811[slave].address, RDCVC, ltc6811[slave].cvc_reg);
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	4613      	mov	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	461a      	mov	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	7818      	ldrb	r0, [r3, #0]
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	4613      	mov	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	461a      	mov	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4413      	add	r3, r2
 8001218:	330e      	adds	r3, #14
 800121a:	461a      	mov	r2, r3
 800121c:	2108      	movs	r1, #8
 800121e:	f7ff fe5b 	bl	8000ed8 <address_read>
        address_read(ltc6811[slave].address, RDCVD, ltc6811[slave].cvd_reg);
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	461a      	mov	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	7818      	ldrb	r0, [r3, #0]
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	4613      	mov	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	461a      	mov	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4413      	add	r3, r2
 8001244:	3314      	adds	r3, #20
 8001246:	461a      	mov	r2, r3
 8001248:	210a      	movs	r1, #10
 800124a:	f7ff fe45 	bl	8000ed8 <address_read>
    for (int slave = 0; slave < slave_num; slave++)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	3301      	adds	r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	dba0      	blt.n	800119e <read_all_voltages+0x10>
    }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <generate_i2c>:

void generate_i2c(uint8_t * comm_reg, uint8_t *comm_data, uint8_t len)
// comm_data is an array with maximum 3 bytes to be written to COMM register
// len is number of bytes to be written (how many are in comm_data)

{
 8001266:	b480      	push	{r7}
 8001268:	b085      	sub	sp, #20
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	4613      	mov	r3, r2
 8001272:	71fb      	strb	r3, [r7, #7]

	switch (len) {
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d002      	beq.n	8001280 <generate_i2c+0x1a>
 800127a:	2b03      	cmp	r3, #3
 800127c:	d02f      	beq.n	80012de <generate_i2c+0x78>
	    comm_reg[5] = ((comm_data[2] << 4) & 0b1111) | 0b00001001; //mask with lower half data byte and master ack bits

		//how to send stop bits (does it automatically if using all 5 bytes?)
	    break;
    }
}
 800127e:	e05d      	b.n	800133c <generate_i2c+0xd6>
        comm_reg[0] = ((comm_data[0] >> 4) & 0b00001111) | 0b01100000; //mask with upper half data bit and start bits
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	b2db      	uxtb	r3, r3
 8001288:	b25b      	sxtb	r3, r3
 800128a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800128e:	b25b      	sxtb	r3, r3
 8001290:	b2da      	uxtb	r2, r3
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	701a      	strb	r2, [r3, #0]
	    comm_reg[1] = (comm_data[0] << 4) & 0b11110000; //mask with lower half data byte and master ack bits
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	011a      	lsls	r2, r3, #4
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	3301      	adds	r3, #1
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	701a      	strb	r2, [r3, #0]
	    comm_reg[2] = (comm_data[1] >> 4) & 0b00001111; //mask with upper half data bit and blank bits
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	3301      	adds	r3, #1
 80012a8:	781a      	ldrb	r2, [r3, #0]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	3302      	adds	r3, #2
 80012ae:	0912      	lsrs	r2, r2, #4
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	701a      	strb	r2, [r3, #0]
	    comm_reg[3] = ((comm_data[1] << 4) & 0b11110000) | 0b00001001; //mask with lower half data byte and master ack bits
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	3301      	adds	r3, #1
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	011b      	lsls	r3, r3, #4
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	f043 0309 	orr.w	r3, r3, #9
 80012c2:	b25a      	sxtb	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3303      	adds	r3, #3
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	701a      	strb	r2, [r3, #0]
	    comm_reg[4] = 0x00;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3304      	adds	r3, #4
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
	    comm_reg[5] = 0x00;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	3305      	adds	r3, #5
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
	    break;
 80012dc:	e02e      	b.n	800133c <generate_i2c+0xd6>
	    comm_reg[0] = ((comm_data[0] >> 4) & 0b00001111) | 0b01100000; //mask with upper half data bit and start bits
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	091b      	lsrs	r3, r3, #4
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	b25b      	sxtb	r3, r3
 80012e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	701a      	strb	r2, [r3, #0]
	    comm_reg[1] = (comm_data[0] << 4) & 0b11110000; //mask with lower half data byte and master ack bits
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	011a      	lsls	r2, r3, #4
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3301      	adds	r3, #1
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	701a      	strb	r2, [r3, #0]
	    comm_reg[2] = (comm_data[1] >> 4) & 0b00001111; //mask with upper half data bit and blank bits
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	3301      	adds	r3, #1
 8001306:	781a      	ldrb	r2, [r3, #0]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	3302      	adds	r3, #2
 800130c:	0912      	lsrs	r2, r2, #4
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	701a      	strb	r2, [r3, #0]
	    comm_reg[3] = (comm_data[1] << 4) & 0b11110000; //mask with lower half data byte and master ack bits
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	3301      	adds	r3, #1
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	011a      	lsls	r2, r3, #4
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	3303      	adds	r3, #3
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	701a      	strb	r2, [r3, #0]
	    comm_reg[4] = (comm_data[2] >> 4) & 0b00001111; //mask with upper half data bit and blank bits
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	3302      	adds	r3, #2
 8001326:	781a      	ldrb	r2, [r3, #0]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	3304      	adds	r3, #4
 800132c:	0912      	lsrs	r2, r2, #4
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	701a      	strb	r2, [r3, #0]
	    comm_reg[5] = ((comm_data[2] << 4) & 0b1111) | 0b00001001; //mask with lower half data byte and master ack bits
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	3305      	adds	r3, #5
 8001336:	2209      	movs	r2, #9
 8001338:	701a      	strb	r2, [r3, #0]
	    break;
 800133a:	bf00      	nop
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <send_comm>:


void send_comm(uint8_t *i2c_message, uint8_t len, int mux_num) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	460b      	mov	r3, r1
 8001352:	607a      	str	r2, [r7, #4]
 8001354:	72fb      	strb	r3, [r7, #11]

    uint8_t comm_reg[6];

    generate_i2c(comm_reg, i2c_message, len);
 8001356:	7afa      	ldrb	r2, [r7, #11]
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	68f9      	ldr	r1, [r7, #12]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ff81 	bl	8001266 <generate_i2c>

    if (mux_num)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d004      	beq.n	8001374 <send_comm+0x2c>
    {
    	comm_reg[1] |= 0b00100000;
 800136a:	7c7b      	ldrb	r3, [r7, #17]
 800136c:	f043 0320 	orr.w	r3, r3, #32
 8001370:	b2db      	uxtb	r3, r3
 8001372:	747b      	strb	r3, [r7, #17]
    }


    wake_sleep();
 8001374:	f7ff fcd5 	bl	8000d22 <wake_sleep>

    broadcast_write(WRCOMM, comm_reg);
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	4619      	mov	r1, r3
 800137e:	f240 7021 	movw	r0, #1825	; 0x721
 8001382:	f7ff fd43 	bl	8000e0c <broadcast_write>

    broadcast_command_stcomm(STCOMM);
 8001386:	f240 7023 	movw	r0, #1827	; 0x723
 800138a:	f000 f805 	bl	8001398 <broadcast_command_stcomm>


}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <broadcast_command_stcomm>:


void broadcast_command_stcomm(uint16_t command_code)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
uint8_t CMD[2];

// see Table 36 (Broadcast Command Format) in LTC6811 datasheet
CMD[0] = 0;                  // CMD0 bits 3 thru 7  = 0
 80013a2:	2300      	movs	r3, #0
 80013a4:	773b      	strb	r3, [r7, #28]
CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 80013a6:	7f3a      	ldrb	r2, [r7, #28]
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	0a1b      	lsrs	r3, r3, #8
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4313      	orrs	r3, r2
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	773b      	strb	r3, [r7, #28]
CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	777b      	strb	r3, [r7, #29]

uint16_t crc = pec15(CMD, 2); // CRC for CMD
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	2102      	movs	r1, #2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fc1e 	bl	8000c04 <pec15>
 80013c8:	4603      	mov	r3, r0
 80013ca:	83fb      	strh	r3, [r7, #30]





uint8_t tx_msg[13] = {CMD[0], CMD[1], crc >> 8, crc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80013cc:	7f3b      	ldrb	r3, [r7, #28]
 80013ce:	733b      	strb	r3, [r7, #12]
 80013d0:	7f7b      	ldrb	r3, [r7, #29]
 80013d2:	737b      	strb	r3, [r7, #13]
 80013d4:	8bfb      	ldrh	r3, [r7, #30]
 80013d6:	0a1b      	lsrs	r3, r3, #8
 80013d8:	b29b      	uxth	r3, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	73bb      	strb	r3, [r7, #14]
 80013de:	8bfb      	ldrh	r3, [r7, #30]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	73fb      	strb	r3, [r7, #15]
 80013e4:	2300      	movs	r3, #0
 80013e6:	743b      	strb	r3, [r7, #16]
 80013e8:	2300      	movs	r3, #0
 80013ea:	747b      	strb	r3, [r7, #17]
 80013ec:	2300      	movs	r3, #0
 80013ee:	74bb      	strb	r3, [r7, #18]
 80013f0:	2300      	movs	r3, #0
 80013f2:	74fb      	strb	r3, [r7, #19]
 80013f4:	2300      	movs	r3, #0
 80013f6:	753b      	strb	r3, [r7, #20]
 80013f8:	2300      	movs	r3, #0
 80013fa:	757b      	strb	r3, [r7, #21]
 80013fc:	2300      	movs	r3, #0
 80013fe:	75bb      	strb	r3, [r7, #22]
 8001400:	2300      	movs	r3, #0
 8001402:	75fb      	strb	r3, [r7, #23]
 8001404:	2300      	movs	r3, #0
 8001406:	763b      	strb	r3, [r7, #24]



#ifdef ALWAYS_STANDBY_WAKE
wake_standby();
 8001408:	f7ff fca3 	bl	8000d52 <wake_standby>
#endif

HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001416:	f004 faa5 	bl	8005964 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi3, tx_msg, 13, 1000);
 800141a:	f107 010c 	add.w	r1, r7, #12
 800141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001422:	220d      	movs	r2, #13
 8001424:	4806      	ldr	r0, [pc, #24]	; (8001440 <broadcast_command_stcomm+0xa8>)
 8001426:	f005 fdb6 	bl	8006f96 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 800142a:	2201      	movs	r2, #1
 800142c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001430:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001434:	f004 fa96 	bl	8005964 <HAL_GPIO_WritePin>
}
 8001438:	bf00      	nop
 800143a:	3720      	adds	r7, #32
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	2000051c 	.word	0x2000051c
 8001444:	00000000 	.word	0x00000000

08001448 <calc_temp>:


double calc_temp(double adc_voltage) {
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	ed87 0b00 	vstr	d0, [r7]
	//stole this shit from arduino forum!!!
  double steinhart;
  double resistance = 10000 * adc_voltage / (3 - adc_voltage);
 8001452:	a333      	add	r3, pc, #204	; (adr r3, 8001520 <calc_temp+0xd8>)
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	e9d7 0100 	ldrd	r0, r1, [r7]
 800145c:	f7ff f898 	bl	8000590 <__aeabi_dmul>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4614      	mov	r4, r2
 8001466:	461d      	mov	r5, r3
 8001468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800146c:	f04f 0000 	mov.w	r0, #0
 8001470:	4933      	ldr	r1, [pc, #204]	; (8001540 <calc_temp+0xf8>)
 8001472:	f7fe fed5 	bl	8000220 <__aeabi_dsub>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4620      	mov	r0, r4
 800147c:	4629      	mov	r1, r5
 800147e:	f7ff f9b1 	bl	80007e4 <__aeabi_ddiv>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	e9c7 2304 	strd	r2, r3, [r7, #16]
  steinhart = resistance / 10000;     // (R/Ro)
 800148a:	a325      	add	r3, pc, #148	; (adr r3, 8001520 <calc_temp+0xd8>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001494:	f7ff f9a6 	bl	80007e4 <__aeabi_ddiv>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  steinhart = log(steinhart);                  // ln(R/Ro)
 80014a0:	ed97 0b02 	vldr	d0, [r7, #8]
 80014a4:	f008 fd04 	bl	8009eb0 <log>
 80014a8:	ed87 0b02 	vstr	d0, [r7, #8]
  steinhart /= 3950;                   // 1/B * ln(R/Ro)
 80014ac:	a31e      	add	r3, pc, #120	; (adr r3, 8001528 <calc_temp+0xe0>)
 80014ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014b6:	f7ff f995 	bl	80007e4 <__aeabi_ddiv>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	e9c7 2302 	strd	r2, r3, [r7, #8]
  steinhart += 1.0 / (25 + 273.15); // + (1/To)
 80014c2:	a31b      	add	r3, pc, #108	; (adr r3, 8001530 <calc_temp+0xe8>)
 80014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014cc:	f7fe feaa 	bl	8000224 <__adddf3>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	e9c7 2302 	strd	r2, r3, [r7, #8]
  steinhart = 1.0 / steinhart;                 // Invert
 80014d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014dc:	f04f 0000 	mov.w	r0, #0
 80014e0:	4918      	ldr	r1, [pc, #96]	; (8001544 <calc_temp+0xfc>)
 80014e2:	f7ff f97f 	bl	80007e4 <__aeabi_ddiv>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
  steinhart -= 273.15;
 80014ee:	a312      	add	r3, pc, #72	; (adr r3, 8001538 <calc_temp+0xf0>)
 80014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014f8:	f7fe fe92 	bl	8000220 <__aeabi_dsub>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	e9c7 2302 	strd	r2, r3, [r7, #8]

  return steinhart;
 8001504:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001508:	ec43 2b17 	vmov	d7, r2, r3
}
 800150c:	eeb0 0a47 	vmov.f32	s0, s14
 8001510:	eef0 0a67 	vmov.f32	s1, s15
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bdb0      	pop	{r4, r5, r7, pc}
 800151a:	bf00      	nop
 800151c:	f3af 8000 	nop.w
 8001520:	00000000 	.word	0x00000000
 8001524:	40c38800 	.word	0x40c38800
 8001528:	00000000 	.word	0x00000000
 800152c:	40aedc00 	.word	0x40aedc00
 8001530:	dcb5db83 	.word	0xdcb5db83
 8001534:	3f6b79e1 	.word	0x3f6b79e1
 8001538:	66666666 	.word	0x66666666
 800153c:	40711266 	.word	0x40711266
 8001540:	40080000 	.word	0x40080000
 8001544:	3ff00000 	.word	0x3ff00000

08001548 <read_all_temps>:


int read_all_temps(ltc6811 *ltc6811_arr, float *thermistor_temps, uint8_t mux_channels, int slave_num)
{
 8001548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154a:	b099      	sub	sp, #100	; 0x64
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	4613      	mov	r3, r2
 8001556:	71fb      	strb	r3, [r7, #7]
	double thermistor_voltage;
	int thermistor_num = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	65fb      	str	r3, [r7, #92]	; 0x5c
	int overtemp_limit = 100;
 800155c:	2364      	movs	r3, #100	; 0x64
 800155e:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t mux_off[2] = {0b10010000, 0b00000000};
 8001560:	2390      	movs	r3, #144	; 0x90
 8001562:	87bb      	strh	r3, [r7, #60]	; 0x3c


	//FOR EACH SLAVE
	  wake_sleep();
 8001564:	f7ff fbdd 	bl	8000d22 <wake_sleep>
	  broadcast_command(ADAX(MD_27k_14k, CHG_GPIO_3)); //measure gpio 3 (non mux'd thermistor)
 8001568:	f240 40e3 	movw	r0, #1251	; 0x4e3
 800156c:	f7ff fc0a 	bl	8000d84 <broadcast_command>

	  broadcast_command(ADAX(MD_27k_14k, CHG_GPIO_2)); //measure gpio 2 (non mux'd thermistor)
 8001570:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8001574:	f7ff fc06 	bl	8000d84 <broadcast_command>

	  for (int slave = 0; slave < slave_num; slave++) //loop through and read every slave AUXA register to see temps
 8001578:	2300      	movs	r3, #0
 800157a:	65bb      	str	r3, [r7, #88]	; 0x58
 800157c:	e104      	b.n	8001788 <read_all_temps+0x240>
	  {

		  ltc6811 selected_slave = ltc6811_arr[slave]; //increment over all slaves
 800157e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	461a      	mov	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4413      	add	r3, r2
 800158e:	461c      	mov	r4, r3
 8001590:	f107 0610 	add.w	r6, r7, #16
 8001594:	f104 0c20 	add.w	ip, r4, #32
 8001598:	4635      	mov	r5, r6
 800159a:	4623      	mov	r3, r4
 800159c:	6818      	ldr	r0, [r3, #0]
 800159e:	6859      	ldr	r1, [r3, #4]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015a6:	3410      	adds	r4, #16
 80015a8:	3610      	adds	r6, #16
 80015aa:	4564      	cmp	r4, ip
 80015ac:	d1f4      	bne.n	8001598 <read_all_temps+0x50>
 80015ae:	4633      	mov	r3, r6
 80015b0:	4622      	mov	r2, r4
 80015b2:	6810      	ldr	r0, [r2, #0]
 80015b4:	6851      	ldr	r1, [r2, #4]
 80015b6:	c303      	stmia	r3!, {r0, r1}


		  //READ GPIO 3
		  address_read(selected_slave.address, RDAUXA, selected_slave.auxa_reg);
 80015b8:	7c38      	ldrb	r0, [r7, #16]
 80015ba:	f107 0310 	add.w	r3, r7, #16
 80015be:	331a      	adds	r3, #26
 80015c0:	461a      	mov	r2, r3
 80015c2:	210c      	movs	r1, #12
 80015c4:	f7ff fc88 	bl	8000ed8 <address_read>

		  thermistor_voltage = ((selected_slave.auxa_reg[5] << 8) | selected_slave.auxa_reg[4]) * 0.0001;
 80015c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80015d2:	4313      	orrs	r3, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ff71 	bl	80004bc <__aeabi_i2d>
 80015da:	a371      	add	r3, pc, #452	; (adr r3, 80017a0 <read_all_temps+0x258>)
 80015dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e0:	f7fe ffd6 	bl	8000590 <__aeabi_dmul>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

		  thermistor_temps[thermistor_num] = calc_temp(thermistor_voltage); //convert voltage to temperature in degrees celcius
 80015ec:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80015f0:	f7ff ff2a 	bl	8001448 <calc_temp>
 80015f4:	ec51 0b10 	vmov	r0, r1, d0
 80015f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	18d4      	adds	r4, r2, r3
 8001600:	f7ff fa76 	bl	8000af0 <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	6023      	str	r3, [r4, #0]

		  if(thermistor_temps[thermistor_num] > overtemp_limit) //if overtemp, trigger shutdown
 8001608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	4413      	add	r3, r2
 8001610:	ed93 7a00 	vldr	s14, [r3]
 8001614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001616:	ee07 3a90 	vmov	s15, r3
 800161a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001626:	dd01      	ble.n	800162c <read_all_temps+0xe4>
		  {
			  return 1; //ADD SDC
 8001628:	2301      	movs	r3, #1
 800162a:	e0b3      	b.n	8001794 <read_all_temps+0x24c>
		  }

		  thermistor_num++;
 800162c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800162e:	3301      	adds	r3, #1
 8001630:	65fb      	str	r3, [r7, #92]	; 0x5c


		 for (int mux = 0; mux < 2; mux++) //loop through both muxes on a slave
 8001632:	2300      	movs	r3, #0
 8001634:	657b      	str	r3, [r7, #84]	; 0x54
 8001636:	e064      	b.n	8001702 <read_all_temps+0x1ba>
			 {
			  	 uint8_t i2c_data[2] = {0b10010000, 0b00001000};	//bits 4 - 7 are address bits for the mux IC, bits 11 - 15 are the address bits for the mux channel, start with channel 0
 8001638:	f44f 6309 	mov.w	r3, #2192	; 0x890
 800163c:	873b      	strh	r3, [r7, #56]	; 0x38

				 for (int mux_channel = 0;  mux_channel < mux_channels; mux_channel++)
 800163e:	2300      	movs	r3, #0
 8001640:	653b      	str	r3, [r7, #80]	; 0x50
 8001642:	e050      	b.n	80016e6 <read_all_temps+0x19e>
				 	 {

					 send_comm(i2c_data, 2, mux); //generate commands to access each mux channel
 8001644:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001648:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800164a:	2102      	movs	r1, #2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fe7b 	bl	8001348 <send_comm>

					 broadcast_command(ADAX(MD_27k_14k, CHG_GPIO_1)); //measure gpio 1 (mux output)
 8001652:	f240 40e1 	movw	r0, #1249	; 0x4e1
 8001656:	f7ff fb95 	bl	8000d84 <broadcast_command>


					 address_read(selected_slave.address, RDAUXA, selected_slave.auxa_reg); //read auxa_reg where adc value was stored
 800165a:	7c38      	ldrb	r0, [r7, #16]
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	331a      	adds	r3, #26
 8001662:	461a      	mov	r2, r3
 8001664:	210c      	movs	r1, #12
 8001666:	f7ff fc37 	bl	8000ed8 <address_read>


					 thermistor_voltage = ((selected_slave.auxa_reg[1] << 8) | selected_slave.auxa_reg[0]) * 0.0001;
 800166a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001674:	4313      	orrs	r3, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe ff20 	bl	80004bc <__aeabi_i2d>
 800167c:	a348      	add	r3, pc, #288	; (adr r3, 80017a0 <read_all_temps+0x258>)
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	f7fe ff85 	bl	8000590 <__aeabi_dmul>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


					 thermistor_temps[thermistor_num] = calc_temp(thermistor_voltage); //convert voltage to temperature in degrees celcius
 800168e:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8001692:	f7ff fed9 	bl	8001448 <calc_temp>
 8001696:	ec51 0b10 	vmov	r0, r1, d0
 800169a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	18d4      	adds	r4, r2, r3
 80016a2:	f7ff fa25 	bl	8000af0 <__aeabi_d2f>
 80016a6:	4603      	mov	r3, r0
 80016a8:	6023      	str	r3, [r4, #0]


					 if(thermistor_temps[thermistor_num] > overtemp_limit) //if overtemp, trigger shutdown
 80016aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	4413      	add	r3, r2
 80016b2:	ed93 7a00 	vldr	s14, [r3]
 80016b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016b8:	ee07 3a90 	vmov	s15, r3
 80016bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c8:	dd01      	ble.n	80016ce <read_all_temps+0x186>
					 	 {
						  return 1; //AMS_OK fault
 80016ca:	2301      	movs	r3, #1
			  return 1; //ADD SDC
 80016cc:	e062      	b.n	8001794 <read_all_temps+0x24c>
					 	 }

					  thermistor_num++;
 80016ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016d0:	3301      	adds	r3, #1
 80016d2:	65fb      	str	r3, [r7, #92]	; 0x5c

					  i2c_data[1]++;
 80016d4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80016d8:	3301      	adds	r3, #1
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				 for (int mux_channel = 0;  mux_channel < mux_channels; mux_channel++)
 80016e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016e2:	3301      	adds	r3, #1
 80016e4:	653b      	str	r3, [r7, #80]	; 0x50
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80016ea:	429a      	cmp	r2, r3
 80016ec:	dbaa      	blt.n	8001644 <read_all_temps+0xfc>

				 	 }
				  send_comm(mux_off, 2, mux);
 80016ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80016f4:	2102      	movs	r1, #2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fe26 	bl	8001348 <send_comm>
		 for (int mux = 0; mux < 2; mux++) //loop through both muxes on a slave
 80016fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016fe:	3301      	adds	r3, #1
 8001700:	657b      	str	r3, [r7, #84]	; 0x54
 8001702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001704:	2b01      	cmp	r3, #1
 8001706:	dd97      	ble.n	8001638 <read_all_temps+0xf0>

			 }


		  address_read(selected_slave.address, RDAUXA, selected_slave.auxa_reg);
 8001708:	7c38      	ldrb	r0, [r7, #16]
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	331a      	adds	r3, #26
 8001710:	461a      	mov	r2, r3
 8001712:	210c      	movs	r1, #12
 8001714:	f7ff fbe0 	bl	8000ed8 <address_read>

		  thermistor_voltage = ((selected_slave.auxa_reg[3] << 8) | selected_slave.auxa_reg[2]) * 0.0001;
 8001718:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001722:	4313      	orrs	r3, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe fec9 	bl	80004bc <__aeabi_i2d>
 800172a:	a31d      	add	r3, pc, #116	; (adr r3, 80017a0 <read_all_temps+0x258>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	f7fe ff2e 	bl	8000590 <__aeabi_dmul>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

		  thermistor_temps[thermistor_num] = calc_temp(thermistor_voltage); //convert voltage to temperature in degrees celcius
 800173c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8001740:	f7ff fe82 	bl	8001448 <calc_temp>
 8001744:	ec51 0b10 	vmov	r0, r1, d0
 8001748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	68ba      	ldr	r2, [r7, #8]
 800174e:	18d4      	adds	r4, r2, r3
 8001750:	f7ff f9ce 	bl	8000af0 <__aeabi_d2f>
 8001754:	4603      	mov	r3, r0
 8001756:	6023      	str	r3, [r4, #0]

		  if(thermistor_temps[thermistor_num] > overtemp_limit) //if overtemp, trigger shutdown
 8001758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	4413      	add	r3, r2
 8001760:	ed93 7a00 	vldr	s14, [r3]
 8001764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001766:	ee07 3a90 	vmov	s15, r3
 800176a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800176e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001776:	dd01      	ble.n	800177c <read_all_temps+0x234>
		  {
			  return 1; //ADD SDC
 8001778:	2301      	movs	r3, #1
 800177a:	e00b      	b.n	8001794 <read_all_temps+0x24c>
		  }

		  thermistor_num++;
 800177c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800177e:	3301      	adds	r3, #1
 8001780:	65fb      	str	r3, [r7, #92]	; 0x5c
	  for (int slave = 0; slave < slave_num; slave++) //loop through and read every slave AUXA register to see temps
 8001782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001784:	3301      	adds	r3, #1
 8001786:	65bb      	str	r3, [r7, #88]	; 0x58
 8001788:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	f6ff aef6 	blt.w	800157e <read_all_temps+0x36>





	  return 0;
 8001792:	2300      	movs	r3, #0




}
 8001794:	4618      	mov	r0, r3
 8001796:	3764      	adds	r7, #100	; 0x64
 8001798:	46bd      	mov	sp, r7
 800179a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800179c:	f3af 8000 	nop.w
 80017a0:	eb1c432d 	.word	0xeb1c432d
 80017a4:	3f1a36e2 	.word	0x3f1a36e2

080017a8 <reset_SOC>:


//once battery is charged, reset SOC value
//use lookup table / formula to measure pack voltage and estimate SOC
void reset_SOC()
{
 80017a8:	b5b0      	push	{r4, r5, r7, lr}
 80017aa:	af00      	add	r7, sp, #0
last_SOC_update_ms = HAL_GetTick();
 80017ac:	f001 f9a6 	bl	8002afc <HAL_GetTick>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2200      	movs	r2, #0
 80017b4:	461c      	mov	r4, r3
 80017b6:	4615      	mov	r5, r2
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <reset_SOC+0x28>)
 80017ba:	e9c3 4500 	strd	r4, r5, [r3]
SOC = 100;
 80017be:	4905      	ldr	r1, [pc, #20]	; (80017d4 <reset_SOC+0x2c>)
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <reset_SOC+0x30>)
 80017c6:	e9c1 2300 	strd	r2, r3, [r1]
}
 80017ca:	bf00      	nop
 80017cc:	bdb0      	pop	{r4, r5, r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000620 	.word	0x20000620
 80017d4:	20000618 	.word	0x20000618
 80017d8:	40590000 	.word	0x40590000

080017dc <update_moving_average>:
SOC -= current * time_since_last_update / BATTERY_CAPCITY;

}

void update_moving_average(float *current_avg, float new_sample)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	ed87 0a00 	vstr	s0, [r7]

	*current_avg = ((MOVING_AVERAGE_SAMPLES - 1) * *current_avg + new_sample) / MOVING_AVERAGE_SAMPLES;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	edd3 7a00 	vldr	s15, [r3]
 80017ee:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80017f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017f6:	edd7 7a00 	vldr	s15, [r7]
 80017fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017fe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001802:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	edc3 7a00 	vstr	s15, [r3]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <check_fusable_link>:

int check_fusable_link(float ma, float cell_voltage)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001822:	edc7 0a00 	vstr	s1, [r7]

	if(cell_voltage < ma * voltage_sag_allowed_float)
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <check_fusable_link+0x3c>)
 8001828:	ed93 7a00 	vldr	s14, [r3]
 800182c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001834:	ed97 7a00 	vldr	s14, [r7]
 8001838:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800183c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001840:	d501      	bpl.n	8001846 <check_fusable_link+0x2e>
	{
		return 1; //ADD SDC?
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <check_fusable_link+0x30>
	}
	return 0;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	20000000 	.word	0x20000000

08001858 <HAL_TIM_IC_CaptureCallback>:




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // If the interrupt is triggered by channel 1
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	7f1b      	ldrb	r3, [r3, #28]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d125      	bne.n	80018b4 <HAL_TIM_IC_CaptureCallback+0x5c>
	{
		// Read the IC value
		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001868:	2104      	movs	r1, #4
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f007 fb08 	bl	8008e80 <HAL_TIM_ReadCapturedValue>
 8001870:	4603      	mov	r3, r0
 8001872:	4a12      	ldr	r2, [pc, #72]	; (80018bc <HAL_TIM_IC_CaptureCallback+0x64>)
 8001874:	6013      	str	r3, [r2, #0]

		if (ICValue != 0)
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_TIM_IC_CaptureCallback+0x64>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d01a      	beq.n	80018b4 <HAL_TIM_IC_CaptureCallback+0x5c>
		{
			// calculate the Duty Cycle
			duty = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) *100)/ICValue;
 800187e:	2100      	movs	r1, #0
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f007 fafd 	bl	8008e80 <HAL_TIM_ReadCapturedValue>
 8001886:	4603      	mov	r3, r0
 8001888:	2264      	movs	r2, #100	; 0x64
 800188a:	fb03 f202 	mul.w	r2, r3, r2
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_TIM_IC_CaptureCallback+0x64>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	fbb2 f3f3 	udiv	r3, r2, r3
 8001896:	ee07 3a90 	vmov	s15, r3
 800189a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_TIM_IC_CaptureCallback+0x68>)
 80018a0:	edc3 7a00 	vstr	s15, [r3]

			frequency = 7500/ICValue;
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_TIM_IC_CaptureCallback+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80018ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b0:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80018b2:	6013      	str	r3, [r2, #0]
		}
	}
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000708 	.word	0x20000708
 80018c0:	20000710 	.word	0x20000710
 80018c4:	2000070c 	.word	0x2000070c

080018c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ce:	f001 f8b0 	bl	8002a32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d2:	f000 f903 	bl	8001adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018d6:	f000 fcb5 	bl	8002244 <MX_GPIO_Init>
  MX_DMA_Init();
 80018da:	f000 fc81 	bl	80021e0 <MX_DMA_Init>
  MX_RTC_Init();
 80018de:	f000 fac5 	bl	8001e6c <MX_RTC_Init>
  MX_FDCAN1_Init();
 80018e2:	f000 fa37 	bl	8001d54 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80018e6:	f000 fa7b 	bl	8001de0 <MX_FDCAN2_Init>
  MX_SPI3_Init();
 80018ea:	f000 fb21 	bl	8001f30 <MX_SPI3_Init>
  MX_ADC1_Init();
 80018ee:	f000 f943 	bl	8001b78 <MX_ADC1_Init>
  MX_ADC2_Init();
 80018f2:	f000 f9b9 	bl	8001c68 <MX_ADC2_Init>
  MX_TIM2_Init();
 80018f6:	f000 fb59 	bl	8001fac <MX_TIM2_Init>
  MX_TIM15_Init();
 80018fa:	f000 fbcd 	bl	8002098 <MX_TIM15_Init>





  HAL_Delay(100); // 100ms should allow all relevant power circuitry to stabilize
 80018fe:	2064      	movs	r0, #100	; 0x64
 8001900:	f001 f908 	bl	8002b14 <HAL_Delay>

  //start ADCs
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001904:	217f      	movs	r1, #127	; 0x7f
 8001906:	4869      	ldr	r0, [pc, #420]	; (8001aac <main+0x1e4>)
 8001908:	f002 ffc6 	bl	8004898 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, 1);
 800190c:	2201      	movs	r2, #1
 800190e:	4968      	ldr	r1, [pc, #416]	; (8001ab0 <main+0x1e8>)
 8001910:	4866      	ldr	r0, [pc, #408]	; (8001aac <main+0x1e4>)
 8001912:	f001 fe7d 	bl	8003610 <HAL_ADC_Start_DMA>
  HAL_ADC_Start(&hadc1);
 8001916:	4865      	ldr	r0, [pc, #404]	; (8001aac <main+0x1e4>)
 8001918:	f001 fd96 	bl	8003448 <HAL_ADC_Start>

  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800191c:	217f      	movs	r1, #127	; 0x7f
 800191e:	4865      	ldr	r0, [pc, #404]	; (8001ab4 <main+0x1ec>)
 8001920:	f002 ffba 	bl	8004898 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_val2, 2);
 8001924:	2202      	movs	r2, #2
 8001926:	4964      	ldr	r1, [pc, #400]	; (8001ab8 <main+0x1f0>)
 8001928:	4862      	ldr	r0, [pc, #392]	; (8001ab4 <main+0x1ec>)
 800192a:	f001 fe71 	bl	8003610 <HAL_ADC_Start_DMA>
  HAL_ADC_Start(&hadc2);
 800192e:	4861      	ldr	r0, [pc, #388]	; (8001ab4 <main+0x1ec>)
 8001930:	f001 fd8a 	bl	8003448 <HAL_ADC_Start>

  //start PWM measurement for IMD measurement
  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_2);   // main channel
 8001934:	2104      	movs	r1, #4
 8001936:	4861      	ldr	r0, [pc, #388]	; (8001abc <main+0x1f4>)
 8001938:	f006 fcca 	bl	80082d0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_1);   // indirect channel
 800193c:	2100      	movs	r1, #0
 800193e:	485f      	ldr	r0, [pc, #380]	; (8001abc <main+0x1f4>)
 8001940:	f006 fbc2 	bl	80080c8 <HAL_TIM_IC_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001944:	210c      	movs	r1, #12
 8001946:	485e      	ldr	r0, [pc, #376]	; (8001ac0 <main+0x1f8>)
 8001948:	f006 fa4a 	bl	8007de0 <HAL_TIM_PWM_Start>

  //reset_SOC();

  init_LTC6811();
 800194c:	f7ff f98e 	bl	8000c6c <init_LTC6811>

  wake_sleep(); // wake LTC6811 from sleep
 8001950:	f7ff f9e7 	bl	8000d22 <wake_sleep>

  // Configuration for all LTC6811s
  struct ltc6811_config ltc6811_config;
  ltc6811_config.gpio_pulldowns = GPIO1_NO_PULLDOWN | GPIO2_NO_PULLDOWN | GPIO3_NO_PULLDOWN | GPIO4_NO_PULLDOWN | GPIO5_NO_PULLDOWN;
 8001954:	231f      	movs	r3, #31
 8001956:	703b      	strb	r3, [r7, #0]
  ltc6811_config.refon = REFON_STAY_POWERED;
 8001958:	2301      	movs	r3, #1
 800195a:	707b      	strb	r3, [r7, #1]
  ltc6811_config.adcopt = ADCOPT_MODE_0;
 800195c:	2300      	movs	r3, #0
 800195e:	70bb      	strb	r3, [r7, #2]
  ltc6811_config.vuv = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	80bb      	strh	r3, [r7, #4]
  ltc6811_config.vov = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	80fb      	strh	r3, [r7, #6]
  ltc6811_config.dcc = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	817b      	strh	r3, [r7, #10]
  ltc6811_config.dcto = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	723b      	strb	r3, [r7, #8]
  update_config(&ltc6811_config);
 8001970:	463b      	mov	r3, r7
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff f980 	bl	8000c78 <update_config>


  // configure LTC6811 structs to match real life setup
  for (int i = 0; i < NUM_OF_SLAVES; i++)
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
 800197c:	e01f      	b.n	80019be <main+0xf6>
  {
      ltc6811_arr[i].address = i;
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	b2d8      	uxtb	r0, r3
 8001982:	4950      	ldr	r1, [pc, #320]	; (8001ac4 <main+0x1fc>)
 8001984:	69fa      	ldr	r2, [r7, #28]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	440b      	add	r3, r1
 8001990:	4602      	mov	r2, r0
 8001992:	701a      	strb	r2, [r3, #0]
      ltc6811_arr[i].cell_count = (i % 2 == 0) ? EVEN_SLAVE_CELLS : ODD_SLAVE_CELLS;
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <main+0xda>
 800199e:	200c      	movs	r0, #12
 80019a0:	e000      	b.n	80019a4 <main+0xdc>
 80019a2:	200b      	movs	r0, #11
 80019a4:	4947      	ldr	r1, [pc, #284]	; (8001ac4 <main+0x1fc>)
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	440b      	add	r3, r1
 80019b2:	3301      	adds	r3, #1
 80019b4:	4602      	mov	r2, r0
 80019b6:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < NUM_OF_SLAVES; i++)
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	3301      	adds	r3, #1
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	dddc      	ble.n	800197e <main+0xb6>
  }

  reset_SOC();
 80019c4:	f7ff fef0 	bl	80017a8 <reset_SOC>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);	//set AMS_OK
 80019c8:	2200      	movs	r2, #0
 80019ca:	2104      	movs	r1, #4
 80019cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d0:	f003 ffc8 	bl	8005964 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      wake_sleep(); // wake LTC6811 from sleep
 80019d4:	f7ff f9a5 	bl	8000d22 <wake_sleep>
      // send command to read cell voltages
      broadcast_command(ADCV(MD_27k_14k, DCP_NOT_PERMITTED, CH_ALL));
 80019d8:	f44f 7038 	mov.w	r0, #736	; 0x2e0
 80019dc:	f7ff f9d2 	bl	8000d84 <broadcast_command>

      HAL_Delay(1); // reading all cell voltages @ "27kHz" should take 1ms
 80019e0:	2001      	movs	r0, #1
 80019e2:	f001 f897 	bl	8002b14 <HAL_Delay>

      // read cell voltage registers from all slaves on the bus
      read_all_voltages(ltc6811_arr, NUM_OF_SLAVES);
 80019e6:	2101      	movs	r1, #1
 80019e8:	4836      	ldr	r0, [pc, #216]	; (8001ac4 <main+0x1fc>)
 80019ea:	f7ff fbd0 	bl	800118e <read_all_voltages>

      // calculate actual voltage values
      extract_all_voltages(ltc6811_arr, cell_voltage, NUM_OF_SLAVES);
 80019ee:	2201      	movs	r2, #1
 80019f0:	4935      	ldr	r1, [pc, #212]	; (8001ac8 <main+0x200>)
 80019f2:	4834      	ldr	r0, [pc, #208]	; (8001ac4 <main+0x1fc>)
 80019f4:	f7ff fb50 	bl	8001098 <extract_all_voltages>
//      discharge_cell_off(&ltc6811_config, 2);
//
//      HAL_Delay(1000);


      float sum_voltage = 0;
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
      for(int i = 0; i < NUM_OF_CELLS; i++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	e01d      	b.n	8001a40 <main+0x178>
      {
      update_moving_average(&cell_voltage_ma[i], cell_voltage[i]);
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4a30      	ldr	r2, [pc, #192]	; (8001acc <main+0x204>)
 8001a0a:	441a      	add	r2, r3
 8001a0c:	492e      	ldr	r1, [pc, #184]	; (8001ac8 <main+0x200>)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	edd3 7a00 	vldr	s15, [r3]
 8001a18:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	f7ff fedd 	bl	80017dc <update_moving_average>
      sum_voltage += cell_voltage_ma[i];
 8001a22:	4a2a      	ldr	r2, [pc, #168]	; (8001acc <main+0x204>)
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	edd3 7a00 	vldr	s15, [r3]
 8001a2e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a36:	edc7 7a06 	vstr	s15, [r7, #24]
      for(int i = 0; i < NUM_OF_CELLS; i++)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	2b0b      	cmp	r3, #11
 8001a44:	ddde      	ble.n	8001a04 <main+0x13c>
      }
      float average_voltage = sum_voltage / NUM_OF_CELLS;
 8001a46:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a4a:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8001a4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a52:	edc7 7a03 	vstr	s15, [r7, #12]

      for(int i = 0; i < NUM_OF_CELLS; i++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	e014      	b.n	8001a86 <main+0x1be>
      {
      if(check_fusable_link(average_voltage, cell_voltage[i]))
 8001a5c:	4a1a      	ldr	r2, [pc, #104]	; (8001ac8 <main+0x200>)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	edd3 7a00 	vldr	s15, [r3]
 8001a68:	eef0 0a67 	vmov.f32	s1, s15
 8001a6c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a70:	f7ff fed2 	bl	8001818 <check_fusable_link>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d002      	beq.n	8001a80 <main+0x1b8>
      {
    	  fuse_pop = 1;
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <main+0x208>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
      for(int i = 0; i < NUM_OF_CELLS; i++)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	3301      	adds	r3, #1
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	2b0b      	cmp	r3, #11
 8001a8a:	dde7      	ble.n	8001a5c <main+0x194>
      }
      }


	  if(read_all_temps(ltc6811_arr, thermistor_temps, NUM_OF_MUX_CHANNELS, NUM_OF_SLAVES)) //0 = no fault, 1 = fault
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	2208      	movs	r2, #8
 8001a90:	4910      	ldr	r1, [pc, #64]	; (8001ad4 <main+0x20c>)
 8001a92:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <main+0x1fc>)
 8001a94:	f7ff fd58 	bl	8001548 <read_all_temps>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d002      	beq.n	8001aa4 <main+0x1dc>
	  {
		  AMS_OK = 1;
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <main+0x210>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]
	  }

	  HAL_Delay(100);
 8001aa4:	2064      	movs	r0, #100	; 0x64
 8001aa6:	f001 f835 	bl	8002b14 <HAL_Delay>
  {
 8001aaa:	e793      	b.n	80019d4 <main+0x10c>
 8001aac:	20000294 	.word	0x20000294
 8001ab0:	20000628 	.word	0x20000628
 8001ab4:	20000300 	.word	0x20000300
 8001ab8:	2000062c 	.word	0x2000062c
 8001abc:	200005cc 	.word	0x200005cc
 8001ac0:	20000580 	.word	0x20000580
 8001ac4:	20000690 	.word	0x20000690
 8001ac8:	20000630 	.word	0x20000630
 8001acc:	20000660 	.word	0x20000660
 8001ad0:	20000700 	.word	0x20000700
 8001ad4:	200006b8 	.word	0x200006b8
 8001ad8:	20000704 	.word	0x20000704

08001adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b094      	sub	sp, #80	; 0x50
 8001ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae2:	f107 0318 	add.w	r3, r7, #24
 8001ae6:	2238      	movs	r2, #56	; 0x38
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f008 f9d8 	bl	8009ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
 8001afc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001afe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b02:	f003 ff47 	bl	8005994 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001b06:	230a      	movs	r3, #10
 8001b08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b10:	2340      	movs	r3, #64	; 0x40
 8001b12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b14:	2301      	movs	r3, #1
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001b20:	2301      	movs	r3, #1
 8001b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 15;
 8001b24:	230f      	movs	r3, #15
 8001b26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b30:	2302      	movs	r3, #2
 8001b32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b34:	f107 0318 	add.w	r3, r7, #24
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f003 ffdf 	bl	8005afc <HAL_RCC_OscConfig>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001b44:	f000 fbda 	bl	80022fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b48:	230f      	movs	r3, #15
 8001b4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	2103      	movs	r1, #3
 8001b60:	4618      	mov	r0, r3
 8001b62:	f004 fae3 	bl	800612c <HAL_RCC_ClockConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b6c:	f000 fbc6 	bl	80022fc <Error_Handler>
  }
}
 8001b70:	bf00      	nop
 8001b72:	3750      	adds	r7, #80	; 0x50
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08c      	sub	sp, #48	; 0x30
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f008 f985 	bl	8009ea0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b96:	4b32      	ldr	r3, [pc, #200]	; (8001c60 <MX_ADC1_Init+0xe8>)
 8001b98:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001b9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b9e:	4b30      	ldr	r3, [pc, #192]	; (8001c60 <MX_ADC1_Init+0xe8>)
 8001ba0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ba4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ba6:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <MX_ADC1_Init+0xe8>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bac:	4b2c      	ldr	r3, [pc, #176]	; (8001c60 <MX_ADC1_Init+0xe8>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <MX_ADC1_Init+0xe8>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bb8:	4b29      	ldr	r3, [pc, #164]	; (8001c60 <MX_ADC1_Init+0xe8>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bbe:	4b28      	ldr	r3, [pc, #160]	; (8001c60 <MX_ADC1_Init+0xe8>)
 8001bc0:	2204      	movs	r2, #4
 8001bc2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001bc4:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <MX_ADC1_Init+0xe8>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001bca:	4b25      	ldr	r3, [pc, #148]	; (8001c60 <MX_ADC1_Init+0xe8>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001bd0:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <MX_ADC1_Init+0xe8>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bd6:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <MX_ADC1_Init+0xe8>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bde:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <MX_ADC1_Init+0xe8>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001be4:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <MX_ADC1_Init+0xe8>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001bea:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <MX_ADC1_Init+0xe8>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <MX_ADC1_Init+0xe8>)
 8001bf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bf8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <MX_ADC1_Init+0xe8>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c02:	4817      	ldr	r0, [pc, #92]	; (8001c60 <MX_ADC1_Init+0xe8>)
 8001c04:	f001 fa5e 	bl	80030c4 <HAL_ADC_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8001c0e:	f000 fb75 	bl	80022fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4810      	ldr	r0, [pc, #64]	; (8001c60 <MX_ADC1_Init+0xe8>)
 8001c1e:	f002 fecf 	bl	80049c0 <HAL_ADCEx_MultiModeConfigChannel>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001c28:	f000 fb68 	bl	80022fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001c2c:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <MX_ADC1_Init+0xec>)
 8001c2e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c30:	2306      	movs	r3, #6
 8001c32:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001c34:	2307      	movs	r3, #7
 8001c36:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c38:	237f      	movs	r3, #127	; 0x7f
 8001c3a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	4619      	mov	r1, r3
 8001c48:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_ADC1_Init+0xe8>)
 8001c4a:	f002 f83d 	bl	8003cc8 <HAL_ADC_ConfigChannel>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001c54:	f000 fb52 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	3730      	adds	r7, #48	; 0x30
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000294 	.word	0x20000294
 8001c64:	10c00010 	.word	0x10c00010

08001c68 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c6e:	463b      	mov	r3, r7
 8001c70:	2220      	movs	r2, #32
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f008 f913 	bl	8009ea0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001c7a:	4b32      	ldr	r3, [pc, #200]	; (8001d44 <MX_ADC2_Init+0xdc>)
 8001c7c:	4a32      	ldr	r2, [pc, #200]	; (8001d48 <MX_ADC2_Init+0xe0>)
 8001c7e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c80:	4b30      	ldr	r3, [pc, #192]	; (8001d44 <MX_ADC2_Init+0xdc>)
 8001c82:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001c86:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001c88:	4b2e      	ldr	r3, [pc, #184]	; (8001d44 <MX_ADC2_Init+0xdc>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c8e:	4b2d      	ldr	r3, [pc, #180]	; (8001d44 <MX_ADC2_Init+0xdc>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001c94:	4b2b      	ldr	r3, [pc, #172]	; (8001d44 <MX_ADC2_Init+0xdc>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001c9a:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <MX_ADC2_Init+0xdc>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001ca0:	4b28      	ldr	r3, [pc, #160]	; (8001d44 <MX_ADC2_Init+0xdc>)
 8001ca2:	2208      	movs	r2, #8
 8001ca4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001ca6:	4b27      	ldr	r3, [pc, #156]	; (8001d44 <MX_ADC2_Init+0xdc>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001cac:	4b25      	ldr	r3, [pc, #148]	; (8001d44 <MX_ADC2_Init+0xdc>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8001cb2:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <MX_ADC2_Init+0xdc>)
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001cb8:	4b22      	ldr	r3, [pc, #136]	; (8001d44 <MX_ADC2_Init+0xdc>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cc0:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <MX_ADC2_Init+0xdc>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cc6:	4b1f      	ldr	r3, [pc, #124]	; (8001d44 <MX_ADC2_Init+0xdc>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001ccc:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <MX_ADC2_Init+0xdc>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <MX_ADC2_Init+0xdc>)
 8001cd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cda:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001cdc:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <MX_ADC2_Init+0xdc>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001ce4:	4817      	ldr	r0, [pc, #92]	; (8001d44 <MX_ADC2_Init+0xdc>)
 8001ce6:	f001 f9ed 	bl	80030c4 <HAL_ADC_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8001cf0:	f000 fb04 	bl	80022fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001cf4:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <MX_ADC2_Init+0xe4>)
 8001cf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cf8:	2306      	movs	r3, #6
 8001cfa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001cfc:	2307      	movs	r3, #7
 8001cfe:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d00:	237f      	movs	r3, #127	; 0x7f
 8001d02:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d04:	2304      	movs	r3, #4
 8001d06:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	4619      	mov	r1, r3
 8001d10:	480c      	ldr	r0, [pc, #48]	; (8001d44 <MX_ADC2_Init+0xdc>)
 8001d12:	f001 ffd9 	bl	8003cc8 <HAL_ADC_ConfigChannel>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8001d1c:	f000 faee 	bl	80022fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <MX_ADC2_Init+0xe8>)
 8001d22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001d24:	230c      	movs	r3, #12
 8001d26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d28:	463b      	mov	r3, r7
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4805      	ldr	r0, [pc, #20]	; (8001d44 <MX_ADC2_Init+0xdc>)
 8001d2e:	f001 ffcb 	bl	8003cc8 <HAL_ADC_ConfigChannel>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8001d38:	f000 fae0 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001d3c:	bf00      	nop
 8001d3e:	3720      	adds	r7, #32
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000300 	.word	0x20000300
 8001d48:	50000100 	.word	0x50000100
 8001d4c:	47520000 	.word	0x47520000
 8001d50:	36902000 	.word	0x36902000

08001d54 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001d58:	4b1f      	ldr	r3, [pc, #124]	; (8001dd8 <MX_FDCAN1_Init+0x84>)
 8001d5a:	4a20      	ldr	r2, [pc, #128]	; (8001ddc <MX_FDCAN1_Init+0x88>)
 8001d5c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001d5e:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <MX_FDCAN1_Init+0x84>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001d64:	4b1c      	ldr	r3, [pc, #112]	; (8001dd8 <MX_FDCAN1_Init+0x84>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001d6a:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <MX_FDCAN1_Init+0x84>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001d70:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <MX_FDCAN1_Init+0x84>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001d76:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <MX_FDCAN1_Init+0x84>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001d7c:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <MX_FDCAN1_Init+0x84>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 12;
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <MX_FDCAN1_Init+0x84>)
 8001d84:	220c      	movs	r2, #12
 8001d86:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <MX_FDCAN1_Init+0x84>)
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 16;
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <MX_FDCAN1_Init+0x84>)
 8001d90:	2210      	movs	r2, #16
 8001d92:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 8001d94:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <MX_FDCAN1_Init+0x84>)
 8001d96:	2203      	movs	r2, #3
 8001d98:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 20;
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <MX_FDCAN1_Init+0x84>)
 8001d9c:	2214      	movs	r2, #20
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8001da0:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <MX_FDCAN1_Init+0x84>)
 8001da2:	2205      	movs	r2, #5
 8001da4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 6;
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <MX_FDCAN1_Init+0x84>)
 8001da8:	2206      	movs	r2, #6
 8001daa:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <MX_FDCAN1_Init+0x84>)
 8001dae:	2205      	movs	r2, #5
 8001db0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MX_FDCAN1_Init+0x84>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001db8:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <MX_FDCAN1_Init+0x84>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <MX_FDCAN1_Init+0x84>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001dc4:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <MX_FDCAN1_Init+0x84>)
 8001dc6:	f003 fa85 	bl	80052d4 <HAL_FDCAN_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001dd0:	f000 fa94 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	2000042c 	.word	0x2000042c
 8001ddc:	40006400 	.word	0x40006400

08001de0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001de4:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <MX_FDCAN2_Init+0x84>)
 8001de6:	4a20      	ldr	r2, [pc, #128]	; (8001e68 <MX_FDCAN2_Init+0x88>)
 8001de8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001dea:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <MX_FDCAN2_Init+0x84>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001df0:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <MX_FDCAN2_Init+0x84>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001df6:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <MX_FDCAN2_Init+0x84>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <MX_FDCAN2_Init+0x84>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001e02:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <MX_FDCAN2_Init+0x84>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001e08:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <MX_FDCAN2_Init+0x84>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <MX_FDCAN2_Init+0x84>)
 8001e10:	2210      	movs	r2, #16
 8001e12:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001e14:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <MX_FDCAN2_Init+0x84>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8001e1a:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <MX_FDCAN2_Init+0x84>)
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001e20:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <MX_FDCAN2_Init+0x84>)
 8001e22:	2202      	movs	r2, #2
 8001e24:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001e26:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <MX_FDCAN2_Init+0x84>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001e2c:	4b0d      	ldr	r3, [pc, #52]	; (8001e64 <MX_FDCAN2_Init+0x84>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001e32:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <MX_FDCAN2_Init+0x84>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <MX_FDCAN2_Init+0x84>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <MX_FDCAN2_Init+0x84>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001e44:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <MX_FDCAN2_Init+0x84>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <MX_FDCAN2_Init+0x84>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001e50:	4804      	ldr	r0, [pc, #16]	; (8001e64 <MX_FDCAN2_Init+0x84>)
 8001e52:	f003 fa3f 	bl	80052d4 <HAL_FDCAN_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8001e5c:	f000 fa4e 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000490 	.word	0x20000490
 8001e68:	40006800 	.word	0x40006800

08001e6c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001e80:	2300      	movs	r3, #0
 8001e82:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e84:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <MX_RTC_Init+0xbc>)
 8001e86:	4a29      	ldr	r2, [pc, #164]	; (8001f2c <MX_RTC_Init+0xc0>)
 8001e88:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e8a:	4b27      	ldr	r3, [pc, #156]	; (8001f28 <MX_RTC_Init+0xbc>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e90:	4b25      	ldr	r3, [pc, #148]	; (8001f28 <MX_RTC_Init+0xbc>)
 8001e92:	227f      	movs	r2, #127	; 0x7f
 8001e94:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e96:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <MX_RTC_Init+0xbc>)
 8001e98:	22ff      	movs	r2, #255	; 0xff
 8001e9a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e9c:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <MX_RTC_Init+0xbc>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ea2:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <MX_RTC_Init+0xbc>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ea8:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <MX_RTC_Init+0xbc>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001eae:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <MX_RTC_Init+0xbc>)
 8001eb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eb4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <MX_RTC_Init+0xbc>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ebc:	481a      	ldr	r0, [pc, #104]	; (8001f28 <MX_RTC_Init+0xbc>)
 8001ebe:	f004 fd67 	bl	8006990 <HAL_RTC_Init>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001ec8:	f000 fa18 	bl	80022fc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	4619      	mov	r1, r3
 8001eea:	480f      	ldr	r0, [pc, #60]	; (8001f28 <MX_RTC_Init+0xbc>)
 8001eec:	f004 fdc5 	bl	8006a7a <HAL_RTC_SetTime>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_RTC_Init+0x8e>
  {
    Error_Handler();
 8001ef6:	f000 fa01 	bl	80022fc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001efa:	2301      	movs	r3, #1
 8001efc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001efe:	2301      	movs	r3, #1
 8001f00:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001f02:	2301      	movs	r3, #1
 8001f04:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4805      	ldr	r0, [pc, #20]	; (8001f28 <MX_RTC_Init+0xbc>)
 8001f12:	f004 fe4f 	bl	8006bb4 <HAL_RTC_SetDate>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8001f1c:	f000 f9ee 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200004f4 	.word	0x200004f4
 8001f2c:	40002800 	.word	0x40002800

08001f30 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001f34:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <MX_SPI3_Init+0x74>)
 8001f36:	4a1c      	ldr	r2, [pc, #112]	; (8001fa8 <MX_SPI3_Init+0x78>)
 8001f38:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <MX_SPI3_Init+0x74>)
 8001f3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f40:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001f42:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <MX_SPI3_Init+0x74>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f48:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <MX_SPI3_Init+0x74>)
 8001f4a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f4e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f50:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <MX_SPI3_Init+0x74>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f56:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <MX_SPI3_Init+0x74>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <MX_SPI3_Init+0x74>)
 8001f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f62:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <MX_SPI3_Init+0x74>)
 8001f66:	2238      	movs	r2, #56	; 0x38
 8001f68:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <MX_SPI3_Init+0x74>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <MX_SPI3_Init+0x74>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f76:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <MX_SPI3_Init+0x74>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <MX_SPI3_Init+0x74>)
 8001f7e:	2207      	movs	r2, #7
 8001f80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f82:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <MX_SPI3_Init+0x74>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <MX_SPI3_Init+0x74>)
 8001f8a:	2208      	movs	r2, #8
 8001f8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001f8e:	4805      	ldr	r0, [pc, #20]	; (8001fa4 <MX_SPI3_Init+0x74>)
 8001f90:	f004 ff56 	bl	8006e40 <HAL_SPI_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001f9a:	f000 f9af 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	2000051c 	.word	0x2000051c
 8001fa8:	40003c00 	.word	0x40003c00

08001fac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08e      	sub	sp, #56	; 0x38
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
 8001fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc0:	f107 031c 	add.w	r3, r7, #28
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fcc:	463b      	mov	r3, r7
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
 8001fd6:	60da      	str	r2, [r3, #12]
 8001fd8:	611a      	str	r2, [r3, #16]
 8001fda:	615a      	str	r2, [r3, #20]
 8001fdc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fde:	4b2d      	ldr	r3, [pc, #180]	; (8002094 <MX_TIM2_Init+0xe8>)
 8001fe0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fe4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 8001fe6:	4b2b      	ldr	r3, [pc, #172]	; (8002094 <MX_TIM2_Init+0xe8>)
 8001fe8:	2277      	movs	r2, #119	; 0x77
 8001fea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fec:	4b29      	ldr	r3, [pc, #164]	; (8002094 <MX_TIM2_Init+0xe8>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001ff2:	4b28      	ldr	r3, [pc, #160]	; (8002094 <MX_TIM2_Init+0xe8>)
 8001ff4:	2263      	movs	r2, #99	; 0x63
 8001ff6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff8:	4b26      	ldr	r3, [pc, #152]	; (8002094 <MX_TIM2_Init+0xe8>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffe:	4b25      	ldr	r3, [pc, #148]	; (8002094 <MX_TIM2_Init+0xe8>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002004:	4823      	ldr	r0, [pc, #140]	; (8002094 <MX_TIM2_Init+0xe8>)
 8002006:	f005 fe33 	bl	8007c70 <HAL_TIM_Base_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002010:	f000 f974 	bl	80022fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800201a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800201e:	4619      	mov	r1, r3
 8002020:	481c      	ldr	r0, [pc, #112]	; (8002094 <MX_TIM2_Init+0xe8>)
 8002022:	f006 fdd5 	bl	8008bd0 <HAL_TIM_ConfigClockSource>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800202c:	f000 f966 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002030:	4818      	ldr	r0, [pc, #96]	; (8002094 <MX_TIM2_Init+0xe8>)
 8002032:	f005 fe74 	bl	8007d1e <HAL_TIM_PWM_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800203c:	f000 f95e 	bl	80022fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002048:	f107 031c 	add.w	r3, r7, #28
 800204c:	4619      	mov	r1, r3
 800204e:	4811      	ldr	r0, [pc, #68]	; (8002094 <MX_TIM2_Init+0xe8>)
 8002050:	f007 fe20 	bl	8009c94 <HAL_TIMEx_MasterConfigSynchronization>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800205a:	f000 f94f 	bl	80022fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800205e:	2360      	movs	r3, #96	; 0x60
 8002060:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800206e:	463b      	mov	r3, r7
 8002070:	220c      	movs	r2, #12
 8002072:	4619      	mov	r1, r3
 8002074:	4807      	ldr	r0, [pc, #28]	; (8002094 <MX_TIM2_Init+0xe8>)
 8002076:	f006 fc97 	bl	80089a8 <HAL_TIM_PWM_ConfigChannel>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002080:	f000 f93c 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002084:	4803      	ldr	r0, [pc, #12]	; (8002094 <MX_TIM2_Init+0xe8>)
 8002086:	f000 fc0d 	bl	80028a4 <HAL_TIM_MspPostInit>

}
 800208a:	bf00      	nop
 800208c:	3738      	adds	r7, #56	; 0x38
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000580 	.word	0x20000580

08002098 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b090      	sub	sp, #64	; 0x40
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800209e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80020ac:	f107 031c 	add.w	r3, r7, #28
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80020bc:	f107 030c 	add.w	r3, r7, #12
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ca:	463b      	mov	r3, r7
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80020d4:	4b40      	ldr	r3, [pc, #256]	; (80021d8 <MX_TIM15_Init+0x140>)
 80020d6:	4a41      	ldr	r2, [pc, #260]	; (80021dc <MX_TIM15_Init+0x144>)
 80020d8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 16000;
 80020da:	4b3f      	ldr	r3, [pc, #252]	; (80021d8 <MX_TIM15_Init+0x140>)
 80020dc:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80020e0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e2:	4b3d      	ldr	r3, [pc, #244]	; (80021d8 <MX_TIM15_Init+0x140>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80020e8:	4b3b      	ldr	r3, [pc, #236]	; (80021d8 <MX_TIM15_Init+0x140>)
 80020ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ee:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80020f0:	4b39      	ldr	r3, [pc, #228]	; (80021d8 <MX_TIM15_Init+0x140>)
 80020f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020f6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80020f8:	4b37      	ldr	r3, [pc, #220]	; (80021d8 <MX_TIM15_Init+0x140>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020fe:	4b36      	ldr	r3, [pc, #216]	; (80021d8 <MX_TIM15_Init+0x140>)
 8002100:	2200      	movs	r2, #0
 8002102:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002104:	4834      	ldr	r0, [pc, #208]	; (80021d8 <MX_TIM15_Init+0x140>)
 8002106:	f005 fdb3 	bl	8007c70 <HAL_TIM_Base_Init>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8002110:	f000 f8f4 	bl	80022fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002118:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800211a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800211e:	4619      	mov	r1, r3
 8002120:	482d      	ldr	r0, [pc, #180]	; (80021d8 <MX_TIM15_Init+0x140>)
 8002122:	f006 fd55 	bl	8008bd0 <HAL_TIM_ConfigClockSource>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800212c:	f000 f8e6 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8002130:	4829      	ldr	r0, [pc, #164]	; (80021d8 <MX_TIM15_Init+0x140>)
 8002132:	f005 ff67 	bl	8008004 <HAL_TIM_IC_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800213c:	f000 f8de 	bl	80022fc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002140:	2304      	movs	r3, #4
 8002142:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8002144:	2360      	movs	r3, #96	; 0x60
 8002146:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002148:	2300      	movs	r3, #0
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800214c:	2300      	movs	r3, #0
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8002154:	f107 031c 	add.w	r3, r7, #28
 8002158:	4619      	mov	r1, r3
 800215a:	481f      	ldr	r0, [pc, #124]	; (80021d8 <MX_TIM15_Init+0x140>)
 800215c:	f006 fe4e 	bl	8008dfc <HAL_TIM_SlaveConfigSynchro>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_TIM15_Init+0xd2>
  {
    Error_Handler();
 8002166:	f000 f8c9 	bl	80022fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800216a:	2302      	movs	r3, #2
 800216c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800216e:	2302      	movs	r3, #2
 8002170:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800217a:	f107 030c 	add.w	r3, r7, #12
 800217e:	2200      	movs	r2, #0
 8002180:	4619      	mov	r1, r3
 8002182:	4815      	ldr	r0, [pc, #84]	; (80021d8 <MX_TIM15_Init+0x140>)
 8002184:	f006 fb73 	bl	800886e <HAL_TIM_IC_ConfigChannel>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 800218e:	f000 f8b5 	bl	80022fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002196:	2301      	movs	r3, #1
 8002198:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800219a:	f107 030c 	add.w	r3, r7, #12
 800219e:	2204      	movs	r2, #4
 80021a0:	4619      	mov	r1, r3
 80021a2:	480d      	ldr	r0, [pc, #52]	; (80021d8 <MX_TIM15_Init+0x140>)
 80021a4:	f006 fb63 	bl	800886e <HAL_TIM_IC_ConfigChannel>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_TIM15_Init+0x11a>
  {
    Error_Handler();
 80021ae:	f000 f8a5 	bl	80022fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b2:	2300      	movs	r3, #0
 80021b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80021ba:	463b      	mov	r3, r7
 80021bc:	4619      	mov	r1, r3
 80021be:	4806      	ldr	r0, [pc, #24]	; (80021d8 <MX_TIM15_Init+0x140>)
 80021c0:	f007 fd68 	bl	8009c94 <HAL_TIMEx_MasterConfigSynchronization>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_TIM15_Init+0x136>
  {
    Error_Handler();
 80021ca:	f000 f897 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80021ce:	bf00      	nop
 80021d0:	3740      	adds	r7, #64	; 0x40
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	200005cc 	.word	0x200005cc
 80021dc:	40014000 	.word	0x40014000

080021e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80021e6:	4b16      	ldr	r3, [pc, #88]	; (8002240 <MX_DMA_Init+0x60>)
 80021e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ea:	4a15      	ldr	r2, [pc, #84]	; (8002240 <MX_DMA_Init+0x60>)
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	6493      	str	r3, [r2, #72]	; 0x48
 80021f2:	4b13      	ldr	r3, [pc, #76]	; (8002240 <MX_DMA_Init+0x60>)
 80021f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	607b      	str	r3, [r7, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <MX_DMA_Init+0x60>)
 8002200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002202:	4a0f      	ldr	r2, [pc, #60]	; (8002240 <MX_DMA_Init+0x60>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6493      	str	r3, [r2, #72]	; 0x48
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <MX_DMA_Init+0x60>)
 800220c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002216:	2200      	movs	r2, #0
 8002218:	2100      	movs	r1, #0
 800221a:	200b      	movs	r0, #11
 800221c:	f002 fdb3 	bl	8004d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002220:	200b      	movs	r0, #11
 8002222:	f002 fdca 	bl	8004dba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2100      	movs	r1, #0
 800222a:	200c      	movs	r0, #12
 800222c:	f002 fdab 	bl	8004d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002230:	200c      	movs	r0, #12
 8002232:	f002 fdc2 	bl	8004dba <HAL_NVIC_EnableIRQ>

}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000

08002244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224a:	f107 030c 	add.w	r3, r7, #12
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	60da      	str	r2, [r3, #12]
 8002258:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800225a:	4b26      	ldr	r3, [pc, #152]	; (80022f4 <MX_GPIO_Init+0xb0>)
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	4a25      	ldr	r2, [pc, #148]	; (80022f4 <MX_GPIO_Init+0xb0>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002266:	4b23      	ldr	r3, [pc, #140]	; (80022f4 <MX_GPIO_Init+0xb0>)
 8002268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002272:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <MX_GPIO_Init+0xb0>)
 8002274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002276:	4a1f      	ldr	r2, [pc, #124]	; (80022f4 <MX_GPIO_Init+0xb0>)
 8002278:	f043 0302 	orr.w	r3, r3, #2
 800227c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800227e:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <MX_GPIO_Init+0xb0>)
 8002280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	607b      	str	r3, [r7, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800228a:	4b1a      	ldr	r3, [pc, #104]	; (80022f4 <MX_GPIO_Init+0xb0>)
 800228c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228e:	4a19      	ldr	r2, [pc, #100]	; (80022f4 <MX_GPIO_Init+0xb0>)
 8002290:	f043 0304 	orr.w	r3, r3, #4
 8002294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002296:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <MX_GPIO_Init+0xb0>)
 8002298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_15, GPIO_PIN_RESET);
 80022a2:	2200      	movs	r2, #0
 80022a4:	f248 0104 	movw	r1, #32772	; 0x8004
 80022a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ac:	f003 fb5a 	bl	8005964 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80022b0:	f248 0304 	movw	r3, #32772	; 0x8004
 80022b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b6:	2301      	movs	r3, #1
 80022b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c2:	f107 030c 	add.w	r3, r7, #12
 80022c6:	4619      	mov	r1, r3
 80022c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022cc:	f003 f9c8 	bl	8005660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80022d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022de:	f107 030c 	add.w	r3, r7, #12
 80022e2:	4619      	mov	r1, r3
 80022e4:	4804      	ldr	r0, [pc, #16]	; (80022f8 <MX_GPIO_Init+0xb4>)
 80022e6:	f003 f9bb 	bl	8005660 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022ea:	bf00      	nop
 80022ec:	3720      	adds	r7, #32
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40021000 	.word	0x40021000
 80022f8:	48000400 	.word	0x48000400

080022fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002300:	b672      	cpsid	i
}
 8002302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002304:	e7fe      	b.n	8002304 <Error_Handler+0x8>
	...

08002308 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230e:	4b13      	ldr	r3, [pc, #76]	; (800235c <HAL_MspInit+0x54>)
 8002310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002312:	4a12      	ldr	r2, [pc, #72]	; (800235c <HAL_MspInit+0x54>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6613      	str	r3, [r2, #96]	; 0x60
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <HAL_MspInit+0x54>)
 800231c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002326:	4b0d      	ldr	r3, [pc, #52]	; (800235c <HAL_MspInit+0x54>)
 8002328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232a:	4a0c      	ldr	r2, [pc, #48]	; (800235c <HAL_MspInit+0x54>)
 800232c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002330:	6593      	str	r3, [r2, #88]	; 0x58
 8002332:	4b0a      	ldr	r3, [pc, #40]	; (800235c <HAL_MspInit+0x54>)
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 800233e:	2020      	movs	r0, #32
 8002340:	f000 fc0a 	bl	8002b58 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8002344:	f000 fc30 	bl	8002ba8 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8002348:	2000      	movs	r0, #0
 800234a:	f000 fc19 	bl	8002b80 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800234e:	f003 fbc5 	bl	8005adc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000

08002360 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b0a0      	sub	sp, #128	; 0x80
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002378:	f107 0318 	add.w	r3, r7, #24
 800237c:	2254      	movs	r2, #84	; 0x54
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f007 fd8d 	bl	8009ea0 <memset>
  if(hadc->Instance==ADC1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800238e:	d171      	bne.n	8002474 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002394:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002396:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800239a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800239c:	f107 0318 	add.w	r3, r7, #24
 80023a0:	4618      	mov	r0, r3
 80023a2:	f004 f8a7 	bl	80064f4 <HAL_RCCEx_PeriphCLKConfig>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80023ac:	f7ff ffa6 	bl	80022fc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80023b0:	4b6d      	ldr	r3, [pc, #436]	; (8002568 <HAL_ADC_MspInit+0x208>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	3301      	adds	r3, #1
 80023b6:	4a6c      	ldr	r2, [pc, #432]	; (8002568 <HAL_ADC_MspInit+0x208>)
 80023b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80023ba:	4b6b      	ldr	r3, [pc, #428]	; (8002568 <HAL_ADC_MspInit+0x208>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d10b      	bne.n	80023da <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80023c2:	4b6a      	ldr	r3, [pc, #424]	; (800256c <HAL_ADC_MspInit+0x20c>)
 80023c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c6:	4a69      	ldr	r2, [pc, #420]	; (800256c <HAL_ADC_MspInit+0x20c>)
 80023c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ce:	4b67      	ldr	r3, [pc, #412]	; (800256c <HAL_ADC_MspInit+0x20c>)
 80023d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023da:	4b64      	ldr	r3, [pc, #400]	; (800256c <HAL_ADC_MspInit+0x20c>)
 80023dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023de:	4a63      	ldr	r2, [pc, #396]	; (800256c <HAL_ADC_MspInit+0x20c>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023e6:	4b61      	ldr	r3, [pc, #388]	; (800256c <HAL_ADC_MspInit+0x20c>)
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023f2:	2308      	movs	r3, #8
 80023f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023f6:	2303      	movs	r3, #3
 80023f8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002402:	4619      	mov	r1, r3
 8002404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002408:	f003 f92a 	bl	8005660 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800240c:	4b58      	ldr	r3, [pc, #352]	; (8002570 <HAL_ADC_MspInit+0x210>)
 800240e:	4a59      	ldr	r2, [pc, #356]	; (8002574 <HAL_ADC_MspInit+0x214>)
 8002410:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002412:	4b57      	ldr	r3, [pc, #348]	; (8002570 <HAL_ADC_MspInit+0x210>)
 8002414:	2205      	movs	r2, #5
 8002416:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002418:	4b55      	ldr	r3, [pc, #340]	; (8002570 <HAL_ADC_MspInit+0x210>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800241e:	4b54      	ldr	r3, [pc, #336]	; (8002570 <HAL_ADC_MspInit+0x210>)
 8002420:	2200      	movs	r2, #0
 8002422:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002424:	4b52      	ldr	r3, [pc, #328]	; (8002570 <HAL_ADC_MspInit+0x210>)
 8002426:	2280      	movs	r2, #128	; 0x80
 8002428:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800242a:	4b51      	ldr	r3, [pc, #324]	; (8002570 <HAL_ADC_MspInit+0x210>)
 800242c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002430:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002432:	4b4f      	ldr	r3, [pc, #316]	; (8002570 <HAL_ADC_MspInit+0x210>)
 8002434:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002438:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800243a:	4b4d      	ldr	r3, [pc, #308]	; (8002570 <HAL_ADC_MspInit+0x210>)
 800243c:	2220      	movs	r2, #32
 800243e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002440:	4b4b      	ldr	r3, [pc, #300]	; (8002570 <HAL_ADC_MspInit+0x210>)
 8002442:	2200      	movs	r2, #0
 8002444:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002446:	484a      	ldr	r0, [pc, #296]	; (8002570 <HAL_ADC_MspInit+0x210>)
 8002448:	f002 fcd2 	bl	8004df0 <HAL_DMA_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8002452:	f7ff ff53 	bl	80022fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a45      	ldr	r2, [pc, #276]	; (8002570 <HAL_ADC_MspInit+0x210>)
 800245a:	655a      	str	r2, [r3, #84]	; 0x54
 800245c:	4a44      	ldr	r2, [pc, #272]	; (8002570 <HAL_ADC_MspInit+0x210>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	2100      	movs	r1, #0
 8002466:	2012      	movs	r0, #18
 8002468:	f002 fc8d 	bl	8004d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800246c:	2012      	movs	r0, #18
 800246e:	f002 fca4 	bl	8004dba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002472:	e075      	b.n	8002560 <HAL_ADC_MspInit+0x200>
  else if(hadc->Instance==ADC2)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a3f      	ldr	r2, [pc, #252]	; (8002578 <HAL_ADC_MspInit+0x218>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d170      	bne.n	8002560 <HAL_ADC_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800247e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002482:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002484:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002488:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800248a:	f107 0318 	add.w	r3, r7, #24
 800248e:	4618      	mov	r0, r3
 8002490:	f004 f830 	bl	80064f4 <HAL_RCCEx_PeriphCLKConfig>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 800249a:	f7ff ff2f 	bl	80022fc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800249e:	4b32      	ldr	r3, [pc, #200]	; (8002568 <HAL_ADC_MspInit+0x208>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	4a30      	ldr	r2, [pc, #192]	; (8002568 <HAL_ADC_MspInit+0x208>)
 80024a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80024a8:	4b2f      	ldr	r3, [pc, #188]	; (8002568 <HAL_ADC_MspInit+0x208>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d10b      	bne.n	80024c8 <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80024b0:	4b2e      	ldr	r3, [pc, #184]	; (800256c <HAL_ADC_MspInit+0x20c>)
 80024b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b4:	4a2d      	ldr	r2, [pc, #180]	; (800256c <HAL_ADC_MspInit+0x20c>)
 80024b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024bc:	4b2b      	ldr	r3, [pc, #172]	; (800256c <HAL_ADC_MspInit+0x20c>)
 80024be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c8:	4b28      	ldr	r3, [pc, #160]	; (800256c <HAL_ADC_MspInit+0x20c>)
 80024ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024cc:	4a27      	ldr	r2, [pc, #156]	; (800256c <HAL_ADC_MspInit+0x20c>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024d4:	4b25      	ldr	r3, [pc, #148]	; (800256c <HAL_ADC_MspInit+0x20c>)
 80024d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80024e0:	2330      	movs	r3, #48	; 0x30
 80024e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024e4:	2303      	movs	r3, #3
 80024e6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024f0:	4619      	mov	r1, r3
 80024f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024f6:	f003 f8b3 	bl	8005660 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <HAL_ADC_MspInit+0x21c>)
 80024fc:	4a20      	ldr	r2, [pc, #128]	; (8002580 <HAL_ADC_MspInit+0x220>)
 80024fe:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002500:	4b1e      	ldr	r3, [pc, #120]	; (800257c <HAL_ADC_MspInit+0x21c>)
 8002502:	2224      	movs	r2, #36	; 0x24
 8002504:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002506:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_ADC_MspInit+0x21c>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <HAL_ADC_MspInit+0x21c>)
 800250e:	2200      	movs	r2, #0
 8002510:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002512:	4b1a      	ldr	r3, [pc, #104]	; (800257c <HAL_ADC_MspInit+0x21c>)
 8002514:	2280      	movs	r2, #128	; 0x80
 8002516:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002518:	4b18      	ldr	r3, [pc, #96]	; (800257c <HAL_ADC_MspInit+0x21c>)
 800251a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800251e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002520:	4b16      	ldr	r3, [pc, #88]	; (800257c <HAL_ADC_MspInit+0x21c>)
 8002522:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002526:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002528:	4b14      	ldr	r3, [pc, #80]	; (800257c <HAL_ADC_MspInit+0x21c>)
 800252a:	2220      	movs	r2, #32
 800252c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <HAL_ADC_MspInit+0x21c>)
 8002530:	2200      	movs	r2, #0
 8002532:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002534:	4811      	ldr	r0, [pc, #68]	; (800257c <HAL_ADC_MspInit+0x21c>)
 8002536:	f002 fc5b 	bl	8004df0 <HAL_DMA_Init>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_ADC_MspInit+0x1e4>
      Error_Handler();
 8002540:	f7ff fedc 	bl	80022fc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a0d      	ldr	r2, [pc, #52]	; (800257c <HAL_ADC_MspInit+0x21c>)
 8002548:	655a      	str	r2, [r3, #84]	; 0x54
 800254a:	4a0c      	ldr	r2, [pc, #48]	; (800257c <HAL_ADC_MspInit+0x21c>)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002550:	2200      	movs	r2, #0
 8002552:	2100      	movs	r1, #0
 8002554:	2012      	movs	r0, #18
 8002556:	f002 fc16 	bl	8004d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800255a:	2012      	movs	r0, #18
 800255c:	f002 fc2d 	bl	8004dba <HAL_NVIC_EnableIRQ>
}
 8002560:	bf00      	nop
 8002562:	3780      	adds	r7, #128	; 0x80
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000714 	.word	0x20000714
 800256c:	40021000 	.word	0x40021000
 8002570:	2000036c 	.word	0x2000036c
 8002574:	40020008 	.word	0x40020008
 8002578:	50000100 	.word	0x50000100
 800257c:	200003cc 	.word	0x200003cc
 8002580:	4002001c 	.word	0x4002001c

08002584 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b0a0      	sub	sp, #128	; 0x80
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800259c:	f107 0318 	add.w	r3, r7, #24
 80025a0:	2254      	movs	r2, #84	; 0x54
 80025a2:	2100      	movs	r1, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f007 fc7b 	bl	8009ea0 <memset>
  if(hfdcan->Instance==FDCAN1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a49      	ldr	r2, [pc, #292]	; (80026d4 <HAL_FDCAN_MspInit+0x150>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d143      	bne.n	800263c <HAL_FDCAN_MspInit+0xb8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80025b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80025ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025be:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025c0:	f107 0318 	add.w	r3, r7, #24
 80025c4:	4618      	mov	r0, r3
 80025c6:	f003 ff95 	bl	80064f4 <HAL_RCCEx_PeriphCLKConfig>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80025d0:	f7ff fe94 	bl	80022fc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80025d4:	4b40      	ldr	r3, [pc, #256]	; (80026d8 <HAL_FDCAN_MspInit+0x154>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	3301      	adds	r3, #1
 80025da:	4a3f      	ldr	r2, [pc, #252]	; (80026d8 <HAL_FDCAN_MspInit+0x154>)
 80025dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80025de:	4b3e      	ldr	r3, [pc, #248]	; (80026d8 <HAL_FDCAN_MspInit+0x154>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d10b      	bne.n	80025fe <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80025e6:	4b3d      	ldr	r3, [pc, #244]	; (80026dc <HAL_FDCAN_MspInit+0x158>)
 80025e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ea:	4a3c      	ldr	r2, [pc, #240]	; (80026dc <HAL_FDCAN_MspInit+0x158>)
 80025ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025f0:	6593      	str	r3, [r2, #88]	; 0x58
 80025f2:	4b3a      	ldr	r3, [pc, #232]	; (80026dc <HAL_FDCAN_MspInit+0x158>)
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fe:	4b37      	ldr	r3, [pc, #220]	; (80026dc <HAL_FDCAN_MspInit+0x158>)
 8002600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002602:	4a36      	ldr	r2, [pc, #216]	; (80026dc <HAL_FDCAN_MspInit+0x158>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800260a:	4b34      	ldr	r3, [pc, #208]	; (80026dc <HAL_FDCAN_MspInit+0x158>)
 800260c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002616:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800261a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261c:	2302      	movs	r3, #2
 800261e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002624:	2300      	movs	r3, #0
 8002626:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002628:	2309      	movs	r3, #9
 800262a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002630:	4619      	mov	r1, r3
 8002632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002636:	f003 f813 	bl	8005660 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800263a:	e046      	b.n	80026ca <HAL_FDCAN_MspInit+0x146>
  else if(hfdcan->Instance==FDCAN2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a27      	ldr	r2, [pc, #156]	; (80026e0 <HAL_FDCAN_MspInit+0x15c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d141      	bne.n	80026ca <HAL_FDCAN_MspInit+0x146>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800264a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800264c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002650:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002652:	f107 0318 	add.w	r3, r7, #24
 8002656:	4618      	mov	r0, r3
 8002658:	f003 ff4c 	bl	80064f4 <HAL_RCCEx_PeriphCLKConfig>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_FDCAN_MspInit+0xe2>
      Error_Handler();
 8002662:	f7ff fe4b 	bl	80022fc <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002666:	4b1c      	ldr	r3, [pc, #112]	; (80026d8 <HAL_FDCAN_MspInit+0x154>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3301      	adds	r3, #1
 800266c:	4a1a      	ldr	r2, [pc, #104]	; (80026d8 <HAL_FDCAN_MspInit+0x154>)
 800266e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002670:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <HAL_FDCAN_MspInit+0x154>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d10b      	bne.n	8002690 <HAL_FDCAN_MspInit+0x10c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002678:	4b18      	ldr	r3, [pc, #96]	; (80026dc <HAL_FDCAN_MspInit+0x158>)
 800267a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267c:	4a17      	ldr	r2, [pc, #92]	; (80026dc <HAL_FDCAN_MspInit+0x158>)
 800267e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002682:	6593      	str	r3, [r2, #88]	; 0x58
 8002684:	4b15      	ldr	r3, [pc, #84]	; (80026dc <HAL_FDCAN_MspInit+0x158>)
 8002686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_FDCAN_MspInit+0x158>)
 8002692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002694:	4a11      	ldr	r2, [pc, #68]	; (80026dc <HAL_FDCAN_MspInit+0x158>)
 8002696:	f043 0302 	orr.w	r3, r3, #2
 800269a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800269c:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <HAL_FDCAN_MspInit+0x158>)
 800269e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80026a8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80026ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b6:	2300      	movs	r3, #0
 80026b8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80026ba:	2309      	movs	r3, #9
 80026bc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026c2:	4619      	mov	r1, r3
 80026c4:	4807      	ldr	r0, [pc, #28]	; (80026e4 <HAL_FDCAN_MspInit+0x160>)
 80026c6:	f002 ffcb 	bl	8005660 <HAL_GPIO_Init>
}
 80026ca:	bf00      	nop
 80026cc:	3780      	adds	r7, #128	; 0x80
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40006400 	.word	0x40006400
 80026d8:	20000718 	.word	0x20000718
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40006800 	.word	0x40006800
 80026e4:	48000400 	.word	0x48000400

080026e8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b098      	sub	sp, #96	; 0x60
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026f0:	f107 030c 	add.w	r3, r7, #12
 80026f4:	2254      	movs	r2, #84	; 0x54
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f007 fbd1 	bl	8009ea0 <memset>
  if(hrtc->Instance==RTC)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a15      	ldr	r2, [pc, #84]	; (8002758 <HAL_RTC_MspInit+0x70>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d123      	bne.n	8002750 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002708:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800270c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800270e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002712:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002714:	f107 030c 	add.w	r3, r7, #12
 8002718:	4618      	mov	r0, r3
 800271a:	f003 feeb 	bl	80064f4 <HAL_RCCEx_PeriphCLKConfig>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002724:	f7ff fdea 	bl	80022fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <HAL_RTC_MspInit+0x74>)
 800272a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272e:	4a0b      	ldr	r2, [pc, #44]	; (800275c <HAL_RTC_MspInit+0x74>)
 8002730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <HAL_RTC_MspInit+0x74>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	4a07      	ldr	r2, [pc, #28]	; (800275c <HAL_RTC_MspInit+0x74>)
 800273e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002742:	6593      	str	r3, [r2, #88]	; 0x58
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_RTC_MspInit+0x74>)
 8002746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002750:	bf00      	nop
 8002752:	3760      	adds	r7, #96	; 0x60
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40002800 	.word	0x40002800
 800275c:	40021000 	.word	0x40021000

08002760 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08a      	sub	sp, #40	; 0x28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a17      	ldr	r2, [pc, #92]	; (80027dc <HAL_SPI_MspInit+0x7c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d128      	bne.n	80027d4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002782:	4b17      	ldr	r3, [pc, #92]	; (80027e0 <HAL_SPI_MspInit+0x80>)
 8002784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002786:	4a16      	ldr	r2, [pc, #88]	; (80027e0 <HAL_SPI_MspInit+0x80>)
 8002788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800278c:	6593      	str	r3, [r2, #88]	; 0x58
 800278e:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <HAL_SPI_MspInit+0x80>)
 8002790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800279a:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <HAL_SPI_MspInit+0x80>)
 800279c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279e:	4a10      	ldr	r2, [pc, #64]	; (80027e0 <HAL_SPI_MspInit+0x80>)
 80027a0:	f043 0304 	orr.w	r3, r3, #4
 80027a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027a6:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <HAL_SPI_MspInit+0x80>)
 80027a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80027b2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80027b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b8:	2302      	movs	r3, #2
 80027ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c0:	2300      	movs	r3, #0
 80027c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027c4:	2306      	movs	r3, #6
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	4619      	mov	r1, r3
 80027ce:	4805      	ldr	r0, [pc, #20]	; (80027e4 <HAL_SPI_MspInit+0x84>)
 80027d0:	f002 ff46 	bl	8005660 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80027d4:	bf00      	nop
 80027d6:	3728      	adds	r7, #40	; 0x28
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40003c00 	.word	0x40003c00
 80027e0:	40021000 	.word	0x40021000
 80027e4:	48000800 	.word	0x48000800

080027e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08a      	sub	sp, #40	; 0x28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f0:	f107 0314 	add.w	r3, r7, #20
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002808:	d10c      	bne.n	8002824 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800280a:	4b23      	ldr	r3, [pc, #140]	; (8002898 <HAL_TIM_Base_MspInit+0xb0>)
 800280c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280e:	4a22      	ldr	r2, [pc, #136]	; (8002898 <HAL_TIM_Base_MspInit+0xb0>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	6593      	str	r3, [r2, #88]	; 0x58
 8002816:	4b20      	ldr	r3, [pc, #128]	; (8002898 <HAL_TIM_Base_MspInit+0xb0>)
 8002818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002822:	e035      	b.n	8002890 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM15)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1c      	ldr	r2, [pc, #112]	; (800289c <HAL_TIM_Base_MspInit+0xb4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d130      	bne.n	8002890 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800282e:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <HAL_TIM_Base_MspInit+0xb0>)
 8002830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002832:	4a19      	ldr	r2, [pc, #100]	; (8002898 <HAL_TIM_Base_MspInit+0xb0>)
 8002834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002838:	6613      	str	r3, [r2, #96]	; 0x60
 800283a:	4b17      	ldr	r3, [pc, #92]	; (8002898 <HAL_TIM_Base_MspInit+0xb0>)
 800283c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002846:	4b14      	ldr	r3, [pc, #80]	; (8002898 <HAL_TIM_Base_MspInit+0xb0>)
 8002848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284a:	4a13      	ldr	r2, [pc, #76]	; (8002898 <HAL_TIM_Base_MspInit+0xb0>)
 800284c:	f043 0302 	orr.w	r3, r3, #2
 8002850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002852:	4b11      	ldr	r3, [pc, #68]	; (8002898 <HAL_TIM_Base_MspInit+0xb0>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800285e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002864:	2302      	movs	r3, #2
 8002866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286c:	2300      	movs	r3, #0
 800286e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8002870:	2301      	movs	r3, #1
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002874:	f107 0314 	add.w	r3, r7, #20
 8002878:	4619      	mov	r1, r3
 800287a:	4809      	ldr	r0, [pc, #36]	; (80028a0 <HAL_TIM_Base_MspInit+0xb8>)
 800287c:	f002 fef0 	bl	8005660 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002880:	2200      	movs	r2, #0
 8002882:	2100      	movs	r1, #0
 8002884:	2018      	movs	r0, #24
 8002886:	f002 fa7e 	bl	8004d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800288a:	2018      	movs	r0, #24
 800288c:	f002 fa95 	bl	8004dba <HAL_NVIC_EnableIRQ>
}
 8002890:	bf00      	nop
 8002892:	3728      	adds	r7, #40	; 0x28
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40021000 	.word	0x40021000
 800289c:	40014000 	.word	0x40014000
 80028a0:	48000400 	.word	0x48000400

080028a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ac:	f107 030c 	add.w	r3, r7, #12
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c4:	d11d      	bne.n	8002902 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c6:	4b11      	ldr	r3, [pc, #68]	; (800290c <HAL_TIM_MspPostInit+0x68>)
 80028c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ca:	4a10      	ldr	r2, [pc, #64]	; (800290c <HAL_TIM_MspPostInit+0x68>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028d2:	4b0e      	ldr	r3, [pc, #56]	; (800290c <HAL_TIM_MspPostInit+0x68>)
 80028d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA10     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e4:	2302      	movs	r3, #2
 80028e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 80028f0:	230a      	movs	r3, #10
 80028f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f4:	f107 030c 	add.w	r3, r7, #12
 80028f8:	4619      	mov	r1, r3
 80028fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028fe:	f002 feaf 	bl	8005660 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002902:	bf00      	nop
 8002904:	3720      	adds	r7, #32
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40021000 	.word	0x40021000

08002910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002914:	e7fe      	b.n	8002914 <NMI_Handler+0x4>

08002916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002916:	b480      	push	{r7}
 8002918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800291a:	e7fe      	b.n	800291a <HardFault_Handler+0x4>

0800291c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002920:	e7fe      	b.n	8002920 <MemManage_Handler+0x4>

08002922 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002926:	e7fe      	b.n	8002926 <BusFault_Handler+0x4>

08002928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800292c:	e7fe      	b.n	800292c <UsageFault_Handler+0x4>

0800292e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800295c:	f000 f8bc 	bl	8002ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}

08002964 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002968:	4802      	ldr	r0, [pc, #8]	; (8002974 <DMA1_Channel1_IRQHandler+0x10>)
 800296a:	f002 fb64 	bl	8005036 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	2000036c 	.word	0x2000036c

08002978 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800297c:	4802      	ldr	r0, [pc, #8]	; (8002988 <DMA1_Channel2_IRQHandler+0x10>)
 800297e:	f002 fb5a 	bl	8005036 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	200003cc 	.word	0x200003cc

0800298c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002990:	4803      	ldr	r0, [pc, #12]	; (80029a0 <ADC1_2_IRQHandler+0x14>)
 8002992:	f000 ff11 	bl	80037b8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002996:	4803      	ldr	r0, [pc, #12]	; (80029a4 <ADC1_2_IRQHandler+0x18>)
 8002998:	f000 ff0e 	bl	80037b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800299c:	bf00      	nop
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20000294 	.word	0x20000294
 80029a4:	20000300 	.word	0x20000300

080029a8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80029ac:	4802      	ldr	r0, [pc, #8]	; (80029b8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80029ae:	f005 fddf 	bl	8008570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	200005cc 	.word	0x200005cc

080029bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <SystemInit+0x20>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	4a05      	ldr	r2, [pc, #20]	; (80029dc <SystemInit+0x20>)
 80029c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029e0:	480d      	ldr	r0, [pc, #52]	; (8002a18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029e4:	480d      	ldr	r0, [pc, #52]	; (8002a1c <LoopForever+0x6>)
  ldr r1, =_edata
 80029e6:	490e      	ldr	r1, [pc, #56]	; (8002a20 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029e8:	4a0e      	ldr	r2, [pc, #56]	; (8002a24 <LoopForever+0xe>)
  movs r3, #0
 80029ea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80029ec:	e002      	b.n	80029f4 <LoopCopyDataInit>

080029ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029f2:	3304      	adds	r3, #4

080029f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029f8:	d3f9      	bcc.n	80029ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029fa:	4a0b      	ldr	r2, [pc, #44]	; (8002a28 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029fc:	4c0b      	ldr	r4, [pc, #44]	; (8002a2c <LoopForever+0x16>)
  movs r3, #0
 80029fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a00:	e001      	b.n	8002a06 <LoopFillZerobss>

08002a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a04:	3204      	adds	r2, #4

08002a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a08:	d3fb      	bcc.n	8002a02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a0a:	f7ff ffd7 	bl	80029bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a0e:	f007 fa23 	bl	8009e58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a12:	f7fe ff59 	bl	80018c8 <main>

08002a16 <LoopForever>:

LoopForever:
    b LoopForever
 8002a16:	e7fe      	b.n	8002a16 <LoopForever>
  ldr   r0, =_estack
 8002a18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a20:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002a24:	0800a2ec 	.word	0x0800a2ec
  ldr r2, =_sbss
 8002a28:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002a2c:	20000720 	.word	0x20000720

08002a30 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a30:	e7fe      	b.n	8002a30 <ADC3_IRQHandler>

08002a32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a3c:	2003      	movs	r0, #3
 8002a3e:	f002 f997 	bl	8004d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a42:	2000      	movs	r0, #0
 8002a44:	f000 f80e 	bl	8002a64 <HAL_InitTick>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	71fb      	strb	r3, [r7, #7]
 8002a52:	e001      	b.n	8002a58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a54:	f7ff fc58 	bl	8002308 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a58:	79fb      	ldrb	r3, [r7, #7]

}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002a70:	4b16      	ldr	r3, [pc, #88]	; (8002acc <HAL_InitTick+0x68>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d022      	beq.n	8002abe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002a78:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <HAL_InitTick+0x6c>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4b13      	ldr	r3, [pc, #76]	; (8002acc <HAL_InitTick+0x68>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a84:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f002 f9a2 	bl	8004dd6 <HAL_SYSTICK_Config>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10f      	bne.n	8002ab8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b0f      	cmp	r3, #15
 8002a9c:	d809      	bhi.n	8002ab2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa6:	f002 f96e 	bl	8004d86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002aaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <HAL_InitTick+0x70>)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	e007      	b.n	8002ac2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	73fb      	strb	r3, [r7, #15]
 8002ab6:	e004      	b.n	8002ac2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
 8002abc:	e001      	b.n	8002ac2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	2000000c 	.word	0x2000000c
 8002ad0:	20000004 	.word	0x20000004
 8002ad4:	20000008 	.word	0x20000008

08002ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_IncTick+0x1c>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_IncTick+0x20>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	4a03      	ldr	r2, [pc, #12]	; (8002af4 <HAL_IncTick+0x1c>)
 8002ae8:	6013      	str	r3, [r2, #0]
}
 8002aea:	bf00      	nop
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	2000071c 	.word	0x2000071c
 8002af8:	2000000c 	.word	0x2000000c

08002afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return uwTick;
 8002b00:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <HAL_GetTick+0x14>)
 8002b02:	681b      	ldr	r3, [r3, #0]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	2000071c 	.word	0x2000071c

08002b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b1c:	f7ff ffee 	bl	8002afc <HAL_GetTick>
 8002b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2c:	d004      	beq.n	8002b38 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_Delay+0x40>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4413      	add	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b38:	bf00      	nop
 8002b3a:	f7ff ffdf 	bl	8002afc <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d8f7      	bhi.n	8002b3a <HAL_Delay+0x26>
  {
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	bf00      	nop
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	2000000c 	.word	0x2000000c

08002b58 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b68:	4904      	ldr	r1, [pc, #16]	; (8002b7c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	600b      	str	r3, [r1, #0]
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	40010030 	.word	0x40010030

08002b80 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f023 0202 	bic.w	r2, r3, #2
 8002b90:	4904      	ldr	r1, [pc, #16]	; (8002ba4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	600b      	str	r3, [r1, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	40010030 	.word	0x40010030

08002ba8 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002bae:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a0e      	ldr	r2, [pc, #56]	; (8002bec <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002bba:	f7ff ff9f 	bl	8002afc <HAL_GetTick>
 8002bbe:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8002bc0:	e008      	b.n	8002bd4 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8002bc2:	f7ff ff9b 	bl	8002afc <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b0a      	cmp	r3, #10
 8002bce:	d901      	bls.n	8002bd4 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e006      	b.n	8002be2 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0f0      	beq.n	8002bc2 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40010030 	.word	0x40010030

08002bf0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	609a      	str	r2, [r3, #8]
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	3360      	adds	r3, #96	; 0x60
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <LL_ADC_SetOffset+0x44>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002c90:	bf00      	nop
 8002c92:	371c      	adds	r7, #28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	03fff000 	.word	0x03fff000

08002ca0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3360      	adds	r3, #96	; 0x60
 8002cae:	461a      	mov	r2, r3
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	3360      	adds	r3, #96	; 0x60
 8002cdc:	461a      	mov	r2, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002cf6:	bf00      	nop
 8002cf8:	371c      	adds	r7, #28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b087      	sub	sp, #28
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	3360      	adds	r3, #96	; 0x60
 8002d12:	461a      	mov	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002d2c:	bf00      	nop
 8002d2e:	371c      	adds	r7, #28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	3360      	adds	r3, #96	; 0x60
 8002d48:	461a      	mov	r2, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002d62:	bf00      	nop
 8002d64:	371c      	adds	r7, #28
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	615a      	str	r2, [r3, #20]
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b087      	sub	sp, #28
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	3330      	adds	r3, #48	; 0x30
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	0a1b      	lsrs	r3, r3, #8
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	f003 030c 	and.w	r3, r3, #12
 8002dd6:	4413      	add	r3, r2
 8002dd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	211f      	movs	r1, #31
 8002de6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dea:	43db      	mvns	r3, r3
 8002dec:	401a      	ands	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	0e9b      	lsrs	r3, r3, #26
 8002df2:	f003 011f 	and.w	r1, r3, #31
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002e00:	431a      	orrs	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e06:	bf00      	nop
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	3314      	adds	r3, #20
 8002e48:	461a      	mov	r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	0e5b      	lsrs	r3, r3, #25
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	4413      	add	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	0d1b      	lsrs	r3, r3, #20
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	2107      	movs	r1, #7
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	401a      	ands	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	0d1b      	lsrs	r3, r3, #20
 8002e72:	f003 031f 	and.w	r3, r3, #31
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e82:	bf00      	nop
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a0f      	ldr	r2, [pc, #60]	; (8002edc <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d10a      	bne.n	8002eba <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002eb8:	e00a      	b.n	8002ed0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	401a      	ands	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002ed0:	bf00      	nop
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	407f0000 	.word	0x407f0000

08002ee0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 031f 	and.w	r3, r3, #31
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002f28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6093      	str	r3, [r2, #8]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f50:	d101      	bne.n	8002f56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002f74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fa0:	d101      	bne.n	8002fa6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fc8:	f043 0201 	orr.w	r2, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ff0:	f043 0202 	orr.w	r2, r3, #2
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <LL_ADC_IsEnabled+0x18>
 8003018:	2301      	movs	r3, #1
 800301a:	e000      	b.n	800301e <LL_ADC_IsEnabled+0x1a>
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b02      	cmp	r3, #2
 800303c:	d101      	bne.n	8003042 <LL_ADC_IsDisableOngoing+0x18>
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <LL_ADC_IsDisableOngoing+0x1a>
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003060:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003064:	f043 0204 	orr.w	r2, r3, #4
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b04      	cmp	r3, #4
 800308a:	d101      	bne.n	8003090 <LL_ADC_REG_IsConversionOngoing+0x18>
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d101      	bne.n	80030b6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030c4:	b590      	push	{r4, r7, lr}
 80030c6:	b089      	sub	sp, #36	; 0x24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e1af      	b.n	800343e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d109      	bne.n	8003100 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff f937 	bl	8002360 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff ff19 	bl	8002f3c <LL_ADC_IsDeepPowerDownEnabled>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d004      	beq.n	800311a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff feff 	bl	8002f18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff ff34 	bl	8002f8c <LL_ADC_IsInternalRegulatorEnabled>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d115      	bne.n	8003156 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff ff18 	bl	8002f64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003134:	4b9f      	ldr	r3, [pc, #636]	; (80033b4 <HAL_ADC_Init+0x2f0>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	099b      	lsrs	r3, r3, #6
 800313a:	4a9f      	ldr	r2, [pc, #636]	; (80033b8 <HAL_ADC_Init+0x2f4>)
 800313c:	fba2 2303 	umull	r2, r3, r2, r3
 8003140:	099b      	lsrs	r3, r3, #6
 8003142:	3301      	adds	r3, #1
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003148:	e002      	b.n	8003150 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	3b01      	subs	r3, #1
 800314e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f9      	bne.n	800314a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff ff16 	bl	8002f8c <LL_ADC_IsInternalRegulatorEnabled>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10d      	bne.n	8003182 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316a:	f043 0210 	orr.w	r2, r3, #16
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003176:	f043 0201 	orr.w	r2, r3, #1
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff ff76 	bl	8003078 <LL_ADC_REG_IsConversionOngoing>
 800318c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003192:	f003 0310 	and.w	r3, r3, #16
 8003196:	2b00      	cmp	r3, #0
 8003198:	f040 8148 	bne.w	800342c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f040 8144 	bne.w	800342c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80031ac:	f043 0202 	orr.w	r2, r3, #2
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff ff23 	bl	8003004 <LL_ADC_IsEnabled>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d141      	bne.n	8003248 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031cc:	d004      	beq.n	80031d8 <HAL_ADC_Init+0x114>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a7a      	ldr	r2, [pc, #488]	; (80033bc <HAL_ADC_Init+0x2f8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d10f      	bne.n	80031f8 <HAL_ADC_Init+0x134>
 80031d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80031dc:	f7ff ff12 	bl	8003004 <LL_ADC_IsEnabled>
 80031e0:	4604      	mov	r4, r0
 80031e2:	4876      	ldr	r0, [pc, #472]	; (80033bc <HAL_ADC_Init+0x2f8>)
 80031e4:	f7ff ff0e 	bl	8003004 <LL_ADC_IsEnabled>
 80031e8:	4603      	mov	r3, r0
 80031ea:	4323      	orrs	r3, r4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf0c      	ite	eq
 80031f0:	2301      	moveq	r3, #1
 80031f2:	2300      	movne	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	e012      	b.n	800321e <HAL_ADC_Init+0x15a>
 80031f8:	4871      	ldr	r0, [pc, #452]	; (80033c0 <HAL_ADC_Init+0x2fc>)
 80031fa:	f7ff ff03 	bl	8003004 <LL_ADC_IsEnabled>
 80031fe:	4604      	mov	r4, r0
 8003200:	4870      	ldr	r0, [pc, #448]	; (80033c4 <HAL_ADC_Init+0x300>)
 8003202:	f7ff feff 	bl	8003004 <LL_ADC_IsEnabled>
 8003206:	4603      	mov	r3, r0
 8003208:	431c      	orrs	r4, r3
 800320a:	486f      	ldr	r0, [pc, #444]	; (80033c8 <HAL_ADC_Init+0x304>)
 800320c:	f7ff fefa 	bl	8003004 <LL_ADC_IsEnabled>
 8003210:	4603      	mov	r3, r0
 8003212:	4323      	orrs	r3, r4
 8003214:	2b00      	cmp	r3, #0
 8003216:	bf0c      	ite	eq
 8003218:	2301      	moveq	r3, #1
 800321a:	2300      	movne	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d012      	beq.n	8003248 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800322a:	d004      	beq.n	8003236 <HAL_ADC_Init+0x172>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a62      	ldr	r2, [pc, #392]	; (80033bc <HAL_ADC_Init+0x2f8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d101      	bne.n	800323a <HAL_ADC_Init+0x176>
 8003236:	4a65      	ldr	r2, [pc, #404]	; (80033cc <HAL_ADC_Init+0x308>)
 8003238:	e000      	b.n	800323c <HAL_ADC_Init+0x178>
 800323a:	4a65      	ldr	r2, [pc, #404]	; (80033d0 <HAL_ADC_Init+0x30c>)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	4619      	mov	r1, r3
 8003242:	4610      	mov	r0, r2
 8003244:	f7ff fcd4 	bl	8002bf0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	7f5b      	ldrb	r3, [r3, #29]
 800324c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003252:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003258:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800325e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003266:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003268:	4313      	orrs	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003272:	2b01      	cmp	r3, #1
 8003274:	d106      	bne.n	8003284 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	3b01      	subs	r3, #1
 800327c:	045b      	lsls	r3, r3, #17
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	2b00      	cmp	r3, #0
 800328a:	d009      	beq.n	80032a0 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	4b4b      	ldr	r3, [pc, #300]	; (80033d4 <HAL_ADC_Init+0x310>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	69b9      	ldr	r1, [r7, #24]
 80032b0:	430b      	orrs	r3, r1
 80032b2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fed2 	bl	8003078 <LL_ADC_REG_IsConversionOngoing>
 80032d4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff fedf 	bl	800309e <LL_ADC_INJ_IsConversionOngoing>
 80032e0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d17f      	bne.n	80033e8 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d17c      	bne.n	80033e8 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80032f2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032fa:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800330a:	f023 0302 	bic.w	r3, r3, #2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	69b9      	ldr	r1, [r7, #24]
 8003314:	430b      	orrs	r3, r1
 8003316:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d017      	beq.n	8003350 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800332e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003338:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800333c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6911      	ldr	r1, [r2, #16]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6812      	ldr	r2, [r2, #0]
 8003348:	430b      	orrs	r3, r1
 800334a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800334e:	e013      	b.n	8003378 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800335e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003370:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003374:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800337e:	2b01      	cmp	r3, #1
 8003380:	d12a      	bne.n	80033d8 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800338c:	f023 0304 	bic.w	r3, r3, #4
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003398:	4311      	orrs	r1, r2
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800339e:	4311      	orrs	r1, r2
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80033a4:	430a      	orrs	r2, r1
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0201 	orr.w	r2, r2, #1
 80033b0:	611a      	str	r2, [r3, #16]
 80033b2:	e019      	b.n	80033e8 <HAL_ADC_Init+0x324>
 80033b4:	20000004 	.word	0x20000004
 80033b8:	053e2d63 	.word	0x053e2d63
 80033bc:	50000100 	.word	0x50000100
 80033c0:	50000400 	.word	0x50000400
 80033c4:	50000500 	.word	0x50000500
 80033c8:	50000600 	.word	0x50000600
 80033cc:	50000300 	.word	0x50000300
 80033d0:	50000700 	.word	0x50000700
 80033d4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691a      	ldr	r2, [r3, #16]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0201 	bic.w	r2, r2, #1
 80033e6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d10c      	bne.n	800340a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	f023 010f 	bic.w	r1, r3, #15
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	1e5a      	subs	r2, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	631a      	str	r2, [r3, #48]	; 0x30
 8003408:	e007      	b.n	800341a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 020f 	bic.w	r2, r2, #15
 8003418:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341e:	f023 0303 	bic.w	r3, r3, #3
 8003422:	f043 0201 	orr.w	r2, r3, #1
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	65da      	str	r2, [r3, #92]	; 0x5c
 800342a:	e007      	b.n	800343c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003430:	f043 0210 	orr.w	r2, r3, #16
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800343c:	7ffb      	ldrb	r3, [r7, #31]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3724      	adds	r7, #36	; 0x24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd90      	pop	{r4, r7, pc}
 8003446:	bf00      	nop

08003448 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003458:	d004      	beq.n	8003464 <HAL_ADC_Start+0x1c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a67      	ldr	r2, [pc, #412]	; (80035fc <HAL_ADC_Start+0x1b4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d101      	bne.n	8003468 <HAL_ADC_Start+0x20>
 8003464:	4b66      	ldr	r3, [pc, #408]	; (8003600 <HAL_ADC_Start+0x1b8>)
 8003466:	e000      	b.n	800346a <HAL_ADC_Start+0x22>
 8003468:	4b66      	ldr	r3, [pc, #408]	; (8003604 <HAL_ADC_Start+0x1bc>)
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff fd38 	bl	8002ee0 <LL_ADC_GetMultimode>
 8003470:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff fdfe 	bl	8003078 <LL_ADC_REG_IsConversionOngoing>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	f040 80b4 	bne.w	80035ec <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_ADC_Start+0x4a>
 800348e:	2302      	movs	r3, #2
 8003490:	e0af      	b.n	80035f2 <HAL_ADC_Start+0x1aa>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f001 f854 	bl	8004548 <ADC_Enable>
 80034a0:	4603      	mov	r3, r0
 80034a2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f040 809b 	bne.w	80035e2 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034b4:	f023 0301 	bic.w	r3, r3, #1
 80034b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a4d      	ldr	r2, [pc, #308]	; (80035fc <HAL_ADC_Start+0x1b4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d009      	beq.n	80034de <HAL_ADC_Start+0x96>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a4e      	ldr	r2, [pc, #312]	; (8003608 <HAL_ADC_Start+0x1c0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d002      	beq.n	80034da <HAL_ADC_Start+0x92>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	e003      	b.n	80034e2 <HAL_ADC_Start+0x9a>
 80034da:	4b4c      	ldr	r3, [pc, #304]	; (800360c <HAL_ADC_Start+0x1c4>)
 80034dc:	e001      	b.n	80034e2 <HAL_ADC_Start+0x9a>
 80034de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6812      	ldr	r2, [r2, #0]
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d002      	beq.n	80034f0 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d105      	bne.n	80034fc <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003508:	d106      	bne.n	8003518 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350e:	f023 0206 	bic.w	r2, r3, #6
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	661a      	str	r2, [r3, #96]	; 0x60
 8003516:	e002      	b.n	800351e <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	221c      	movs	r2, #28
 8003524:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a32      	ldr	r2, [pc, #200]	; (80035fc <HAL_ADC_Start+0x1b4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d009      	beq.n	800354c <HAL_ADC_Start+0x104>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a32      	ldr	r2, [pc, #200]	; (8003608 <HAL_ADC_Start+0x1c0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d002      	beq.n	8003548 <HAL_ADC_Start+0x100>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	e003      	b.n	8003550 <HAL_ADC_Start+0x108>
 8003548:	4b30      	ldr	r3, [pc, #192]	; (800360c <HAL_ADC_Start+0x1c4>)
 800354a:	e001      	b.n	8003550 <HAL_ADC_Start+0x108>
 800354c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	4293      	cmp	r3, r2
 8003556:	d008      	beq.n	800356a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d005      	beq.n	800356a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	2b05      	cmp	r3, #5
 8003562:	d002      	beq.n	800356a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	2b09      	cmp	r3, #9
 8003568:	d114      	bne.n	8003594 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d007      	beq.n	8003588 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003580:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fd5f 	bl	8003050 <LL_ADC_REG_StartConversion>
 8003592:	e02d      	b.n	80035f0 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003598:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a15      	ldr	r2, [pc, #84]	; (80035fc <HAL_ADC_Start+0x1b4>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d009      	beq.n	80035be <HAL_ADC_Start+0x176>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a16      	ldr	r2, [pc, #88]	; (8003608 <HAL_ADC_Start+0x1c0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d002      	beq.n	80035ba <HAL_ADC_Start+0x172>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	e003      	b.n	80035c2 <HAL_ADC_Start+0x17a>
 80035ba:	4b14      	ldr	r3, [pc, #80]	; (800360c <HAL_ADC_Start+0x1c4>)
 80035bc:	e001      	b.n	80035c2 <HAL_ADC_Start+0x17a>
 80035be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035c2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00f      	beq.n	80035f0 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	65da      	str	r2, [r3, #92]	; 0x5c
 80035e0:	e006      	b.n	80035f0 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80035ea:	e001      	b.n	80035f0 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80035ec:	2302      	movs	r3, #2
 80035ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80035f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	50000100 	.word	0x50000100
 8003600:	50000300 	.word	0x50000300
 8003604:	50000700 	.word	0x50000700
 8003608:	50000500 	.word	0x50000500
 800360c:	50000400 	.word	0x50000400

08003610 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003624:	d004      	beq.n	8003630 <HAL_ADC_Start_DMA+0x20>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a5a      	ldr	r2, [pc, #360]	; (8003794 <HAL_ADC_Start_DMA+0x184>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d101      	bne.n	8003634 <HAL_ADC_Start_DMA+0x24>
 8003630:	4b59      	ldr	r3, [pc, #356]	; (8003798 <HAL_ADC_Start_DMA+0x188>)
 8003632:	e000      	b.n	8003636 <HAL_ADC_Start_DMA+0x26>
 8003634:	4b59      	ldr	r3, [pc, #356]	; (800379c <HAL_ADC_Start_DMA+0x18c>)
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff fc52 	bl	8002ee0 <LL_ADC_GetMultimode>
 800363c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fd18 	bl	8003078 <LL_ADC_REG_IsConversionOngoing>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	f040 809b 	bne.w	8003786 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_ADC_Start_DMA+0x4e>
 800365a:	2302      	movs	r3, #2
 800365c:	e096      	b.n	800378c <HAL_ADC_Start_DMA+0x17c>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a4d      	ldr	r2, [pc, #308]	; (80037a0 <HAL_ADC_Start_DMA+0x190>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d008      	beq.n	8003682 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	2b05      	cmp	r3, #5
 800367a:	d002      	beq.n	8003682 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	2b09      	cmp	r3, #9
 8003680:	d17a      	bne.n	8003778 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 ff60 	bl	8004548 <ADC_Enable>
 8003688:	4603      	mov	r3, r0
 800368a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800368c:	7dfb      	ldrb	r3, [r7, #23]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d16d      	bne.n	800376e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003696:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800369a:	f023 0301 	bic.w	r3, r3, #1
 800369e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a3a      	ldr	r2, [pc, #232]	; (8003794 <HAL_ADC_Start_DMA+0x184>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d009      	beq.n	80036c4 <HAL_ADC_Start_DMA+0xb4>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a3b      	ldr	r2, [pc, #236]	; (80037a4 <HAL_ADC_Start_DMA+0x194>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d002      	beq.n	80036c0 <HAL_ADC_Start_DMA+0xb0>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	e003      	b.n	80036c8 <HAL_ADC_Start_DMA+0xb8>
 80036c0:	4b39      	ldr	r3, [pc, #228]	; (80037a8 <HAL_ADC_Start_DMA+0x198>)
 80036c2:	e001      	b.n	80036c8 <HAL_ADC_Start_DMA+0xb8>
 80036c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d002      	beq.n	80036d6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d105      	bne.n	80036e2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d006      	beq.n	80036fc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f2:	f023 0206 	bic.w	r2, r3, #6
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	661a      	str	r2, [r3, #96]	; 0x60
 80036fa:	e002      	b.n	8003702 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003706:	4a29      	ldr	r2, [pc, #164]	; (80037ac <HAL_ADC_Start_DMA+0x19c>)
 8003708:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370e:	4a28      	ldr	r2, [pc, #160]	; (80037b0 <HAL_ADC_Start_DMA+0x1a0>)
 8003710:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003716:	4a27      	ldr	r2, [pc, #156]	; (80037b4 <HAL_ADC_Start_DMA+0x1a4>)
 8003718:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	221c      	movs	r2, #28
 8003720:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0210 	orr.w	r2, r2, #16
 8003738:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0201 	orr.w	r2, r2, #1
 8003748:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3340      	adds	r3, #64	; 0x40
 8003754:	4619      	mov	r1, r3
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f001 fbf1 	bl	8004f40 <HAL_DMA_Start_IT>
 800375e:	4603      	mov	r3, r0
 8003760:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fc72 	bl	8003050 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800376c:	e00d      	b.n	800378a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003776:	e008      	b.n	800378a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003784:	e001      	b.n	800378a <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003786:	2302      	movs	r3, #2
 8003788:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800378a:	7dfb      	ldrb	r3, [r7, #23]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	50000100 	.word	0x50000100
 8003798:	50000300 	.word	0x50000300
 800379c:	50000700 	.word	0x50000700
 80037a0:	50000600 	.word	0x50000600
 80037a4:	50000500 	.word	0x50000500
 80037a8:	50000400 	.word	0x50000400
 80037ac:	080046cb 	.word	0x080046cb
 80037b0:	080047a3 	.word	0x080047a3
 80037b4:	080047bf 	.word	0x080047bf

080037b8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08a      	sub	sp, #40	; 0x28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80037c0:	2300      	movs	r3, #0
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037dc:	d004      	beq.n	80037e8 <HAL_ADC_IRQHandler+0x30>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a8e      	ldr	r2, [pc, #568]	; (8003a1c <HAL_ADC_IRQHandler+0x264>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d101      	bne.n	80037ec <HAL_ADC_IRQHandler+0x34>
 80037e8:	4b8d      	ldr	r3, [pc, #564]	; (8003a20 <HAL_ADC_IRQHandler+0x268>)
 80037ea:	e000      	b.n	80037ee <HAL_ADC_IRQHandler+0x36>
 80037ec:	4b8d      	ldr	r3, [pc, #564]	; (8003a24 <HAL_ADC_IRQHandler+0x26c>)
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fb76 	bl	8002ee0 <LL_ADC_GetMultimode>
 80037f4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d017      	beq.n	8003830 <HAL_ADC_IRQHandler+0x78>
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d012      	beq.n	8003830 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b00      	cmp	r3, #0
 8003814:	d105      	bne.n	8003822 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f001 f8c2 	bl	80049ac <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2202      	movs	r2, #2
 800382e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	2b00      	cmp	r3, #0
 8003838:	d004      	beq.n	8003844 <HAL_ADC_IRQHandler+0x8c>
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10b      	bne.n	800385c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 8094 	beq.w	8003978 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 808e 	beq.w	8003978 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003860:	f003 0310 	and.w	r3, r3, #16
 8003864:	2b00      	cmp	r3, #0
 8003866:	d105      	bne.n	8003874 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff fa8b 	bl	8002d94 <LL_ADC_REG_IsTriggerSourceSWStart>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d072      	beq.n	800396a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a64      	ldr	r2, [pc, #400]	; (8003a1c <HAL_ADC_IRQHandler+0x264>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d009      	beq.n	80038a2 <HAL_ADC_IRQHandler+0xea>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a65      	ldr	r2, [pc, #404]	; (8003a28 <HAL_ADC_IRQHandler+0x270>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d002      	beq.n	800389e <HAL_ADC_IRQHandler+0xe6>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	e003      	b.n	80038a6 <HAL_ADC_IRQHandler+0xee>
 800389e:	4b63      	ldr	r3, [pc, #396]	; (8003a2c <HAL_ADC_IRQHandler+0x274>)
 80038a0:	e001      	b.n	80038a6 <HAL_ADC_IRQHandler+0xee>
 80038a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6812      	ldr	r2, [r2, #0]
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d008      	beq.n	80038c0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2b05      	cmp	r3, #5
 80038b8:	d002      	beq.n	80038c0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b09      	cmp	r3, #9
 80038be:	d104      	bne.n	80038ca <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	623b      	str	r3, [r7, #32]
 80038c8:	e014      	b.n	80038f4 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a53      	ldr	r2, [pc, #332]	; (8003a1c <HAL_ADC_IRQHandler+0x264>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d009      	beq.n	80038e8 <HAL_ADC_IRQHandler+0x130>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a53      	ldr	r2, [pc, #332]	; (8003a28 <HAL_ADC_IRQHandler+0x270>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d002      	beq.n	80038e4 <HAL_ADC_IRQHandler+0x12c>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	e003      	b.n	80038ec <HAL_ADC_IRQHandler+0x134>
 80038e4:	4b51      	ldr	r3, [pc, #324]	; (8003a2c <HAL_ADC_IRQHandler+0x274>)
 80038e6:	e001      	b.n	80038ec <HAL_ADC_IRQHandler+0x134>
 80038e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80038ec:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d135      	bne.n	800396a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b08      	cmp	r3, #8
 800390a:	d12e      	bne.n	800396a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff fbb1 	bl	8003078 <LL_ADC_REG_IsConversionOngoing>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d11a      	bne.n	8003952 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 020c 	bic.w	r2, r2, #12
 800392a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d112      	bne.n	800396a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003948:	f043 0201 	orr.w	r2, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003950:	e00b      	b.n	800396a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003956:	f043 0210 	orr.w	r2, r3, #16
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003962:	f043 0201 	orr.w	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f984 	bl	8003c78 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	220c      	movs	r2, #12
 8003976:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f003 0320 	and.w	r3, r3, #32
 800397e:	2b00      	cmp	r3, #0
 8003980:	d004      	beq.n	800398c <HAL_ADC_IRQHandler+0x1d4>
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	f003 0320 	and.w	r3, r3, #32
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10b      	bne.n	80039a4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 80b3 	beq.w	8003afe <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 80ad 	beq.w	8003afe <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d105      	bne.n	80039bc <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff fa26 	bl	8002e12 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80039c6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff f9e1 	bl	8002d94 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039d2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a10      	ldr	r2, [pc, #64]	; (8003a1c <HAL_ADC_IRQHandler+0x264>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d009      	beq.n	80039f2 <HAL_ADC_IRQHandler+0x23a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a11      	ldr	r2, [pc, #68]	; (8003a28 <HAL_ADC_IRQHandler+0x270>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d002      	beq.n	80039ee <HAL_ADC_IRQHandler+0x236>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	e003      	b.n	80039f6 <HAL_ADC_IRQHandler+0x23e>
 80039ee:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <HAL_ADC_IRQHandler+0x274>)
 80039f0:	e001      	b.n	80039f6 <HAL_ADC_IRQHandler+0x23e>
 80039f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d008      	beq.n	8003a10 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2b06      	cmp	r3, #6
 8003a08:	d002      	beq.n	8003a10 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b07      	cmp	r3, #7
 8003a0e:	d10f      	bne.n	8003a30 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	623b      	str	r3, [r7, #32]
 8003a18:	e01f      	b.n	8003a5a <HAL_ADC_IRQHandler+0x2a2>
 8003a1a:	bf00      	nop
 8003a1c:	50000100 	.word	0x50000100
 8003a20:	50000300 	.word	0x50000300
 8003a24:	50000700 	.word	0x50000700
 8003a28:	50000500 	.word	0x50000500
 8003a2c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a8b      	ldr	r2, [pc, #556]	; (8003c64 <HAL_ADC_IRQHandler+0x4ac>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d009      	beq.n	8003a4e <HAL_ADC_IRQHandler+0x296>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a8a      	ldr	r2, [pc, #552]	; (8003c68 <HAL_ADC_IRQHandler+0x4b0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d002      	beq.n	8003a4a <HAL_ADC_IRQHandler+0x292>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	e003      	b.n	8003a52 <HAL_ADC_IRQHandler+0x29a>
 8003a4a:	4b88      	ldr	r3, [pc, #544]	; (8003c6c <HAL_ADC_IRQHandler+0x4b4>)
 8003a4c:	e001      	b.n	8003a52 <HAL_ADC_IRQHandler+0x29a>
 8003a4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a52:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d047      	beq.n	8003af0 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <HAL_ADC_IRQHandler+0x2c2>
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d03f      	beq.n	8003af0 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d13a      	bne.n	8003af0 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a84:	2b40      	cmp	r3, #64	; 0x40
 8003a86:	d133      	bne.n	8003af0 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d12e      	bne.n	8003af0 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff fb01 	bl	800309e <LL_ADC_INJ_IsConversionOngoing>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d11a      	bne.n	8003ad8 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ab0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d112      	bne.n	8003af0 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ace:	f043 0201 	orr.w	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ad6:	e00b      	b.n	8003af0 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003adc:	f043 0210 	orr.w	r2, r3, #16
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae8:	f043 0201 	orr.w	r2, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 ff33 	bl	800495c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2260      	movs	r2, #96	; 0x60
 8003afc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d011      	beq.n	8003b2c <HAL_ADC_IRQHandler+0x374>
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00c      	beq.n	8003b2c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f8be 	bl	8003ca0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2280      	movs	r2, #128	; 0x80
 8003b2a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d012      	beq.n	8003b5c <HAL_ADC_IRQHandler+0x3a4>
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00d      	beq.n	8003b5c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b44:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 ff19 	bl	8004984 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b5a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d012      	beq.n	8003b8c <HAL_ADC_IRQHandler+0x3d4>
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00d      	beq.n	8003b8c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 ff0b 	bl	8004998 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f003 0310 	and.w	r3, r3, #16
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d043      	beq.n	8003c1e <HAL_ADC_IRQHandler+0x466>
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d03e      	beq.n	8003c1e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d102      	bne.n	8003bae <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
 8003bac:	e021      	b.n	8003bf2 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d015      	beq.n	8003be0 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bbc:	d004      	beq.n	8003bc8 <HAL_ADC_IRQHandler+0x410>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a28      	ldr	r2, [pc, #160]	; (8003c64 <HAL_ADC_IRQHandler+0x4ac>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d101      	bne.n	8003bcc <HAL_ADC_IRQHandler+0x414>
 8003bc8:	4b29      	ldr	r3, [pc, #164]	; (8003c70 <HAL_ADC_IRQHandler+0x4b8>)
 8003bca:	e000      	b.n	8003bce <HAL_ADC_IRQHandler+0x416>
 8003bcc:	4b29      	ldr	r3, [pc, #164]	; (8003c74 <HAL_ADC_IRQHandler+0x4bc>)
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff f994 	bl	8002efc <LL_ADC_GetMultiDMATransfer>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00b      	beq.n	8003bf2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bde:	e008      	b.n	8003bf2 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d10e      	bne.n	8003c16 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c08:	f043 0202 	orr.w	r2, r3, #2
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f84f 	bl	8003cb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2210      	movs	r2, #16
 8003c1c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d018      	beq.n	8003c5a <HAL_ADC_IRQHandler+0x4a2>
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d013      	beq.n	8003c5a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c36:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c42:	f043 0208 	orr.w	r2, r3, #8
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c52:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 fe8b 	bl	8004970 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003c5a:	bf00      	nop
 8003c5c:	3728      	adds	r7, #40	; 0x28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	50000100 	.word	0x50000100
 8003c68:	50000500 	.word	0x50000500
 8003c6c:	50000400 	.word	0x50000400
 8003c70:	50000300 	.word	0x50000300
 8003c74:	50000700 	.word	0x50000700

08003c78 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b0b6      	sub	sp, #216	; 0xd8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d102      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x24>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	f000 bc13 	b.w	8004512 <HAL_ADC_ConfigChannel+0x84a>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff f9bd 	bl	8003078 <LL_ADC_REG_IsConversionOngoing>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f040 83f3 	bne.w	80044ec <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6859      	ldr	r1, [r3, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	461a      	mov	r2, r3
 8003d14:	f7ff f851 	bl	8002dba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff f9ab 	bl	8003078 <LL_ADC_REG_IsConversionOngoing>
 8003d22:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff f9b7 	bl	800309e <LL_ADC_INJ_IsConversionOngoing>
 8003d30:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d34:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f040 81d9 	bne.w	80040f0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f040 81d4 	bne.w	80040f0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d50:	d10f      	bne.n	8003d72 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6818      	ldr	r0, [r3, #0]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	f7ff f86b 	bl	8002e38 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe ffff 	bl	8002d6e <LL_ADC_SetSamplingTimeCommonConfig>
 8003d70:	e00e      	b.n	8003d90 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	6819      	ldr	r1, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f7ff f85a 	bl	8002e38 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fe ffef 	bl	8002d6e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	695a      	ldr	r2, [r3, #20]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	08db      	lsrs	r3, r3, #3
 8003d9c:	f003 0303 	and.w	r3, r3, #3
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d022      	beq.n	8003df8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	6919      	ldr	r1, [r3, #16]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003dc2:	f7fe ff49 	bl	8002c58 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	6919      	ldr	r1, [r3, #16]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f7fe ff95 	bl	8002d02 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6818      	ldr	r0, [r3, #0]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	6919      	ldr	r1, [r3, #16]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	7f1b      	ldrb	r3, [r3, #28]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d102      	bne.n	8003dee <HAL_ADC_ConfigChannel+0x126>
 8003de8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dec:	e000      	b.n	8003df0 <HAL_ADC_ConfigChannel+0x128>
 8003dee:	2300      	movs	r3, #0
 8003df0:	461a      	mov	r2, r3
 8003df2:	f7fe ffa1 	bl	8002d38 <LL_ADC_SetOffsetSaturation>
 8003df6:	e17b      	b.n	80040f0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fe ff4e 	bl	8002ca0 <LL_ADC_GetOffsetChannel>
 8003e04:	4603      	mov	r3, r0
 8003e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10a      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x15c>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2100      	movs	r1, #0
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fe ff43 	bl	8002ca0 <LL_ADC_GetOffsetChannel>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	0e9b      	lsrs	r3, r3, #26
 8003e1e:	f003 021f 	and.w	r2, r3, #31
 8003e22:	e01e      	b.n	8003e62 <HAL_ADC_ConfigChannel+0x19a>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2100      	movs	r1, #0
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fe ff38 	bl	8002ca0 <LL_ADC_GetOffsetChannel>
 8003e30:	4603      	mov	r3, r0
 8003e32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e3a:	fa93 f3a3 	rbit	r3, r3
 8003e3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003e52:	2320      	movs	r3, #32
 8003e54:	e004      	b.n	8003e60 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003e56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e5a:	fab3 f383 	clz	r3, r3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d105      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x1b2>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	0e9b      	lsrs	r3, r3, #26
 8003e74:	f003 031f 	and.w	r3, r3, #31
 8003e78:	e018      	b.n	8003eac <HAL_ADC_ConfigChannel+0x1e4>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e86:	fa93 f3a3 	rbit	r3, r3
 8003e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003e8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003e96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d101      	bne.n	8003ea2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003e9e:	2320      	movs	r3, #32
 8003ea0:	e004      	b.n	8003eac <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003ea2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ea6:	fab3 f383 	clz	r3, r3
 8003eaa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d106      	bne.n	8003ebe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fe ff07 	bl	8002ccc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7fe feeb 	bl	8002ca0 <LL_ADC_GetOffsetChannel>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x222>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2101      	movs	r1, #1
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe fee0 	bl	8002ca0 <LL_ADC_GetOffsetChannel>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	0e9b      	lsrs	r3, r3, #26
 8003ee4:	f003 021f 	and.w	r2, r3, #31
 8003ee8:	e01e      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x260>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2101      	movs	r1, #1
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fe fed5 	bl	8002ca0 <LL_ADC_GetOffsetChannel>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f00:	fa93 f3a3 	rbit	r3, r3
 8003f04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003f08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003f10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003f18:	2320      	movs	r3, #32
 8003f1a:	e004      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003f1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f20:	fab3 f383 	clz	r3, r3
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d105      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x278>
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	0e9b      	lsrs	r3, r3, #26
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	e018      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x2aa>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f4c:	fa93 f3a3 	rbit	r3, r3
 8003f50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003f54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003f5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003f64:	2320      	movs	r3, #32
 8003f66:	e004      	b.n	8003f72 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003f68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f6c:	fab3 f383 	clz	r3, r3
 8003f70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d106      	bne.n	8003f84 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fe fea4 	bl	8002ccc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2102      	movs	r1, #2
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fe fe88 	bl	8002ca0 <LL_ADC_GetOffsetChannel>
 8003f90:	4603      	mov	r3, r0
 8003f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10a      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x2e8>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2102      	movs	r1, #2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fe fe7d 	bl	8002ca0 <LL_ADC_GetOffsetChannel>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	0e9b      	lsrs	r3, r3, #26
 8003faa:	f003 021f 	and.w	r2, r3, #31
 8003fae:	e01e      	b.n	8003fee <HAL_ADC_ConfigChannel+0x326>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2102      	movs	r1, #2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fe fe72 	bl	8002ca0 <LL_ADC_GetOffsetChannel>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fc6:	fa93 f3a3 	rbit	r3, r3
 8003fca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003fce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003fd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003fde:	2320      	movs	r3, #32
 8003fe0:	e004      	b.n	8003fec <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003fe2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fe6:	fab3 f383 	clz	r3, r3
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d105      	bne.n	8004006 <HAL_ADC_ConfigChannel+0x33e>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	0e9b      	lsrs	r3, r3, #26
 8004000:	f003 031f 	and.w	r3, r3, #31
 8004004:	e016      	b.n	8004034 <HAL_ADC_ConfigChannel+0x36c>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004012:	fa93 f3a3 	rbit	r3, r3
 8004016:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004018:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800401a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800401e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004026:	2320      	movs	r3, #32
 8004028:	e004      	b.n	8004034 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800402a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800402e:	fab3 f383 	clz	r3, r3
 8004032:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004034:	429a      	cmp	r2, r3
 8004036:	d106      	bne.n	8004046 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2200      	movs	r2, #0
 800403e:	2102      	movs	r1, #2
 8004040:	4618      	mov	r0, r3
 8004042:	f7fe fe43 	bl	8002ccc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2103      	movs	r1, #3
 800404c:	4618      	mov	r0, r3
 800404e:	f7fe fe27 	bl	8002ca0 <LL_ADC_GetOffsetChannel>
 8004052:	4603      	mov	r3, r0
 8004054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10a      	bne.n	8004072 <HAL_ADC_ConfigChannel+0x3aa>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2103      	movs	r1, #3
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe fe1c 	bl	8002ca0 <LL_ADC_GetOffsetChannel>
 8004068:	4603      	mov	r3, r0
 800406a:	0e9b      	lsrs	r3, r3, #26
 800406c:	f003 021f 	and.w	r2, r3, #31
 8004070:	e017      	b.n	80040a2 <HAL_ADC_ConfigChannel+0x3da>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2103      	movs	r1, #3
 8004078:	4618      	mov	r0, r3
 800407a:	f7fe fe11 	bl	8002ca0 <LL_ADC_GetOffsetChannel>
 800407e:	4603      	mov	r3, r0
 8004080:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004084:	fa93 f3a3 	rbit	r3, r3
 8004088:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800408a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800408c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800408e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004094:	2320      	movs	r3, #32
 8004096:	e003      	b.n	80040a0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800409a:	fab3 f383 	clz	r3, r3
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d105      	bne.n	80040ba <HAL_ADC_ConfigChannel+0x3f2>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	0e9b      	lsrs	r3, r3, #26
 80040b4:	f003 031f 	and.w	r3, r3, #31
 80040b8:	e011      	b.n	80040de <HAL_ADC_ConfigChannel+0x416>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040c2:	fa93 f3a3 	rbit	r3, r3
 80040c6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80040c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80040cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80040d2:	2320      	movs	r3, #32
 80040d4:	e003      	b.n	80040de <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80040d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d8:	fab3 f383 	clz	r3, r3
 80040dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040de:	429a      	cmp	r2, r3
 80040e0:	d106      	bne.n	80040f0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2200      	movs	r2, #0
 80040e8:	2103      	movs	r1, #3
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fe fdee 	bl	8002ccc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fe ff85 	bl	8003004 <LL_ADC_IsEnabled>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f040 813d 	bne.w	800437c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	6819      	ldr	r1, [r3, #0]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	461a      	mov	r2, r3
 8004110:	f7fe febe 	bl	8002e90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4aa2      	ldr	r2, [pc, #648]	; (80043a4 <HAL_ADC_ConfigChannel+0x6dc>)
 800411a:	4293      	cmp	r3, r2
 800411c:	f040 812e 	bne.w	800437c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10b      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x480>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	0e9b      	lsrs	r3, r3, #26
 8004136:	3301      	adds	r3, #1
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	2b09      	cmp	r3, #9
 800413e:	bf94      	ite	ls
 8004140:	2301      	movls	r3, #1
 8004142:	2300      	movhi	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	e019      	b.n	800417c <HAL_ADC_ConfigChannel+0x4b4>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004150:	fa93 f3a3 	rbit	r3, r3
 8004154:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004158:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800415a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004160:	2320      	movs	r3, #32
 8004162:	e003      	b.n	800416c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004164:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004166:	fab3 f383 	clz	r3, r3
 800416a:	b2db      	uxtb	r3, r3
 800416c:	3301      	adds	r3, #1
 800416e:	f003 031f 	and.w	r3, r3, #31
 8004172:	2b09      	cmp	r3, #9
 8004174:	bf94      	ite	ls
 8004176:	2301      	movls	r3, #1
 8004178:	2300      	movhi	r3, #0
 800417a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800417c:	2b00      	cmp	r3, #0
 800417e:	d079      	beq.n	8004274 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004188:	2b00      	cmp	r3, #0
 800418a:	d107      	bne.n	800419c <HAL_ADC_ConfigChannel+0x4d4>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	0e9b      	lsrs	r3, r3, #26
 8004192:	3301      	adds	r3, #1
 8004194:	069b      	lsls	r3, r3, #26
 8004196:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800419a:	e015      	b.n	80041c8 <HAL_ADC_ConfigChannel+0x500>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041a4:	fa93 f3a3 	rbit	r3, r3
 80041a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80041aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80041ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80041b4:	2320      	movs	r3, #32
 80041b6:	e003      	b.n	80041c0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80041b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ba:	fab3 f383 	clz	r3, r3
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	3301      	adds	r3, #1
 80041c2:	069b      	lsls	r3, r3, #26
 80041c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d109      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x520>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	0e9b      	lsrs	r3, r3, #26
 80041da:	3301      	adds	r3, #1
 80041dc:	f003 031f 	and.w	r3, r3, #31
 80041e0:	2101      	movs	r1, #1
 80041e2:	fa01 f303 	lsl.w	r3, r1, r3
 80041e6:	e017      	b.n	8004218 <HAL_ADC_ConfigChannel+0x550>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041f0:	fa93 f3a3 	rbit	r3, r3
 80041f4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80041f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80041fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004200:	2320      	movs	r3, #32
 8004202:	e003      	b.n	800420c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004206:	fab3 f383 	clz	r3, r3
 800420a:	b2db      	uxtb	r3, r3
 800420c:	3301      	adds	r3, #1
 800420e:	f003 031f 	and.w	r3, r3, #31
 8004212:	2101      	movs	r1, #1
 8004214:	fa01 f303 	lsl.w	r3, r1, r3
 8004218:	ea42 0103 	orr.w	r1, r2, r3
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <HAL_ADC_ConfigChannel+0x576>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	0e9b      	lsrs	r3, r3, #26
 800422e:	3301      	adds	r3, #1
 8004230:	f003 021f 	and.w	r2, r3, #31
 8004234:	4613      	mov	r3, r2
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	4413      	add	r3, r2
 800423a:	051b      	lsls	r3, r3, #20
 800423c:	e018      	b.n	8004270 <HAL_ADC_ConfigChannel+0x5a8>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004246:	fa93 f3a3 	rbit	r3, r3
 800424a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800424c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004256:	2320      	movs	r3, #32
 8004258:	e003      	b.n	8004262 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800425a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425c:	fab3 f383 	clz	r3, r3
 8004260:	b2db      	uxtb	r3, r3
 8004262:	3301      	adds	r3, #1
 8004264:	f003 021f 	and.w	r2, r3, #31
 8004268:	4613      	mov	r3, r2
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	4413      	add	r3, r2
 800426e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004270:	430b      	orrs	r3, r1
 8004272:	e07e      	b.n	8004372 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800427c:	2b00      	cmp	r3, #0
 800427e:	d107      	bne.n	8004290 <HAL_ADC_ConfigChannel+0x5c8>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	0e9b      	lsrs	r3, r3, #26
 8004286:	3301      	adds	r3, #1
 8004288:	069b      	lsls	r3, r3, #26
 800428a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800428e:	e015      	b.n	80042bc <HAL_ADC_ConfigChannel+0x5f4>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004298:	fa93 f3a3 	rbit	r3, r3
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80042a8:	2320      	movs	r3, #32
 80042aa:	e003      	b.n	80042b4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	fab3 f383 	clz	r3, r3
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	3301      	adds	r3, #1
 80042b6:	069b      	lsls	r3, r3, #26
 80042b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d109      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x614>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	0e9b      	lsrs	r3, r3, #26
 80042ce:	3301      	adds	r3, #1
 80042d0:	f003 031f 	and.w	r3, r3, #31
 80042d4:	2101      	movs	r1, #1
 80042d6:	fa01 f303 	lsl.w	r3, r1, r3
 80042da:	e017      	b.n	800430c <HAL_ADC_ConfigChannel+0x644>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	fa93 f3a3 	rbit	r3, r3
 80042e8:	61fb      	str	r3, [r7, #28]
  return result;
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80042f4:	2320      	movs	r3, #32
 80042f6:	e003      	b.n	8004300 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	fab3 f383 	clz	r3, r3
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	3301      	adds	r3, #1
 8004302:	f003 031f 	and.w	r3, r3, #31
 8004306:	2101      	movs	r1, #1
 8004308:	fa01 f303 	lsl.w	r3, r1, r3
 800430c:	ea42 0103 	orr.w	r1, r2, r3
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10d      	bne.n	8004338 <HAL_ADC_ConfigChannel+0x670>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	0e9b      	lsrs	r3, r3, #26
 8004322:	3301      	adds	r3, #1
 8004324:	f003 021f 	and.w	r2, r3, #31
 8004328:	4613      	mov	r3, r2
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	4413      	add	r3, r2
 800432e:	3b1e      	subs	r3, #30
 8004330:	051b      	lsls	r3, r3, #20
 8004332:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004336:	e01b      	b.n	8004370 <HAL_ADC_ConfigChannel+0x6a8>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	fa93 f3a3 	rbit	r3, r3
 8004344:	613b      	str	r3, [r7, #16]
  return result;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004350:	2320      	movs	r3, #32
 8004352:	e003      	b.n	800435c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	fab3 f383 	clz	r3, r3
 800435a:	b2db      	uxtb	r3, r3
 800435c:	3301      	adds	r3, #1
 800435e:	f003 021f 	and.w	r2, r3, #31
 8004362:	4613      	mov	r3, r2
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	4413      	add	r3, r2
 8004368:	3b1e      	subs	r3, #30
 800436a:	051b      	lsls	r3, r3, #20
 800436c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004370:	430b      	orrs	r3, r1
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	6892      	ldr	r2, [r2, #8]
 8004376:	4619      	mov	r1, r3
 8004378:	f7fe fd5e 	bl	8002e38 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <HAL_ADC_ConfigChannel+0x6e0>)
 8004382:	4013      	ands	r3, r2
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80be 	beq.w	8004506 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004392:	d004      	beq.n	800439e <HAL_ADC_ConfigChannel+0x6d6>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a04      	ldr	r2, [pc, #16]	; (80043ac <HAL_ADC_ConfigChannel+0x6e4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d10a      	bne.n	80043b4 <HAL_ADC_ConfigChannel+0x6ec>
 800439e:	4b04      	ldr	r3, [pc, #16]	; (80043b0 <HAL_ADC_ConfigChannel+0x6e8>)
 80043a0:	e009      	b.n	80043b6 <HAL_ADC_ConfigChannel+0x6ee>
 80043a2:	bf00      	nop
 80043a4:	407f0000 	.word	0x407f0000
 80043a8:	80080000 	.word	0x80080000
 80043ac:	50000100 	.word	0x50000100
 80043b0:	50000300 	.word	0x50000300
 80043b4:	4b59      	ldr	r3, [pc, #356]	; (800451c <HAL_ADC_ConfigChannel+0x854>)
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fe fc40 	bl	8002c3c <LL_ADC_GetCommonPathInternalCh>
 80043bc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a56      	ldr	r2, [pc, #344]	; (8004520 <HAL_ADC_ConfigChannel+0x858>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d004      	beq.n	80043d4 <HAL_ADC_ConfigChannel+0x70c>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a55      	ldr	r2, [pc, #340]	; (8004524 <HAL_ADC_ConfigChannel+0x85c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d13a      	bne.n	800444a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d134      	bne.n	800444a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043e8:	d005      	beq.n	80043f6 <HAL_ADC_ConfigChannel+0x72e>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a4e      	ldr	r2, [pc, #312]	; (8004528 <HAL_ADC_ConfigChannel+0x860>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	f040 8085 	bne.w	8004500 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043fe:	d004      	beq.n	800440a <HAL_ADC_ConfigChannel+0x742>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a49      	ldr	r2, [pc, #292]	; (800452c <HAL_ADC_ConfigChannel+0x864>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d101      	bne.n	800440e <HAL_ADC_ConfigChannel+0x746>
 800440a:	4a49      	ldr	r2, [pc, #292]	; (8004530 <HAL_ADC_ConfigChannel+0x868>)
 800440c:	e000      	b.n	8004410 <HAL_ADC_ConfigChannel+0x748>
 800440e:	4a43      	ldr	r2, [pc, #268]	; (800451c <HAL_ADC_ConfigChannel+0x854>)
 8004410:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004414:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004418:	4619      	mov	r1, r3
 800441a:	4610      	mov	r0, r2
 800441c:	f7fe fbfb 	bl	8002c16 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004420:	4b44      	ldr	r3, [pc, #272]	; (8004534 <HAL_ADC_ConfigChannel+0x86c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	099b      	lsrs	r3, r3, #6
 8004426:	4a44      	ldr	r2, [pc, #272]	; (8004538 <HAL_ADC_ConfigChannel+0x870>)
 8004428:	fba2 2303 	umull	r2, r3, r2, r3
 800442c:	099b      	lsrs	r3, r3, #6
 800442e:	1c5a      	adds	r2, r3, #1
 8004430:	4613      	mov	r3, r2
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	4413      	add	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800443a:	e002      	b.n	8004442 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	3b01      	subs	r3, #1
 8004440:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f9      	bne.n	800443c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004448:	e05a      	b.n	8004500 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a3b      	ldr	r2, [pc, #236]	; (800453c <HAL_ADC_ConfigChannel+0x874>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d125      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x7d8>
 8004454:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004458:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d11f      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a31      	ldr	r2, [pc, #196]	; (800452c <HAL_ADC_ConfigChannel+0x864>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d104      	bne.n	8004474 <HAL_ADC_ConfigChannel+0x7ac>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a34      	ldr	r2, [pc, #208]	; (8004540 <HAL_ADC_ConfigChannel+0x878>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d047      	beq.n	8004504 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800447c:	d004      	beq.n	8004488 <HAL_ADC_ConfigChannel+0x7c0>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a2a      	ldr	r2, [pc, #168]	; (800452c <HAL_ADC_ConfigChannel+0x864>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d101      	bne.n	800448c <HAL_ADC_ConfigChannel+0x7c4>
 8004488:	4a29      	ldr	r2, [pc, #164]	; (8004530 <HAL_ADC_ConfigChannel+0x868>)
 800448a:	e000      	b.n	800448e <HAL_ADC_ConfigChannel+0x7c6>
 800448c:	4a23      	ldr	r2, [pc, #140]	; (800451c <HAL_ADC_ConfigChannel+0x854>)
 800448e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004496:	4619      	mov	r1, r3
 8004498:	4610      	mov	r0, r2
 800449a:	f7fe fbbc 	bl	8002c16 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800449e:	e031      	b.n	8004504 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a27      	ldr	r2, [pc, #156]	; (8004544 <HAL_ADC_ConfigChannel+0x87c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d12d      	bne.n	8004506 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d127      	bne.n	8004506 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1c      	ldr	r2, [pc, #112]	; (800452c <HAL_ADC_ConfigChannel+0x864>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d022      	beq.n	8004506 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044c8:	d004      	beq.n	80044d4 <HAL_ADC_ConfigChannel+0x80c>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a17      	ldr	r2, [pc, #92]	; (800452c <HAL_ADC_ConfigChannel+0x864>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d101      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x810>
 80044d4:	4a16      	ldr	r2, [pc, #88]	; (8004530 <HAL_ADC_ConfigChannel+0x868>)
 80044d6:	e000      	b.n	80044da <HAL_ADC_ConfigChannel+0x812>
 80044d8:	4a10      	ldr	r2, [pc, #64]	; (800451c <HAL_ADC_ConfigChannel+0x854>)
 80044da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044e2:	4619      	mov	r1, r3
 80044e4:	4610      	mov	r0, r2
 80044e6:	f7fe fb96 	bl	8002c16 <LL_ADC_SetCommonPathInternalCh>
 80044ea:	e00c      	b.n	8004506 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f0:	f043 0220 	orr.w	r2, r3, #32
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80044fe:	e002      	b.n	8004506 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004500:	bf00      	nop
 8004502:	e000      	b.n	8004506 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004504:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800450e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004512:	4618      	mov	r0, r3
 8004514:	37d8      	adds	r7, #216	; 0xd8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	50000700 	.word	0x50000700
 8004520:	c3210000 	.word	0xc3210000
 8004524:	90c00010 	.word	0x90c00010
 8004528:	50000600 	.word	0x50000600
 800452c:	50000100 	.word	0x50000100
 8004530:	50000300 	.word	0x50000300
 8004534:	20000004 	.word	0x20000004
 8004538:	053e2d63 	.word	0x053e2d63
 800453c:	c7520000 	.word	0xc7520000
 8004540:	50000500 	.word	0x50000500
 8004544:	cb840000 	.word	0xcb840000

08004548 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f7fe fd55 	bl	8003004 <LL_ADC_IsEnabled>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d14d      	bne.n	80045fc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	4b28      	ldr	r3, [pc, #160]	; (8004608 <ADC_Enable+0xc0>)
 8004568:	4013      	ands	r3, r2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00d      	beq.n	800458a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004572:	f043 0210 	orr.w	r2, r3, #16
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457e:	f043 0201 	orr.w	r2, r3, #1
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e039      	b.n	80045fe <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f7fe fd10 	bl	8002fb4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004594:	f7fe fab2 	bl	8002afc <HAL_GetTick>
 8004598:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800459a:	e028      	b.n	80045ee <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fe fd2f 	bl	8003004 <LL_ADC_IsEnabled>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d104      	bne.n	80045b6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fe fcff 	bl	8002fb4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80045b6:	f7fe faa1 	bl	8002afc <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d914      	bls.n	80045ee <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d00d      	beq.n	80045ee <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d6:	f043 0210 	orr.w	r2, r3, #16
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e2:	f043 0201 	orr.w	r2, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e007      	b.n	80045fe <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d1cf      	bne.n	800459c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	8000003f 	.word	0x8000003f

0800460c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f7fe fd06 	bl	800302a <LL_ADC_IsDisableOngoing>
 800461e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f7fe fced 	bl	8003004 <LL_ADC_IsEnabled>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d047      	beq.n	80046c0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d144      	bne.n	80046c0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 030d 	and.w	r3, r3, #13
 8004640:	2b01      	cmp	r3, #1
 8004642:	d10c      	bne.n	800465e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4618      	mov	r0, r3
 800464a:	f7fe fcc7 	bl	8002fdc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2203      	movs	r2, #3
 8004654:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004656:	f7fe fa51 	bl	8002afc <HAL_GetTick>
 800465a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800465c:	e029      	b.n	80046b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004662:	f043 0210 	orr.w	r2, r3, #16
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800466e:	f043 0201 	orr.w	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e023      	b.n	80046c2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800467a:	f7fe fa3f 	bl	8002afc <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d914      	bls.n	80046b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00d      	beq.n	80046b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469a:	f043 0210 	orr.w	r2, r3, #16
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a6:	f043 0201 	orr.w	r2, r3, #1
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e007      	b.n	80046c2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1dc      	bne.n	800467a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b084      	sub	sp, #16
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d14b      	bne.n	800477c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d021      	beq.n	8004742 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f7fe fb46 	bl	8002d94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d032      	beq.n	8004774 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d12b      	bne.n	8004774 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004720:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d11f      	bne.n	8004774 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004738:	f043 0201 	orr.w	r2, r3, #1
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004740:	e018      	b.n	8004774 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d111      	bne.n	8004774 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004754:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004760:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d105      	bne.n	8004774 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476c:	f043 0201 	orr.w	r2, r3, #1
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f7ff fa7f 	bl	8003c78 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800477a:	e00e      	b.n	800479a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004780:	f003 0310 	and.w	r3, r3, #16
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f7ff fa93 	bl	8003cb4 <HAL_ADC_ErrorCallback>
}
 800478e:	e004      	b.n	800479a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	4798      	blx	r3
}
 800479a:	bf00      	nop
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b084      	sub	sp, #16
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f7ff fa6b 	bl	8003c8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047b6:	bf00      	nop
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b084      	sub	sp, #16
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047dc:	f043 0204 	orr.w	r2, r3, #4
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f7ff fa65 	bl	8003cb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <LL_ADC_IsEnabled>:
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <LL_ADC_IsEnabled+0x18>
 8004806:	2301      	movs	r3, #1
 8004808:	e000      	b.n	800480c <LL_ADC_IsEnabled+0x1a>
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <LL_ADC_StartCalibration>:
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800482a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004834:	4313      	orrs	r3, r2
 8004836:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	609a      	str	r2, [r3, #8]
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <LL_ADC_IsCalibrationOnGoing>:
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800485a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800485e:	d101      	bne.n	8004864 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <LL_ADC_REG_IsConversionOngoing>:
{
 8004872:	b480      	push	{r7}
 8004874:	b083      	sub	sp, #12
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0304 	and.w	r3, r3, #4
 8004882:	2b04      	cmp	r3, #4
 8004884:	d101      	bne.n	800488a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d101      	bne.n	80048b4 <HAL_ADCEx_Calibration_Start+0x1c>
 80048b0:	2302      	movs	r3, #2
 80048b2:	e04d      	b.n	8004950 <HAL_ADCEx_Calibration_Start+0xb8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7ff fea5 	bl	800460c <ADC_Disable>
 80048c2:	4603      	mov	r3, r0
 80048c4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d136      	bne.n	800493a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80048d4:	f023 0302 	bic.w	r3, r3, #2
 80048d8:	f043 0202 	orr.w	r2, r3, #2
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6839      	ldr	r1, [r7, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff ff96 	bl	8004818 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80048ec:	e014      	b.n	8004918 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	3301      	adds	r3, #1
 80048f2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4a18      	ldr	r2, [pc, #96]	; (8004958 <HAL_ADCEx_Calibration_Start+0xc0>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d90d      	bls.n	8004918 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004900:	f023 0312 	bic.w	r3, r3, #18
 8004904:	f043 0210 	orr.w	r2, r3, #16
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e01b      	b.n	8004950 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff ff94 	bl	800484a <LL_ADC_IsCalibrationOnGoing>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e2      	bne.n	80048ee <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492c:	f023 0303 	bic.w	r3, r3, #3
 8004930:	f043 0201 	orr.w	r2, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	65da      	str	r2, [r3, #92]	; 0x5c
 8004938:	e005      	b.n	8004946 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800493e:	f043 0210 	orr.w	r2, r3, #16
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800494e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	0004de01 	.word	0x0004de01

0800495c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80049c0:	b590      	push	{r4, r7, lr}
 80049c2:	b0a1      	sub	sp, #132	; 0x84
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049ca:	2300      	movs	r3, #0
 80049cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d101      	bne.n	80049de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80049da:	2302      	movs	r3, #2
 80049dc:	e0e7      	b.n	8004bae <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80049e6:	2300      	movs	r3, #0
 80049e8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80049ea:	2300      	movs	r3, #0
 80049ec:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049f6:	d102      	bne.n	80049fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80049f8:	4b6f      	ldr	r3, [pc, #444]	; (8004bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049fa:	60bb      	str	r3, [r7, #8]
 80049fc:	e009      	b.n	8004a12 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a6e      	ldr	r2, [pc, #440]	; (8004bbc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d102      	bne.n	8004a0e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004a08:	4b6d      	ldr	r3, [pc, #436]	; (8004bc0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004a0a:	60bb      	str	r3, [r7, #8]
 8004a0c:	e001      	b.n	8004a12 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10b      	bne.n	8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1c:	f043 0220 	orr.w	r2, r3, #32
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e0be      	b.n	8004bae <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff ff1d 	bl	8004872 <LL_ADC_REG_IsConversionOngoing>
 8004a38:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff ff17 	bl	8004872 <LL_ADC_REG_IsConversionOngoing>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f040 80a0 	bne.w	8004b8c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004a4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f040 809c 	bne.w	8004b8c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a5c:	d004      	beq.n	8004a68 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a55      	ldr	r2, [pc, #340]	; (8004bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d101      	bne.n	8004a6c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004a68:	4b56      	ldr	r3, [pc, #344]	; (8004bc4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004a6a:	e000      	b.n	8004a6e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004a6c:	4b56      	ldr	r3, [pc, #344]	; (8004bc8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004a6e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d04b      	beq.n	8004b10 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	6859      	ldr	r1, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a8a:	035b      	lsls	r3, r3, #13
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a92:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a9c:	d004      	beq.n	8004aa8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a45      	ldr	r2, [pc, #276]	; (8004bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d10f      	bne.n	8004ac8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004aa8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004aac:	f7ff fea1 	bl	80047f2 <LL_ADC_IsEnabled>
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	4841      	ldr	r0, [pc, #260]	; (8004bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ab4:	f7ff fe9d 	bl	80047f2 <LL_ADC_IsEnabled>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	4323      	orrs	r3, r4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	bf0c      	ite	eq
 8004ac0:	2301      	moveq	r3, #1
 8004ac2:	2300      	movne	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	e012      	b.n	8004aee <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004ac8:	483c      	ldr	r0, [pc, #240]	; (8004bbc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004aca:	f7ff fe92 	bl	80047f2 <LL_ADC_IsEnabled>
 8004ace:	4604      	mov	r4, r0
 8004ad0:	483b      	ldr	r0, [pc, #236]	; (8004bc0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004ad2:	f7ff fe8e 	bl	80047f2 <LL_ADC_IsEnabled>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	431c      	orrs	r4, r3
 8004ada:	483c      	ldr	r0, [pc, #240]	; (8004bcc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004adc:	f7ff fe89 	bl	80047f2 <LL_ADC_IsEnabled>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	4323      	orrs	r3, r4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bf0c      	ite	eq
 8004ae8:	2301      	moveq	r3, #1
 8004aea:	2300      	movne	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d056      	beq.n	8004ba0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004af2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004afa:	f023 030f 	bic.w	r3, r3, #15
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	6811      	ldr	r1, [r2, #0]
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	6892      	ldr	r2, [r2, #8]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b0c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b0e:	e047      	b.n	8004ba0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b1a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b24:	d004      	beq.n	8004b30 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a23      	ldr	r2, [pc, #140]	; (8004bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d10f      	bne.n	8004b50 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004b30:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004b34:	f7ff fe5d 	bl	80047f2 <LL_ADC_IsEnabled>
 8004b38:	4604      	mov	r4, r0
 8004b3a:	481f      	ldr	r0, [pc, #124]	; (8004bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b3c:	f7ff fe59 	bl	80047f2 <LL_ADC_IsEnabled>
 8004b40:	4603      	mov	r3, r0
 8004b42:	4323      	orrs	r3, r4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	bf0c      	ite	eq
 8004b48:	2301      	moveq	r3, #1
 8004b4a:	2300      	movne	r3, #0
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	e012      	b.n	8004b76 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004b50:	481a      	ldr	r0, [pc, #104]	; (8004bbc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004b52:	f7ff fe4e 	bl	80047f2 <LL_ADC_IsEnabled>
 8004b56:	4604      	mov	r4, r0
 8004b58:	4819      	ldr	r0, [pc, #100]	; (8004bc0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004b5a:	f7ff fe4a 	bl	80047f2 <LL_ADC_IsEnabled>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	431c      	orrs	r4, r3
 8004b62:	481a      	ldr	r0, [pc, #104]	; (8004bcc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004b64:	f7ff fe45 	bl	80047f2 <LL_ADC_IsEnabled>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	4323      	orrs	r3, r4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	bf0c      	ite	eq
 8004b70:	2301      	moveq	r3, #1
 8004b72:	2300      	movne	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d012      	beq.n	8004ba0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004b82:	f023 030f 	bic.w	r3, r3, #15
 8004b86:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004b88:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b8a:	e009      	b.n	8004ba0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b90:	f043 0220 	orr.w	r2, r3, #32
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004b9e:	e000      	b.n	8004ba2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ba0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004baa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3784      	adds	r7, #132	; 0x84
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd90      	pop	{r4, r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	50000100 	.word	0x50000100
 8004bbc:	50000400 	.word	0x50000400
 8004bc0:	50000500 	.word	0x50000500
 8004bc4:	50000300 	.word	0x50000300
 8004bc8:	50000700 	.word	0x50000700
 8004bcc:	50000600 	.word	0x50000600

08004bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004be0:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <__NVIC_SetPriorityGrouping+0x44>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bec:	4013      	ands	r3, r2
 8004bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c02:	4a04      	ldr	r2, [pc, #16]	; (8004c14 <__NVIC_SetPriorityGrouping+0x44>)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	60d3      	str	r3, [r2, #12]
}
 8004c08:	bf00      	nop
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	e000ed00 	.word	0xe000ed00

08004c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c1c:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <__NVIC_GetPriorityGrouping+0x18>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	0a1b      	lsrs	r3, r3, #8
 8004c22:	f003 0307 	and.w	r3, r3, #7
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	e000ed00 	.word	0xe000ed00

08004c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	db0b      	blt.n	8004c5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	f003 021f 	and.w	r2, r3, #31
 8004c4c:	4907      	ldr	r1, [pc, #28]	; (8004c6c <__NVIC_EnableIRQ+0x38>)
 8004c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c52:	095b      	lsrs	r3, r3, #5
 8004c54:	2001      	movs	r0, #1
 8004c56:	fa00 f202 	lsl.w	r2, r0, r2
 8004c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	e000e100 	.word	0xe000e100

08004c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4603      	mov	r3, r0
 8004c78:	6039      	str	r1, [r7, #0]
 8004c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	db0a      	blt.n	8004c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	490c      	ldr	r1, [pc, #48]	; (8004cbc <__NVIC_SetPriority+0x4c>)
 8004c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8e:	0112      	lsls	r2, r2, #4
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	440b      	add	r3, r1
 8004c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c98:	e00a      	b.n	8004cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	4908      	ldr	r1, [pc, #32]	; (8004cc0 <__NVIC_SetPriority+0x50>)
 8004ca0:	79fb      	ldrb	r3, [r7, #7]
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	3b04      	subs	r3, #4
 8004ca8:	0112      	lsls	r2, r2, #4
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	440b      	add	r3, r1
 8004cae:	761a      	strb	r2, [r3, #24]
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	e000e100 	.word	0xe000e100
 8004cc0:	e000ed00 	.word	0xe000ed00

08004cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b089      	sub	sp, #36	; 0x24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	f1c3 0307 	rsb	r3, r3, #7
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	bf28      	it	cs
 8004ce2:	2304      	movcs	r3, #4
 8004ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	3304      	adds	r3, #4
 8004cea:	2b06      	cmp	r3, #6
 8004cec:	d902      	bls.n	8004cf4 <NVIC_EncodePriority+0x30>
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	3b03      	subs	r3, #3
 8004cf2:	e000      	b.n	8004cf6 <NVIC_EncodePriority+0x32>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43da      	mvns	r2, r3
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	401a      	ands	r2, r3
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	fa01 f303 	lsl.w	r3, r1, r3
 8004d16:	43d9      	mvns	r1, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d1c:	4313      	orrs	r3, r2
         );
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3724      	adds	r7, #36	; 0x24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
	...

08004d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d3c:	d301      	bcc.n	8004d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e00f      	b.n	8004d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d42:	4a0a      	ldr	r2, [pc, #40]	; (8004d6c <SysTick_Config+0x40>)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d4a:	210f      	movs	r1, #15
 8004d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d50:	f7ff ff8e 	bl	8004c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d54:	4b05      	ldr	r3, [pc, #20]	; (8004d6c <SysTick_Config+0x40>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d5a:	4b04      	ldr	r3, [pc, #16]	; (8004d6c <SysTick_Config+0x40>)
 8004d5c:	2207      	movs	r2, #7
 8004d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	e000e010 	.word	0xe000e010

08004d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff ff29 	bl	8004bd0 <__NVIC_SetPriorityGrouping>
}
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b086      	sub	sp, #24
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
 8004d92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d94:	f7ff ff40 	bl	8004c18 <__NVIC_GetPriorityGrouping>
 8004d98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	68b9      	ldr	r1, [r7, #8]
 8004d9e:	6978      	ldr	r0, [r7, #20]
 8004da0:	f7ff ff90 	bl	8004cc4 <NVIC_EncodePriority>
 8004da4:	4602      	mov	r2, r0
 8004da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004daa:	4611      	mov	r1, r2
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff ff5f 	bl	8004c70 <__NVIC_SetPriority>
}
 8004db2:	bf00      	nop
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b082      	sub	sp, #8
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7ff ff33 	bl	8004c34 <__NVIC_EnableIRQ>
}
 8004dce:	bf00      	nop
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b082      	sub	sp, #8
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7ff ffa4 	bl	8004d2c <SysTick_Config>
 8004de4:	4603      	mov	r3, r0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e08d      	b.n	8004f1e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	461a      	mov	r2, r3
 8004e08:	4b47      	ldr	r3, [pc, #284]	; (8004f28 <HAL_DMA_Init+0x138>)
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d80f      	bhi.n	8004e2e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	4b45      	ldr	r3, [pc, #276]	; (8004f2c <HAL_DMA_Init+0x13c>)
 8004e16:	4413      	add	r3, r2
 8004e18:	4a45      	ldr	r2, [pc, #276]	; (8004f30 <HAL_DMA_Init+0x140>)
 8004e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1e:	091b      	lsrs	r3, r3, #4
 8004e20:	009a      	lsls	r2, r3, #2
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a42      	ldr	r2, [pc, #264]	; (8004f34 <HAL_DMA_Init+0x144>)
 8004e2a:	641a      	str	r2, [r3, #64]	; 0x40
 8004e2c:	e00e      	b.n	8004e4c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	4b40      	ldr	r3, [pc, #256]	; (8004f38 <HAL_DMA_Init+0x148>)
 8004e36:	4413      	add	r3, r2
 8004e38:	4a3d      	ldr	r2, [pc, #244]	; (8004f30 <HAL_DMA_Init+0x140>)
 8004e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3e:	091b      	lsrs	r3, r3, #4
 8004e40:	009a      	lsls	r2, r3, #2
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a3c      	ldr	r2, [pc, #240]	; (8004f3c <HAL_DMA_Init+0x14c>)
 8004e4a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f9b6 	bl	8005210 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eac:	d102      	bne.n	8004eb4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ec8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d010      	beq.n	8004ef4 <HAL_DMA_Init+0x104>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	d80c      	bhi.n	8004ef4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f9d6 	bl	800528c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ef0:	605a      	str	r2, [r3, #4]
 8004ef2:	e008      	b.n	8004f06 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	40020407 	.word	0x40020407
 8004f2c:	bffdfff8 	.word	0xbffdfff8
 8004f30:	cccccccd 	.word	0xcccccccd
 8004f34:	40020000 	.word	0x40020000
 8004f38:	bffdfbf8 	.word	0xbffdfbf8
 8004f3c:	40020400 	.word	0x40020400

08004f40 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <HAL_DMA_Start_IT+0x20>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	e066      	b.n	800502e <HAL_DMA_Start_IT+0xee>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d155      	bne.n	8005020 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 0201 	bic.w	r2, r2, #1
 8004f90:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 f8fb 	bl	8005194 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d008      	beq.n	8004fb8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 020e 	orr.w	r2, r2, #14
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	e00f      	b.n	8004fd8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0204 	bic.w	r2, r2, #4
 8004fc6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 020a 	orr.w	r2, r2, #10
 8004fd6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d007      	beq.n	8004ff6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ff4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d007      	beq.n	800500e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005008:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800500c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f042 0201 	orr.w	r2, r2, #1
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	e005      	b.n	800502c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005028:	2302      	movs	r3, #2
 800502a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800502c:	7dfb      	ldrb	r3, [r7, #23]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b084      	sub	sp, #16
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	2204      	movs	r2, #4
 8005058:	409a      	lsls	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4013      	ands	r3, r2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d026      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x7a>
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b00      	cmp	r3, #0
 800506a:	d021      	beq.n	80050b0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0320 	and.w	r3, r3, #32
 8005076:	2b00      	cmp	r3, #0
 8005078:	d107      	bne.n	800508a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0204 	bic.w	r2, r2, #4
 8005088:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508e:	f003 021f 	and.w	r2, r3, #31
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	2104      	movs	r1, #4
 8005098:	fa01 f202 	lsl.w	r2, r1, r2
 800509c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d071      	beq.n	800518a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80050ae:	e06c      	b.n	800518a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b4:	f003 031f 	and.w	r3, r3, #31
 80050b8:	2202      	movs	r2, #2
 80050ba:	409a      	lsls	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4013      	ands	r3, r2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d02e      	beq.n	8005122 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d029      	beq.n	8005122 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0320 	and.w	r3, r3, #32
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10b      	bne.n	80050f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 020a 	bic.w	r2, r2, #10
 80050ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f8:	f003 021f 	and.w	r2, r3, #31
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005100:	2102      	movs	r1, #2
 8005102:	fa01 f202 	lsl.w	r2, r1, r2
 8005106:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005114:	2b00      	cmp	r3, #0
 8005116:	d038      	beq.n	800518a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005120:	e033      	b.n	800518a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005126:	f003 031f 	and.w	r3, r3, #31
 800512a:	2208      	movs	r2, #8
 800512c:	409a      	lsls	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4013      	ands	r3, r2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d02a      	beq.n	800518c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f003 0308 	and.w	r3, r3, #8
 800513c:	2b00      	cmp	r3, #0
 800513e:	d025      	beq.n	800518c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 020e 	bic.w	r2, r2, #14
 800514e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005154:	f003 021f 	and.w	r2, r3, #31
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	2101      	movs	r1, #1
 800515e:	fa01 f202 	lsl.w	r2, r1, r2
 8005162:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517e:	2b00      	cmp	r3, #0
 8005180:	d004      	beq.n	800518c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800518a:	bf00      	nop
 800518c:	bf00      	nop
}
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80051aa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d004      	beq.n	80051be <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80051bc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c2:	f003 021f 	and.w	r2, r3, #31
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	2101      	movs	r1, #1
 80051cc:	fa01 f202 	lsl.w	r2, r1, r2
 80051d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	2b10      	cmp	r3, #16
 80051e0:	d108      	bne.n	80051f4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80051f2:	e007      	b.n	8005204 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	60da      	str	r2, [r3, #12]
}
 8005204:	bf00      	nop
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	4b16      	ldr	r3, [pc, #88]	; (8005278 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005220:	429a      	cmp	r2, r3
 8005222:	d802      	bhi.n	800522a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005224:	4b15      	ldr	r3, [pc, #84]	; (800527c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	e001      	b.n	800522e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800522a:	4b15      	ldr	r3, [pc, #84]	; (8005280 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800522c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	3b08      	subs	r3, #8
 800523a:	4a12      	ldr	r2, [pc, #72]	; (8005284 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800523c:	fba2 2303 	umull	r2, r3, r2, r3
 8005240:	091b      	lsrs	r3, r3, #4
 8005242:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005248:	089b      	lsrs	r3, r3, #2
 800524a:	009a      	lsls	r2, r3, #2
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	4413      	add	r3, r2
 8005250:	461a      	mov	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a0b      	ldr	r2, [pc, #44]	; (8005288 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800525a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f003 031f 	and.w	r3, r3, #31
 8005262:	2201      	movs	r2, #1
 8005264:	409a      	lsls	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	651a      	str	r2, [r3, #80]	; 0x50
}
 800526a:	bf00      	nop
 800526c:	371c      	adds	r7, #28
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	40020407 	.word	0x40020407
 800527c:	40020800 	.word	0x40020800
 8005280:	40020820 	.word	0x40020820
 8005284:	cccccccd 	.word	0xcccccccd
 8005288:	40020880 	.word	0x40020880

0800528c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	4b0b      	ldr	r3, [pc, #44]	; (80052cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	461a      	mov	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a08      	ldr	r2, [pc, #32]	; (80052d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80052ae:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	2201      	movs	r2, #1
 80052ba:	409a      	lsls	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80052c0:	bf00      	nop
 80052c2:	3714      	adds	r7, #20
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	1000823f 	.word	0x1000823f
 80052d0:	40020940 	.word	0x40020940

080052d4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e147      	b.n	8005576 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d106      	bne.n	8005300 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fd f942 	bl	8002584 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699a      	ldr	r2, [r3, #24]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 0210 	bic.w	r2, r2, #16
 800530e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005310:	f7fd fbf4 	bl	8002afc <HAL_GetTick>
 8005314:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005316:	e012      	b.n	800533e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005318:	f7fd fbf0 	bl	8002afc <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b0a      	cmp	r3, #10
 8005324:	d90b      	bls.n	800533e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800532a:	f043 0201 	orr.w	r2, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2203      	movs	r2, #3
 8005336:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e11b      	b.n	8005576 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b08      	cmp	r3, #8
 800534a:	d0e5      	beq.n	8005318 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699a      	ldr	r2, [r3, #24]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0201 	orr.w	r2, r2, #1
 800535a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800535c:	f7fd fbce 	bl	8002afc <HAL_GetTick>
 8005360:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005362:	e012      	b.n	800538a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005364:	f7fd fbca 	bl	8002afc <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b0a      	cmp	r3, #10
 8005370:	d90b      	bls.n	800538a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005376:	f043 0201 	orr.w	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2203      	movs	r2, #3
 8005382:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e0f5      	b.n	8005576 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d0e5      	beq.n	8005364 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	699a      	ldr	r2, [r3, #24]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0202 	orr.w	r2, r2, #2
 80053a6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a74      	ldr	r2, [pc, #464]	; (8005580 <HAL_FDCAN_Init+0x2ac>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d103      	bne.n	80053ba <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80053b2:	4a74      	ldr	r2, [pc, #464]	; (8005584 <HAL_FDCAN_Init+0x2b0>)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	7c1b      	ldrb	r3, [r3, #16]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d108      	bne.n	80053d4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	699a      	ldr	r2, [r3, #24]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053d0:	619a      	str	r2, [r3, #24]
 80053d2:	e007      	b.n	80053e4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053e2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	7c5b      	ldrb	r3, [r3, #17]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d108      	bne.n	80053fe <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053fa:	619a      	str	r2, [r3, #24]
 80053fc:	e007      	b.n	800540e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	699a      	ldr	r2, [r3, #24]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800540c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	7c9b      	ldrb	r3, [r3, #18]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d108      	bne.n	8005428 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699a      	ldr	r2, [r3, #24]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005424:	619a      	str	r2, [r3, #24]
 8005426:	e007      	b.n	8005438 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699a      	ldr	r2, [r3, #24]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005436:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	699a      	ldr	r2, [r3, #24]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800545c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	691a      	ldr	r2, [r3, #16]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0210 	bic.w	r2, r2, #16
 800546c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d108      	bne.n	8005488 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	699a      	ldr	r2, [r3, #24]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f042 0204 	orr.w	r2, r2, #4
 8005484:	619a      	str	r2, [r3, #24]
 8005486:	e02c      	b.n	80054e2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d028      	beq.n	80054e2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d01c      	beq.n	80054d2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80054a6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691a      	ldr	r2, [r3, #16]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0210 	orr.w	r2, r2, #16
 80054b6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	2b03      	cmp	r3, #3
 80054be:	d110      	bne.n	80054e2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699a      	ldr	r2, [r3, #24]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f042 0220 	orr.w	r2, r2, #32
 80054ce:	619a      	str	r2, [r3, #24]
 80054d0:	e007      	b.n	80054e2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	699a      	ldr	r2, [r3, #24]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f042 0220 	orr.w	r2, r2, #32
 80054e0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80054f2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80054fa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	3b01      	subs	r3, #1
 8005504:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800550a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800550c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005516:	d115      	bne.n	8005544 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005522:	3b01      	subs	r3, #1
 8005524:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005526:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552c:	3b01      	subs	r3, #1
 800552e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005530:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	3b01      	subs	r3, #1
 800553a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005540:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005542:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f814 	bl	8005588 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	40006400 	.word	0x40006400
 8005584:	40006500 	.word	0x40006500

08005588 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005590:	4b30      	ldr	r3, [pc, #192]	; (8005654 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8005592:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a2f      	ldr	r2, [pc, #188]	; (8005658 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d103      	bne.n	80055a6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80055a4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a2c      	ldr	r2, [pc, #176]	; (800565c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d103      	bne.n	80055b8 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80055b6:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055c6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ce:	041a      	lsls	r2, r3, #16
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055ec:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	061a      	lsls	r2, r3, #24
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	e005      	b.n	800563a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	3304      	adds	r3, #4
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	429a      	cmp	r2, r3
 8005644:	d3f3      	bcc.n	800562e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8005646:	bf00      	nop
 8005648:	bf00      	nop
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	4000a400 	.word	0x4000a400
 8005658:	40006800 	.word	0x40006800
 800565c:	40006c00 	.word	0x40006c00

08005660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800566a:	2300      	movs	r3, #0
 800566c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800566e:	e15a      	b.n	8005926 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	2101      	movs	r1, #1
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	fa01 f303 	lsl.w	r3, r1, r3
 800567c:	4013      	ands	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 814c 	beq.w	8005920 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f003 0303 	and.w	r3, r3, #3
 8005690:	2b01      	cmp	r3, #1
 8005692:	d005      	beq.n	80056a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800569c:	2b02      	cmp	r3, #2
 800569e:	d130      	bne.n	8005702 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	2203      	movs	r2, #3
 80056ac:	fa02 f303 	lsl.w	r3, r2, r3
 80056b0:	43db      	mvns	r3, r3
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	4013      	ands	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	68da      	ldr	r2, [r3, #12]
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	005b      	lsls	r3, r3, #1
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056d6:	2201      	movs	r2, #1
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	43db      	mvns	r3, r3
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	4013      	ands	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	091b      	lsrs	r3, r3, #4
 80056ec:	f003 0201 	and.w	r2, r3, #1
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	fa02 f303 	lsl.w	r3, r2, r3
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f003 0303 	and.w	r3, r3, #3
 800570a:	2b03      	cmp	r3, #3
 800570c:	d017      	beq.n	800573e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	2203      	movs	r2, #3
 800571a:	fa02 f303 	lsl.w	r3, r2, r3
 800571e:	43db      	mvns	r3, r3
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4013      	ands	r3, r2
 8005724:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	fa02 f303 	lsl.w	r3, r2, r3
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	4313      	orrs	r3, r2
 8005736:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d123      	bne.n	8005792 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	08da      	lsrs	r2, r3, #3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	3208      	adds	r2, #8
 8005752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005756:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f003 0307 	and.w	r3, r3, #7
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	220f      	movs	r2, #15
 8005762:	fa02 f303 	lsl.w	r3, r2, r3
 8005766:	43db      	mvns	r3, r3
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	4013      	ands	r3, r2
 800576c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	691a      	ldr	r2, [r3, #16]
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	fa02 f303 	lsl.w	r3, r2, r3
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	4313      	orrs	r3, r2
 8005782:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	08da      	lsrs	r2, r3, #3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3208      	adds	r2, #8
 800578c:	6939      	ldr	r1, [r7, #16]
 800578e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	2203      	movs	r2, #3
 800579e:	fa02 f303 	lsl.w	r3, r2, r3
 80057a2:	43db      	mvns	r3, r3
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	4013      	ands	r3, r2
 80057a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f003 0203 	and.w	r2, r3, #3
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 80a6 	beq.w	8005920 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057d4:	4b5b      	ldr	r3, [pc, #364]	; (8005944 <HAL_GPIO_Init+0x2e4>)
 80057d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d8:	4a5a      	ldr	r2, [pc, #360]	; (8005944 <HAL_GPIO_Init+0x2e4>)
 80057da:	f043 0301 	orr.w	r3, r3, #1
 80057de:	6613      	str	r3, [r2, #96]	; 0x60
 80057e0:	4b58      	ldr	r3, [pc, #352]	; (8005944 <HAL_GPIO_Init+0x2e4>)
 80057e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	60bb      	str	r3, [r7, #8]
 80057ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057ec:	4a56      	ldr	r2, [pc, #344]	; (8005948 <HAL_GPIO_Init+0x2e8>)
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	089b      	lsrs	r3, r3, #2
 80057f2:	3302      	adds	r3, #2
 80057f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f003 0303 	and.w	r3, r3, #3
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	220f      	movs	r2, #15
 8005804:	fa02 f303 	lsl.w	r3, r2, r3
 8005808:	43db      	mvns	r3, r3
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	4013      	ands	r3, r2
 800580e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005816:	d01f      	beq.n	8005858 <HAL_GPIO_Init+0x1f8>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a4c      	ldr	r2, [pc, #304]	; (800594c <HAL_GPIO_Init+0x2ec>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d019      	beq.n	8005854 <HAL_GPIO_Init+0x1f4>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a4b      	ldr	r2, [pc, #300]	; (8005950 <HAL_GPIO_Init+0x2f0>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d013      	beq.n	8005850 <HAL_GPIO_Init+0x1f0>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a4a      	ldr	r2, [pc, #296]	; (8005954 <HAL_GPIO_Init+0x2f4>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00d      	beq.n	800584c <HAL_GPIO_Init+0x1ec>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a49      	ldr	r2, [pc, #292]	; (8005958 <HAL_GPIO_Init+0x2f8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d007      	beq.n	8005848 <HAL_GPIO_Init+0x1e8>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a48      	ldr	r2, [pc, #288]	; (800595c <HAL_GPIO_Init+0x2fc>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d101      	bne.n	8005844 <HAL_GPIO_Init+0x1e4>
 8005840:	2305      	movs	r3, #5
 8005842:	e00a      	b.n	800585a <HAL_GPIO_Init+0x1fa>
 8005844:	2306      	movs	r3, #6
 8005846:	e008      	b.n	800585a <HAL_GPIO_Init+0x1fa>
 8005848:	2304      	movs	r3, #4
 800584a:	e006      	b.n	800585a <HAL_GPIO_Init+0x1fa>
 800584c:	2303      	movs	r3, #3
 800584e:	e004      	b.n	800585a <HAL_GPIO_Init+0x1fa>
 8005850:	2302      	movs	r3, #2
 8005852:	e002      	b.n	800585a <HAL_GPIO_Init+0x1fa>
 8005854:	2301      	movs	r3, #1
 8005856:	e000      	b.n	800585a <HAL_GPIO_Init+0x1fa>
 8005858:	2300      	movs	r3, #0
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	f002 0203 	and.w	r2, r2, #3
 8005860:	0092      	lsls	r2, r2, #2
 8005862:	4093      	lsls	r3, r2
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	4313      	orrs	r3, r2
 8005868:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800586a:	4937      	ldr	r1, [pc, #220]	; (8005948 <HAL_GPIO_Init+0x2e8>)
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	089b      	lsrs	r3, r3, #2
 8005870:	3302      	adds	r3, #2
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005878:	4b39      	ldr	r3, [pc, #228]	; (8005960 <HAL_GPIO_Init+0x300>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	43db      	mvns	r3, r3
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	4013      	ands	r3, r2
 8005886:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	4313      	orrs	r3, r2
 800589a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800589c:	4a30      	ldr	r2, [pc, #192]	; (8005960 <HAL_GPIO_Init+0x300>)
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80058a2:	4b2f      	ldr	r3, [pc, #188]	; (8005960 <HAL_GPIO_Init+0x300>)
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	43db      	mvns	r3, r3
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4013      	ands	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80058c6:	4a26      	ldr	r2, [pc, #152]	; (8005960 <HAL_GPIO_Init+0x300>)
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80058cc:	4b24      	ldr	r3, [pc, #144]	; (8005960 <HAL_GPIO_Init+0x300>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	43db      	mvns	r3, r3
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4013      	ands	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80058f0:	4a1b      	ldr	r2, [pc, #108]	; (8005960 <HAL_GPIO_Init+0x300>)
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80058f6:	4b1a      	ldr	r3, [pc, #104]	; (8005960 <HAL_GPIO_Init+0x300>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	43db      	mvns	r3, r3
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	4013      	ands	r3, r2
 8005904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800591a:	4a11      	ldr	r2, [pc, #68]	; (8005960 <HAL_GPIO_Init+0x300>)
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	3301      	adds	r3, #1
 8005924:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	fa22 f303 	lsr.w	r3, r2, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	f47f ae9d 	bne.w	8005670 <HAL_GPIO_Init+0x10>
  }
}
 8005936:	bf00      	nop
 8005938:	bf00      	nop
 800593a:	371c      	adds	r7, #28
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	40021000 	.word	0x40021000
 8005948:	40010000 	.word	0x40010000
 800594c:	48000400 	.word	0x48000400
 8005950:	48000800 	.word	0x48000800
 8005954:	48000c00 	.word	0x48000c00
 8005958:	48001000 	.word	0x48001000
 800595c:	48001400 	.word	0x48001400
 8005960:	40010400 	.word	0x40010400

08005964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	807b      	strh	r3, [r7, #2]
 8005970:	4613      	mov	r3, r2
 8005972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005974:	787b      	ldrb	r3, [r7, #1]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800597a:	887a      	ldrh	r2, [r7, #2]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005980:	e002      	b.n	8005988 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005982:	887a      	ldrh	r2, [r7, #2]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d141      	bne.n	8005a26 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80059a2:	4b4b      	ldr	r3, [pc, #300]	; (8005ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80059aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ae:	d131      	bne.n	8005a14 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059b0:	4b47      	ldr	r3, [pc, #284]	; (8005ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059b6:	4a46      	ldr	r2, [pc, #280]	; (8005ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80059c0:	4b43      	ldr	r3, [pc, #268]	; (8005ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80059c8:	4a41      	ldr	r2, [pc, #260]	; (8005ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80059d0:	4b40      	ldr	r3, [pc, #256]	; (8005ad4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2232      	movs	r2, #50	; 0x32
 80059d6:	fb02 f303 	mul.w	r3, r2, r3
 80059da:	4a3f      	ldr	r2, [pc, #252]	; (8005ad8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80059dc:	fba2 2303 	umull	r2, r3, r2, r3
 80059e0:	0c9b      	lsrs	r3, r3, #18
 80059e2:	3301      	adds	r3, #1
 80059e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059e6:	e002      	b.n	80059ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059ee:	4b38      	ldr	r3, [pc, #224]	; (8005ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059fa:	d102      	bne.n	8005a02 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1f2      	bne.n	80059e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a02:	4b33      	ldr	r3, [pc, #204]	; (8005ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a0e:	d158      	bne.n	8005ac2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e057      	b.n	8005ac4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a14:	4b2e      	ldr	r3, [pc, #184]	; (8005ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a1a:	4a2d      	ldr	r2, [pc, #180]	; (8005ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005a24:	e04d      	b.n	8005ac2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a2c:	d141      	bne.n	8005ab2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a2e:	4b28      	ldr	r3, [pc, #160]	; (8005ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a3a:	d131      	bne.n	8005aa0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a3c:	4b24      	ldr	r3, [pc, #144]	; (8005ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a42:	4a23      	ldr	r2, [pc, #140]	; (8005ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a4c:	4b20      	ldr	r3, [pc, #128]	; (8005ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a54:	4a1e      	ldr	r2, [pc, #120]	; (8005ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a5c:	4b1d      	ldr	r3, [pc, #116]	; (8005ad4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2232      	movs	r2, #50	; 0x32
 8005a62:	fb02 f303 	mul.w	r3, r2, r3
 8005a66:	4a1c      	ldr	r2, [pc, #112]	; (8005ad8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005a68:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6c:	0c9b      	lsrs	r3, r3, #18
 8005a6e:	3301      	adds	r3, #1
 8005a70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a72:	e002      	b.n	8005a7a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a7a:	4b15      	ldr	r3, [pc, #84]	; (8005ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a86:	d102      	bne.n	8005a8e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f2      	bne.n	8005a74 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a8e:	4b10      	ldr	r3, [pc, #64]	; (8005ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a9a:	d112      	bne.n	8005ac2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e011      	b.n	8005ac4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005aa0:	4b0b      	ldr	r3, [pc, #44]	; (8005ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aa6:	4a0a      	ldr	r2, [pc, #40]	; (8005ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005ab0:	e007      	b.n	8005ac2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005ab2:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005aba:	4a05      	ldr	r2, [pc, #20]	; (8005ad0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005abc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ac0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	40007000 	.word	0x40007000
 8005ad4:	20000004 	.word	0x20000004
 8005ad8:	431bde83 	.word	0x431bde83

08005adc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005ae0:	4b05      	ldr	r3, [pc, #20]	; (8005af8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	4a04      	ldr	r2, [pc, #16]	; (8005af8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005ae6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005aea:	6093      	str	r3, [r2, #8]
}
 8005aec:	bf00      	nop
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	40007000 	.word	0x40007000

08005afc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b088      	sub	sp, #32
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e306      	b.n	800611c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d075      	beq.n	8005c06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b1a:	4b97      	ldr	r3, [pc, #604]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 030c 	and.w	r3, r3, #12
 8005b22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b24:	4b94      	ldr	r3, [pc, #592]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	f003 0303 	and.w	r3, r3, #3
 8005b2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	2b0c      	cmp	r3, #12
 8005b32:	d102      	bne.n	8005b3a <HAL_RCC_OscConfig+0x3e>
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2b03      	cmp	r3, #3
 8005b38:	d002      	beq.n	8005b40 <HAL_RCC_OscConfig+0x44>
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d10b      	bne.n	8005b58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b40:	4b8d      	ldr	r3, [pc, #564]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d05b      	beq.n	8005c04 <HAL_RCC_OscConfig+0x108>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d157      	bne.n	8005c04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e2e1      	b.n	800611c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b60:	d106      	bne.n	8005b70 <HAL_RCC_OscConfig+0x74>
 8005b62:	4b85      	ldr	r3, [pc, #532]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a84      	ldr	r2, [pc, #528]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	e01d      	b.n	8005bac <HAL_RCC_OscConfig+0xb0>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b78:	d10c      	bne.n	8005b94 <HAL_RCC_OscConfig+0x98>
 8005b7a:	4b7f      	ldr	r3, [pc, #508]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a7e      	ldr	r2, [pc, #504]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	4b7c      	ldr	r3, [pc, #496]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a7b      	ldr	r2, [pc, #492]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	e00b      	b.n	8005bac <HAL_RCC_OscConfig+0xb0>
 8005b94:	4b78      	ldr	r3, [pc, #480]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a77      	ldr	r2, [pc, #476]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	4b75      	ldr	r3, [pc, #468]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a74      	ldr	r2, [pc, #464]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d013      	beq.n	8005bdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb4:	f7fc ffa2 	bl	8002afc <HAL_GetTick>
 8005bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bba:	e008      	b.n	8005bce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bbc:	f7fc ff9e 	bl	8002afc <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b64      	cmp	r3, #100	; 0x64
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e2a6      	b.n	800611c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bce:	4b6a      	ldr	r3, [pc, #424]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0f0      	beq.n	8005bbc <HAL_RCC_OscConfig+0xc0>
 8005bda:	e014      	b.n	8005c06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bdc:	f7fc ff8e 	bl	8002afc <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005be4:	f7fc ff8a 	bl	8002afc <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b64      	cmp	r3, #100	; 0x64
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e292      	b.n	800611c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bf6:	4b60      	ldr	r3, [pc, #384]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1f0      	bne.n	8005be4 <HAL_RCC_OscConfig+0xe8>
 8005c02:	e000      	b.n	8005c06 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d075      	beq.n	8005cfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c12:	4b59      	ldr	r3, [pc, #356]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f003 030c 	and.w	r3, r3, #12
 8005c1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c1c:	4b56      	ldr	r3, [pc, #344]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f003 0303 	and.w	r3, r3, #3
 8005c24:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	2b0c      	cmp	r3, #12
 8005c2a:	d102      	bne.n	8005c32 <HAL_RCC_OscConfig+0x136>
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d002      	beq.n	8005c38 <HAL_RCC_OscConfig+0x13c>
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	d11f      	bne.n	8005c78 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c38:	4b4f      	ldr	r3, [pc, #316]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d005      	beq.n	8005c50 <HAL_RCC_OscConfig+0x154>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e265      	b.n	800611c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c50:	4b49      	ldr	r3, [pc, #292]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	061b      	lsls	r3, r3, #24
 8005c5e:	4946      	ldr	r1, [pc, #280]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005c64:	4b45      	ldr	r3, [pc, #276]	; (8005d7c <HAL_RCC_OscConfig+0x280>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7fc fefb 	bl	8002a64 <HAL_InitTick>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d043      	beq.n	8005cfc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e251      	b.n	800611c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d023      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c80:	4b3d      	ldr	r3, [pc, #244]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a3c      	ldr	r2, [pc, #240]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c8c:	f7fc ff36 	bl	8002afc <HAL_GetTick>
 8005c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c92:	e008      	b.n	8005ca6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c94:	f7fc ff32 	bl	8002afc <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e23a      	b.n	800611c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ca6:	4b34      	ldr	r3, [pc, #208]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d0f0      	beq.n	8005c94 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cb2:	4b31      	ldr	r3, [pc, #196]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	061b      	lsls	r3, r3, #24
 8005cc0:	492d      	ldr	r1, [pc, #180]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	604b      	str	r3, [r1, #4]
 8005cc6:	e01a      	b.n	8005cfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cc8:	4b2b      	ldr	r3, [pc, #172]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a2a      	ldr	r2, [pc, #168]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005cce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd4:	f7fc ff12 	bl	8002afc <HAL_GetTick>
 8005cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cda:	e008      	b.n	8005cee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cdc:	f7fc ff0e 	bl	8002afc <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e216      	b.n	800611c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cee:	4b22      	ldr	r3, [pc, #136]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1f0      	bne.n	8005cdc <HAL_RCC_OscConfig+0x1e0>
 8005cfa:	e000      	b.n	8005cfe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cfc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0308 	and.w	r3, r3, #8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d041      	beq.n	8005d8e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d01c      	beq.n	8005d4c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d12:	4b19      	ldr	r3, [pc, #100]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d18:	4a17      	ldr	r2, [pc, #92]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005d1a:	f043 0301 	orr.w	r3, r3, #1
 8005d1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d22:	f7fc feeb 	bl	8002afc <HAL_GetTick>
 8005d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d28:	e008      	b.n	8005d3c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d2a:	f7fc fee7 	bl	8002afc <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e1ef      	b.n	800611c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d3c:	4b0e      	ldr	r3, [pc, #56]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0ef      	beq.n	8005d2a <HAL_RCC_OscConfig+0x22e>
 8005d4a:	e020      	b.n	8005d8e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d4c:	4b0a      	ldr	r3, [pc, #40]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d52:	4a09      	ldr	r2, [pc, #36]	; (8005d78 <HAL_RCC_OscConfig+0x27c>)
 8005d54:	f023 0301 	bic.w	r3, r3, #1
 8005d58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d5c:	f7fc fece 	bl	8002afc <HAL_GetTick>
 8005d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d62:	e00d      	b.n	8005d80 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d64:	f7fc feca 	bl	8002afc <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d906      	bls.n	8005d80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e1d2      	b.n	800611c <HAL_RCC_OscConfig+0x620>
 8005d76:	bf00      	nop
 8005d78:	40021000 	.word	0x40021000
 8005d7c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d80:	4b8c      	ldr	r3, [pc, #560]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1ea      	bne.n	8005d64 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0304 	and.w	r3, r3, #4
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 80a6 	beq.w	8005ee8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005da0:	4b84      	ldr	r3, [pc, #528]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <HAL_RCC_OscConfig+0x2b4>
 8005dac:	2301      	movs	r3, #1
 8005dae:	e000      	b.n	8005db2 <HAL_RCC_OscConfig+0x2b6>
 8005db0:	2300      	movs	r3, #0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00d      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005db6:	4b7f      	ldr	r3, [pc, #508]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dba:	4a7e      	ldr	r2, [pc, #504]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8005dc2:	4b7c      	ldr	r3, [pc, #496]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dd2:	4b79      	ldr	r3, [pc, #484]	; (8005fb8 <HAL_RCC_OscConfig+0x4bc>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d118      	bne.n	8005e10 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dde:	4b76      	ldr	r3, [pc, #472]	; (8005fb8 <HAL_RCC_OscConfig+0x4bc>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a75      	ldr	r2, [pc, #468]	; (8005fb8 <HAL_RCC_OscConfig+0x4bc>)
 8005de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dea:	f7fc fe87 	bl	8002afc <HAL_GetTick>
 8005dee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005df0:	e008      	b.n	8005e04 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005df2:	f7fc fe83 	bl	8002afc <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e18b      	b.n	800611c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e04:	4b6c      	ldr	r3, [pc, #432]	; (8005fb8 <HAL_RCC_OscConfig+0x4bc>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d0f0      	beq.n	8005df2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d108      	bne.n	8005e2a <HAL_RCC_OscConfig+0x32e>
 8005e18:	4b66      	ldr	r3, [pc, #408]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1e:	4a65      	ldr	r2, [pc, #404]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005e20:	f043 0301 	orr.w	r3, r3, #1
 8005e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e28:	e024      	b.n	8005e74 <HAL_RCC_OscConfig+0x378>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	2b05      	cmp	r3, #5
 8005e30:	d110      	bne.n	8005e54 <HAL_RCC_OscConfig+0x358>
 8005e32:	4b60      	ldr	r3, [pc, #384]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e38:	4a5e      	ldr	r2, [pc, #376]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005e3a:	f043 0304 	orr.w	r3, r3, #4
 8005e3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e42:	4b5c      	ldr	r3, [pc, #368]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e48:	4a5a      	ldr	r2, [pc, #360]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005e4a:	f043 0301 	orr.w	r3, r3, #1
 8005e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e52:	e00f      	b.n	8005e74 <HAL_RCC_OscConfig+0x378>
 8005e54:	4b57      	ldr	r3, [pc, #348]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5a:	4a56      	ldr	r2, [pc, #344]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005e5c:	f023 0301 	bic.w	r3, r3, #1
 8005e60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e64:	4b53      	ldr	r3, [pc, #332]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e6a:	4a52      	ldr	r2, [pc, #328]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005e6c:	f023 0304 	bic.w	r3, r3, #4
 8005e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d016      	beq.n	8005eaa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e7c:	f7fc fe3e 	bl	8002afc <HAL_GetTick>
 8005e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e82:	e00a      	b.n	8005e9a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e84:	f7fc fe3a 	bl	8002afc <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e140      	b.n	800611c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e9a:	4b46      	ldr	r3, [pc, #280]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0ed      	beq.n	8005e84 <HAL_RCC_OscConfig+0x388>
 8005ea8:	e015      	b.n	8005ed6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eaa:	f7fc fe27 	bl	8002afc <HAL_GetTick>
 8005eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005eb0:	e00a      	b.n	8005ec8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eb2:	f7fc fe23 	bl	8002afc <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e129      	b.n	800611c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ec8:	4b3a      	ldr	r3, [pc, #232]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1ed      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ed6:	7ffb      	ldrb	r3, [r7, #31]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d105      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005edc:	4b35      	ldr	r3, [pc, #212]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee0:	4a34      	ldr	r2, [pc, #208]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ee6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0320 	and.w	r3, r3, #32
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d03c      	beq.n	8005f6e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d01c      	beq.n	8005f36 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005efc:	4b2d      	ldr	r3, [pc, #180]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f02:	4a2c      	ldr	r2, [pc, #176]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005f04:	f043 0301 	orr.w	r3, r3, #1
 8005f08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f0c:	f7fc fdf6 	bl	8002afc <HAL_GetTick>
 8005f10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f14:	f7fc fdf2 	bl	8002afc <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e0fa      	b.n	800611c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f26:	4b23      	ldr	r3, [pc, #140]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005f28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d0ef      	beq.n	8005f14 <HAL_RCC_OscConfig+0x418>
 8005f34:	e01b      	b.n	8005f6e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f36:	4b1f      	ldr	r3, [pc, #124]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005f38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f3c:	4a1d      	ldr	r2, [pc, #116]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005f3e:	f023 0301 	bic.w	r3, r3, #1
 8005f42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f46:	f7fc fdd9 	bl	8002afc <HAL_GetTick>
 8005f4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f4c:	e008      	b.n	8005f60 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f4e:	f7fc fdd5 	bl	8002afc <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d901      	bls.n	8005f60 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e0dd      	b.n	800611c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f60:	4b14      	ldr	r3, [pc, #80]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005f62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1ef      	bne.n	8005f4e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 80d1 	beq.w	800611a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f78:	4b0e      	ldr	r3, [pc, #56]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f003 030c 	and.w	r3, r3, #12
 8005f80:	2b0c      	cmp	r3, #12
 8005f82:	f000 808b 	beq.w	800609c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d15e      	bne.n	800604c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f8e:	4b09      	ldr	r3, [pc, #36]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a08      	ldr	r2, [pc, #32]	; (8005fb4 <HAL_RCC_OscConfig+0x4b8>)
 8005f94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9a:	f7fc fdaf 	bl	8002afc <HAL_GetTick>
 8005f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fa0:	e00c      	b.n	8005fbc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fa2:	f7fc fdab 	bl	8002afc <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d905      	bls.n	8005fbc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e0b3      	b.n	800611c <HAL_RCC_OscConfig+0x620>
 8005fb4:	40021000 	.word	0x40021000
 8005fb8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fbc:	4b59      	ldr	r3, [pc, #356]	; (8006124 <HAL_RCC_OscConfig+0x628>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1ec      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fc8:	4b56      	ldr	r3, [pc, #344]	; (8006124 <HAL_RCC_OscConfig+0x628>)
 8005fca:	68da      	ldr	r2, [r3, #12]
 8005fcc:	4b56      	ldr	r3, [pc, #344]	; (8006128 <HAL_RCC_OscConfig+0x62c>)
 8005fce:	4013      	ands	r3, r2
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6a11      	ldr	r1, [r2, #32]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fd8:	3a01      	subs	r2, #1
 8005fda:	0112      	lsls	r2, r2, #4
 8005fdc:	4311      	orrs	r1, r2
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005fe2:	0212      	lsls	r2, r2, #8
 8005fe4:	4311      	orrs	r1, r2
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005fea:	0852      	lsrs	r2, r2, #1
 8005fec:	3a01      	subs	r2, #1
 8005fee:	0552      	lsls	r2, r2, #21
 8005ff0:	4311      	orrs	r1, r2
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ff6:	0852      	lsrs	r2, r2, #1
 8005ff8:	3a01      	subs	r2, #1
 8005ffa:	0652      	lsls	r2, r2, #25
 8005ffc:	4311      	orrs	r1, r2
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006002:	06d2      	lsls	r2, r2, #27
 8006004:	430a      	orrs	r2, r1
 8006006:	4947      	ldr	r1, [pc, #284]	; (8006124 <HAL_RCC_OscConfig+0x628>)
 8006008:	4313      	orrs	r3, r2
 800600a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800600c:	4b45      	ldr	r3, [pc, #276]	; (8006124 <HAL_RCC_OscConfig+0x628>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a44      	ldr	r2, [pc, #272]	; (8006124 <HAL_RCC_OscConfig+0x628>)
 8006012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006016:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006018:	4b42      	ldr	r3, [pc, #264]	; (8006124 <HAL_RCC_OscConfig+0x628>)
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	4a41      	ldr	r2, [pc, #260]	; (8006124 <HAL_RCC_OscConfig+0x628>)
 800601e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006022:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006024:	f7fc fd6a 	bl	8002afc <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800602c:	f7fc fd66 	bl	8002afc <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e06e      	b.n	800611c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800603e:	4b39      	ldr	r3, [pc, #228]	; (8006124 <HAL_RCC_OscConfig+0x628>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0f0      	beq.n	800602c <HAL_RCC_OscConfig+0x530>
 800604a:	e066      	b.n	800611a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800604c:	4b35      	ldr	r3, [pc, #212]	; (8006124 <HAL_RCC_OscConfig+0x628>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a34      	ldr	r2, [pc, #208]	; (8006124 <HAL_RCC_OscConfig+0x628>)
 8006052:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006056:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006058:	4b32      	ldr	r3, [pc, #200]	; (8006124 <HAL_RCC_OscConfig+0x628>)
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	4a31      	ldr	r2, [pc, #196]	; (8006124 <HAL_RCC_OscConfig+0x628>)
 800605e:	f023 0303 	bic.w	r3, r3, #3
 8006062:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006064:	4b2f      	ldr	r3, [pc, #188]	; (8006124 <HAL_RCC_OscConfig+0x628>)
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	4a2e      	ldr	r2, [pc, #184]	; (8006124 <HAL_RCC_OscConfig+0x628>)
 800606a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800606e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006072:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006074:	f7fc fd42 	bl	8002afc <HAL_GetTick>
 8006078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800607a:	e008      	b.n	800608e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800607c:	f7fc fd3e 	bl	8002afc <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e046      	b.n	800611c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800608e:	4b25      	ldr	r3, [pc, #148]	; (8006124 <HAL_RCC_OscConfig+0x628>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1f0      	bne.n	800607c <HAL_RCC_OscConfig+0x580>
 800609a:	e03e      	b.n	800611a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d101      	bne.n	80060a8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e039      	b.n	800611c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80060a8:	4b1e      	ldr	r3, [pc, #120]	; (8006124 <HAL_RCC_OscConfig+0x628>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f003 0203 	and.w	r2, r3, #3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d12c      	bne.n	8006116 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	3b01      	subs	r3, #1
 80060c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d123      	bne.n	8006116 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80060da:	429a      	cmp	r2, r3
 80060dc:	d11b      	bne.n	8006116 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d113      	bne.n	8006116 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f8:	085b      	lsrs	r3, r3, #1
 80060fa:	3b01      	subs	r3, #1
 80060fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80060fe:	429a      	cmp	r2, r3
 8006100:	d109      	bne.n	8006116 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800610c:	085b      	lsrs	r3, r3, #1
 800610e:	3b01      	subs	r3, #1
 8006110:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006112:	429a      	cmp	r2, r3
 8006114:	d001      	beq.n	800611a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e000      	b.n	800611c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3720      	adds	r7, #32
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	40021000 	.word	0x40021000
 8006128:	019f800c 	.word	0x019f800c

0800612c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006136:	2300      	movs	r3, #0
 8006138:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e11e      	b.n	8006382 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006144:	4b91      	ldr	r3, [pc, #580]	; (800638c <HAL_RCC_ClockConfig+0x260>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 030f 	and.w	r3, r3, #15
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d910      	bls.n	8006174 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006152:	4b8e      	ldr	r3, [pc, #568]	; (800638c <HAL_RCC_ClockConfig+0x260>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f023 020f 	bic.w	r2, r3, #15
 800615a:	498c      	ldr	r1, [pc, #560]	; (800638c <HAL_RCC_ClockConfig+0x260>)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	4313      	orrs	r3, r2
 8006160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006162:	4b8a      	ldr	r3, [pc, #552]	; (800638c <HAL_RCC_ClockConfig+0x260>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 030f 	and.w	r3, r3, #15
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	429a      	cmp	r2, r3
 800616e:	d001      	beq.n	8006174 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e106      	b.n	8006382 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b00      	cmp	r3, #0
 800617e:	d073      	beq.n	8006268 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	2b03      	cmp	r3, #3
 8006186:	d129      	bne.n	80061dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006188:	4b81      	ldr	r3, [pc, #516]	; (8006390 <HAL_RCC_ClockConfig+0x264>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e0f4      	b.n	8006382 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006198:	f000 f966 	bl	8006468 <RCC_GetSysClockFreqFromPLLSource>
 800619c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	4a7c      	ldr	r2, [pc, #496]	; (8006394 <HAL_RCC_ClockConfig+0x268>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d93f      	bls.n	8006226 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80061a6:	4b7a      	ldr	r3, [pc, #488]	; (8006390 <HAL_RCC_ClockConfig+0x264>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d009      	beq.n	80061c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d033      	beq.n	8006226 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d12f      	bne.n	8006226 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80061c6:	4b72      	ldr	r3, [pc, #456]	; (8006390 <HAL_RCC_ClockConfig+0x264>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061ce:	4a70      	ldr	r2, [pc, #448]	; (8006390 <HAL_RCC_ClockConfig+0x264>)
 80061d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80061d6:	2380      	movs	r3, #128	; 0x80
 80061d8:	617b      	str	r3, [r7, #20]
 80061da:	e024      	b.n	8006226 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d107      	bne.n	80061f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061e4:	4b6a      	ldr	r3, [pc, #424]	; (8006390 <HAL_RCC_ClockConfig+0x264>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d109      	bne.n	8006204 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e0c6      	b.n	8006382 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061f4:	4b66      	ldr	r3, [pc, #408]	; (8006390 <HAL_RCC_ClockConfig+0x264>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e0be      	b.n	8006382 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006204:	f000 f8ce 	bl	80063a4 <HAL_RCC_GetSysClockFreq>
 8006208:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	4a61      	ldr	r2, [pc, #388]	; (8006394 <HAL_RCC_ClockConfig+0x268>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d909      	bls.n	8006226 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006212:	4b5f      	ldr	r3, [pc, #380]	; (8006390 <HAL_RCC_ClockConfig+0x264>)
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800621a:	4a5d      	ldr	r2, [pc, #372]	; (8006390 <HAL_RCC_ClockConfig+0x264>)
 800621c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006220:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006222:	2380      	movs	r3, #128	; 0x80
 8006224:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006226:	4b5a      	ldr	r3, [pc, #360]	; (8006390 <HAL_RCC_ClockConfig+0x264>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f023 0203 	bic.w	r2, r3, #3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	4957      	ldr	r1, [pc, #348]	; (8006390 <HAL_RCC_ClockConfig+0x264>)
 8006234:	4313      	orrs	r3, r2
 8006236:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006238:	f7fc fc60 	bl	8002afc <HAL_GetTick>
 800623c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800623e:	e00a      	b.n	8006256 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006240:	f7fc fc5c 	bl	8002afc <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	f241 3288 	movw	r2, #5000	; 0x1388
 800624e:	4293      	cmp	r3, r2
 8006250:	d901      	bls.n	8006256 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e095      	b.n	8006382 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006256:	4b4e      	ldr	r3, [pc, #312]	; (8006390 <HAL_RCC_ClockConfig+0x264>)
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f003 020c 	and.w	r2, r3, #12
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	429a      	cmp	r2, r3
 8006266:	d1eb      	bne.n	8006240 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b00      	cmp	r3, #0
 8006272:	d023      	beq.n	80062bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0304 	and.w	r3, r3, #4
 800627c:	2b00      	cmp	r3, #0
 800627e:	d005      	beq.n	800628c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006280:	4b43      	ldr	r3, [pc, #268]	; (8006390 <HAL_RCC_ClockConfig+0x264>)
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	4a42      	ldr	r2, [pc, #264]	; (8006390 <HAL_RCC_ClockConfig+0x264>)
 8006286:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800628a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0308 	and.w	r3, r3, #8
 8006294:	2b00      	cmp	r3, #0
 8006296:	d007      	beq.n	80062a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006298:	4b3d      	ldr	r3, [pc, #244]	; (8006390 <HAL_RCC_ClockConfig+0x264>)
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80062a0:	4a3b      	ldr	r2, [pc, #236]	; (8006390 <HAL_RCC_ClockConfig+0x264>)
 80062a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80062a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062a8:	4b39      	ldr	r3, [pc, #228]	; (8006390 <HAL_RCC_ClockConfig+0x264>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	4936      	ldr	r1, [pc, #216]	; (8006390 <HAL_RCC_ClockConfig+0x264>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	608b      	str	r3, [r1, #8]
 80062ba:	e008      	b.n	80062ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	2b80      	cmp	r3, #128	; 0x80
 80062c0:	d105      	bne.n	80062ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80062c2:	4b33      	ldr	r3, [pc, #204]	; (8006390 <HAL_RCC_ClockConfig+0x264>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	4a32      	ldr	r2, [pc, #200]	; (8006390 <HAL_RCC_ClockConfig+0x264>)
 80062c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062ce:	4b2f      	ldr	r3, [pc, #188]	; (800638c <HAL_RCC_ClockConfig+0x260>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 030f 	and.w	r3, r3, #15
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d21d      	bcs.n	8006318 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062dc:	4b2b      	ldr	r3, [pc, #172]	; (800638c <HAL_RCC_ClockConfig+0x260>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f023 020f 	bic.w	r2, r3, #15
 80062e4:	4929      	ldr	r1, [pc, #164]	; (800638c <HAL_RCC_ClockConfig+0x260>)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80062ec:	f7fc fc06 	bl	8002afc <HAL_GetTick>
 80062f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062f2:	e00a      	b.n	800630a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062f4:	f7fc fc02 	bl	8002afc <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006302:	4293      	cmp	r3, r2
 8006304:	d901      	bls.n	800630a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e03b      	b.n	8006382 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800630a:	4b20      	ldr	r3, [pc, #128]	; (800638c <HAL_RCC_ClockConfig+0x260>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 030f 	and.w	r3, r3, #15
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	429a      	cmp	r2, r3
 8006316:	d1ed      	bne.n	80062f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d008      	beq.n	8006336 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006324:	4b1a      	ldr	r3, [pc, #104]	; (8006390 <HAL_RCC_ClockConfig+0x264>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	4917      	ldr	r1, [pc, #92]	; (8006390 <HAL_RCC_ClockConfig+0x264>)
 8006332:	4313      	orrs	r3, r2
 8006334:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0308 	and.w	r3, r3, #8
 800633e:	2b00      	cmp	r3, #0
 8006340:	d009      	beq.n	8006356 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006342:	4b13      	ldr	r3, [pc, #76]	; (8006390 <HAL_RCC_ClockConfig+0x264>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	490f      	ldr	r1, [pc, #60]	; (8006390 <HAL_RCC_ClockConfig+0x264>)
 8006352:	4313      	orrs	r3, r2
 8006354:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006356:	f000 f825 	bl	80063a4 <HAL_RCC_GetSysClockFreq>
 800635a:	4602      	mov	r2, r0
 800635c:	4b0c      	ldr	r3, [pc, #48]	; (8006390 <HAL_RCC_ClockConfig+0x264>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	091b      	lsrs	r3, r3, #4
 8006362:	f003 030f 	and.w	r3, r3, #15
 8006366:	490c      	ldr	r1, [pc, #48]	; (8006398 <HAL_RCC_ClockConfig+0x26c>)
 8006368:	5ccb      	ldrb	r3, [r1, r3]
 800636a:	f003 031f 	and.w	r3, r3, #31
 800636e:	fa22 f303 	lsr.w	r3, r2, r3
 8006372:	4a0a      	ldr	r2, [pc, #40]	; (800639c <HAL_RCC_ClockConfig+0x270>)
 8006374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006376:	4b0a      	ldr	r3, [pc, #40]	; (80063a0 <HAL_RCC_ClockConfig+0x274>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4618      	mov	r0, r3
 800637c:	f7fc fb72 	bl	8002a64 <HAL_InitTick>
 8006380:	4603      	mov	r3, r0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3718      	adds	r7, #24
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	40022000 	.word	0x40022000
 8006390:	40021000 	.word	0x40021000
 8006394:	04c4b400 	.word	0x04c4b400
 8006398:	0800a2d0 	.word	0x0800a2d0
 800639c:	20000004 	.word	0x20000004
 80063a0:	20000008 	.word	0x20000008

080063a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b087      	sub	sp, #28
 80063a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80063aa:	4b2c      	ldr	r3, [pc, #176]	; (800645c <HAL_RCC_GetSysClockFreq+0xb8>)
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f003 030c 	and.w	r3, r3, #12
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	d102      	bne.n	80063bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80063b6:	4b2a      	ldr	r3, [pc, #168]	; (8006460 <HAL_RCC_GetSysClockFreq+0xbc>)
 80063b8:	613b      	str	r3, [r7, #16]
 80063ba:	e047      	b.n	800644c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80063bc:	4b27      	ldr	r3, [pc, #156]	; (800645c <HAL_RCC_GetSysClockFreq+0xb8>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f003 030c 	and.w	r3, r3, #12
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d102      	bne.n	80063ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80063c8:	4b26      	ldr	r3, [pc, #152]	; (8006464 <HAL_RCC_GetSysClockFreq+0xc0>)
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	e03e      	b.n	800644c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80063ce:	4b23      	ldr	r3, [pc, #140]	; (800645c <HAL_RCC_GetSysClockFreq+0xb8>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 030c 	and.w	r3, r3, #12
 80063d6:	2b0c      	cmp	r3, #12
 80063d8:	d136      	bne.n	8006448 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80063da:	4b20      	ldr	r3, [pc, #128]	; (800645c <HAL_RCC_GetSysClockFreq+0xb8>)
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	f003 0303 	and.w	r3, r3, #3
 80063e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063e4:	4b1d      	ldr	r3, [pc, #116]	; (800645c <HAL_RCC_GetSysClockFreq+0xb8>)
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	091b      	lsrs	r3, r3, #4
 80063ea:	f003 030f 	and.w	r3, r3, #15
 80063ee:	3301      	adds	r3, #1
 80063f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d10c      	bne.n	8006412 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80063f8:	4a1a      	ldr	r2, [pc, #104]	; (8006464 <HAL_RCC_GetSysClockFreq+0xc0>)
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006400:	4a16      	ldr	r2, [pc, #88]	; (800645c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006402:	68d2      	ldr	r2, [r2, #12]
 8006404:	0a12      	lsrs	r2, r2, #8
 8006406:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800640a:	fb02 f303 	mul.w	r3, r2, r3
 800640e:	617b      	str	r3, [r7, #20]
      break;
 8006410:	e00c      	b.n	800642c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006412:	4a13      	ldr	r2, [pc, #76]	; (8006460 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	fbb2 f3f3 	udiv	r3, r2, r3
 800641a:	4a10      	ldr	r2, [pc, #64]	; (800645c <HAL_RCC_GetSysClockFreq+0xb8>)
 800641c:	68d2      	ldr	r2, [r2, #12]
 800641e:	0a12      	lsrs	r2, r2, #8
 8006420:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006424:	fb02 f303 	mul.w	r3, r2, r3
 8006428:	617b      	str	r3, [r7, #20]
      break;
 800642a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800642c:	4b0b      	ldr	r3, [pc, #44]	; (800645c <HAL_RCC_GetSysClockFreq+0xb8>)
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	0e5b      	lsrs	r3, r3, #25
 8006432:	f003 0303 	and.w	r3, r3, #3
 8006436:	3301      	adds	r3, #1
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	fbb2 f3f3 	udiv	r3, r2, r3
 8006444:	613b      	str	r3, [r7, #16]
 8006446:	e001      	b.n	800644c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800644c:	693b      	ldr	r3, [r7, #16]
}
 800644e:	4618      	mov	r0, r3
 8006450:	371c      	adds	r7, #28
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	40021000 	.word	0x40021000
 8006460:	00f42400 	.word	0x00f42400
 8006464:	016e3600 	.word	0x016e3600

08006468 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006468:	b480      	push	{r7}
 800646a:	b087      	sub	sp, #28
 800646c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800646e:	4b1e      	ldr	r3, [pc, #120]	; (80064e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	f003 0303 	and.w	r3, r3, #3
 8006476:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006478:	4b1b      	ldr	r3, [pc, #108]	; (80064e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	091b      	lsrs	r3, r3, #4
 800647e:	f003 030f 	and.w	r3, r3, #15
 8006482:	3301      	adds	r3, #1
 8006484:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	2b03      	cmp	r3, #3
 800648a:	d10c      	bne.n	80064a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800648c:	4a17      	ldr	r2, [pc, #92]	; (80064ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	fbb2 f3f3 	udiv	r3, r2, r3
 8006494:	4a14      	ldr	r2, [pc, #80]	; (80064e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006496:	68d2      	ldr	r2, [r2, #12]
 8006498:	0a12      	lsrs	r2, r2, #8
 800649a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800649e:	fb02 f303 	mul.w	r3, r2, r3
 80064a2:	617b      	str	r3, [r7, #20]
    break;
 80064a4:	e00c      	b.n	80064c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064a6:	4a12      	ldr	r2, [pc, #72]	; (80064f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ae:	4a0e      	ldr	r2, [pc, #56]	; (80064e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064b0:	68d2      	ldr	r2, [r2, #12]
 80064b2:	0a12      	lsrs	r2, r2, #8
 80064b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064b8:	fb02 f303 	mul.w	r3, r2, r3
 80064bc:	617b      	str	r3, [r7, #20]
    break;
 80064be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80064c0:	4b09      	ldr	r3, [pc, #36]	; (80064e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	0e5b      	lsrs	r3, r3, #25
 80064c6:	f003 0303 	and.w	r3, r3, #3
 80064ca:	3301      	adds	r3, #1
 80064cc:	005b      	lsls	r3, r3, #1
 80064ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80064da:	687b      	ldr	r3, [r7, #4]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	371c      	adds	r7, #28
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	40021000 	.word	0x40021000
 80064ec:	016e3600 	.word	0x016e3600
 80064f0:	00f42400 	.word	0x00f42400

080064f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064fc:	2300      	movs	r3, #0
 80064fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006500:	2300      	movs	r3, #0
 8006502:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 8098 	beq.w	8006642 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006512:	2300      	movs	r3, #0
 8006514:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006516:	4b43      	ldr	r3, [pc, #268]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800651a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10d      	bne.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006522:	4b40      	ldr	r3, [pc, #256]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006526:	4a3f      	ldr	r2, [pc, #252]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800652c:	6593      	str	r3, [r2, #88]	; 0x58
 800652e:	4b3d      	ldr	r3, [pc, #244]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006536:	60bb      	str	r3, [r7, #8]
 8006538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800653a:	2301      	movs	r3, #1
 800653c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800653e:	4b3a      	ldr	r3, [pc, #232]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a39      	ldr	r2, [pc, #228]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006548:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800654a:	f7fc fad7 	bl	8002afc <HAL_GetTick>
 800654e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006550:	e009      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006552:	f7fc fad3 	bl	8002afc <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d902      	bls.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	74fb      	strb	r3, [r7, #19]
        break;
 8006564:	e005      	b.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006566:	4b30      	ldr	r3, [pc, #192]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800656e:	2b00      	cmp	r3, #0
 8006570:	d0ef      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006572:	7cfb      	ldrb	r3, [r7, #19]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d159      	bne.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006578:	4b2a      	ldr	r3, [pc, #168]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800657a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800657e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006582:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d01e      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	429a      	cmp	r2, r3
 8006592:	d019      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006594:	4b23      	ldr	r3, [pc, #140]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800659a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800659e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065a0:	4b20      	ldr	r3, [pc, #128]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a6:	4a1f      	ldr	r2, [pc, #124]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065b0:	4b1c      	ldr	r3, [pc, #112]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b6:	4a1b      	ldr	r2, [pc, #108]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80065c0:	4a18      	ldr	r2, [pc, #96]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d016      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d2:	f7fc fa93 	bl	8002afc <HAL_GetTick>
 80065d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065d8:	e00b      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065da:	f7fc fa8f 	bl	8002afc <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d902      	bls.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	74fb      	strb	r3, [r7, #19]
            break;
 80065f0:	e006      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065f2:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f8:	f003 0302 	and.w	r3, r3, #2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d0ec      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006600:	7cfb      	ldrb	r3, [r7, #19]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10b      	bne.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006606:	4b07      	ldr	r3, [pc, #28]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006614:	4903      	ldr	r1, [pc, #12]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006616:	4313      	orrs	r3, r2
 8006618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800661c:	e008      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800661e:	7cfb      	ldrb	r3, [r7, #19]
 8006620:	74bb      	strb	r3, [r7, #18]
 8006622:	e005      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006624:	40021000 	.word	0x40021000
 8006628:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800662c:	7cfb      	ldrb	r3, [r7, #19]
 800662e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006630:	7c7b      	ldrb	r3, [r7, #17]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d105      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006636:	4ba7      	ldr	r3, [pc, #668]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800663a:	4aa6      	ldr	r2, [pc, #664]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800663c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006640:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00a      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800664e:	4ba1      	ldr	r3, [pc, #644]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006654:	f023 0203 	bic.w	r2, r3, #3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	499d      	ldr	r1, [pc, #628]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800665e:	4313      	orrs	r3, r2
 8006660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00a      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006670:	4b98      	ldr	r3, [pc, #608]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006676:	f023 020c 	bic.w	r2, r3, #12
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	4995      	ldr	r1, [pc, #596]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006680:	4313      	orrs	r3, r2
 8006682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0304 	and.w	r3, r3, #4
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00a      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006692:	4b90      	ldr	r3, [pc, #576]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006698:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	498c      	ldr	r1, [pc, #560]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0308 	and.w	r3, r3, #8
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00a      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066b4:	4b87      	ldr	r3, [pc, #540]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	4984      	ldr	r1, [pc, #528]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0310 	and.w	r3, r3, #16
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00a      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80066d6:	4b7f      	ldr	r3, [pc, #508]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	497b      	ldr	r1, [pc, #492]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0320 	and.w	r3, r3, #32
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00a      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066f8:	4b76      	ldr	r3, [pc, #472]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	4973      	ldr	r1, [pc, #460]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006708:	4313      	orrs	r3, r2
 800670a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00a      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800671a:	4b6e      	ldr	r3, [pc, #440]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800671c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006720:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	496a      	ldr	r1, [pc, #424]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800672a:	4313      	orrs	r3, r2
 800672c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00a      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800673c:	4b65      	ldr	r3, [pc, #404]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800673e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006742:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	4962      	ldr	r1, [pc, #392]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800674c:	4313      	orrs	r3, r2
 800674e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00a      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800675e:	4b5d      	ldr	r3, [pc, #372]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006764:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	4959      	ldr	r1, [pc, #356]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800676e:	4313      	orrs	r3, r2
 8006770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00a      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006780:	4b54      	ldr	r3, [pc, #336]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006782:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006786:	f023 0203 	bic.w	r2, r3, #3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678e:	4951      	ldr	r1, [pc, #324]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006790:	4313      	orrs	r3, r2
 8006792:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067a2:	4b4c      	ldr	r3, [pc, #304]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b0:	4948      	ldr	r1, [pc, #288]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d015      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067c4:	4b43      	ldr	r3, [pc, #268]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d2:	4940      	ldr	r1, [pc, #256]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067e2:	d105      	bne.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067e4:	4b3b      	ldr	r3, [pc, #236]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	4a3a      	ldr	r2, [pc, #232]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d015      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80067fc:	4b35      	ldr	r3, [pc, #212]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006802:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800680a:	4932      	ldr	r1, [pc, #200]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800680c:	4313      	orrs	r3, r2
 800680e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800681a:	d105      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800681c:	4b2d      	ldr	r3, [pc, #180]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	4a2c      	ldr	r2, [pc, #176]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006826:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d015      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006834:	4b27      	ldr	r3, [pc, #156]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006842:	4924      	ldr	r1, [pc, #144]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006844:	4313      	orrs	r3, r2
 8006846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006852:	d105      	bne.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006854:	4b1f      	ldr	r3, [pc, #124]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	4a1e      	ldr	r2, [pc, #120]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800685a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800685e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d015      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800686c:	4b19      	ldr	r3, [pc, #100]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800686e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006872:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687a:	4916      	ldr	r1, [pc, #88]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800687c:	4313      	orrs	r3, r2
 800687e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006886:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800688a:	d105      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800688c:	4b11      	ldr	r3, [pc, #68]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	4a10      	ldr	r2, [pc, #64]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006896:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d019      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068a4:	4b0b      	ldr	r3, [pc, #44]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b2:	4908      	ldr	r1, [pc, #32]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068c2:	d109      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068c4:	4b03      	ldr	r3, [pc, #12]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	4a02      	ldr	r2, [pc, #8]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068ce:	60d3      	str	r3, [r2, #12]
 80068d0:	e002      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80068d2:	bf00      	nop
 80068d4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d015      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80068e4:	4b29      	ldr	r3, [pc, #164]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f2:	4926      	ldr	r1, [pc, #152]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006902:	d105      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006904:	4b21      	ldr	r3, [pc, #132]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	4a20      	ldr	r2, [pc, #128]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800690a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800690e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d015      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800691c:	4b1b      	ldr	r3, [pc, #108]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800691e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006922:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800692a:	4918      	ldr	r1, [pc, #96]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800692c:	4313      	orrs	r3, r2
 800692e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800693a:	d105      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800693c:	4b13      	ldr	r3, [pc, #76]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	4a12      	ldr	r2, [pc, #72]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006946:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d015      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006954:	4b0d      	ldr	r3, [pc, #52]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006956:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800695a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006962:	490a      	ldr	r1, [pc, #40]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006964:	4313      	orrs	r3, r2
 8006966:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800696e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006972:	d105      	bne.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006974:	4b05      	ldr	r3, [pc, #20]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	4a04      	ldr	r2, [pc, #16]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800697a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800697e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006980:	7cbb      	ldrb	r3, [r7, #18]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	40021000 	.word	0x40021000

08006990 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d066      	beq.n	8006a70 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d106      	bne.n	80069bc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7fb fe96 	bl	80026e8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	22ca      	movs	r2, #202	; 0xca
 80069ca:	625a      	str	r2, [r3, #36]	; 0x24
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2253      	movs	r2, #83	; 0x53
 80069d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f99a 	bl	8006d0e <RTC_EnterInitMode>
 80069da:	4603      	mov	r3, r0
 80069dc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80069de:	7bfb      	ldrb	r3, [r7, #15]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d13a      	bne.n	8006a5a <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	6812      	ldr	r2, [r2, #0]
 80069ee:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80069f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069f6:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6999      	ldr	r1, [r3, #24]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	431a      	orrs	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	431a      	orrs	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68d9      	ldr	r1, [r3, #12]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	041a      	lsls	r2, r3, #16
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f9a6 	bl	8006d7a <RTC_ExitInitMode>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d110      	bne.n	8006a5a <HAL_RTC_Init+0xca>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1a      	ldr	r2, [r3, #32]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	431a      	orrs	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	619a      	str	r2, [r3, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	22ff      	movs	r2, #255	; 0xff
 8006a60:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006a62:	7bfb      	ldrb	r3, [r7, #15]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d103      	bne.n	8006a70 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006a7a:	b590      	push	{r4, r7, lr}
 8006a7c:	b087      	sub	sp, #28
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d101      	bne.n	8006a94 <HAL_RTC_SetTime+0x1a>
 8006a90:	2302      	movs	r3, #2
 8006a92:	e08b      	b.n	8006bac <HAL_RTC_SetTime+0x132>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	22ca      	movs	r2, #202	; 0xca
 8006aaa:	625a      	str	r2, [r3, #36]	; 0x24
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2253      	movs	r2, #83	; 0x53
 8006ab2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 f92a 	bl	8006d0e <RTC_EnterInitMode>
 8006aba:	4603      	mov	r3, r0
 8006abc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006abe:	7cfb      	ldrb	r3, [r7, #19]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d163      	bne.n	8006b8c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d126      	bne.n	8006b18 <HAL_RTC_SetTime+0x9e>
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d102      	bne.n	8006ade <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2200      	movs	r2, #0
 8006adc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 f98c 	bl	8006e00 <RTC_ByteToBcd2>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	785b      	ldrb	r3, [r3, #1]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 f985 	bl	8006e00 <RTC_ByteToBcd2>
 8006af6:	4603      	mov	r3, r0
 8006af8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006afa:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	789b      	ldrb	r3, [r3, #2]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 f97d 	bl	8006e00 <RTC_ByteToBcd2>
 8006b06:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b08:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	78db      	ldrb	r3, [r3, #3]
 8006b10:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b12:	4313      	orrs	r3, r2
 8006b14:	617b      	str	r3, [r7, #20]
 8006b16:	e018      	b.n	8006b4a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d102      	bne.n	8006b2c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	785b      	ldrb	r3, [r3, #1]
 8006b36:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b38:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006b3e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	78db      	ldrb	r3, [r3, #3]
 8006b44:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006b46:	4313      	orrs	r3, r2
 8006b48:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(hrtc->Instance->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006b54:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006b58:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BKP);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	699a      	ldr	r2, [r3, #24]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b68:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(hrtc->Instance->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6999      	ldr	r1, [r3, #24]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	68da      	ldr	r2, [r3, #12]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f000 f8f9 	bl	8006d7a <RTC_ExitInitMode>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	22ff      	movs	r2, #255	; 0xff
 8006b92:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006b94:	7cfb      	ldrb	r3, [r7, #19]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d103      	bne.n	8006ba2 <HAL_RTC_SetTime+0x128>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
    __HAL_UNLOCK(hrtc);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006baa:	7cfb      	ldrb	r3, [r7, #19]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	371c      	adds	r7, #28
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd90      	pop	{r4, r7, pc}

08006bb4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006bb4:	b590      	push	{r4, r7, lr}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d101      	bne.n	8006bce <HAL_RTC_SetDate+0x1a>
 8006bca:	2302      	movs	r3, #2
 8006bcc:	e075      	b.n	8006cba <HAL_RTC_SetDate+0x106>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2202      	movs	r2, #2
 8006bda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10e      	bne.n	8006c02 <HAL_RTC_SetDate+0x4e>
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	785b      	ldrb	r3, [r3, #1]
 8006be8:	f003 0310 	and.w	r3, r3, #16
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d008      	beq.n	8006c02 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	785b      	ldrb	r3, [r3, #1]
 8006bf4:	f023 0310 	bic.w	r3, r3, #16
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	330a      	adds	r3, #10
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d11c      	bne.n	8006c42 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	78db      	ldrb	r3, [r3, #3]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 f8f7 	bl	8006e00 <RTC_ByteToBcd2>
 8006c12:	4603      	mov	r3, r0
 8006c14:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	785b      	ldrb	r3, [r3, #1]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 f8f0 	bl	8006e00 <RTC_ByteToBcd2>
 8006c20:	4603      	mov	r3, r0
 8006c22:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006c24:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	789b      	ldrb	r3, [r3, #2]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 f8e8 	bl	8006e00 <RTC_ByteToBcd2>
 8006c30:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006c32:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	617b      	str	r3, [r7, #20]
 8006c40:	e00e      	b.n	8006c60 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	78db      	ldrb	r3, [r3, #3]
 8006c46:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	785b      	ldrb	r3, [r3, #1]
 8006c4c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006c4e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006c54:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	22ca      	movs	r2, #202	; 0xca
 8006c66:	625a      	str	r2, [r3, #36]	; 0x24
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2253      	movs	r2, #83	; 0x53
 8006c6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 f84c 	bl	8006d0e <RTC_EnterInitMode>
 8006c76:	4603      	mov	r3, r0
 8006c78:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006c7a:	7cfb      	ldrb	r3, [r7, #19]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10c      	bne.n	8006c9a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    WRITE_REG(hrtc->Instance->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c8a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006c8e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 f872 	bl	8006d7a <RTC_ExitInitMode>
 8006c96:	4603      	mov	r3, r0
 8006c98:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	22ff      	movs	r2, #255	; 0xff
 8006ca0:	625a      	str	r2, [r3, #36]	; 0x24
 
  if (status == HAL_OK)
 8006ca2:	7cfb      	ldrb	r3, [r7, #19]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d103      	bne.n	8006cb0 <HAL_RTC_SetDate+0xfc>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006cb8:	7cfb      	ldrb	r3, [r7, #19]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	371c      	adds	r7, #28
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd90      	pop	{r4, r7, pc}

08006cc2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68da      	ldr	r2, [r3, #12]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 0220 	bic.w	r2, r2, #32
 8006cd8:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006cda:	f7fb ff0f 	bl	8002afc <HAL_GetTick>
 8006cde:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8006ce0:	e009      	b.n	8006cf6 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ce2:	f7fb ff0b 	bl	8002afc <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cf0:	d901      	bls.n	8006cf6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e007      	b.n	8006d06 <HAL_RTC_WaitForSynchro+0x44>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	f003 0320 	and.w	r3, r3, #32
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d0ee      	beq.n	8006ce2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b084      	sub	sp, #16
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d123      	bne.n	8006d70 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68da      	ldr	r2, [r3, #12]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d36:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006d38:	f7fb fee0 	bl	8002afc <HAL_GetTick>
 8006d3c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006d3e:	e00d      	b.n	8006d5c <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006d40:	f7fb fedc 	bl	8002afc <HAL_GetTick>
 8006d44:	4602      	mov	r2, r0
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d4e:	d905      	bls.n	8006d5c <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2203      	movs	r2, #3
 8006d58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d102      	bne.n	8006d70 <RTC_EnterInitMode+0x62>
 8006d6a:	7bfb      	ldrb	r3, [r7, #15]
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d1e7      	bne.n	8006d40 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8006d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d94:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	f003 0320 	and.w	r3, r3, #32
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10c      	bne.n	8006dbe <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f7ff ff8c 	bl	8006cc2 <HAL_RTC_WaitForSynchro>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d022      	beq.n	8006df6 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2203      	movs	r2, #3
 8006db4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	73fb      	strb	r3, [r7, #15]
 8006dbc:	e01b      	b.n	8006df6 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	699a      	ldr	r2, [r3, #24]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f022 0220 	bic.w	r2, r2, #32
 8006dcc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7ff ff77 	bl	8006cc2 <HAL_RTC_WaitForSynchro>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d005      	beq.n	8006de6 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2203      	movs	r2, #3
 8006dde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	699a      	ldr	r2, [r3, #24]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f042 0220 	orr.w	r2, r2, #32
 8006df4:	619a      	str	r2, [r3, #24]
  }

  return status;
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	4603      	mov	r3, r0
 8006e08:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006e0e:	79fb      	ldrb	r3, [r7, #7]
 8006e10:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006e12:	e005      	b.n	8006e20 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3301      	adds	r3, #1
 8006e18:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006e1a:	7afb      	ldrb	r3, [r7, #11]
 8006e1c:	3b0a      	subs	r3, #10
 8006e1e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006e20:	7afb      	ldrb	r3, [r7, #11]
 8006e22:	2b09      	cmp	r3, #9
 8006e24:	d8f6      	bhi.n	8006e14 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	011b      	lsls	r3, r3, #4
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	7afb      	ldrb	r3, [r7, #11]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	b2db      	uxtb	r3, r3
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3714      	adds	r7, #20
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e09d      	b.n	8006f8e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d108      	bne.n	8006e6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e62:	d009      	beq.n	8006e78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	61da      	str	r2, [r3, #28]
 8006e6a:	e005      	b.n	8006e78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d106      	bne.n	8006e98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7fb fc64 	bl	8002760 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006eb8:	d902      	bls.n	8006ec0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60fb      	str	r3, [r7, #12]
 8006ebe:	e002      	b.n	8006ec6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ec4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006ece:	d007      	beq.n	8006ee0 <HAL_SPI_Init+0xa0>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ed8:	d002      	beq.n	8006ee0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	431a      	orrs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	431a      	orrs	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f22:	ea42 0103 	orr.w	r1, r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	0c1b      	lsrs	r3, r3, #16
 8006f3c:	f003 0204 	and.w	r2, r3, #4
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f44:	f003 0310 	and.w	r3, r3, #16
 8006f48:	431a      	orrs	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4e:	f003 0308 	and.w	r3, r3, #8
 8006f52:	431a      	orrs	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006f5c:	ea42 0103 	orr.w	r1, r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	69da      	ldr	r2, [r3, #28]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b088      	sub	sp, #32
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	60f8      	str	r0, [r7, #12]
 8006f9e:	60b9      	str	r1, [r7, #8]
 8006fa0:	603b      	str	r3, [r7, #0]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d101      	bne.n	8006fb8 <HAL_SPI_Transmit+0x22>
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	e158      	b.n	800726a <HAL_SPI_Transmit+0x2d4>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fc0:	f7fb fd9c 	bl	8002afc <HAL_GetTick>
 8006fc4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006fc6:	88fb      	ldrh	r3, [r7, #6]
 8006fc8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d002      	beq.n	8006fdc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fda:	e13d      	b.n	8007258 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d002      	beq.n	8006fe8 <HAL_SPI_Transmit+0x52>
 8006fe2:	88fb      	ldrh	r3, [r7, #6]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d102      	bne.n	8006fee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fec:	e134      	b.n	8007258 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2203      	movs	r2, #3
 8006ff2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	88fa      	ldrh	r2, [r7, #6]
 8007006:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	88fa      	ldrh	r2, [r7, #6]
 800700c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007038:	d10f      	bne.n	800705a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007048:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007058:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007064:	2b40      	cmp	r3, #64	; 0x40
 8007066:	d007      	beq.n	8007078 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007076:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007080:	d94b      	bls.n	800711a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d002      	beq.n	8007090 <HAL_SPI_Transmit+0xfa>
 800708a:	8afb      	ldrh	r3, [r7, #22]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d13e      	bne.n	800710e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007094:	881a      	ldrh	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a0:	1c9a      	adds	r2, r3, #2
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	3b01      	subs	r3, #1
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80070b4:	e02b      	b.n	800710e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f003 0302 	and.w	r3, r3, #2
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d112      	bne.n	80070ea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c8:	881a      	ldrh	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d4:	1c9a      	adds	r2, r3, #2
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070de:	b29b      	uxth	r3, r3
 80070e0:	3b01      	subs	r3, #1
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070e8:	e011      	b.n	800710e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070ea:	f7fb fd07 	bl	8002afc <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d803      	bhi.n	8007102 <HAL_SPI_Transmit+0x16c>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007100:	d102      	bne.n	8007108 <HAL_SPI_Transmit+0x172>
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d102      	bne.n	800710e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800710c:	e0a4      	b.n	8007258 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007112:	b29b      	uxth	r3, r3
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1ce      	bne.n	80070b6 <HAL_SPI_Transmit+0x120>
 8007118:	e07c      	b.n	8007214 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d002      	beq.n	8007128 <HAL_SPI_Transmit+0x192>
 8007122:	8afb      	ldrh	r3, [r7, #22]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d170      	bne.n	800720a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800712c:	b29b      	uxth	r3, r3
 800712e:	2b01      	cmp	r3, #1
 8007130:	d912      	bls.n	8007158 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007136:	881a      	ldrh	r2, [r3, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007142:	1c9a      	adds	r2, r3, #2
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800714c:	b29b      	uxth	r3, r3
 800714e:	3b02      	subs	r3, #2
 8007150:	b29a      	uxth	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007156:	e058      	b.n	800720a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	330c      	adds	r3, #12
 8007162:	7812      	ldrb	r2, [r2, #0]
 8007164:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716a:	1c5a      	adds	r2, r3, #1
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007174:	b29b      	uxth	r3, r3
 8007176:	3b01      	subs	r3, #1
 8007178:	b29a      	uxth	r2, r3
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800717e:	e044      	b.n	800720a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	2b02      	cmp	r3, #2
 800718c:	d12b      	bne.n	80071e6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007192:	b29b      	uxth	r3, r3
 8007194:	2b01      	cmp	r3, #1
 8007196:	d912      	bls.n	80071be <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719c:	881a      	ldrh	r2, [r3, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a8:	1c9a      	adds	r2, r3, #2
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	3b02      	subs	r3, #2
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071bc:	e025      	b.n	800720a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	330c      	adds	r3, #12
 80071c8:	7812      	ldrb	r2, [r2, #0]
 80071ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d0:	1c5a      	adds	r2, r3, #1
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071da:	b29b      	uxth	r3, r3
 80071dc:	3b01      	subs	r3, #1
 80071de:	b29a      	uxth	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071e4:	e011      	b.n	800720a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071e6:	f7fb fc89 	bl	8002afc <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d803      	bhi.n	80071fe <HAL_SPI_Transmit+0x268>
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fc:	d102      	bne.n	8007204 <HAL_SPI_Transmit+0x26e>
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d102      	bne.n	800720a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007208:	e026      	b.n	8007258 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800720e:	b29b      	uxth	r3, r3
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1b5      	bne.n	8007180 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007214:	69ba      	ldr	r2, [r7, #24]
 8007216:	6839      	ldr	r1, [r7, #0]
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 fce3 	bl	8007be4 <SPI_EndRxTxTransaction>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2220      	movs	r2, #32
 8007228:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10a      	bne.n	8007248 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007232:	2300      	movs	r3, #0
 8007234:	613b      	str	r3, [r7, #16]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	613b      	str	r3, [r7, #16]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	613b      	str	r3, [r7, #16]
 8007246:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800724c:	2b00      	cmp	r3, #0
 800724e:	d002      	beq.n	8007256 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	77fb      	strb	r3, [r7, #31]
 8007254:	e000      	b.n	8007258 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007256:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007268:	7ffb      	ldrb	r3, [r7, #31]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3720      	adds	r7, #32
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b088      	sub	sp, #32
 8007276:	af02      	add	r7, sp, #8
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	60b9      	str	r1, [r7, #8]
 800727c:	603b      	str	r3, [r7, #0]
 800727e:	4613      	mov	r3, r2
 8007280:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800728e:	d112      	bne.n	80072b6 <HAL_SPI_Receive+0x44>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10e      	bne.n	80072b6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2204      	movs	r2, #4
 800729c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80072a0:	88fa      	ldrh	r2, [r7, #6]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	4613      	mov	r3, r2
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	68b9      	ldr	r1, [r7, #8]
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 f910 	bl	80074d2 <HAL_SPI_TransmitReceive>
 80072b2:	4603      	mov	r3, r0
 80072b4:	e109      	b.n	80074ca <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d101      	bne.n	80072c4 <HAL_SPI_Receive+0x52>
 80072c0:	2302      	movs	r3, #2
 80072c2:	e102      	b.n	80074ca <HAL_SPI_Receive+0x258>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072cc:	f7fb fc16 	bl	8002afc <HAL_GetTick>
 80072d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d002      	beq.n	80072e4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80072de:	2302      	movs	r3, #2
 80072e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072e2:	e0e9      	b.n	80074b8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d002      	beq.n	80072f0 <HAL_SPI_Receive+0x7e>
 80072ea:	88fb      	ldrh	r3, [r7, #6]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d102      	bne.n	80072f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072f4:	e0e0      	b.n	80074b8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2204      	movs	r2, #4
 80072fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	88fa      	ldrh	r2, [r7, #6]
 800730e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	88fa      	ldrh	r2, [r7, #6]
 8007316:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007340:	d908      	bls.n	8007354 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	685a      	ldr	r2, [r3, #4]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007350:	605a      	str	r2, [r3, #4]
 8007352:	e007      	b.n	8007364 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007362:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800736c:	d10f      	bne.n	800738e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800737c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800738c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007398:	2b40      	cmp	r3, #64	; 0x40
 800739a:	d007      	beq.n	80073ac <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073b4:	d867      	bhi.n	8007486 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80073b6:	e030      	b.n	800741a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d117      	bne.n	80073f6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f103 020c 	add.w	r2, r3, #12
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d2:	7812      	ldrb	r2, [r2, #0]
 80073d4:	b2d2      	uxtb	r2, r2
 80073d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073dc:	1c5a      	adds	r2, r3, #1
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	3b01      	subs	r3, #1
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80073f4:	e011      	b.n	800741a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073f6:	f7fb fb81 	bl	8002afc <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	429a      	cmp	r2, r3
 8007404:	d803      	bhi.n	800740e <HAL_SPI_Receive+0x19c>
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740c:	d102      	bne.n	8007414 <HAL_SPI_Receive+0x1a2>
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d102      	bne.n	800741a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8007414:	2303      	movs	r3, #3
 8007416:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007418:	e04e      	b.n	80074b8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007420:	b29b      	uxth	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1c8      	bne.n	80073b8 <HAL_SPI_Receive+0x146>
 8007426:	e034      	b.n	8007492 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b01      	cmp	r3, #1
 8007434:	d115      	bne.n	8007462 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68da      	ldr	r2, [r3, #12]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007440:	b292      	uxth	r2, r2
 8007442:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007448:	1c9a      	adds	r2, r3, #2
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007454:	b29b      	uxth	r3, r3
 8007456:	3b01      	subs	r3, #1
 8007458:	b29a      	uxth	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007460:	e011      	b.n	8007486 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007462:	f7fb fb4b 	bl	8002afc <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d803      	bhi.n	800747a <HAL_SPI_Receive+0x208>
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007478:	d102      	bne.n	8007480 <HAL_SPI_Receive+0x20e>
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d102      	bne.n	8007486 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007484:	e018      	b.n	80074b8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800748c:	b29b      	uxth	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1ca      	bne.n	8007428 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 fb4c 	bl	8007b34 <SPI_EndRxTransaction>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2220      	movs	r2, #32
 80074a6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d002      	beq.n	80074b6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	75fb      	strb	r3, [r7, #23]
 80074b4:	e000      	b.n	80074b8 <HAL_SPI_Receive+0x246>
  }

error :
 80074b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80074c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b08a      	sub	sp, #40	; 0x28
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	60f8      	str	r0, [r7, #12]
 80074da:	60b9      	str	r1, [r7, #8]
 80074dc:	607a      	str	r2, [r7, #4]
 80074de:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80074e0:	2301      	movs	r3, #1
 80074e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80074e4:	2300      	movs	r3, #0
 80074e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d101      	bne.n	80074f8 <HAL_SPI_TransmitReceive+0x26>
 80074f4:	2302      	movs	r3, #2
 80074f6:	e1fb      	b.n	80078f0 <HAL_SPI_TransmitReceive+0x41e>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007500:	f7fb fafc 	bl	8002afc <HAL_GetTick>
 8007504:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800750c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007514:	887b      	ldrh	r3, [r7, #2]
 8007516:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007518:	887b      	ldrh	r3, [r7, #2]
 800751a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800751c:	7efb      	ldrb	r3, [r7, #27]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d00e      	beq.n	8007540 <HAL_SPI_TransmitReceive+0x6e>
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007528:	d106      	bne.n	8007538 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d102      	bne.n	8007538 <HAL_SPI_TransmitReceive+0x66>
 8007532:	7efb      	ldrb	r3, [r7, #27]
 8007534:	2b04      	cmp	r3, #4
 8007536:	d003      	beq.n	8007540 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007538:	2302      	movs	r3, #2
 800753a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800753e:	e1cd      	b.n	80078dc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d005      	beq.n	8007552 <HAL_SPI_TransmitReceive+0x80>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d002      	beq.n	8007552 <HAL_SPI_TransmitReceive+0x80>
 800754c:	887b      	ldrh	r3, [r7, #2]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d103      	bne.n	800755a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007558:	e1c0      	b.n	80078dc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b04      	cmp	r3, #4
 8007564:	d003      	beq.n	800756e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2205      	movs	r2, #5
 800756a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	887a      	ldrh	r2, [r7, #2]
 800757e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	887a      	ldrh	r2, [r7, #2]
 8007586:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	887a      	ldrh	r2, [r7, #2]
 8007594:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	887a      	ldrh	r2, [r7, #2]
 800759a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075b0:	d802      	bhi.n	80075b8 <HAL_SPI_TransmitReceive+0xe6>
 80075b2:	8a3b      	ldrh	r3, [r7, #16]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d908      	bls.n	80075ca <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685a      	ldr	r2, [r3, #4]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80075c6:	605a      	str	r2, [r3, #4]
 80075c8:	e007      	b.n	80075da <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075d8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e4:	2b40      	cmp	r3, #64	; 0x40
 80075e6:	d007      	beq.n	80075f8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007600:	d97c      	bls.n	80076fc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d002      	beq.n	8007610 <HAL_SPI_TransmitReceive+0x13e>
 800760a:	8a7b      	ldrh	r3, [r7, #18]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d169      	bne.n	80076e4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007614:	881a      	ldrh	r2, [r3, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007620:	1c9a      	adds	r2, r3, #2
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800762a:	b29b      	uxth	r3, r3
 800762c:	3b01      	subs	r3, #1
 800762e:	b29a      	uxth	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007634:	e056      	b.n	80076e4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f003 0302 	and.w	r3, r3, #2
 8007640:	2b02      	cmp	r3, #2
 8007642:	d11b      	bne.n	800767c <HAL_SPI_TransmitReceive+0x1aa>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007648:	b29b      	uxth	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d016      	beq.n	800767c <HAL_SPI_TransmitReceive+0x1aa>
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	2b01      	cmp	r3, #1
 8007652:	d113      	bne.n	800767c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007658:	881a      	ldrh	r2, [r3, #0]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007664:	1c9a      	adds	r2, r3, #2
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800766e:	b29b      	uxth	r3, r3
 8007670:	3b01      	subs	r3, #1
 8007672:	b29a      	uxth	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	2b01      	cmp	r3, #1
 8007688:	d11c      	bne.n	80076c4 <HAL_SPI_TransmitReceive+0x1f2>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007690:	b29b      	uxth	r3, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	d016      	beq.n	80076c4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68da      	ldr	r2, [r3, #12]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a0:	b292      	uxth	r2, r2
 80076a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a8:	1c9a      	adds	r2, r3, #2
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	3b01      	subs	r3, #1
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076c0:	2301      	movs	r3, #1
 80076c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80076c4:	f7fb fa1a 	bl	8002afc <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d807      	bhi.n	80076e4 <HAL_SPI_TransmitReceive+0x212>
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076da:	d003      	beq.n	80076e4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80076e2:	e0fb      	b.n	80078dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1a3      	bne.n	8007636 <HAL_SPI_TransmitReceive+0x164>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d19d      	bne.n	8007636 <HAL_SPI_TransmitReceive+0x164>
 80076fa:	e0df      	b.n	80078bc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d003      	beq.n	800770c <HAL_SPI_TransmitReceive+0x23a>
 8007704:	8a7b      	ldrh	r3, [r7, #18]
 8007706:	2b01      	cmp	r3, #1
 8007708:	f040 80cb 	bne.w	80078a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007710:	b29b      	uxth	r3, r3
 8007712:	2b01      	cmp	r3, #1
 8007714:	d912      	bls.n	800773c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771a:	881a      	ldrh	r2, [r3, #0]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007726:	1c9a      	adds	r2, r3, #2
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007730:	b29b      	uxth	r3, r3
 8007732:	3b02      	subs	r3, #2
 8007734:	b29a      	uxth	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	87da      	strh	r2, [r3, #62]	; 0x3e
 800773a:	e0b2      	b.n	80078a2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	330c      	adds	r3, #12
 8007746:	7812      	ldrb	r2, [r2, #0]
 8007748:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800774e:	1c5a      	adds	r2, r3, #1
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007758:	b29b      	uxth	r3, r3
 800775a:	3b01      	subs	r3, #1
 800775c:	b29a      	uxth	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007762:	e09e      	b.n	80078a2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f003 0302 	and.w	r3, r3, #2
 800776e:	2b02      	cmp	r3, #2
 8007770:	d134      	bne.n	80077dc <HAL_SPI_TransmitReceive+0x30a>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007776:	b29b      	uxth	r3, r3
 8007778:	2b00      	cmp	r3, #0
 800777a:	d02f      	beq.n	80077dc <HAL_SPI_TransmitReceive+0x30a>
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	2b01      	cmp	r3, #1
 8007780:	d12c      	bne.n	80077dc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007786:	b29b      	uxth	r3, r3
 8007788:	2b01      	cmp	r3, #1
 800778a:	d912      	bls.n	80077b2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007790:	881a      	ldrh	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779c:	1c9a      	adds	r2, r3, #2
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	3b02      	subs	r3, #2
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077b0:	e012      	b.n	80077d8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	330c      	adds	r3, #12
 80077bc:	7812      	ldrb	r2, [r2, #0]
 80077be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c4:	1c5a      	adds	r2, r3, #1
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	3b01      	subs	r3, #1
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077d8:	2300      	movs	r3, #0
 80077da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d148      	bne.n	800787c <HAL_SPI_TransmitReceive+0x3aa>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d042      	beq.n	800787c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d923      	bls.n	800784a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68da      	ldr	r2, [r3, #12]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780c:	b292      	uxth	r2, r2
 800780e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007814:	1c9a      	adds	r2, r3, #2
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007820:	b29b      	uxth	r3, r3
 8007822:	3b02      	subs	r3, #2
 8007824:	b29a      	uxth	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007832:	b29b      	uxth	r3, r3
 8007834:	2b01      	cmp	r3, #1
 8007836:	d81f      	bhi.n	8007878 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007846:	605a      	str	r2, [r3, #4]
 8007848:	e016      	b.n	8007878 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f103 020c 	add.w	r2, r3, #12
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007856:	7812      	ldrb	r2, [r2, #0]
 8007858:	b2d2      	uxtb	r2, r2
 800785a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007860:	1c5a      	adds	r2, r3, #1
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800786c:	b29b      	uxth	r3, r3
 800786e:	3b01      	subs	r3, #1
 8007870:	b29a      	uxth	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007878:	2301      	movs	r3, #1
 800787a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800787c:	f7fb f93e 	bl	8002afc <HAL_GetTick>
 8007880:	4602      	mov	r2, r0
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007888:	429a      	cmp	r2, r3
 800788a:	d803      	bhi.n	8007894 <HAL_SPI_TransmitReceive+0x3c2>
 800788c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007892:	d102      	bne.n	800789a <HAL_SPI_TransmitReceive+0x3c8>
 8007894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007896:	2b00      	cmp	r3, #0
 8007898:	d103      	bne.n	80078a2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80078a0:	e01c      	b.n	80078dc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f47f af5b 	bne.w	8007764 <HAL_SPI_TransmitReceive+0x292>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f47f af54 	bne.w	8007764 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078bc:	69fa      	ldr	r2, [r7, #28]
 80078be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f000 f98f 	bl	8007be4 <SPI_EndRxTxTransaction>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d006      	beq.n	80078da <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2220      	movs	r2, #32
 80078d6:	661a      	str	r2, [r3, #96]	; 0x60
 80078d8:	e000      	b.n	80078dc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80078da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80078ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3728      	adds	r7, #40	; 0x28
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b088      	sub	sp, #32
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	603b      	str	r3, [r7, #0]
 8007904:	4613      	mov	r3, r2
 8007906:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007908:	f7fb f8f8 	bl	8002afc <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007910:	1a9b      	subs	r3, r3, r2
 8007912:	683a      	ldr	r2, [r7, #0]
 8007914:	4413      	add	r3, r2
 8007916:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007918:	f7fb f8f0 	bl	8002afc <HAL_GetTick>
 800791c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800791e:	4b39      	ldr	r3, [pc, #228]	; (8007a04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	015b      	lsls	r3, r3, #5
 8007924:	0d1b      	lsrs	r3, r3, #20
 8007926:	69fa      	ldr	r2, [r7, #28]
 8007928:	fb02 f303 	mul.w	r3, r2, r3
 800792c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800792e:	e054      	b.n	80079da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007936:	d050      	beq.n	80079da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007938:	f7fb f8e0 	bl	8002afc <HAL_GetTick>
 800793c:	4602      	mov	r2, r0
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	69fa      	ldr	r2, [r7, #28]
 8007944:	429a      	cmp	r2, r3
 8007946:	d902      	bls.n	800794e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d13d      	bne.n	80079ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800795c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007966:	d111      	bne.n	800798c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007970:	d004      	beq.n	800797c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800797a:	d107      	bne.n	800798c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800798a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007994:	d10f      	bne.n	80079b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e017      	b.n	80079fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80079d0:	2300      	movs	r3, #0
 80079d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	4013      	ands	r3, r2
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	bf0c      	ite	eq
 80079ea:	2301      	moveq	r3, #1
 80079ec:	2300      	movne	r3, #0
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	461a      	mov	r2, r3
 80079f2:	79fb      	ldrb	r3, [r7, #7]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d19b      	bne.n	8007930 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3720      	adds	r7, #32
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	20000004 	.word	0x20000004

08007a08 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08a      	sub	sp, #40	; 0x28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
 8007a14:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007a16:	2300      	movs	r3, #0
 8007a18:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007a1a:	f7fb f86f 	bl	8002afc <HAL_GetTick>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	1a9b      	subs	r3, r3, r2
 8007a24:	683a      	ldr	r2, [r7, #0]
 8007a26:	4413      	add	r3, r2
 8007a28:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007a2a:	f7fb f867 	bl	8002afc <HAL_GetTick>
 8007a2e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	330c      	adds	r3, #12
 8007a36:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007a38:	4b3d      	ldr	r3, [pc, #244]	; (8007b30 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	00da      	lsls	r2, r3, #3
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	0d1b      	lsrs	r3, r3, #20
 8007a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a4a:	fb02 f303 	mul.w	r3, r2, r3
 8007a4e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007a50:	e060      	b.n	8007b14 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007a58:	d107      	bne.n	8007a6a <SPI_WaitFifoStateUntilTimeout+0x62>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d104      	bne.n	8007a6a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007a68:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a70:	d050      	beq.n	8007b14 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a72:	f7fb f843 	bl	8002afc <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d902      	bls.n	8007a88 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d13d      	bne.n	8007b04 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	685a      	ldr	r2, [r3, #4]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007aa0:	d111      	bne.n	8007ac6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aaa:	d004      	beq.n	8007ab6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ab4:	d107      	bne.n	8007ac6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ac4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ace:	d10f      	bne.n	8007af0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007aee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e010      	b.n	8007b26 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d101      	bne.n	8007b0e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	3b01      	subs	r3, #1
 8007b12:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	689a      	ldr	r2, [r3, #8]
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d196      	bne.n	8007a52 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3728      	adds	r7, #40	; 0x28
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	20000004 	.word	0x20000004

08007b34 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af02      	add	r7, sp, #8
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b48:	d111      	bne.n	8007b6e <SPI_EndRxTransaction+0x3a>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b52:	d004      	beq.n	8007b5e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b5c:	d107      	bne.n	8007b6e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b6c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2200      	movs	r2, #0
 8007b76:	2180      	movs	r1, #128	; 0x80
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f7ff febd 	bl	80078f8 <SPI_WaitFlagStateUntilTimeout>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d007      	beq.n	8007b94 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b88:	f043 0220 	orr.w	r2, r3, #32
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e023      	b.n	8007bdc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b9c:	d11d      	bne.n	8007bda <SPI_EndRxTransaction+0xa6>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ba6:	d004      	beq.n	8007bb2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bb0:	d113      	bne.n	8007bda <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f7ff ff22 	bl	8007a08 <SPI_WaitFifoStateUntilTimeout>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d007      	beq.n	8007bda <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bce:	f043 0220 	orr.w	r2, r3, #32
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e000      	b.n	8007bdc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af02      	add	r7, sp, #8
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f7ff ff03 	bl	8007a08 <SPI_WaitFifoStateUntilTimeout>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d007      	beq.n	8007c18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c0c:	f043 0220 	orr.w	r2, r3, #32
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e027      	b.n	8007c68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	2180      	movs	r1, #128	; 0x80
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f7ff fe68 	bl	80078f8 <SPI_WaitFlagStateUntilTimeout>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d007      	beq.n	8007c3e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c32:	f043 0220 	orr.w	r2, r3, #32
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e014      	b.n	8007c68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f7ff fedc 	bl	8007a08 <SPI_WaitFifoStateUntilTimeout>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d007      	beq.n	8007c66 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c5a:	f043 0220 	orr.w	r2, r3, #32
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e000      	b.n	8007c68 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e049      	b.n	8007d16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d106      	bne.n	8007c9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7fa fda6 	bl	80027e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	3304      	adds	r3, #4
 8007cac:	4619      	mov	r1, r3
 8007cae:	4610      	mov	r0, r2
 8007cb0:	f001 f952 	bl	8008f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b082      	sub	sp, #8
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d101      	bne.n	8007d30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e049      	b.n	8007dc4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d106      	bne.n	8007d4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 f841 	bl	8007dcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	3304      	adds	r3, #4
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	f001 f8fb 	bl	8008f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d109      	bne.n	8007e04 <HAL_TIM_PWM_Start+0x24>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	bf14      	ite	ne
 8007dfc:	2301      	movne	r3, #1
 8007dfe:	2300      	moveq	r3, #0
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	e03c      	b.n	8007e7e <HAL_TIM_PWM_Start+0x9e>
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	2b04      	cmp	r3, #4
 8007e08:	d109      	bne.n	8007e1e <HAL_TIM_PWM_Start+0x3e>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	bf14      	ite	ne
 8007e16:	2301      	movne	r3, #1
 8007e18:	2300      	moveq	r3, #0
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	e02f      	b.n	8007e7e <HAL_TIM_PWM_Start+0x9e>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b08      	cmp	r3, #8
 8007e22:	d109      	bne.n	8007e38 <HAL_TIM_PWM_Start+0x58>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	bf14      	ite	ne
 8007e30:	2301      	movne	r3, #1
 8007e32:	2300      	moveq	r3, #0
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	e022      	b.n	8007e7e <HAL_TIM_PWM_Start+0x9e>
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	2b0c      	cmp	r3, #12
 8007e3c:	d109      	bne.n	8007e52 <HAL_TIM_PWM_Start+0x72>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	bf14      	ite	ne
 8007e4a:	2301      	movne	r3, #1
 8007e4c:	2300      	moveq	r3, #0
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	e015      	b.n	8007e7e <HAL_TIM_PWM_Start+0x9e>
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b10      	cmp	r3, #16
 8007e56:	d109      	bne.n	8007e6c <HAL_TIM_PWM_Start+0x8c>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	bf14      	ite	ne
 8007e64:	2301      	movne	r3, #1
 8007e66:	2300      	moveq	r3, #0
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	e008      	b.n	8007e7e <HAL_TIM_PWM_Start+0x9e>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	bf14      	ite	ne
 8007e78:	2301      	movne	r3, #1
 8007e7a:	2300      	moveq	r3, #0
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e0a6      	b.n	8007fd4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d104      	bne.n	8007e96 <HAL_TIM_PWM_Start+0xb6>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2202      	movs	r2, #2
 8007e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e94:	e023      	b.n	8007ede <HAL_TIM_PWM_Start+0xfe>
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	2b04      	cmp	r3, #4
 8007e9a:	d104      	bne.n	8007ea6 <HAL_TIM_PWM_Start+0xc6>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ea4:	e01b      	b.n	8007ede <HAL_TIM_PWM_Start+0xfe>
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	2b08      	cmp	r3, #8
 8007eaa:	d104      	bne.n	8007eb6 <HAL_TIM_PWM_Start+0xd6>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2202      	movs	r2, #2
 8007eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007eb4:	e013      	b.n	8007ede <HAL_TIM_PWM_Start+0xfe>
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	2b0c      	cmp	r3, #12
 8007eba:	d104      	bne.n	8007ec6 <HAL_TIM_PWM_Start+0xe6>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ec4:	e00b      	b.n	8007ede <HAL_TIM_PWM_Start+0xfe>
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	2b10      	cmp	r3, #16
 8007eca:	d104      	bne.n	8007ed6 <HAL_TIM_PWM_Start+0xf6>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2202      	movs	r2, #2
 8007ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ed4:	e003      	b.n	8007ede <HAL_TIM_PWM_Start+0xfe>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2202      	movs	r2, #2
 8007eda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f001 feae 	bl	8009c48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a3a      	ldr	r2, [pc, #232]	; (8007fdc <HAL_TIM_PWM_Start+0x1fc>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d018      	beq.n	8007f28 <HAL_TIM_PWM_Start+0x148>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a39      	ldr	r2, [pc, #228]	; (8007fe0 <HAL_TIM_PWM_Start+0x200>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d013      	beq.n	8007f28 <HAL_TIM_PWM_Start+0x148>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a37      	ldr	r2, [pc, #220]	; (8007fe4 <HAL_TIM_PWM_Start+0x204>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d00e      	beq.n	8007f28 <HAL_TIM_PWM_Start+0x148>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a36      	ldr	r2, [pc, #216]	; (8007fe8 <HAL_TIM_PWM_Start+0x208>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d009      	beq.n	8007f28 <HAL_TIM_PWM_Start+0x148>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a34      	ldr	r2, [pc, #208]	; (8007fec <HAL_TIM_PWM_Start+0x20c>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d004      	beq.n	8007f28 <HAL_TIM_PWM_Start+0x148>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a33      	ldr	r2, [pc, #204]	; (8007ff0 <HAL_TIM_PWM_Start+0x210>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d101      	bne.n	8007f2c <HAL_TIM_PWM_Start+0x14c>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e000      	b.n	8007f2e <HAL_TIM_PWM_Start+0x14e>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d007      	beq.n	8007f42 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a25      	ldr	r2, [pc, #148]	; (8007fdc <HAL_TIM_PWM_Start+0x1fc>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d022      	beq.n	8007f92 <HAL_TIM_PWM_Start+0x1b2>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f54:	d01d      	beq.n	8007f92 <HAL_TIM_PWM_Start+0x1b2>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a26      	ldr	r2, [pc, #152]	; (8007ff4 <HAL_TIM_PWM_Start+0x214>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d018      	beq.n	8007f92 <HAL_TIM_PWM_Start+0x1b2>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a24      	ldr	r2, [pc, #144]	; (8007ff8 <HAL_TIM_PWM_Start+0x218>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d013      	beq.n	8007f92 <HAL_TIM_PWM_Start+0x1b2>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a23      	ldr	r2, [pc, #140]	; (8007ffc <HAL_TIM_PWM_Start+0x21c>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d00e      	beq.n	8007f92 <HAL_TIM_PWM_Start+0x1b2>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a19      	ldr	r2, [pc, #100]	; (8007fe0 <HAL_TIM_PWM_Start+0x200>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d009      	beq.n	8007f92 <HAL_TIM_PWM_Start+0x1b2>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a18      	ldr	r2, [pc, #96]	; (8007fe4 <HAL_TIM_PWM_Start+0x204>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d004      	beq.n	8007f92 <HAL_TIM_PWM_Start+0x1b2>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a18      	ldr	r2, [pc, #96]	; (8007ff0 <HAL_TIM_PWM_Start+0x210>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d115      	bne.n	8007fbe <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	689a      	ldr	r2, [r3, #8]
 8007f98:	4b19      	ldr	r3, [pc, #100]	; (8008000 <HAL_TIM_PWM_Start+0x220>)
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2b06      	cmp	r3, #6
 8007fa2:	d015      	beq.n	8007fd0 <HAL_TIM_PWM_Start+0x1f0>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007faa:	d011      	beq.n	8007fd0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f042 0201 	orr.w	r2, r2, #1
 8007fba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fbc:	e008      	b.n	8007fd0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f042 0201 	orr.w	r2, r2, #1
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	e000      	b.n	8007fd2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	40012c00 	.word	0x40012c00
 8007fe0:	40013400 	.word	0x40013400
 8007fe4:	40014000 	.word	0x40014000
 8007fe8:	40014400 	.word	0x40014400
 8007fec:	40014800 	.word	0x40014800
 8007ff0:	40015000 	.word	0x40015000
 8007ff4:	40000400 	.word	0x40000400
 8007ff8:	40000800 	.word	0x40000800
 8007ffc:	40000c00 	.word	0x40000c00
 8008000:	00010007 	.word	0x00010007

08008004 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d101      	bne.n	8008016 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e049      	b.n	80080aa <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	d106      	bne.n	8008030 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f841 	bl	80080b2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2202      	movs	r2, #2
 8008034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	3304      	adds	r3, #4
 8008040:	4619      	mov	r1, r3
 8008042:	4610      	mov	r0, r2
 8008044:	f000 ff88 	bl	8008f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b083      	sub	sp, #12
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80080ba:	bf00      	nop
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
	...

080080c8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d104      	bne.n	80080e2 <HAL_TIM_IC_Start+0x1a>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	e023      	b.n	800812a <HAL_TIM_IC_Start+0x62>
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b04      	cmp	r3, #4
 80080e6:	d104      	bne.n	80080f2 <HAL_TIM_IC_Start+0x2a>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	e01b      	b.n	800812a <HAL_TIM_IC_Start+0x62>
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	2b08      	cmp	r3, #8
 80080f6:	d104      	bne.n	8008102 <HAL_TIM_IC_Start+0x3a>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	e013      	b.n	800812a <HAL_TIM_IC_Start+0x62>
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b0c      	cmp	r3, #12
 8008106:	d104      	bne.n	8008112 <HAL_TIM_IC_Start+0x4a>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800810e:	b2db      	uxtb	r3, r3
 8008110:	e00b      	b.n	800812a <HAL_TIM_IC_Start+0x62>
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	2b10      	cmp	r3, #16
 8008116:	d104      	bne.n	8008122 <HAL_TIM_IC_Start+0x5a>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800811e:	b2db      	uxtb	r3, r3
 8008120:	e003      	b.n	800812a <HAL_TIM_IC_Start+0x62>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008128:	b2db      	uxtb	r3, r3
 800812a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d104      	bne.n	800813c <HAL_TIM_IC_Start+0x74>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008138:	b2db      	uxtb	r3, r3
 800813a:	e013      	b.n	8008164 <HAL_TIM_IC_Start+0x9c>
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	2b04      	cmp	r3, #4
 8008140:	d104      	bne.n	800814c <HAL_TIM_IC_Start+0x84>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008148:	b2db      	uxtb	r3, r3
 800814a:	e00b      	b.n	8008164 <HAL_TIM_IC_Start+0x9c>
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	2b08      	cmp	r3, #8
 8008150:	d104      	bne.n	800815c <HAL_TIM_IC_Start+0x94>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008158:	b2db      	uxtb	r3, r3
 800815a:	e003      	b.n	8008164 <HAL_TIM_IC_Start+0x9c>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008162:	b2db      	uxtb	r3, r3
 8008164:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008166:	7bfb      	ldrb	r3, [r7, #15]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d102      	bne.n	8008172 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800816c:	7bbb      	ldrb	r3, [r7, #14]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d001      	beq.n	8008176 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e097      	b.n	80082a6 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d104      	bne.n	8008186 <HAL_TIM_IC_Start+0xbe>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2202      	movs	r2, #2
 8008180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008184:	e023      	b.n	80081ce <HAL_TIM_IC_Start+0x106>
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	2b04      	cmp	r3, #4
 800818a:	d104      	bne.n	8008196 <HAL_TIM_IC_Start+0xce>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2202      	movs	r2, #2
 8008190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008194:	e01b      	b.n	80081ce <HAL_TIM_IC_Start+0x106>
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	2b08      	cmp	r3, #8
 800819a:	d104      	bne.n	80081a6 <HAL_TIM_IC_Start+0xde>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2202      	movs	r2, #2
 80081a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081a4:	e013      	b.n	80081ce <HAL_TIM_IC_Start+0x106>
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	2b0c      	cmp	r3, #12
 80081aa:	d104      	bne.n	80081b6 <HAL_TIM_IC_Start+0xee>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2202      	movs	r2, #2
 80081b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081b4:	e00b      	b.n	80081ce <HAL_TIM_IC_Start+0x106>
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	2b10      	cmp	r3, #16
 80081ba:	d104      	bne.n	80081c6 <HAL_TIM_IC_Start+0xfe>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2202      	movs	r2, #2
 80081c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081c4:	e003      	b.n	80081ce <HAL_TIM_IC_Start+0x106>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2202      	movs	r2, #2
 80081ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d104      	bne.n	80081de <HAL_TIM_IC_Start+0x116>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2202      	movs	r2, #2
 80081d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081dc:	e013      	b.n	8008206 <HAL_TIM_IC_Start+0x13e>
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	2b04      	cmp	r3, #4
 80081e2:	d104      	bne.n	80081ee <HAL_TIM_IC_Start+0x126>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2202      	movs	r2, #2
 80081e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081ec:	e00b      	b.n	8008206 <HAL_TIM_IC_Start+0x13e>
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2b08      	cmp	r3, #8
 80081f2:	d104      	bne.n	80081fe <HAL_TIM_IC_Start+0x136>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2202      	movs	r2, #2
 80081f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80081fc:	e003      	b.n	8008206 <HAL_TIM_IC_Start+0x13e>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2202      	movs	r2, #2
 8008202:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2201      	movs	r2, #1
 800820c:	6839      	ldr	r1, [r7, #0]
 800820e:	4618      	mov	r0, r3
 8008210:	f001 fd1a 	bl	8009c48 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a25      	ldr	r2, [pc, #148]	; (80082b0 <HAL_TIM_IC_Start+0x1e8>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d022      	beq.n	8008264 <HAL_TIM_IC_Start+0x19c>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008226:	d01d      	beq.n	8008264 <HAL_TIM_IC_Start+0x19c>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a21      	ldr	r2, [pc, #132]	; (80082b4 <HAL_TIM_IC_Start+0x1ec>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d018      	beq.n	8008264 <HAL_TIM_IC_Start+0x19c>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a20      	ldr	r2, [pc, #128]	; (80082b8 <HAL_TIM_IC_Start+0x1f0>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d013      	beq.n	8008264 <HAL_TIM_IC_Start+0x19c>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a1e      	ldr	r2, [pc, #120]	; (80082bc <HAL_TIM_IC_Start+0x1f4>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d00e      	beq.n	8008264 <HAL_TIM_IC_Start+0x19c>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a1d      	ldr	r2, [pc, #116]	; (80082c0 <HAL_TIM_IC_Start+0x1f8>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d009      	beq.n	8008264 <HAL_TIM_IC_Start+0x19c>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a1b      	ldr	r2, [pc, #108]	; (80082c4 <HAL_TIM_IC_Start+0x1fc>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d004      	beq.n	8008264 <HAL_TIM_IC_Start+0x19c>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a1a      	ldr	r2, [pc, #104]	; (80082c8 <HAL_TIM_IC_Start+0x200>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d115      	bne.n	8008290 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	689a      	ldr	r2, [r3, #8]
 800826a:	4b18      	ldr	r3, [pc, #96]	; (80082cc <HAL_TIM_IC_Start+0x204>)
 800826c:	4013      	ands	r3, r2
 800826e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2b06      	cmp	r3, #6
 8008274:	d015      	beq.n	80082a2 <HAL_TIM_IC_Start+0x1da>
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800827c:	d011      	beq.n	80082a2 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f042 0201 	orr.w	r2, r2, #1
 800828c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800828e:	e008      	b.n	80082a2 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f042 0201 	orr.w	r2, r2, #1
 800829e:	601a      	str	r2, [r3, #0]
 80082a0:	e000      	b.n	80082a4 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	40012c00 	.word	0x40012c00
 80082b4:	40000400 	.word	0x40000400
 80082b8:	40000800 	.word	0x40000800
 80082bc:	40000c00 	.word	0x40000c00
 80082c0:	40013400 	.word	0x40013400
 80082c4:	40014000 	.word	0x40014000
 80082c8:	40015000 	.word	0x40015000
 80082cc:	00010007 	.word	0x00010007

080082d0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d104      	bne.n	80082ee <HAL_TIM_IC_Start_IT+0x1e>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	e023      	b.n	8008336 <HAL_TIM_IC_Start_IT+0x66>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2b04      	cmp	r3, #4
 80082f2:	d104      	bne.n	80082fe <HAL_TIM_IC_Start_IT+0x2e>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	e01b      	b.n	8008336 <HAL_TIM_IC_Start_IT+0x66>
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	2b08      	cmp	r3, #8
 8008302:	d104      	bne.n	800830e <HAL_TIM_IC_Start_IT+0x3e>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800830a:	b2db      	uxtb	r3, r3
 800830c:	e013      	b.n	8008336 <HAL_TIM_IC_Start_IT+0x66>
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	2b0c      	cmp	r3, #12
 8008312:	d104      	bne.n	800831e <HAL_TIM_IC_Start_IT+0x4e>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800831a:	b2db      	uxtb	r3, r3
 800831c:	e00b      	b.n	8008336 <HAL_TIM_IC_Start_IT+0x66>
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	2b10      	cmp	r3, #16
 8008322:	d104      	bne.n	800832e <HAL_TIM_IC_Start_IT+0x5e>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800832a:	b2db      	uxtb	r3, r3
 800832c:	e003      	b.n	8008336 <HAL_TIM_IC_Start_IT+0x66>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008334:	b2db      	uxtb	r3, r3
 8008336:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d104      	bne.n	8008348 <HAL_TIM_IC_Start_IT+0x78>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008344:	b2db      	uxtb	r3, r3
 8008346:	e013      	b.n	8008370 <HAL_TIM_IC_Start_IT+0xa0>
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	2b04      	cmp	r3, #4
 800834c:	d104      	bne.n	8008358 <HAL_TIM_IC_Start_IT+0x88>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008354:	b2db      	uxtb	r3, r3
 8008356:	e00b      	b.n	8008370 <HAL_TIM_IC_Start_IT+0xa0>
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	2b08      	cmp	r3, #8
 800835c:	d104      	bne.n	8008368 <HAL_TIM_IC_Start_IT+0x98>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008364:	b2db      	uxtb	r3, r3
 8008366:	e003      	b.n	8008370 <HAL_TIM_IC_Start_IT+0xa0>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800836e:	b2db      	uxtb	r3, r3
 8008370:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008372:	7bbb      	ldrb	r3, [r7, #14]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d102      	bne.n	800837e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008378:	7b7b      	ldrb	r3, [r7, #13]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d001      	beq.n	8008382 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e0e2      	b.n	8008548 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d104      	bne.n	8008392 <HAL_TIM_IC_Start_IT+0xc2>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2202      	movs	r2, #2
 800838c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008390:	e023      	b.n	80083da <HAL_TIM_IC_Start_IT+0x10a>
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b04      	cmp	r3, #4
 8008396:	d104      	bne.n	80083a2 <HAL_TIM_IC_Start_IT+0xd2>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2202      	movs	r2, #2
 800839c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083a0:	e01b      	b.n	80083da <HAL_TIM_IC_Start_IT+0x10a>
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	2b08      	cmp	r3, #8
 80083a6:	d104      	bne.n	80083b2 <HAL_TIM_IC_Start_IT+0xe2>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2202      	movs	r2, #2
 80083ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083b0:	e013      	b.n	80083da <HAL_TIM_IC_Start_IT+0x10a>
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	2b0c      	cmp	r3, #12
 80083b6:	d104      	bne.n	80083c2 <HAL_TIM_IC_Start_IT+0xf2>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2202      	movs	r2, #2
 80083bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083c0:	e00b      	b.n	80083da <HAL_TIM_IC_Start_IT+0x10a>
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b10      	cmp	r3, #16
 80083c6:	d104      	bne.n	80083d2 <HAL_TIM_IC_Start_IT+0x102>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2202      	movs	r2, #2
 80083cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083d0:	e003      	b.n	80083da <HAL_TIM_IC_Start_IT+0x10a>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2202      	movs	r2, #2
 80083d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d104      	bne.n	80083ea <HAL_TIM_IC_Start_IT+0x11a>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2202      	movs	r2, #2
 80083e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083e8:	e013      	b.n	8008412 <HAL_TIM_IC_Start_IT+0x142>
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	2b04      	cmp	r3, #4
 80083ee:	d104      	bne.n	80083fa <HAL_TIM_IC_Start_IT+0x12a>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2202      	movs	r2, #2
 80083f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083f8:	e00b      	b.n	8008412 <HAL_TIM_IC_Start_IT+0x142>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	2b08      	cmp	r3, #8
 80083fe:	d104      	bne.n	800840a <HAL_TIM_IC_Start_IT+0x13a>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2202      	movs	r2, #2
 8008404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008408:	e003      	b.n	8008412 <HAL_TIM_IC_Start_IT+0x142>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2202      	movs	r2, #2
 800840e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2b0c      	cmp	r3, #12
 8008416:	d841      	bhi.n	800849c <HAL_TIM_IC_Start_IT+0x1cc>
 8008418:	a201      	add	r2, pc, #4	; (adr r2, 8008420 <HAL_TIM_IC_Start_IT+0x150>)
 800841a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841e:	bf00      	nop
 8008420:	08008455 	.word	0x08008455
 8008424:	0800849d 	.word	0x0800849d
 8008428:	0800849d 	.word	0x0800849d
 800842c:	0800849d 	.word	0x0800849d
 8008430:	08008467 	.word	0x08008467
 8008434:	0800849d 	.word	0x0800849d
 8008438:	0800849d 	.word	0x0800849d
 800843c:	0800849d 	.word	0x0800849d
 8008440:	08008479 	.word	0x08008479
 8008444:	0800849d 	.word	0x0800849d
 8008448:	0800849d 	.word	0x0800849d
 800844c:	0800849d 	.word	0x0800849d
 8008450:	0800848b 	.word	0x0800848b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68da      	ldr	r2, [r3, #12]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f042 0202 	orr.w	r2, r2, #2
 8008462:	60da      	str	r2, [r3, #12]
      break;
 8008464:	e01d      	b.n	80084a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68da      	ldr	r2, [r3, #12]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f042 0204 	orr.w	r2, r2, #4
 8008474:	60da      	str	r2, [r3, #12]
      break;
 8008476:	e014      	b.n	80084a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68da      	ldr	r2, [r3, #12]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f042 0208 	orr.w	r2, r2, #8
 8008486:	60da      	str	r2, [r3, #12]
      break;
 8008488:	e00b      	b.n	80084a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68da      	ldr	r2, [r3, #12]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f042 0210 	orr.w	r2, r2, #16
 8008498:	60da      	str	r2, [r3, #12]
      break;
 800849a:	e002      	b.n	80084a2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	73fb      	strb	r3, [r7, #15]
      break;
 80084a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d14e      	bne.n	8008546 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2201      	movs	r2, #1
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f001 fbc9 	bl	8009c48 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a25      	ldr	r2, [pc, #148]	; (8008550 <HAL_TIM_IC_Start_IT+0x280>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d022      	beq.n	8008506 <HAL_TIM_IC_Start_IT+0x236>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084c8:	d01d      	beq.n	8008506 <HAL_TIM_IC_Start_IT+0x236>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a21      	ldr	r2, [pc, #132]	; (8008554 <HAL_TIM_IC_Start_IT+0x284>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d018      	beq.n	8008506 <HAL_TIM_IC_Start_IT+0x236>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a1f      	ldr	r2, [pc, #124]	; (8008558 <HAL_TIM_IC_Start_IT+0x288>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d013      	beq.n	8008506 <HAL_TIM_IC_Start_IT+0x236>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a1e      	ldr	r2, [pc, #120]	; (800855c <HAL_TIM_IC_Start_IT+0x28c>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d00e      	beq.n	8008506 <HAL_TIM_IC_Start_IT+0x236>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a1c      	ldr	r2, [pc, #112]	; (8008560 <HAL_TIM_IC_Start_IT+0x290>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d009      	beq.n	8008506 <HAL_TIM_IC_Start_IT+0x236>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a1b      	ldr	r2, [pc, #108]	; (8008564 <HAL_TIM_IC_Start_IT+0x294>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d004      	beq.n	8008506 <HAL_TIM_IC_Start_IT+0x236>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a19      	ldr	r2, [pc, #100]	; (8008568 <HAL_TIM_IC_Start_IT+0x298>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d115      	bne.n	8008532 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	689a      	ldr	r2, [r3, #8]
 800850c:	4b17      	ldr	r3, [pc, #92]	; (800856c <HAL_TIM_IC_Start_IT+0x29c>)
 800850e:	4013      	ands	r3, r2
 8008510:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	2b06      	cmp	r3, #6
 8008516:	d015      	beq.n	8008544 <HAL_TIM_IC_Start_IT+0x274>
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800851e:	d011      	beq.n	8008544 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f042 0201 	orr.w	r2, r2, #1
 800852e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008530:	e008      	b.n	8008544 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f042 0201 	orr.w	r2, r2, #1
 8008540:	601a      	str	r2, [r3, #0]
 8008542:	e000      	b.n	8008546 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008544:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008546:	7bfb      	ldrb	r3, [r7, #15]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	40012c00 	.word	0x40012c00
 8008554:	40000400 	.word	0x40000400
 8008558:	40000800 	.word	0x40000800
 800855c:	40000c00 	.word	0x40000c00
 8008560:	40013400 	.word	0x40013400
 8008564:	40014000 	.word	0x40014000
 8008568:	40015000 	.word	0x40015000
 800856c:	00010007 	.word	0x00010007

08008570 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	f003 0302 	and.w	r3, r3, #2
 8008582:	2b02      	cmp	r3, #2
 8008584:	d122      	bne.n	80085cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	f003 0302 	and.w	r3, r3, #2
 8008590:	2b02      	cmp	r3, #2
 8008592:	d11b      	bne.n	80085cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f06f 0202 	mvn.w	r2, #2
 800859c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	f003 0303 	and.w	r3, r3, #3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d003      	beq.n	80085ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7f9 f950 	bl	8001858 <HAL_TIM_IC_CaptureCallback>
 80085b8:	e005      	b.n	80085c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 fcae 	bl	8008f1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 fcb5 	bl	8008f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	f003 0304 	and.w	r3, r3, #4
 80085d6:	2b04      	cmp	r3, #4
 80085d8:	d122      	bne.n	8008620 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	f003 0304 	and.w	r3, r3, #4
 80085e4:	2b04      	cmp	r3, #4
 80085e6:	d11b      	bne.n	8008620 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f06f 0204 	mvn.w	r2, #4
 80085f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2202      	movs	r2, #2
 80085f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008602:	2b00      	cmp	r3, #0
 8008604:	d003      	beq.n	800860e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7f9 f926 	bl	8001858 <HAL_TIM_IC_CaptureCallback>
 800860c:	e005      	b.n	800861a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fc84 	bl	8008f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fc8b 	bl	8008f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	f003 0308 	and.w	r3, r3, #8
 800862a:	2b08      	cmp	r3, #8
 800862c:	d122      	bne.n	8008674 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	f003 0308 	and.w	r3, r3, #8
 8008638:	2b08      	cmp	r3, #8
 800863a:	d11b      	bne.n	8008674 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f06f 0208 	mvn.w	r2, #8
 8008644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2204      	movs	r2, #4
 800864a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	69db      	ldr	r3, [r3, #28]
 8008652:	f003 0303 	and.w	r3, r3, #3
 8008656:	2b00      	cmp	r3, #0
 8008658:	d003      	beq.n	8008662 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7f9 f8fc 	bl	8001858 <HAL_TIM_IC_CaptureCallback>
 8008660:	e005      	b.n	800866e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fc5a 	bl	8008f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fc61 	bl	8008f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	f003 0310 	and.w	r3, r3, #16
 800867e:	2b10      	cmp	r3, #16
 8008680:	d122      	bne.n	80086c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	f003 0310 	and.w	r3, r3, #16
 800868c:	2b10      	cmp	r3, #16
 800868e:	d11b      	bne.n	80086c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f06f 0210 	mvn.w	r2, #16
 8008698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2208      	movs	r2, #8
 800869e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	69db      	ldr	r3, [r3, #28]
 80086a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d003      	beq.n	80086b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7f9 f8d2 	bl	8001858 <HAL_TIM_IC_CaptureCallback>
 80086b4:	e005      	b.n	80086c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fc30 	bl	8008f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fc37 	bl	8008f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d10e      	bne.n	80086f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	f003 0301 	and.w	r3, r3, #1
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d107      	bne.n	80086f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f06f 0201 	mvn.w	r2, #1
 80086ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fc0a 	bl	8008f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086fe:	2b80      	cmp	r3, #128	; 0x80
 8008700:	d10e      	bne.n	8008720 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800870c:	2b80      	cmp	r3, #128	; 0x80
 800870e:	d107      	bne.n	8008720 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f001 fb5a 	bl	8009dd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	691b      	ldr	r3, [r3, #16]
 8008726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800872a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800872e:	d10e      	bne.n	800874e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800873a:	2b80      	cmp	r3, #128	; 0x80
 800873c:	d107      	bne.n	800874e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f001 fb4d 	bl	8009de8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008758:	2b40      	cmp	r3, #64	; 0x40
 800875a:	d10e      	bne.n	800877a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008766:	2b40      	cmp	r3, #64	; 0x40
 8008768:	d107      	bne.n	800877a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 fbe5 	bl	8008f44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	f003 0320 	and.w	r3, r3, #32
 8008784:	2b20      	cmp	r3, #32
 8008786:	d10e      	bne.n	80087a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	f003 0320 	and.w	r3, r3, #32
 8008792:	2b20      	cmp	r3, #32
 8008794:	d107      	bne.n	80087a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f06f 0220 	mvn.w	r2, #32
 800879e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f001 fb0d 	bl	8009dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087b4:	d10f      	bne.n	80087d6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087c4:	d107      	bne.n	80087d6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80087ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f001 fb13 	bl	8009dfc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087e4:	d10f      	bne.n	8008806 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087f4:	d107      	bne.n	8008806 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80087fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f001 fb05 	bl	8009e10 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008810:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008814:	d10f      	bne.n	8008836 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008820:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008824:	d107      	bne.n	8008836 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800882e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f001 faf7 	bl	8009e24 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008840:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008844:	d10f      	bne.n	8008866 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008850:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008854:	d107      	bne.n	8008866 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800885e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f001 fae9 	bl	8009e38 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008866:	bf00      	nop
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b086      	sub	sp, #24
 8008872:	af00      	add	r7, sp, #0
 8008874:	60f8      	str	r0, [r7, #12]
 8008876:	60b9      	str	r1, [r7, #8]
 8008878:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800887a:	2300      	movs	r3, #0
 800887c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008884:	2b01      	cmp	r3, #1
 8008886:	d101      	bne.n	800888c <HAL_TIM_IC_ConfigChannel+0x1e>
 8008888:	2302      	movs	r3, #2
 800888a:	e088      	b.n	800899e <HAL_TIM_IC_ConfigChannel+0x130>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d11b      	bne.n	80088d2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6818      	ldr	r0, [r3, #0]
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	6819      	ldr	r1, [r3, #0]
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	f001 f807 	bl	80098bc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	699a      	ldr	r2, [r3, #24]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f022 020c 	bic.w	r2, r2, #12
 80088bc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	6999      	ldr	r1, [r3, #24]
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	689a      	ldr	r2, [r3, #8]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	430a      	orrs	r2, r1
 80088ce:	619a      	str	r2, [r3, #24]
 80088d0:	e060      	b.n	8008994 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b04      	cmp	r3, #4
 80088d6:	d11c      	bne.n	8008912 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6818      	ldr	r0, [r3, #0]
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	6819      	ldr	r1, [r3, #0]
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	685a      	ldr	r2, [r3, #4]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	f001 f88b 	bl	8009a02 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	699a      	ldr	r2, [r3, #24]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80088fa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6999      	ldr	r1, [r3, #24]
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	021a      	lsls	r2, r3, #8
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	430a      	orrs	r2, r1
 800890e:	619a      	str	r2, [r3, #24]
 8008910:	e040      	b.n	8008994 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2b08      	cmp	r3, #8
 8008916:	d11b      	bne.n	8008950 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6818      	ldr	r0, [r3, #0]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	6819      	ldr	r1, [r3, #0]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	685a      	ldr	r2, [r3, #4]
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	f001 f8d8 	bl	8009adc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	69da      	ldr	r2, [r3, #28]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f022 020c 	bic.w	r2, r2, #12
 800893a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	69d9      	ldr	r1, [r3, #28]
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	689a      	ldr	r2, [r3, #8]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	430a      	orrs	r2, r1
 800894c:	61da      	str	r2, [r3, #28]
 800894e:	e021      	b.n	8008994 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2b0c      	cmp	r3, #12
 8008954:	d11c      	bne.n	8008990 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6818      	ldr	r0, [r3, #0]
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	6819      	ldr	r1, [r3, #0]
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	685a      	ldr	r2, [r3, #4]
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	f001 f8f5 	bl	8009b54 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	69da      	ldr	r2, [r3, #28]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008978:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	69d9      	ldr	r1, [r3, #28]
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	021a      	lsls	r2, r3, #8
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	430a      	orrs	r2, r1
 800898c:	61da      	str	r2, [r3, #28]
 800898e:	e001      	b.n	8008994 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800899c:	7dfb      	ldrb	r3, [r7, #23]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3718      	adds	r7, #24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
	...

080089a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089b4:	2300      	movs	r3, #0
 80089b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d101      	bne.n	80089c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80089c2:	2302      	movs	r3, #2
 80089c4:	e0ff      	b.n	8008bc6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2b14      	cmp	r3, #20
 80089d2:	f200 80f0 	bhi.w	8008bb6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80089d6:	a201      	add	r2, pc, #4	; (adr r2, 80089dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80089d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089dc:	08008a31 	.word	0x08008a31
 80089e0:	08008bb7 	.word	0x08008bb7
 80089e4:	08008bb7 	.word	0x08008bb7
 80089e8:	08008bb7 	.word	0x08008bb7
 80089ec:	08008a71 	.word	0x08008a71
 80089f0:	08008bb7 	.word	0x08008bb7
 80089f4:	08008bb7 	.word	0x08008bb7
 80089f8:	08008bb7 	.word	0x08008bb7
 80089fc:	08008ab3 	.word	0x08008ab3
 8008a00:	08008bb7 	.word	0x08008bb7
 8008a04:	08008bb7 	.word	0x08008bb7
 8008a08:	08008bb7 	.word	0x08008bb7
 8008a0c:	08008af3 	.word	0x08008af3
 8008a10:	08008bb7 	.word	0x08008bb7
 8008a14:	08008bb7 	.word	0x08008bb7
 8008a18:	08008bb7 	.word	0x08008bb7
 8008a1c:	08008b35 	.word	0x08008b35
 8008a20:	08008bb7 	.word	0x08008bb7
 8008a24:	08008bb7 	.word	0x08008bb7
 8008a28:	08008bb7 	.word	0x08008bb7
 8008a2c:	08008b75 	.word	0x08008b75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68b9      	ldr	r1, [r7, #8]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f000 fb36 	bl	80090a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	699a      	ldr	r2, [r3, #24]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f042 0208 	orr.w	r2, r2, #8
 8008a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	699a      	ldr	r2, [r3, #24]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f022 0204 	bic.w	r2, r2, #4
 8008a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6999      	ldr	r1, [r3, #24]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	691a      	ldr	r2, [r3, #16]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	619a      	str	r2, [r3, #24]
      break;
 8008a6e:	e0a5      	b.n	8008bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68b9      	ldr	r1, [r7, #8]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f000 fbb0 	bl	80091dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	699a      	ldr	r2, [r3, #24]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	699a      	ldr	r2, [r3, #24]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	6999      	ldr	r1, [r3, #24]
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	021a      	lsls	r2, r3, #8
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	430a      	orrs	r2, r1
 8008aae:	619a      	str	r2, [r3, #24]
      break;
 8008ab0:	e084      	b.n	8008bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68b9      	ldr	r1, [r7, #8]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f000 fc23 	bl	8009304 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	69da      	ldr	r2, [r3, #28]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f042 0208 	orr.w	r2, r2, #8
 8008acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	69da      	ldr	r2, [r3, #28]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f022 0204 	bic.w	r2, r2, #4
 8008adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	69d9      	ldr	r1, [r3, #28]
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	691a      	ldr	r2, [r3, #16]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	430a      	orrs	r2, r1
 8008aee:	61da      	str	r2, [r3, #28]
      break;
 8008af0:	e064      	b.n	8008bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68b9      	ldr	r1, [r7, #8]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 fc95 	bl	8009428 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	69da      	ldr	r2, [r3, #28]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	69da      	ldr	r2, [r3, #28]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	69d9      	ldr	r1, [r3, #28]
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	021a      	lsls	r2, r3, #8
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	430a      	orrs	r2, r1
 8008b30:	61da      	str	r2, [r3, #28]
      break;
 8008b32:	e043      	b.n	8008bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68b9      	ldr	r1, [r7, #8]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 fd08 	bl	8009550 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f042 0208 	orr.w	r2, r2, #8
 8008b4e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f022 0204 	bic.w	r2, r2, #4
 8008b5e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	691a      	ldr	r2, [r3, #16]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	430a      	orrs	r2, r1
 8008b70:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008b72:	e023      	b.n	8008bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68b9      	ldr	r1, [r7, #8]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 fd52 	bl	8009624 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b8e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b9e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	021a      	lsls	r2, r3, #8
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	430a      	orrs	r2, r1
 8008bb2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008bb4:	e002      	b.n	8008bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8008bba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3718      	adds	r7, #24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop

08008bd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d101      	bne.n	8008bec <HAL_TIM_ConfigClockSource+0x1c>
 8008be8:	2302      	movs	r3, #2
 8008bea:	e0f6      	b.n	8008dda <HAL_TIM_ConfigClockSource+0x20a>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008c0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a6f      	ldr	r2, [pc, #444]	; (8008de4 <HAL_TIM_ConfigClockSource+0x214>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	f000 80c1 	beq.w	8008dae <HAL_TIM_ConfigClockSource+0x1de>
 8008c2c:	4a6d      	ldr	r2, [pc, #436]	; (8008de4 <HAL_TIM_ConfigClockSource+0x214>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	f200 80c6 	bhi.w	8008dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c34:	4a6c      	ldr	r2, [pc, #432]	; (8008de8 <HAL_TIM_ConfigClockSource+0x218>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	f000 80b9 	beq.w	8008dae <HAL_TIM_ConfigClockSource+0x1de>
 8008c3c:	4a6a      	ldr	r2, [pc, #424]	; (8008de8 <HAL_TIM_ConfigClockSource+0x218>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	f200 80be 	bhi.w	8008dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c44:	4a69      	ldr	r2, [pc, #420]	; (8008dec <HAL_TIM_ConfigClockSource+0x21c>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	f000 80b1 	beq.w	8008dae <HAL_TIM_ConfigClockSource+0x1de>
 8008c4c:	4a67      	ldr	r2, [pc, #412]	; (8008dec <HAL_TIM_ConfigClockSource+0x21c>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	f200 80b6 	bhi.w	8008dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c54:	4a66      	ldr	r2, [pc, #408]	; (8008df0 <HAL_TIM_ConfigClockSource+0x220>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	f000 80a9 	beq.w	8008dae <HAL_TIM_ConfigClockSource+0x1de>
 8008c5c:	4a64      	ldr	r2, [pc, #400]	; (8008df0 <HAL_TIM_ConfigClockSource+0x220>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	f200 80ae 	bhi.w	8008dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c64:	4a63      	ldr	r2, [pc, #396]	; (8008df4 <HAL_TIM_ConfigClockSource+0x224>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	f000 80a1 	beq.w	8008dae <HAL_TIM_ConfigClockSource+0x1de>
 8008c6c:	4a61      	ldr	r2, [pc, #388]	; (8008df4 <HAL_TIM_ConfigClockSource+0x224>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	f200 80a6 	bhi.w	8008dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c74:	4a60      	ldr	r2, [pc, #384]	; (8008df8 <HAL_TIM_ConfigClockSource+0x228>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	f000 8099 	beq.w	8008dae <HAL_TIM_ConfigClockSource+0x1de>
 8008c7c:	4a5e      	ldr	r2, [pc, #376]	; (8008df8 <HAL_TIM_ConfigClockSource+0x228>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	f200 809e 	bhi.w	8008dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008c88:	f000 8091 	beq.w	8008dae <HAL_TIM_ConfigClockSource+0x1de>
 8008c8c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008c90:	f200 8096 	bhi.w	8008dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c98:	f000 8089 	beq.w	8008dae <HAL_TIM_ConfigClockSource+0x1de>
 8008c9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ca0:	f200 808e 	bhi.w	8008dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ca8:	d03e      	beq.n	8008d28 <HAL_TIM_ConfigClockSource+0x158>
 8008caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cae:	f200 8087 	bhi.w	8008dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cb6:	f000 8086 	beq.w	8008dc6 <HAL_TIM_ConfigClockSource+0x1f6>
 8008cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cbe:	d87f      	bhi.n	8008dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cc0:	2b70      	cmp	r3, #112	; 0x70
 8008cc2:	d01a      	beq.n	8008cfa <HAL_TIM_ConfigClockSource+0x12a>
 8008cc4:	2b70      	cmp	r3, #112	; 0x70
 8008cc6:	d87b      	bhi.n	8008dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cc8:	2b60      	cmp	r3, #96	; 0x60
 8008cca:	d050      	beq.n	8008d6e <HAL_TIM_ConfigClockSource+0x19e>
 8008ccc:	2b60      	cmp	r3, #96	; 0x60
 8008cce:	d877      	bhi.n	8008dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cd0:	2b50      	cmp	r3, #80	; 0x50
 8008cd2:	d03c      	beq.n	8008d4e <HAL_TIM_ConfigClockSource+0x17e>
 8008cd4:	2b50      	cmp	r3, #80	; 0x50
 8008cd6:	d873      	bhi.n	8008dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cd8:	2b40      	cmp	r3, #64	; 0x40
 8008cda:	d058      	beq.n	8008d8e <HAL_TIM_ConfigClockSource+0x1be>
 8008cdc:	2b40      	cmp	r3, #64	; 0x40
 8008cde:	d86f      	bhi.n	8008dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ce0:	2b30      	cmp	r3, #48	; 0x30
 8008ce2:	d064      	beq.n	8008dae <HAL_TIM_ConfigClockSource+0x1de>
 8008ce4:	2b30      	cmp	r3, #48	; 0x30
 8008ce6:	d86b      	bhi.n	8008dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ce8:	2b20      	cmp	r3, #32
 8008cea:	d060      	beq.n	8008dae <HAL_TIM_ConfigClockSource+0x1de>
 8008cec:	2b20      	cmp	r3, #32
 8008cee:	d867      	bhi.n	8008dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d05c      	beq.n	8008dae <HAL_TIM_ConfigClockSource+0x1de>
 8008cf4:	2b10      	cmp	r3, #16
 8008cf6:	d05a      	beq.n	8008dae <HAL_TIM_ConfigClockSource+0x1de>
 8008cf8:	e062      	b.n	8008dc0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6818      	ldr	r0, [r3, #0]
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	6899      	ldr	r1, [r3, #8]
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	f000 ff7d 	bl	8009c08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	609a      	str	r2, [r3, #8]
      break;
 8008d26:	e04f      	b.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6818      	ldr	r0, [r3, #0]
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	6899      	ldr	r1, [r3, #8]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	685a      	ldr	r2, [r3, #4]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	f000 ff66 	bl	8009c08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	689a      	ldr	r2, [r3, #8]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d4a:	609a      	str	r2, [r3, #8]
      break;
 8008d4c:	e03c      	b.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6818      	ldr	r0, [r3, #0]
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	6859      	ldr	r1, [r3, #4]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	f000 fe22 	bl	80099a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2150      	movs	r1, #80	; 0x50
 8008d66:	4618      	mov	r0, r3
 8008d68:	f000 ff31 	bl	8009bce <TIM_ITRx_SetConfig>
      break;
 8008d6c:	e02c      	b.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6818      	ldr	r0, [r3, #0]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	6859      	ldr	r1, [r3, #4]
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	f000 fe7e 	bl	8009a7c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2160      	movs	r1, #96	; 0x60
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 ff21 	bl	8009bce <TIM_ITRx_SetConfig>
      break;
 8008d8c:	e01c      	b.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6818      	ldr	r0, [r3, #0]
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	6859      	ldr	r1, [r3, #4]
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	f000 fe02 	bl	80099a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2140      	movs	r1, #64	; 0x40
 8008da6:	4618      	mov	r0, r3
 8008da8:	f000 ff11 	bl	8009bce <TIM_ITRx_SetConfig>
      break;
 8008dac:	e00c      	b.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4619      	mov	r1, r3
 8008db8:	4610      	mov	r0, r2
 8008dba:	f000 ff08 	bl	8009bce <TIM_ITRx_SetConfig>
      break;
 8008dbe:	e003      	b.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8008dc4:	e000      	b.n	8008dc8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008dc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	00100070 	.word	0x00100070
 8008de8:	00100060 	.word	0x00100060
 8008dec:	00100050 	.word	0x00100050
 8008df0:	00100040 	.word	0x00100040
 8008df4:	00100030 	.word	0x00100030
 8008df8:	00100020 	.word	0x00100020

08008dfc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d101      	bne.n	8008e14 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008e10:	2302      	movs	r3, #2
 8008e12:	e031      	b.n	8008e78 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2202      	movs	r2, #2
 8008e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008e24:	6839      	ldr	r1, [r7, #0]
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fc68 	bl	80096fc <TIM_SlaveTimer_SetConfig>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d009      	beq.n	8008e46 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e018      	b.n	8008e78 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	68da      	ldr	r2, [r3, #12]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e54:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68da      	ldr	r2, [r3, #12]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008e64:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	2b0c      	cmp	r3, #12
 8008e92:	d831      	bhi.n	8008ef8 <HAL_TIM_ReadCapturedValue+0x78>
 8008e94:	a201      	add	r2, pc, #4	; (adr r2, 8008e9c <HAL_TIM_ReadCapturedValue+0x1c>)
 8008e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9a:	bf00      	nop
 8008e9c:	08008ed1 	.word	0x08008ed1
 8008ea0:	08008ef9 	.word	0x08008ef9
 8008ea4:	08008ef9 	.word	0x08008ef9
 8008ea8:	08008ef9 	.word	0x08008ef9
 8008eac:	08008edb 	.word	0x08008edb
 8008eb0:	08008ef9 	.word	0x08008ef9
 8008eb4:	08008ef9 	.word	0x08008ef9
 8008eb8:	08008ef9 	.word	0x08008ef9
 8008ebc:	08008ee5 	.word	0x08008ee5
 8008ec0:	08008ef9 	.word	0x08008ef9
 8008ec4:	08008ef9 	.word	0x08008ef9
 8008ec8:	08008ef9 	.word	0x08008ef9
 8008ecc:	08008eef 	.word	0x08008eef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed6:	60fb      	str	r3, [r7, #12]

      break;
 8008ed8:	e00f      	b.n	8008efa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee0:	60fb      	str	r3, [r7, #12]

      break;
 8008ee2:	e00a      	b.n	8008efa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eea:	60fb      	str	r3, [r7, #12]

      break;
 8008eec:	e005      	b.n	8008efa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef4:	60fb      	str	r3, [r7, #12]

      break;
 8008ef6:	e000      	b.n	8008efa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008ef8:	bf00      	nop
  }

  return tmpreg;
 8008efa:	68fb      	ldr	r3, [r7, #12]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3714      	adds	r7, #20
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008f10:	bf00      	nop
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f24:	bf00      	nop
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f38:	bf00      	nop
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f4c:	bf00      	nop
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a46      	ldr	r2, [pc, #280]	; (8009084 <TIM_Base_SetConfig+0x12c>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d017      	beq.n	8008fa0 <TIM_Base_SetConfig+0x48>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f76:	d013      	beq.n	8008fa0 <TIM_Base_SetConfig+0x48>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a43      	ldr	r2, [pc, #268]	; (8009088 <TIM_Base_SetConfig+0x130>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d00f      	beq.n	8008fa0 <TIM_Base_SetConfig+0x48>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a42      	ldr	r2, [pc, #264]	; (800908c <TIM_Base_SetConfig+0x134>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d00b      	beq.n	8008fa0 <TIM_Base_SetConfig+0x48>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a41      	ldr	r2, [pc, #260]	; (8009090 <TIM_Base_SetConfig+0x138>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d007      	beq.n	8008fa0 <TIM_Base_SetConfig+0x48>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a40      	ldr	r2, [pc, #256]	; (8009094 <TIM_Base_SetConfig+0x13c>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d003      	beq.n	8008fa0 <TIM_Base_SetConfig+0x48>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a3f      	ldr	r2, [pc, #252]	; (8009098 <TIM_Base_SetConfig+0x140>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d108      	bne.n	8008fb2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4a33      	ldr	r2, [pc, #204]	; (8009084 <TIM_Base_SetConfig+0x12c>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d023      	beq.n	8009002 <TIM_Base_SetConfig+0xaa>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fc0:	d01f      	beq.n	8009002 <TIM_Base_SetConfig+0xaa>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4a30      	ldr	r2, [pc, #192]	; (8009088 <TIM_Base_SetConfig+0x130>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d01b      	beq.n	8009002 <TIM_Base_SetConfig+0xaa>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4a2f      	ldr	r2, [pc, #188]	; (800908c <TIM_Base_SetConfig+0x134>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d017      	beq.n	8009002 <TIM_Base_SetConfig+0xaa>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4a2e      	ldr	r2, [pc, #184]	; (8009090 <TIM_Base_SetConfig+0x138>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d013      	beq.n	8009002 <TIM_Base_SetConfig+0xaa>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4a2d      	ldr	r2, [pc, #180]	; (8009094 <TIM_Base_SetConfig+0x13c>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d00f      	beq.n	8009002 <TIM_Base_SetConfig+0xaa>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a2d      	ldr	r2, [pc, #180]	; (800909c <TIM_Base_SetConfig+0x144>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d00b      	beq.n	8009002 <TIM_Base_SetConfig+0xaa>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a2c      	ldr	r2, [pc, #176]	; (80090a0 <TIM_Base_SetConfig+0x148>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d007      	beq.n	8009002 <TIM_Base_SetConfig+0xaa>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a2b      	ldr	r2, [pc, #172]	; (80090a4 <TIM_Base_SetConfig+0x14c>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d003      	beq.n	8009002 <TIM_Base_SetConfig+0xaa>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a26      	ldr	r2, [pc, #152]	; (8009098 <TIM_Base_SetConfig+0x140>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d108      	bne.n	8009014 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	68fa      	ldr	r2, [r7, #12]
 8009010:	4313      	orrs	r3, r2
 8009012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	695b      	ldr	r3, [r3, #20]
 800901e:	4313      	orrs	r3, r2
 8009020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	689a      	ldr	r2, [r3, #8]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a12      	ldr	r2, [pc, #72]	; (8009084 <TIM_Base_SetConfig+0x12c>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d013      	beq.n	8009068 <TIM_Base_SetConfig+0x110>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a14      	ldr	r2, [pc, #80]	; (8009094 <TIM_Base_SetConfig+0x13c>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d00f      	beq.n	8009068 <TIM_Base_SetConfig+0x110>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a14      	ldr	r2, [pc, #80]	; (800909c <TIM_Base_SetConfig+0x144>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d00b      	beq.n	8009068 <TIM_Base_SetConfig+0x110>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a13      	ldr	r2, [pc, #76]	; (80090a0 <TIM_Base_SetConfig+0x148>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d007      	beq.n	8009068 <TIM_Base_SetConfig+0x110>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a12      	ldr	r2, [pc, #72]	; (80090a4 <TIM_Base_SetConfig+0x14c>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d003      	beq.n	8009068 <TIM_Base_SetConfig+0x110>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a0d      	ldr	r2, [pc, #52]	; (8009098 <TIM_Base_SetConfig+0x140>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d103      	bne.n	8009070 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	691a      	ldr	r2, [r3, #16]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	615a      	str	r2, [r3, #20]
}
 8009076:	bf00      	nop
 8009078:	3714      	adds	r7, #20
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	40012c00 	.word	0x40012c00
 8009088:	40000400 	.word	0x40000400
 800908c:	40000800 	.word	0x40000800
 8009090:	40000c00 	.word	0x40000c00
 8009094:	40013400 	.word	0x40013400
 8009098:	40015000 	.word	0x40015000
 800909c:	40014000 	.word	0x40014000
 80090a0:	40014400 	.word	0x40014400
 80090a4:	40014800 	.word	0x40014800

080090a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b087      	sub	sp, #28
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a1b      	ldr	r3, [r3, #32]
 80090b6:	f023 0201 	bic.w	r2, r3, #1
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	699b      	ldr	r3, [r3, #24]
 80090ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f023 0303 	bic.w	r3, r3, #3
 80090e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	f023 0302 	bic.w	r3, r3, #2
 80090f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	697a      	ldr	r2, [r7, #20]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a30      	ldr	r2, [pc, #192]	; (80091c4 <TIM_OC1_SetConfig+0x11c>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d013      	beq.n	8009130 <TIM_OC1_SetConfig+0x88>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a2f      	ldr	r2, [pc, #188]	; (80091c8 <TIM_OC1_SetConfig+0x120>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d00f      	beq.n	8009130 <TIM_OC1_SetConfig+0x88>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a2e      	ldr	r2, [pc, #184]	; (80091cc <TIM_OC1_SetConfig+0x124>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d00b      	beq.n	8009130 <TIM_OC1_SetConfig+0x88>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a2d      	ldr	r2, [pc, #180]	; (80091d0 <TIM_OC1_SetConfig+0x128>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d007      	beq.n	8009130 <TIM_OC1_SetConfig+0x88>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a2c      	ldr	r2, [pc, #176]	; (80091d4 <TIM_OC1_SetConfig+0x12c>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d003      	beq.n	8009130 <TIM_OC1_SetConfig+0x88>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a2b      	ldr	r2, [pc, #172]	; (80091d8 <TIM_OC1_SetConfig+0x130>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d10c      	bne.n	800914a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	f023 0308 	bic.w	r3, r3, #8
 8009136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	697a      	ldr	r2, [r7, #20]
 800913e:	4313      	orrs	r3, r2
 8009140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f023 0304 	bic.w	r3, r3, #4
 8009148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a1d      	ldr	r2, [pc, #116]	; (80091c4 <TIM_OC1_SetConfig+0x11c>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d013      	beq.n	800917a <TIM_OC1_SetConfig+0xd2>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a1c      	ldr	r2, [pc, #112]	; (80091c8 <TIM_OC1_SetConfig+0x120>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d00f      	beq.n	800917a <TIM_OC1_SetConfig+0xd2>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a1b      	ldr	r2, [pc, #108]	; (80091cc <TIM_OC1_SetConfig+0x124>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d00b      	beq.n	800917a <TIM_OC1_SetConfig+0xd2>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a1a      	ldr	r2, [pc, #104]	; (80091d0 <TIM_OC1_SetConfig+0x128>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d007      	beq.n	800917a <TIM_OC1_SetConfig+0xd2>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a19      	ldr	r2, [pc, #100]	; (80091d4 <TIM_OC1_SetConfig+0x12c>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d003      	beq.n	800917a <TIM_OC1_SetConfig+0xd2>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a18      	ldr	r2, [pc, #96]	; (80091d8 <TIM_OC1_SetConfig+0x130>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d111      	bne.n	800919e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	695b      	ldr	r3, [r3, #20]
 800918e:	693a      	ldr	r2, [r7, #16]
 8009190:	4313      	orrs	r3, r2
 8009192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	699b      	ldr	r3, [r3, #24]
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	4313      	orrs	r3, r2
 800919c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	693a      	ldr	r2, [r7, #16]
 80091a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	697a      	ldr	r2, [r7, #20]
 80091b6:	621a      	str	r2, [r3, #32]
}
 80091b8:	bf00      	nop
 80091ba:	371c      	adds	r7, #28
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr
 80091c4:	40012c00 	.word	0x40012c00
 80091c8:	40013400 	.word	0x40013400
 80091cc:	40014000 	.word	0x40014000
 80091d0:	40014400 	.word	0x40014400
 80091d4:	40014800 	.word	0x40014800
 80091d8:	40015000 	.word	0x40015000

080091dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091dc:	b480      	push	{r7}
 80091de:	b087      	sub	sp, #28
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6a1b      	ldr	r3, [r3, #32]
 80091ea:	f023 0210 	bic.w	r2, r3, #16
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a1b      	ldr	r3, [r3, #32]
 80091f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800920a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800920e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	021b      	lsls	r3, r3, #8
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	4313      	orrs	r3, r2
 8009222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	f023 0320 	bic.w	r3, r3, #32
 800922a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	011b      	lsls	r3, r3, #4
 8009232:	697a      	ldr	r2, [r7, #20]
 8009234:	4313      	orrs	r3, r2
 8009236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a2c      	ldr	r2, [pc, #176]	; (80092ec <TIM_OC2_SetConfig+0x110>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d007      	beq.n	8009250 <TIM_OC2_SetConfig+0x74>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a2b      	ldr	r2, [pc, #172]	; (80092f0 <TIM_OC2_SetConfig+0x114>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d003      	beq.n	8009250 <TIM_OC2_SetConfig+0x74>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a2a      	ldr	r2, [pc, #168]	; (80092f4 <TIM_OC2_SetConfig+0x118>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d10d      	bne.n	800926c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	011b      	lsls	r3, r3, #4
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	4313      	orrs	r3, r2
 8009262:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800926a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a1f      	ldr	r2, [pc, #124]	; (80092ec <TIM_OC2_SetConfig+0x110>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d013      	beq.n	800929c <TIM_OC2_SetConfig+0xc0>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a1e      	ldr	r2, [pc, #120]	; (80092f0 <TIM_OC2_SetConfig+0x114>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d00f      	beq.n	800929c <TIM_OC2_SetConfig+0xc0>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a1e      	ldr	r2, [pc, #120]	; (80092f8 <TIM_OC2_SetConfig+0x11c>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d00b      	beq.n	800929c <TIM_OC2_SetConfig+0xc0>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a1d      	ldr	r2, [pc, #116]	; (80092fc <TIM_OC2_SetConfig+0x120>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d007      	beq.n	800929c <TIM_OC2_SetConfig+0xc0>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a1c      	ldr	r2, [pc, #112]	; (8009300 <TIM_OC2_SetConfig+0x124>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d003      	beq.n	800929c <TIM_OC2_SetConfig+0xc0>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a17      	ldr	r2, [pc, #92]	; (80092f4 <TIM_OC2_SetConfig+0x118>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d113      	bne.n	80092c4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80092aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	695b      	ldr	r3, [r3, #20]
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	693a      	ldr	r2, [r7, #16]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	693a      	ldr	r2, [r7, #16]
 80092c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	685a      	ldr	r2, [r3, #4]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	697a      	ldr	r2, [r7, #20]
 80092dc:	621a      	str	r2, [r3, #32]
}
 80092de:	bf00      	nop
 80092e0:	371c      	adds	r7, #28
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	40012c00 	.word	0x40012c00
 80092f0:	40013400 	.word	0x40013400
 80092f4:	40015000 	.word	0x40015000
 80092f8:	40014000 	.word	0x40014000
 80092fc:	40014400 	.word	0x40014400
 8009300:	40014800 	.word	0x40014800

08009304 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009304:	b480      	push	{r7}
 8009306:	b087      	sub	sp, #28
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a1b      	ldr	r3, [r3, #32]
 8009312:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a1b      	ldr	r3, [r3, #32]
 800931e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f023 0303 	bic.w	r3, r3, #3
 800933e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	4313      	orrs	r3, r2
 8009348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	021b      	lsls	r3, r3, #8
 8009358:	697a      	ldr	r2, [r7, #20]
 800935a:	4313      	orrs	r3, r2
 800935c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a2b      	ldr	r2, [pc, #172]	; (8009410 <TIM_OC3_SetConfig+0x10c>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d007      	beq.n	8009376 <TIM_OC3_SetConfig+0x72>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a2a      	ldr	r2, [pc, #168]	; (8009414 <TIM_OC3_SetConfig+0x110>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d003      	beq.n	8009376 <TIM_OC3_SetConfig+0x72>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a29      	ldr	r2, [pc, #164]	; (8009418 <TIM_OC3_SetConfig+0x114>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d10d      	bne.n	8009392 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800937c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	021b      	lsls	r3, r3, #8
 8009384:	697a      	ldr	r2, [r7, #20]
 8009386:	4313      	orrs	r3, r2
 8009388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a1e      	ldr	r2, [pc, #120]	; (8009410 <TIM_OC3_SetConfig+0x10c>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d013      	beq.n	80093c2 <TIM_OC3_SetConfig+0xbe>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a1d      	ldr	r2, [pc, #116]	; (8009414 <TIM_OC3_SetConfig+0x110>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d00f      	beq.n	80093c2 <TIM_OC3_SetConfig+0xbe>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a1d      	ldr	r2, [pc, #116]	; (800941c <TIM_OC3_SetConfig+0x118>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d00b      	beq.n	80093c2 <TIM_OC3_SetConfig+0xbe>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a1c      	ldr	r2, [pc, #112]	; (8009420 <TIM_OC3_SetConfig+0x11c>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d007      	beq.n	80093c2 <TIM_OC3_SetConfig+0xbe>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a1b      	ldr	r2, [pc, #108]	; (8009424 <TIM_OC3_SetConfig+0x120>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d003      	beq.n	80093c2 <TIM_OC3_SetConfig+0xbe>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a16      	ldr	r2, [pc, #88]	; (8009418 <TIM_OC3_SetConfig+0x114>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d113      	bne.n	80093ea <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	695b      	ldr	r3, [r3, #20]
 80093d6:	011b      	lsls	r3, r3, #4
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	4313      	orrs	r3, r2
 80093dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	011b      	lsls	r3, r3, #4
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	693a      	ldr	r2, [r7, #16]
 80093ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	68fa      	ldr	r2, [r7, #12]
 80093f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	685a      	ldr	r2, [r3, #4]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	697a      	ldr	r2, [r7, #20]
 8009402:	621a      	str	r2, [r3, #32]
}
 8009404:	bf00      	nop
 8009406:	371c      	adds	r7, #28
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr
 8009410:	40012c00 	.word	0x40012c00
 8009414:	40013400 	.word	0x40013400
 8009418:	40015000 	.word	0x40015000
 800941c:	40014000 	.word	0x40014000
 8009420:	40014400 	.word	0x40014400
 8009424:	40014800 	.word	0x40014800

08009428 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009428:	b480      	push	{r7}
 800942a:	b087      	sub	sp, #28
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a1b      	ldr	r3, [r3, #32]
 8009442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	69db      	ldr	r3, [r3, #28]
 800944e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800945a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	021b      	lsls	r3, r3, #8
 800946a:	68fa      	ldr	r2, [r7, #12]
 800946c:	4313      	orrs	r3, r2
 800946e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009476:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	031b      	lsls	r3, r3, #12
 800947e:	697a      	ldr	r2, [r7, #20]
 8009480:	4313      	orrs	r3, r2
 8009482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a2c      	ldr	r2, [pc, #176]	; (8009538 <TIM_OC4_SetConfig+0x110>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d007      	beq.n	800949c <TIM_OC4_SetConfig+0x74>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a2b      	ldr	r2, [pc, #172]	; (800953c <TIM_OC4_SetConfig+0x114>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d003      	beq.n	800949c <TIM_OC4_SetConfig+0x74>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a2a      	ldr	r2, [pc, #168]	; (8009540 <TIM_OC4_SetConfig+0x118>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d10d      	bne.n	80094b8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	031b      	lsls	r3, r3, #12
 80094aa:	697a      	ldr	r2, [r7, #20]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a1f      	ldr	r2, [pc, #124]	; (8009538 <TIM_OC4_SetConfig+0x110>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d013      	beq.n	80094e8 <TIM_OC4_SetConfig+0xc0>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a1e      	ldr	r2, [pc, #120]	; (800953c <TIM_OC4_SetConfig+0x114>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d00f      	beq.n	80094e8 <TIM_OC4_SetConfig+0xc0>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a1e      	ldr	r2, [pc, #120]	; (8009544 <TIM_OC4_SetConfig+0x11c>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d00b      	beq.n	80094e8 <TIM_OC4_SetConfig+0xc0>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a1d      	ldr	r2, [pc, #116]	; (8009548 <TIM_OC4_SetConfig+0x120>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d007      	beq.n	80094e8 <TIM_OC4_SetConfig+0xc0>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a1c      	ldr	r2, [pc, #112]	; (800954c <TIM_OC4_SetConfig+0x124>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d003      	beq.n	80094e8 <TIM_OC4_SetConfig+0xc0>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a17      	ldr	r2, [pc, #92]	; (8009540 <TIM_OC4_SetConfig+0x118>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d113      	bne.n	8009510 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094ee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094f6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	695b      	ldr	r3, [r3, #20]
 80094fc:	019b      	lsls	r3, r3, #6
 80094fe:	693a      	ldr	r2, [r7, #16]
 8009500:	4313      	orrs	r3, r2
 8009502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	019b      	lsls	r3, r3, #6
 800950a:	693a      	ldr	r2, [r7, #16]
 800950c:	4313      	orrs	r3, r2
 800950e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	693a      	ldr	r2, [r7, #16]
 8009514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	685a      	ldr	r2, [r3, #4]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	621a      	str	r2, [r3, #32]
}
 800952a:	bf00      	nop
 800952c:	371c      	adds	r7, #28
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	40012c00 	.word	0x40012c00
 800953c:	40013400 	.word	0x40013400
 8009540:	40015000 	.word	0x40015000
 8009544:	40014000 	.word	0x40014000
 8009548:	40014400 	.word	0x40014400
 800954c:	40014800 	.word	0x40014800

08009550 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009550:	b480      	push	{r7}
 8009552:	b087      	sub	sp, #28
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a1b      	ldr	r3, [r3, #32]
 800955e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a1b      	ldr	r3, [r3, #32]
 800956a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800957e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	4313      	orrs	r3, r2
 800958c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009594:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	041b      	lsls	r3, r3, #16
 800959c:	693a      	ldr	r2, [r7, #16]
 800959e:	4313      	orrs	r3, r2
 80095a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a19      	ldr	r2, [pc, #100]	; (800960c <TIM_OC5_SetConfig+0xbc>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d013      	beq.n	80095d2 <TIM_OC5_SetConfig+0x82>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a18      	ldr	r2, [pc, #96]	; (8009610 <TIM_OC5_SetConfig+0xc0>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d00f      	beq.n	80095d2 <TIM_OC5_SetConfig+0x82>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a17      	ldr	r2, [pc, #92]	; (8009614 <TIM_OC5_SetConfig+0xc4>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d00b      	beq.n	80095d2 <TIM_OC5_SetConfig+0x82>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a16      	ldr	r2, [pc, #88]	; (8009618 <TIM_OC5_SetConfig+0xc8>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d007      	beq.n	80095d2 <TIM_OC5_SetConfig+0x82>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a15      	ldr	r2, [pc, #84]	; (800961c <TIM_OC5_SetConfig+0xcc>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d003      	beq.n	80095d2 <TIM_OC5_SetConfig+0x82>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a14      	ldr	r2, [pc, #80]	; (8009620 <TIM_OC5_SetConfig+0xd0>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d109      	bne.n	80095e6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	695b      	ldr	r3, [r3, #20]
 80095de:	021b      	lsls	r3, r3, #8
 80095e0:	697a      	ldr	r2, [r7, #20]
 80095e2:	4313      	orrs	r3, r2
 80095e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	697a      	ldr	r2, [r7, #20]
 80095ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	68fa      	ldr	r2, [r7, #12]
 80095f0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	685a      	ldr	r2, [r3, #4]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	693a      	ldr	r2, [r7, #16]
 80095fe:	621a      	str	r2, [r3, #32]
}
 8009600:	bf00      	nop
 8009602:	371c      	adds	r7, #28
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr
 800960c:	40012c00 	.word	0x40012c00
 8009610:	40013400 	.word	0x40013400
 8009614:	40014000 	.word	0x40014000
 8009618:	40014400 	.word	0x40014400
 800961c:	40014800 	.word	0x40014800
 8009620:	40015000 	.word	0x40015000

08009624 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009624:	b480      	push	{r7}
 8009626:	b087      	sub	sp, #28
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a1b      	ldr	r3, [r3, #32]
 8009632:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a1b      	ldr	r3, [r3, #32]
 800963e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800964a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	021b      	lsls	r3, r3, #8
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	4313      	orrs	r3, r2
 8009662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800966a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	051b      	lsls	r3, r3, #20
 8009672:	693a      	ldr	r2, [r7, #16]
 8009674:	4313      	orrs	r3, r2
 8009676:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a1a      	ldr	r2, [pc, #104]	; (80096e4 <TIM_OC6_SetConfig+0xc0>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d013      	beq.n	80096a8 <TIM_OC6_SetConfig+0x84>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a19      	ldr	r2, [pc, #100]	; (80096e8 <TIM_OC6_SetConfig+0xc4>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d00f      	beq.n	80096a8 <TIM_OC6_SetConfig+0x84>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a18      	ldr	r2, [pc, #96]	; (80096ec <TIM_OC6_SetConfig+0xc8>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d00b      	beq.n	80096a8 <TIM_OC6_SetConfig+0x84>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a17      	ldr	r2, [pc, #92]	; (80096f0 <TIM_OC6_SetConfig+0xcc>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d007      	beq.n	80096a8 <TIM_OC6_SetConfig+0x84>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a16      	ldr	r2, [pc, #88]	; (80096f4 <TIM_OC6_SetConfig+0xd0>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d003      	beq.n	80096a8 <TIM_OC6_SetConfig+0x84>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a15      	ldr	r2, [pc, #84]	; (80096f8 <TIM_OC6_SetConfig+0xd4>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d109      	bne.n	80096bc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	695b      	ldr	r3, [r3, #20]
 80096b4:	029b      	lsls	r3, r3, #10
 80096b6:	697a      	ldr	r2, [r7, #20]
 80096b8:	4313      	orrs	r3, r2
 80096ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	685a      	ldr	r2, [r3, #4]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	693a      	ldr	r2, [r7, #16]
 80096d4:	621a      	str	r2, [r3, #32]
}
 80096d6:	bf00      	nop
 80096d8:	371c      	adds	r7, #28
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	40012c00 	.word	0x40012c00
 80096e8:	40013400 	.word	0x40013400
 80096ec:	40014000 	.word	0x40014000
 80096f0:	40014400 	.word	0x40014400
 80096f4:	40014800 	.word	0x40014800
 80096f8:	40015000 	.word	0x40015000

080096fc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b086      	sub	sp, #24
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009706:	2300      	movs	r3, #0
 8009708:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800971c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	693a      	ldr	r2, [r7, #16]
 8009724:	4313      	orrs	r3, r2
 8009726:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800972e:	f023 0307 	bic.w	r3, r3, #7
 8009732:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	693a      	ldr	r2, [r7, #16]
 800973a:	4313      	orrs	r3, r2
 800973c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	693a      	ldr	r2, [r7, #16]
 8009744:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	4a56      	ldr	r2, [pc, #344]	; (80098a4 <TIM_SlaveTimer_SetConfig+0x1a8>)
 800974c:	4293      	cmp	r3, r2
 800974e:	f000 80a2 	beq.w	8009896 <TIM_SlaveTimer_SetConfig+0x19a>
 8009752:	4a54      	ldr	r2, [pc, #336]	; (80098a4 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009754:	4293      	cmp	r3, r2
 8009756:	f200 809b 	bhi.w	8009890 <TIM_SlaveTimer_SetConfig+0x194>
 800975a:	4a53      	ldr	r2, [pc, #332]	; (80098a8 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800975c:	4293      	cmp	r3, r2
 800975e:	f000 809a 	beq.w	8009896 <TIM_SlaveTimer_SetConfig+0x19a>
 8009762:	4a51      	ldr	r2, [pc, #324]	; (80098a8 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009764:	4293      	cmp	r3, r2
 8009766:	f200 8093 	bhi.w	8009890 <TIM_SlaveTimer_SetConfig+0x194>
 800976a:	4a50      	ldr	r2, [pc, #320]	; (80098ac <TIM_SlaveTimer_SetConfig+0x1b0>)
 800976c:	4293      	cmp	r3, r2
 800976e:	f000 8092 	beq.w	8009896 <TIM_SlaveTimer_SetConfig+0x19a>
 8009772:	4a4e      	ldr	r2, [pc, #312]	; (80098ac <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009774:	4293      	cmp	r3, r2
 8009776:	f200 808b 	bhi.w	8009890 <TIM_SlaveTimer_SetConfig+0x194>
 800977a:	4a4d      	ldr	r2, [pc, #308]	; (80098b0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800977c:	4293      	cmp	r3, r2
 800977e:	f000 808a 	beq.w	8009896 <TIM_SlaveTimer_SetConfig+0x19a>
 8009782:	4a4b      	ldr	r2, [pc, #300]	; (80098b0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009784:	4293      	cmp	r3, r2
 8009786:	f200 8083 	bhi.w	8009890 <TIM_SlaveTimer_SetConfig+0x194>
 800978a:	4a4a      	ldr	r2, [pc, #296]	; (80098b4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800978c:	4293      	cmp	r3, r2
 800978e:	f000 8082 	beq.w	8009896 <TIM_SlaveTimer_SetConfig+0x19a>
 8009792:	4a48      	ldr	r2, [pc, #288]	; (80098b4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d87b      	bhi.n	8009890 <TIM_SlaveTimer_SetConfig+0x194>
 8009798:	4a47      	ldr	r2, [pc, #284]	; (80098b8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d07b      	beq.n	8009896 <TIM_SlaveTimer_SetConfig+0x19a>
 800979e:	4a46      	ldr	r2, [pc, #280]	; (80098b8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d875      	bhi.n	8009890 <TIM_SlaveTimer_SetConfig+0x194>
 80097a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80097a8:	d075      	beq.n	8009896 <TIM_SlaveTimer_SetConfig+0x19a>
 80097aa:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80097ae:	d86f      	bhi.n	8009890 <TIM_SlaveTimer_SetConfig+0x194>
 80097b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097b4:	d06f      	beq.n	8009896 <TIM_SlaveTimer_SetConfig+0x19a>
 80097b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097ba:	d869      	bhi.n	8009890 <TIM_SlaveTimer_SetConfig+0x194>
 80097bc:	2b70      	cmp	r3, #112	; 0x70
 80097be:	d01a      	beq.n	80097f6 <TIM_SlaveTimer_SetConfig+0xfa>
 80097c0:	2b70      	cmp	r3, #112	; 0x70
 80097c2:	d865      	bhi.n	8009890 <TIM_SlaveTimer_SetConfig+0x194>
 80097c4:	2b60      	cmp	r3, #96	; 0x60
 80097c6:	d059      	beq.n	800987c <TIM_SlaveTimer_SetConfig+0x180>
 80097c8:	2b60      	cmp	r3, #96	; 0x60
 80097ca:	d861      	bhi.n	8009890 <TIM_SlaveTimer_SetConfig+0x194>
 80097cc:	2b50      	cmp	r3, #80	; 0x50
 80097ce:	d04b      	beq.n	8009868 <TIM_SlaveTimer_SetConfig+0x16c>
 80097d0:	2b50      	cmp	r3, #80	; 0x50
 80097d2:	d85d      	bhi.n	8009890 <TIM_SlaveTimer_SetConfig+0x194>
 80097d4:	2b40      	cmp	r3, #64	; 0x40
 80097d6:	d019      	beq.n	800980c <TIM_SlaveTimer_SetConfig+0x110>
 80097d8:	2b40      	cmp	r3, #64	; 0x40
 80097da:	d859      	bhi.n	8009890 <TIM_SlaveTimer_SetConfig+0x194>
 80097dc:	2b30      	cmp	r3, #48	; 0x30
 80097de:	d05a      	beq.n	8009896 <TIM_SlaveTimer_SetConfig+0x19a>
 80097e0:	2b30      	cmp	r3, #48	; 0x30
 80097e2:	d855      	bhi.n	8009890 <TIM_SlaveTimer_SetConfig+0x194>
 80097e4:	2b20      	cmp	r3, #32
 80097e6:	d056      	beq.n	8009896 <TIM_SlaveTimer_SetConfig+0x19a>
 80097e8:	2b20      	cmp	r3, #32
 80097ea:	d851      	bhi.n	8009890 <TIM_SlaveTimer_SetConfig+0x194>
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d052      	beq.n	8009896 <TIM_SlaveTimer_SetConfig+0x19a>
 80097f0:	2b10      	cmp	r3, #16
 80097f2:	d050      	beq.n	8009896 <TIM_SlaveTimer_SetConfig+0x19a>
 80097f4:	e04c      	b.n	8009890 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6818      	ldr	r0, [r3, #0]
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	68d9      	ldr	r1, [r3, #12]
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	689a      	ldr	r2, [r3, #8]
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	691b      	ldr	r3, [r3, #16]
 8009806:	f000 f9ff 	bl	8009c08 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800980a:	e045      	b.n	8009898 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2b05      	cmp	r3, #5
 8009812:	d004      	beq.n	800981e <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009818:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800981c:	d101      	bne.n	8009822 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	e03b      	b.n	800989a <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	6a1b      	ldr	r3, [r3, #32]
 8009828:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	6a1a      	ldr	r2, [r3, #32]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f022 0201 	bic.w	r2, r2, #1
 8009838:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009848:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	691b      	ldr	r3, [r3, #16]
 800984e:	011b      	lsls	r3, r3, #4
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	4313      	orrs	r3, r2
 8009854:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	621a      	str	r2, [r3, #32]
      break;
 8009866:	e017      	b.n	8009898 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6818      	ldr	r0, [r3, #0]
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	6899      	ldr	r1, [r3, #8]
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	461a      	mov	r2, r3
 8009876:	f000 f895 	bl	80099a4 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800987a:	e00d      	b.n	8009898 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6818      	ldr	r0, [r3, #0]
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	6899      	ldr	r1, [r3, #8]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	461a      	mov	r2, r3
 800988a:	f000 f8f7 	bl	8009a7c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800988e:	e003      	b.n	8009898 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	75fb      	strb	r3, [r7, #23]
      break;
 8009894:	e000      	b.n	8009898 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8009896:	bf00      	nop
  }

  return status;
 8009898:	7dfb      	ldrb	r3, [r7, #23]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3718      	adds	r7, #24
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	00100070 	.word	0x00100070
 80098a8:	00100060 	.word	0x00100060
 80098ac:	00100050 	.word	0x00100050
 80098b0:	00100040 	.word	0x00100040
 80098b4:	00100030 	.word	0x00100030
 80098b8:	00100020 	.word	0x00100020

080098bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80098bc:	b480      	push	{r7}
 80098be:	b087      	sub	sp, #28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
 80098c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	f023 0201 	bic.w	r2, r3, #1
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6a1b      	ldr	r3, [r3, #32]
 80098e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	4a28      	ldr	r2, [pc, #160]	; (8009988 <TIM_TI1_SetConfig+0xcc>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d01b      	beq.n	8009922 <TIM_TI1_SetConfig+0x66>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098f0:	d017      	beq.n	8009922 <TIM_TI1_SetConfig+0x66>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	4a25      	ldr	r2, [pc, #148]	; (800998c <TIM_TI1_SetConfig+0xd0>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d013      	beq.n	8009922 <TIM_TI1_SetConfig+0x66>
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	4a24      	ldr	r2, [pc, #144]	; (8009990 <TIM_TI1_SetConfig+0xd4>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d00f      	beq.n	8009922 <TIM_TI1_SetConfig+0x66>
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	4a23      	ldr	r2, [pc, #140]	; (8009994 <TIM_TI1_SetConfig+0xd8>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d00b      	beq.n	8009922 <TIM_TI1_SetConfig+0x66>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	4a22      	ldr	r2, [pc, #136]	; (8009998 <TIM_TI1_SetConfig+0xdc>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d007      	beq.n	8009922 <TIM_TI1_SetConfig+0x66>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	4a21      	ldr	r2, [pc, #132]	; (800999c <TIM_TI1_SetConfig+0xe0>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d003      	beq.n	8009922 <TIM_TI1_SetConfig+0x66>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	4a20      	ldr	r2, [pc, #128]	; (80099a0 <TIM_TI1_SetConfig+0xe4>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d101      	bne.n	8009926 <TIM_TI1_SetConfig+0x6a>
 8009922:	2301      	movs	r3, #1
 8009924:	e000      	b.n	8009928 <TIM_TI1_SetConfig+0x6c>
 8009926:	2300      	movs	r3, #0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d008      	beq.n	800993e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	f023 0303 	bic.w	r3, r3, #3
 8009932:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009934:	697a      	ldr	r2, [r7, #20]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4313      	orrs	r3, r2
 800993a:	617b      	str	r3, [r7, #20]
 800993c:	e003      	b.n	8009946 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	f043 0301 	orr.w	r3, r3, #1
 8009944:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800994c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	011b      	lsls	r3, r3, #4
 8009952:	b2db      	uxtb	r3, r3
 8009954:	697a      	ldr	r2, [r7, #20]
 8009956:	4313      	orrs	r3, r2
 8009958:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	f023 030a 	bic.w	r3, r3, #10
 8009960:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	f003 030a 	and.w	r3, r3, #10
 8009968:	693a      	ldr	r2, [r7, #16]
 800996a:	4313      	orrs	r3, r2
 800996c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	697a      	ldr	r2, [r7, #20]
 8009972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	693a      	ldr	r2, [r7, #16]
 8009978:	621a      	str	r2, [r3, #32]
}
 800997a:	bf00      	nop
 800997c:	371c      	adds	r7, #28
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	40012c00 	.word	0x40012c00
 800998c:	40000400 	.word	0x40000400
 8009990:	40000800 	.word	0x40000800
 8009994:	40000c00 	.word	0x40000c00
 8009998:	40013400 	.word	0x40013400
 800999c:	40014000 	.word	0x40014000
 80099a0:	40015000 	.word	0x40015000

080099a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b087      	sub	sp, #28
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6a1b      	ldr	r3, [r3, #32]
 80099b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6a1b      	ldr	r3, [r3, #32]
 80099ba:	f023 0201 	bic.w	r2, r3, #1
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	699b      	ldr	r3, [r3, #24]
 80099c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	011b      	lsls	r3, r3, #4
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	f023 030a 	bic.w	r3, r3, #10
 80099e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099e2:	697a      	ldr	r2, [r7, #20]
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	693a      	ldr	r2, [r7, #16]
 80099ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	697a      	ldr	r2, [r7, #20]
 80099f4:	621a      	str	r2, [r3, #32]
}
 80099f6:	bf00      	nop
 80099f8:	371c      	adds	r7, #28
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr

08009a02 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009a02:	b480      	push	{r7}
 8009a04:	b087      	sub	sp, #28
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	60f8      	str	r0, [r7, #12]
 8009a0a:	60b9      	str	r1, [r7, #8]
 8009a0c:	607a      	str	r2, [r7, #4]
 8009a0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6a1b      	ldr	r3, [r3, #32]
 8009a14:	f023 0210 	bic.w	r2, r3, #16
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	699b      	ldr	r3, [r3, #24]
 8009a20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	021b      	lsls	r3, r3, #8
 8009a34:	697a      	ldr	r2, [r7, #20]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	031b      	lsls	r3, r3, #12
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	697a      	ldr	r2, [r7, #20]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a54:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	011b      	lsls	r3, r3, #4
 8009a5a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009a5e:	693a      	ldr	r2, [r7, #16]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	697a      	ldr	r2, [r7, #20]
 8009a68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	693a      	ldr	r2, [r7, #16]
 8009a6e:	621a      	str	r2, [r3, #32]
}
 8009a70:	bf00      	nop
 8009a72:	371c      	adds	r7, #28
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b087      	sub	sp, #28
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6a1b      	ldr	r3, [r3, #32]
 8009a8c:	f023 0210 	bic.w	r2, r3, #16
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	699b      	ldr	r3, [r3, #24]
 8009a98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6a1b      	ldr	r3, [r3, #32]
 8009a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009aa6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	031b      	lsls	r3, r3, #12
 8009aac:	697a      	ldr	r2, [r7, #20]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009ab8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	011b      	lsls	r3, r3, #4
 8009abe:	693a      	ldr	r2, [r7, #16]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	697a      	ldr	r2, [r7, #20]
 8009ac8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	693a      	ldr	r2, [r7, #16]
 8009ace:	621a      	str	r2, [r3, #32]
}
 8009ad0:	bf00      	nop
 8009ad2:	371c      	adds	r7, #28
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b087      	sub	sp, #28
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	607a      	str	r2, [r7, #4]
 8009ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6a1b      	ldr	r3, [r3, #32]
 8009aee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	69db      	ldr	r3, [r3, #28]
 8009afa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6a1b      	ldr	r3, [r3, #32]
 8009b00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	f023 0303 	bic.w	r3, r3, #3
 8009b08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009b0a:	697a      	ldr	r2, [r7, #20]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	011b      	lsls	r3, r3, #4
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	4313      	orrs	r3, r2
 8009b24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009b2c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	021b      	lsls	r3, r3, #8
 8009b32:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009b36:	693a      	ldr	r2, [r7, #16]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	697a      	ldr	r2, [r7, #20]
 8009b40:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	693a      	ldr	r2, [r7, #16]
 8009b46:	621a      	str	r2, [r3, #32]
}
 8009b48:	bf00      	nop
 8009b4a:	371c      	adds	r7, #28
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b087      	sub	sp, #28
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	607a      	str	r2, [r7, #4]
 8009b60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6a1b      	ldr	r3, [r3, #32]
 8009b66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	69db      	ldr	r3, [r3, #28]
 8009b72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6a1b      	ldr	r3, [r3, #32]
 8009b78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	021b      	lsls	r3, r3, #8
 8009b86:	697a      	ldr	r2, [r7, #20]
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b92:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	031b      	lsls	r3, r3, #12
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009ba6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	031b      	lsls	r3, r3, #12
 8009bac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009bb0:	693a      	ldr	r2, [r7, #16]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	697a      	ldr	r2, [r7, #20]
 8009bba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	693a      	ldr	r2, [r7, #16]
 8009bc0:	621a      	str	r2, [r3, #32]
}
 8009bc2:	bf00      	nop
 8009bc4:	371c      	adds	r7, #28
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr

08009bce <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009bce:	b480      	push	{r7}
 8009bd0:	b085      	sub	sp, #20
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
 8009bd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009be8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009bea:	683a      	ldr	r2, [r7, #0]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	f043 0307 	orr.w	r3, r3, #7
 8009bf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	609a      	str	r2, [r3, #8]
}
 8009bfc:	bf00      	nop
 8009bfe:	3714      	adds	r7, #20
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b087      	sub	sp, #28
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]
 8009c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	021a      	lsls	r2, r3, #8
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	431a      	orrs	r2, r3
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	697a      	ldr	r2, [r7, #20]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	697a      	ldr	r2, [r7, #20]
 8009c3a:	609a      	str	r2, [r3, #8]
}
 8009c3c:	bf00      	nop
 8009c3e:	371c      	adds	r7, #28
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b087      	sub	sp, #28
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	f003 031f 	and.w	r3, r3, #31
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6a1a      	ldr	r2, [r3, #32]
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	43db      	mvns	r3, r3
 8009c6a:	401a      	ands	r2, r3
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6a1a      	ldr	r2, [r3, #32]
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	f003 031f 	and.w	r3, r3, #31
 8009c7a:	6879      	ldr	r1, [r7, #4]
 8009c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8009c80:	431a      	orrs	r2, r3
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	621a      	str	r2, [r3, #32]
}
 8009c86:	bf00      	nop
 8009c88:	371c      	adds	r7, #28
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
	...

08009c94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d101      	bne.n	8009cac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ca8:	2302      	movs	r3, #2
 8009caa:	e074      	b.n	8009d96 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a34      	ldr	r2, [pc, #208]	; (8009da4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d009      	beq.n	8009cea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a33      	ldr	r2, [pc, #204]	; (8009da8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d004      	beq.n	8009cea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a31      	ldr	r2, [pc, #196]	; (8009dac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d108      	bne.n	8009cfc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009cf0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a21      	ldr	r2, [pc, #132]	; (8009da4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d022      	beq.n	8009d6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d2c:	d01d      	beq.n	8009d6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a1f      	ldr	r2, [pc, #124]	; (8009db0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d018      	beq.n	8009d6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a1d      	ldr	r2, [pc, #116]	; (8009db4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d013      	beq.n	8009d6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a1c      	ldr	r2, [pc, #112]	; (8009db8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d00e      	beq.n	8009d6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a15      	ldr	r2, [pc, #84]	; (8009da8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d009      	beq.n	8009d6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a18      	ldr	r2, [pc, #96]	; (8009dbc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d004      	beq.n	8009d6a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a11      	ldr	r2, [pc, #68]	; (8009dac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d10c      	bne.n	8009d84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68ba      	ldr	r2, [r7, #8]
 8009d82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3714      	adds	r7, #20
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop
 8009da4:	40012c00 	.word	0x40012c00
 8009da8:	40013400 	.word	0x40013400
 8009dac:	40015000 	.word	0x40015000
 8009db0:	40000400 	.word	0x40000400
 8009db4:	40000800 	.word	0x40000800
 8009db8:	40000c00 	.word	0x40000c00
 8009dbc:	40014000 	.word	0x40014000

08009dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ddc:	bf00      	nop
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009df0:	bf00      	nop
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009e04:	bf00      	nop
 8009e06:	370c      	adds	r7, #12
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr

08009e10 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b083      	sub	sp, #12
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009e18:	bf00      	nop
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009e2c:	bf00      	nop
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009e40:	bf00      	nop
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <__errno>:
 8009e4c:	4b01      	ldr	r3, [pc, #4]	; (8009e54 <__errno+0x8>)
 8009e4e:	6818      	ldr	r0, [r3, #0]
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	20000010 	.word	0x20000010

08009e58 <__libc_init_array>:
 8009e58:	b570      	push	{r4, r5, r6, lr}
 8009e5a:	4d0d      	ldr	r5, [pc, #52]	; (8009e90 <__libc_init_array+0x38>)
 8009e5c:	4c0d      	ldr	r4, [pc, #52]	; (8009e94 <__libc_init_array+0x3c>)
 8009e5e:	1b64      	subs	r4, r4, r5
 8009e60:	10a4      	asrs	r4, r4, #2
 8009e62:	2600      	movs	r6, #0
 8009e64:	42a6      	cmp	r6, r4
 8009e66:	d109      	bne.n	8009e7c <__libc_init_array+0x24>
 8009e68:	4d0b      	ldr	r5, [pc, #44]	; (8009e98 <__libc_init_array+0x40>)
 8009e6a:	4c0c      	ldr	r4, [pc, #48]	; (8009e9c <__libc_init_array+0x44>)
 8009e6c:	f000 fa24 	bl	800a2b8 <_init>
 8009e70:	1b64      	subs	r4, r4, r5
 8009e72:	10a4      	asrs	r4, r4, #2
 8009e74:	2600      	movs	r6, #0
 8009e76:	42a6      	cmp	r6, r4
 8009e78:	d105      	bne.n	8009e86 <__libc_init_array+0x2e>
 8009e7a:	bd70      	pop	{r4, r5, r6, pc}
 8009e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e80:	4798      	blx	r3
 8009e82:	3601      	adds	r6, #1
 8009e84:	e7ee      	b.n	8009e64 <__libc_init_array+0xc>
 8009e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e8a:	4798      	blx	r3
 8009e8c:	3601      	adds	r6, #1
 8009e8e:	e7f2      	b.n	8009e76 <__libc_init_array+0x1e>
 8009e90:	0800a2e4 	.word	0x0800a2e4
 8009e94:	0800a2e4 	.word	0x0800a2e4
 8009e98:	0800a2e4 	.word	0x0800a2e4
 8009e9c:	0800a2e8 	.word	0x0800a2e8

08009ea0 <memset>:
 8009ea0:	4402      	add	r2, r0
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d100      	bne.n	8009eaa <memset+0xa>
 8009ea8:	4770      	bx	lr
 8009eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8009eae:	e7f9      	b.n	8009ea4 <memset+0x4>

08009eb0 <log>:
 8009eb0:	b538      	push	{r3, r4, r5, lr}
 8009eb2:	ed2d 8b02 	vpush	{d8}
 8009eb6:	ec55 4b10 	vmov	r4, r5, d0
 8009eba:	f000 f839 	bl	8009f30 <__ieee754_log>
 8009ebe:	4622      	mov	r2, r4
 8009ec0:	462b      	mov	r3, r5
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	4629      	mov	r1, r5
 8009ec6:	eeb0 8a40 	vmov.f32	s16, s0
 8009eca:	eef0 8a60 	vmov.f32	s17, s1
 8009ece:	f7f6 fdf9 	bl	8000ac4 <__aeabi_dcmpun>
 8009ed2:	b998      	cbnz	r0, 8009efc <log+0x4c>
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	4620      	mov	r0, r4
 8009eda:	4629      	mov	r1, r5
 8009edc:	f7f6 fde8 	bl	8000ab0 <__aeabi_dcmpgt>
 8009ee0:	b960      	cbnz	r0, 8009efc <log+0x4c>
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	4629      	mov	r1, r5
 8009eea:	f7f6 fdb9 	bl	8000a60 <__aeabi_dcmpeq>
 8009eee:	b160      	cbz	r0, 8009f0a <log+0x5a>
 8009ef0:	f7ff ffac 	bl	8009e4c <__errno>
 8009ef4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8009f20 <log+0x70>
 8009ef8:	2322      	movs	r3, #34	; 0x22
 8009efa:	6003      	str	r3, [r0, #0]
 8009efc:	eeb0 0a48 	vmov.f32	s0, s16
 8009f00:	eef0 0a68 	vmov.f32	s1, s17
 8009f04:	ecbd 8b02 	vpop	{d8}
 8009f08:	bd38      	pop	{r3, r4, r5, pc}
 8009f0a:	f7ff ff9f 	bl	8009e4c <__errno>
 8009f0e:	ecbd 8b02 	vpop	{d8}
 8009f12:	2321      	movs	r3, #33	; 0x21
 8009f14:	6003      	str	r3, [r0, #0]
 8009f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f1a:	4803      	ldr	r0, [pc, #12]	; (8009f28 <log+0x78>)
 8009f1c:	f000 b9c4 	b.w	800a2a8 <nan>
 8009f20:	00000000 	.word	0x00000000
 8009f24:	fff00000 	.word	0xfff00000
 8009f28:	0800a2e0 	.word	0x0800a2e0
 8009f2c:	00000000 	.word	0x00000000

08009f30 <__ieee754_log>:
 8009f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f34:	ec51 0b10 	vmov	r0, r1, d0
 8009f38:	ed2d 8b04 	vpush	{d8-d9}
 8009f3c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8009f40:	b083      	sub	sp, #12
 8009f42:	460d      	mov	r5, r1
 8009f44:	da29      	bge.n	8009f9a <__ieee754_log+0x6a>
 8009f46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f4a:	4303      	orrs	r3, r0
 8009f4c:	ee10 2a10 	vmov	r2, s0
 8009f50:	d10c      	bne.n	8009f6c <__ieee754_log+0x3c>
 8009f52:	49cf      	ldr	r1, [pc, #828]	; (800a290 <__ieee754_log+0x360>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	2300      	movs	r3, #0
 8009f58:	2000      	movs	r0, #0
 8009f5a:	f7f6 fc43 	bl	80007e4 <__aeabi_ddiv>
 8009f5e:	ec41 0b10 	vmov	d0, r0, r1
 8009f62:	b003      	add	sp, #12
 8009f64:	ecbd 8b04 	vpop	{d8-d9}
 8009f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f6c:	2900      	cmp	r1, #0
 8009f6e:	da05      	bge.n	8009f7c <__ieee754_log+0x4c>
 8009f70:	460b      	mov	r3, r1
 8009f72:	f7f6 f955 	bl	8000220 <__aeabi_dsub>
 8009f76:	2200      	movs	r2, #0
 8009f78:	2300      	movs	r3, #0
 8009f7a:	e7ee      	b.n	8009f5a <__ieee754_log+0x2a>
 8009f7c:	4bc5      	ldr	r3, [pc, #788]	; (800a294 <__ieee754_log+0x364>)
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f7f6 fb06 	bl	8000590 <__aeabi_dmul>
 8009f84:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8009f88:	460d      	mov	r5, r1
 8009f8a:	4ac3      	ldr	r2, [pc, #780]	; (800a298 <__ieee754_log+0x368>)
 8009f8c:	4295      	cmp	r5, r2
 8009f8e:	dd06      	ble.n	8009f9e <__ieee754_log+0x6e>
 8009f90:	4602      	mov	r2, r0
 8009f92:	460b      	mov	r3, r1
 8009f94:	f7f6 f946 	bl	8000224 <__adddf3>
 8009f98:	e7e1      	b.n	8009f5e <__ieee754_log+0x2e>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	e7f5      	b.n	8009f8a <__ieee754_log+0x5a>
 8009f9e:	152c      	asrs	r4, r5, #20
 8009fa0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009fa4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009fa8:	441c      	add	r4, r3
 8009faa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8009fae:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8009fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009fb6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8009fba:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8009fbe:	ea42 0105 	orr.w	r1, r2, r5
 8009fc2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	4bb4      	ldr	r3, [pc, #720]	; (800a29c <__ieee754_log+0x36c>)
 8009fca:	f7f6 f929 	bl	8000220 <__aeabi_dsub>
 8009fce:	1cab      	adds	r3, r5, #2
 8009fd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fd4:	2b02      	cmp	r3, #2
 8009fd6:	4682      	mov	sl, r0
 8009fd8:	468b      	mov	fp, r1
 8009fda:	f04f 0200 	mov.w	r2, #0
 8009fde:	dc53      	bgt.n	800a088 <__ieee754_log+0x158>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	f7f6 fd3d 	bl	8000a60 <__aeabi_dcmpeq>
 8009fe6:	b1d0      	cbz	r0, 800a01e <__ieee754_log+0xee>
 8009fe8:	2c00      	cmp	r4, #0
 8009fea:	f000 8122 	beq.w	800a232 <__ieee754_log+0x302>
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f7f6 fa64 	bl	80004bc <__aeabi_i2d>
 8009ff4:	a390      	add	r3, pc, #576	; (adr r3, 800a238 <__ieee754_log+0x308>)
 8009ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffa:	4606      	mov	r6, r0
 8009ffc:	460f      	mov	r7, r1
 8009ffe:	f7f6 fac7 	bl	8000590 <__aeabi_dmul>
 800a002:	a38f      	add	r3, pc, #572	; (adr r3, 800a240 <__ieee754_log+0x310>)
 800a004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a008:	4604      	mov	r4, r0
 800a00a:	460d      	mov	r5, r1
 800a00c:	4630      	mov	r0, r6
 800a00e:	4639      	mov	r1, r7
 800a010:	f7f6 fabe 	bl	8000590 <__aeabi_dmul>
 800a014:	4602      	mov	r2, r0
 800a016:	460b      	mov	r3, r1
 800a018:	4620      	mov	r0, r4
 800a01a:	4629      	mov	r1, r5
 800a01c:	e7ba      	b.n	8009f94 <__ieee754_log+0x64>
 800a01e:	a38a      	add	r3, pc, #552	; (adr r3, 800a248 <__ieee754_log+0x318>)
 800a020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a024:	4650      	mov	r0, sl
 800a026:	4659      	mov	r1, fp
 800a028:	f7f6 fab2 	bl	8000590 <__aeabi_dmul>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	2000      	movs	r0, #0
 800a032:	499b      	ldr	r1, [pc, #620]	; (800a2a0 <__ieee754_log+0x370>)
 800a034:	f7f6 f8f4 	bl	8000220 <__aeabi_dsub>
 800a038:	4652      	mov	r2, sl
 800a03a:	4606      	mov	r6, r0
 800a03c:	460f      	mov	r7, r1
 800a03e:	465b      	mov	r3, fp
 800a040:	4650      	mov	r0, sl
 800a042:	4659      	mov	r1, fp
 800a044:	f7f6 faa4 	bl	8000590 <__aeabi_dmul>
 800a048:	4602      	mov	r2, r0
 800a04a:	460b      	mov	r3, r1
 800a04c:	4630      	mov	r0, r6
 800a04e:	4639      	mov	r1, r7
 800a050:	f7f6 fa9e 	bl	8000590 <__aeabi_dmul>
 800a054:	4606      	mov	r6, r0
 800a056:	460f      	mov	r7, r1
 800a058:	b914      	cbnz	r4, 800a060 <__ieee754_log+0x130>
 800a05a:	4632      	mov	r2, r6
 800a05c:	463b      	mov	r3, r7
 800a05e:	e0a2      	b.n	800a1a6 <__ieee754_log+0x276>
 800a060:	4620      	mov	r0, r4
 800a062:	f7f6 fa2b 	bl	80004bc <__aeabi_i2d>
 800a066:	a374      	add	r3, pc, #464	; (adr r3, 800a238 <__ieee754_log+0x308>)
 800a068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06c:	4680      	mov	r8, r0
 800a06e:	4689      	mov	r9, r1
 800a070:	f7f6 fa8e 	bl	8000590 <__aeabi_dmul>
 800a074:	a372      	add	r3, pc, #456	; (adr r3, 800a240 <__ieee754_log+0x310>)
 800a076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07a:	4604      	mov	r4, r0
 800a07c:	460d      	mov	r5, r1
 800a07e:	4640      	mov	r0, r8
 800a080:	4649      	mov	r1, r9
 800a082:	f7f6 fa85 	bl	8000590 <__aeabi_dmul>
 800a086:	e0a7      	b.n	800a1d8 <__ieee754_log+0x2a8>
 800a088:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a08c:	f7f6 f8ca 	bl	8000224 <__adddf3>
 800a090:	4602      	mov	r2, r0
 800a092:	460b      	mov	r3, r1
 800a094:	4650      	mov	r0, sl
 800a096:	4659      	mov	r1, fp
 800a098:	f7f6 fba4 	bl	80007e4 <__aeabi_ddiv>
 800a09c:	ec41 0b18 	vmov	d8, r0, r1
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	f7f6 fa0b 	bl	80004bc <__aeabi_i2d>
 800a0a6:	ec53 2b18 	vmov	r2, r3, d8
 800a0aa:	ec41 0b19 	vmov	d9, r0, r1
 800a0ae:	ec51 0b18 	vmov	r0, r1, d8
 800a0b2:	f7f6 fa6d 	bl	8000590 <__aeabi_dmul>
 800a0b6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800a0ba:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800a0be:	9301      	str	r3, [sp, #4]
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	4680      	mov	r8, r0
 800a0c6:	4689      	mov	r9, r1
 800a0c8:	f7f6 fa62 	bl	8000590 <__aeabi_dmul>
 800a0cc:	a360      	add	r3, pc, #384	; (adr r3, 800a250 <__ieee754_log+0x320>)
 800a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d2:	4606      	mov	r6, r0
 800a0d4:	460f      	mov	r7, r1
 800a0d6:	f7f6 fa5b 	bl	8000590 <__aeabi_dmul>
 800a0da:	a35f      	add	r3, pc, #380	; (adr r3, 800a258 <__ieee754_log+0x328>)
 800a0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e0:	f7f6 f8a0 	bl	8000224 <__adddf3>
 800a0e4:	4632      	mov	r2, r6
 800a0e6:	463b      	mov	r3, r7
 800a0e8:	f7f6 fa52 	bl	8000590 <__aeabi_dmul>
 800a0ec:	a35c      	add	r3, pc, #368	; (adr r3, 800a260 <__ieee754_log+0x330>)
 800a0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f2:	f7f6 f897 	bl	8000224 <__adddf3>
 800a0f6:	4632      	mov	r2, r6
 800a0f8:	463b      	mov	r3, r7
 800a0fa:	f7f6 fa49 	bl	8000590 <__aeabi_dmul>
 800a0fe:	a35a      	add	r3, pc, #360	; (adr r3, 800a268 <__ieee754_log+0x338>)
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	f7f6 f88e 	bl	8000224 <__adddf3>
 800a108:	4642      	mov	r2, r8
 800a10a:	464b      	mov	r3, r9
 800a10c:	f7f6 fa40 	bl	8000590 <__aeabi_dmul>
 800a110:	a357      	add	r3, pc, #348	; (adr r3, 800a270 <__ieee754_log+0x340>)
 800a112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a116:	4680      	mov	r8, r0
 800a118:	4689      	mov	r9, r1
 800a11a:	4630      	mov	r0, r6
 800a11c:	4639      	mov	r1, r7
 800a11e:	f7f6 fa37 	bl	8000590 <__aeabi_dmul>
 800a122:	a355      	add	r3, pc, #340	; (adr r3, 800a278 <__ieee754_log+0x348>)
 800a124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a128:	f7f6 f87c 	bl	8000224 <__adddf3>
 800a12c:	4632      	mov	r2, r6
 800a12e:	463b      	mov	r3, r7
 800a130:	f7f6 fa2e 	bl	8000590 <__aeabi_dmul>
 800a134:	a352      	add	r3, pc, #328	; (adr r3, 800a280 <__ieee754_log+0x350>)
 800a136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13a:	f7f6 f873 	bl	8000224 <__adddf3>
 800a13e:	4632      	mov	r2, r6
 800a140:	463b      	mov	r3, r7
 800a142:	f7f6 fa25 	bl	8000590 <__aeabi_dmul>
 800a146:	460b      	mov	r3, r1
 800a148:	4602      	mov	r2, r0
 800a14a:	4649      	mov	r1, r9
 800a14c:	4640      	mov	r0, r8
 800a14e:	f7f6 f869 	bl	8000224 <__adddf3>
 800a152:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800a156:	9b01      	ldr	r3, [sp, #4]
 800a158:	3551      	adds	r5, #81	; 0x51
 800a15a:	431d      	orrs	r5, r3
 800a15c:	2d00      	cmp	r5, #0
 800a15e:	4680      	mov	r8, r0
 800a160:	4689      	mov	r9, r1
 800a162:	dd48      	ble.n	800a1f6 <__ieee754_log+0x2c6>
 800a164:	4b4e      	ldr	r3, [pc, #312]	; (800a2a0 <__ieee754_log+0x370>)
 800a166:	2200      	movs	r2, #0
 800a168:	4650      	mov	r0, sl
 800a16a:	4659      	mov	r1, fp
 800a16c:	f7f6 fa10 	bl	8000590 <__aeabi_dmul>
 800a170:	4652      	mov	r2, sl
 800a172:	465b      	mov	r3, fp
 800a174:	f7f6 fa0c 	bl	8000590 <__aeabi_dmul>
 800a178:	4602      	mov	r2, r0
 800a17a:	460b      	mov	r3, r1
 800a17c:	4606      	mov	r6, r0
 800a17e:	460f      	mov	r7, r1
 800a180:	4640      	mov	r0, r8
 800a182:	4649      	mov	r1, r9
 800a184:	f7f6 f84e 	bl	8000224 <__adddf3>
 800a188:	ec53 2b18 	vmov	r2, r3, d8
 800a18c:	f7f6 fa00 	bl	8000590 <__aeabi_dmul>
 800a190:	4680      	mov	r8, r0
 800a192:	4689      	mov	r9, r1
 800a194:	b964      	cbnz	r4, 800a1b0 <__ieee754_log+0x280>
 800a196:	4602      	mov	r2, r0
 800a198:	460b      	mov	r3, r1
 800a19a:	4630      	mov	r0, r6
 800a19c:	4639      	mov	r1, r7
 800a19e:	f7f6 f83f 	bl	8000220 <__aeabi_dsub>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	4650      	mov	r0, sl
 800a1a8:	4659      	mov	r1, fp
 800a1aa:	f7f6 f839 	bl	8000220 <__aeabi_dsub>
 800a1ae:	e6d6      	b.n	8009f5e <__ieee754_log+0x2e>
 800a1b0:	a321      	add	r3, pc, #132	; (adr r3, 800a238 <__ieee754_log+0x308>)
 800a1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b6:	ec51 0b19 	vmov	r0, r1, d9
 800a1ba:	f7f6 f9e9 	bl	8000590 <__aeabi_dmul>
 800a1be:	a320      	add	r3, pc, #128	; (adr r3, 800a240 <__ieee754_log+0x310>)
 800a1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	460d      	mov	r5, r1
 800a1c8:	ec51 0b19 	vmov	r0, r1, d9
 800a1cc:	f7f6 f9e0 	bl	8000590 <__aeabi_dmul>
 800a1d0:	4642      	mov	r2, r8
 800a1d2:	464b      	mov	r3, r9
 800a1d4:	f7f6 f826 	bl	8000224 <__adddf3>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	460b      	mov	r3, r1
 800a1dc:	4630      	mov	r0, r6
 800a1de:	4639      	mov	r1, r7
 800a1e0:	f7f6 f81e 	bl	8000220 <__aeabi_dsub>
 800a1e4:	4652      	mov	r2, sl
 800a1e6:	465b      	mov	r3, fp
 800a1e8:	f7f6 f81a 	bl	8000220 <__aeabi_dsub>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	4629      	mov	r1, r5
 800a1f4:	e7d9      	b.n	800a1aa <__ieee754_log+0x27a>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	4650      	mov	r0, sl
 800a1fc:	4659      	mov	r1, fp
 800a1fe:	f7f6 f80f 	bl	8000220 <__aeabi_dsub>
 800a202:	ec53 2b18 	vmov	r2, r3, d8
 800a206:	f7f6 f9c3 	bl	8000590 <__aeabi_dmul>
 800a20a:	4606      	mov	r6, r0
 800a20c:	460f      	mov	r7, r1
 800a20e:	2c00      	cmp	r4, #0
 800a210:	f43f af23 	beq.w	800a05a <__ieee754_log+0x12a>
 800a214:	a308      	add	r3, pc, #32	; (adr r3, 800a238 <__ieee754_log+0x308>)
 800a216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21a:	ec51 0b19 	vmov	r0, r1, d9
 800a21e:	f7f6 f9b7 	bl	8000590 <__aeabi_dmul>
 800a222:	a307      	add	r3, pc, #28	; (adr r3, 800a240 <__ieee754_log+0x310>)
 800a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a228:	4604      	mov	r4, r0
 800a22a:	460d      	mov	r5, r1
 800a22c:	ec51 0b19 	vmov	r0, r1, d9
 800a230:	e727      	b.n	800a082 <__ieee754_log+0x152>
 800a232:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800a288 <__ieee754_log+0x358>
 800a236:	e694      	b.n	8009f62 <__ieee754_log+0x32>
 800a238:	fee00000 	.word	0xfee00000
 800a23c:	3fe62e42 	.word	0x3fe62e42
 800a240:	35793c76 	.word	0x35793c76
 800a244:	3dea39ef 	.word	0x3dea39ef
 800a248:	55555555 	.word	0x55555555
 800a24c:	3fd55555 	.word	0x3fd55555
 800a250:	df3e5244 	.word	0xdf3e5244
 800a254:	3fc2f112 	.word	0x3fc2f112
 800a258:	96cb03de 	.word	0x96cb03de
 800a25c:	3fc74664 	.word	0x3fc74664
 800a260:	94229359 	.word	0x94229359
 800a264:	3fd24924 	.word	0x3fd24924
 800a268:	55555593 	.word	0x55555593
 800a26c:	3fe55555 	.word	0x3fe55555
 800a270:	d078c69f 	.word	0xd078c69f
 800a274:	3fc39a09 	.word	0x3fc39a09
 800a278:	1d8e78af 	.word	0x1d8e78af
 800a27c:	3fcc71c5 	.word	0x3fcc71c5
 800a280:	9997fa04 	.word	0x9997fa04
 800a284:	3fd99999 	.word	0x3fd99999
	...
 800a290:	c3500000 	.word	0xc3500000
 800a294:	43500000 	.word	0x43500000
 800a298:	7fefffff 	.word	0x7fefffff
 800a29c:	3ff00000 	.word	0x3ff00000
 800a2a0:	3fe00000 	.word	0x3fe00000
 800a2a4:	00000000 	.word	0x00000000

0800a2a8 <nan>:
 800a2a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a2b0 <nan+0x8>
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	00000000 	.word	0x00000000
 800a2b4:	7ff80000 	.word	0x7ff80000

0800a2b8 <_init>:
 800a2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ba:	bf00      	nop
 800a2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2be:	bc08      	pop	{r3}
 800a2c0:	469e      	mov	lr, r3
 800a2c2:	4770      	bx	lr

0800a2c4 <_fini>:
 800a2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c6:	bf00      	nop
 800a2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ca:	bc08      	pop	{r3}
 800a2cc:	469e      	mov	lr, r3
 800a2ce:	4770      	bx	lr
