
AMS-Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007958  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08007b30  08007b30  00017b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b44  08007b44  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08007b44  08007b44  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b44  08007b44  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b44  08007b44  00017b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b48  08007b48  00017b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000478  20000070  08007bbc  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08007bbc  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001316d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f9  00000000  00000000  0003320d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00035908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff0  00000000  00000000  000369e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028643  00000000  00000000  000379d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011981  00000000  00000000  00060013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108f31  00000000  00000000  00071994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017a8c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004abc  00000000  00000000  0017a918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007b18 	.word	0x08007b18

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	08007b18 	.word	0x08007b18

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2lz>:
 8000b30:	b538      	push	{r3, r4, r5, lr}
 8000b32:	2200      	movs	r2, #0
 8000b34:	2300      	movs	r3, #0
 8000b36:	4604      	mov	r4, r0
 8000b38:	460d      	mov	r5, r1
 8000b3a:	f7ff ff9b 	bl	8000a74 <__aeabi_dcmplt>
 8000b3e:	b928      	cbnz	r0, 8000b4c <__aeabi_d2lz+0x1c>
 8000b40:	4620      	mov	r0, r4
 8000b42:	4629      	mov	r1, r5
 8000b44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b48:	f000 b80a 	b.w	8000b60 <__aeabi_d2ulz>
 8000b4c:	4620      	mov	r0, r4
 8000b4e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000b52:	f000 f805 	bl	8000b60 <__aeabi_d2ulz>
 8000b56:	4240      	negs	r0, r0
 8000b58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b5c:	bd38      	pop	{r3, r4, r5, pc}
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2ulz>:
 8000b60:	b5d0      	push	{r4, r6, r7, lr}
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <__aeabi_d2ulz+0x34>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	4606      	mov	r6, r0
 8000b68:	460f      	mov	r7, r1
 8000b6a:	f7ff fd11 	bl	8000590 <__aeabi_dmul>
 8000b6e:	f7ff ffbf 	bl	8000af0 <__aeabi_d2uiz>
 8000b72:	4604      	mov	r4, r0
 8000b74:	f7ff fc92 	bl	800049c <__aeabi_ui2d>
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <__aeabi_d2ulz+0x38>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f7ff fd08 	bl	8000590 <__aeabi_dmul>
 8000b80:	4602      	mov	r2, r0
 8000b82:	460b      	mov	r3, r1
 8000b84:	4630      	mov	r0, r6
 8000b86:	4639      	mov	r1, r7
 8000b88:	f7ff fb4a 	bl	8000220 <__aeabi_dsub>
 8000b8c:	f7ff ffb0 	bl	8000af0 <__aeabi_d2uiz>
 8000b90:	4621      	mov	r1, r4
 8000b92:	bdd0      	pop	{r4, r6, r7, pc}
 8000b94:	3df00000 	.word	0x3df00000
 8000b98:	41f00000 	.word	0x41f00000

08000b9c <init_PEC15_Table>:

int16_t pec15Table[256];
const int16_t CRC15_POLY = 0x4599;

void init_PEC15_Table(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
    int16_t remainder;

    for (int i = 0; i < 256; i++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	e026      	b.n	8000bf6 <init_PEC15_Table+0x5a>
    {
        remainder = i << 7;
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	01db      	lsls	r3, r3, #7
 8000bac:	81fb      	strh	r3, [r7, #14]
        for (int bit = 8; bit > 0; --bit)
 8000bae:	2308      	movs	r3, #8
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	e015      	b.n	8000be0 <init_PEC15_Table+0x44>
        {
            if (remainder & 0x4000)
 8000bb4:	89fb      	ldrh	r3, [r7, #14]
 8000bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d009      	beq.n	8000bd2 <init_PEC15_Table+0x36>
            {
                remainder = ((remainder << 1));
 8000bbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	81fb      	strh	r3, [r7, #14]
                remainder = (remainder ^ CRC15_POLY);
 8000bc6:	f244 5299 	movw	r2, #17817	; 0x4599
 8000bca:	89fb      	ldrh	r3, [r7, #14]
 8000bcc:	4053      	eors	r3, r2
 8000bce:	81fb      	strh	r3, [r7, #14]
 8000bd0:	e003      	b.n	8000bda <init_PEC15_Table+0x3e>
            }
            else
            {
                remainder = ((remainder << 1));
 8000bd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	81fb      	strh	r3, [r7, #14]
        for (int bit = 8; bit > 0; --bit)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	dce6      	bgt.n	8000bb4 <init_PEC15_Table+0x18>
            }
        }
        pec15Table[i] = remainder & 0xFFFF;
 8000be6:	4909      	ldr	r1, [pc, #36]	; (8000c0c <init_PEC15_Table+0x70>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	89fa      	ldrh	r2, [r7, #14]
 8000bec:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int i = 0; i < 256; i++)
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	2bff      	cmp	r3, #255	; 0xff
 8000bfa:	ddd5      	ble.n	8000ba8 <init_PEC15_Table+0xc>
    }
}
 8000bfc:	bf00      	nop
 8000bfe:	bf00      	nop
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	2000008c 	.word	0x2000008c

08000c10 <pec15>:


uint16_t pec15(uint8_t *data, int len)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b087      	sub	sp, #28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
    int16_t remainder, address;

    remainder = 16; // PEC seed
 8000c1a:	2310      	movs	r3, #16
 8000c1c:	82fb      	strh	r3, [r7, #22]

    for (int i = 0; i < len; i++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	e01a      	b.n	8000c5a <pec15+0x4a>
    {
        address = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 8000c24:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c28:	11db      	asrs	r3, r3, #7
 8000c2a:	b21a      	sxth	r2, r3
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	440b      	add	r3, r1
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	4053      	eors	r3, r2
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	81fb      	strh	r3, [r7, #14]
        remainder = (remainder << 8) ^ pec15Table[address];
 8000c3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c42:	021b      	lsls	r3, r3, #8
 8000c44:	b21a      	sxth	r2, r3
 8000c46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c4a:	490a      	ldr	r1, [pc, #40]	; (8000c74 <pec15+0x64>)
 8000c4c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000c50:	4053      	eors	r3, r2
 8000c52:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < len; i++)
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	3301      	adds	r3, #1
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	dbe0      	blt.n	8000c24 <pec15+0x14>
    }
    return (remainder * 2); // The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 8000c62:	8afb      	ldrh	r3, [r7, #22]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	b29b      	uxth	r3, r3
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	371c      	adds	r7, #28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	2000008c 	.word	0x2000008c

08000c78 <init_LTC6811>:


void init_LTC6811(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
    init_PEC15_Table();
 8000c7c:	f7ff ff8e 	bl	8000b9c <init_PEC15_Table>
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <update_config>:


void update_config(ltc6811_config *config)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
    uint8_t cfgr[6] = {0};
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	2300      	movs	r3, #0
 8000c92:	81bb      	strh	r3, [r7, #12]

    cfgr[0] = config->gpio_pulldowns << 3;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	723b      	strb	r3, [r7, #8]
    cfgr[0] |= config->refon << 2;
 8000c9e:	7a3b      	ldrb	r3, [r7, #8]
 8000ca0:	b25a      	sxtb	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	785b      	ldrb	r3, [r3, #1]
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	b25b      	sxtb	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b25b      	sxtb	r3, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	723b      	strb	r3, [r7, #8]
    cfgr[0] |= config->adcopt;
 8000cb2:	7a3b      	ldrb	r3, [r7, #8]
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	7892      	ldrb	r2, [r2, #2]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	723b      	strb	r3, [r7, #8]

    cfgr[1] = config->vuv;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	889b      	ldrh	r3, [r3, #4]
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	727b      	strb	r3, [r7, #9]

    cfgr[2] = config->vuv >> 8;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	889b      	ldrh	r3, [r3, #4]
 8000cca:	0a1b      	lsrs	r3, r3, #8
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	72bb      	strb	r3, [r7, #10]
    cfgr[2] |= config->vov << 4;
 8000cd2:	7abb      	ldrb	r3, [r7, #10]
 8000cd4:	b25a      	sxtb	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	88db      	ldrh	r3, [r3, #6]
 8000cda:	011b      	lsls	r3, r3, #4
 8000cdc:	b25b      	sxtb	r3, r3
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	72bb      	strb	r3, [r7, #10]

    cfgr[3] = config->vov >> 4;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	88db      	ldrh	r3, [r3, #6]
 8000cea:	091b      	lsrs	r3, r3, #4
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	72fb      	strb	r3, [r7, #11]

    cfgr[4] = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	733b      	strb	r3, [r7, #12]

    cfgr[5] = config->dcto << 4;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	7a1b      	ldrb	r3, [r3, #8]
 8000cfa:	011b      	lsls	r3, r3, #4
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	737b      	strb	r3, [r7, #13]

    broadcast_write(WRCFGA, cfgr);
 8000d00:	f107 0308 	add.w	r3, r7, #8
 8000d04:	4619      	mov	r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	f000 f878 	bl	8000dfc <broadcast_write>
}
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <wake_sleep>:

////NEED TO CHANGE TO HAL
void wake_sleep()
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d22:	f004 fb3b 	bl	800539c <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000d26:	2001      	movs	r0, #1
 8000d28:	f001 fc10 	bl	800254c <HAL_Delay>

    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d36:	f004 fb31 	bl	800539c <HAL_GPIO_WritePin>

    HAL_Delay(1);
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f001 fc06 	bl	800254c <HAL_Delay>
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <wake_standby>:


void wake_standby()
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d52:	f004 fb23 	bl	800539c <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000d56:	2001      	movs	r0, #1
 8000d58:	f001 fbf8 	bl	800254c <HAL_Delay>

    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d66:	f004 fb19 	bl	800539c <HAL_GPIO_WritePin>

    HAL_Delay(1);
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f001 fbee 	bl	800254c <HAL_Delay>
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <broadcast_command>:


void broadcast_command(uint16_t command_code)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	80fb      	strh	r3, [r7, #6]
    uint8_t CMD[2];

    // see Table 36 (Broadcast Command Format) in LTC6811 datasheet
    CMD[0] = 0;                  // CMD0 bits 3 thru 7  = 0
 8000d7e:	2300      	movs	r3, #0
 8000d80:	733b      	strb	r3, [r7, #12]
    CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 8000d82:	7b3a      	ldrb	r2, [r7, #12]
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	0a1b      	lsrs	r3, r3, #8
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	733b      	strb	r3, [r7, #12]
    CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	737b      	strb	r3, [r7, #13]

    uint16_t crc = pec15(CMD, 2); // CRC for CMD
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff36 	bl	8000c10 <pec15>
 8000da4:	4603      	mov	r3, r0
 8000da6:	81fb      	strh	r3, [r7, #14]

    uint8_t tx_msg[4];

    // Send 2-byte CMD and 2-byte PEC15.

    tx_msg[0] = CMD[0];
 8000da8:	7b3b      	ldrb	r3, [r7, #12]
 8000daa:	723b      	strb	r3, [r7, #8]
    tx_msg[1] = CMD[1];
 8000dac:	7b7b      	ldrb	r3, [r7, #13]
 8000dae:	727b      	strb	r3, [r7, #9]
    tx_msg[2] = crc >> 8;
 8000db0:	89fb      	ldrh	r3, [r7, #14]
 8000db2:	0a1b      	lsrs	r3, r3, #8
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	72bb      	strb	r3, [r7, #10]
    tx_msg[3] = crc;
 8000dba:	89fb      	ldrh	r3, [r7, #14]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	72fb      	strb	r3, [r7, #11]




#ifdef ALWAYS_STANDBY_WAKE
    wake_standby();
 8000dc0:	f7ff ffc0 	bl	8000d44 <wake_standby>
#endif
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dce:	f004 fae5 	bl	800539c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, tx_msg, 4, 1000);
 8000dd2:	f107 0108 	add.w	r1, r7, #8
 8000dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dda:	2204      	movs	r2, #4
 8000ddc:	4806      	ldr	r0, [pc, #24]	; (8000df8 <broadcast_command+0x84>)
 8000dde:	f005 fdf6 	bl	80069ce <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000de2:	2201      	movs	r2, #1
 8000de4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000de8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dec:	f004 fad6 	bl	800539c <HAL_GPIO_WritePin>
}
 8000df0:	bf00      	nop
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000448 	.word	0x20000448

08000dfc <broadcast_write>:


void broadcast_write(uint16_t command_code, uint8_t *tx_reg)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	80fb      	strh	r3, [r7, #6]
    uint8_t CMD[2];

    // see Table 36 (Broadcast Command Format) in LTC6811 datasheet
    CMD[0] = 0;                  // CMD0 bits 3 thru 7  = 0
 8000e08:	2300      	movs	r3, #0
 8000e0a:	753b      	strb	r3, [r7, #20]
    CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 8000e0c:	7d3a      	ldrb	r2, [r7, #20]
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4313      	orrs	r3, r2
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	753b      	strb	r3, [r7, #20]
    CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 8000e1c:	88fb      	ldrh	r3, [r7, #6]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	757b      	strb	r3, [r7, #21]

    uint16_t crc = pec15(CMD, 2); // CRC for CMD
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	2102      	movs	r1, #2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fef1 	bl	8000c10 <pec15>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	82fb      	strh	r3, [r7, #22]

    uint8_t tx_msg[12];

    // Send 2-byte CMD and 2-byte PEC15, then 6-byte register and 2-byte PEC15. No shift bytes.

    tx_msg[0] = CMD[0];
 8000e32:	7d3b      	ldrb	r3, [r7, #20]
 8000e34:	723b      	strb	r3, [r7, #8]
    tx_msg[1] = CMD[1];
 8000e36:	7d7b      	ldrb	r3, [r7, #21]
 8000e38:	727b      	strb	r3, [r7, #9]
    tx_msg[2] = crc >> 8;
 8000e3a:	8afb      	ldrh	r3, [r7, #22]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	72bb      	strb	r3, [r7, #10]
    tx_msg[3] = crc;
 8000e44:	8afb      	ldrh	r3, [r7, #22]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	72fb      	strb	r3, [r7, #11]

    crc = pec15(tx_reg, 6); // CRC for register value
 8000e4a:	2106      	movs	r1, #6
 8000e4c:	6838      	ldr	r0, [r7, #0]
 8000e4e:	f7ff fedf 	bl	8000c10 <pec15>
 8000e52:	4603      	mov	r3, r0
 8000e54:	82fb      	strh	r3, [r7, #22]

    tx_msg[4] = tx_reg[0];
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	733b      	strb	r3, [r7, #12]
    tx_msg[5] = tx_reg[1];
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	785b      	ldrb	r3, [r3, #1]
 8000e60:	737b      	strb	r3, [r7, #13]
    tx_msg[6] = tx_reg[2];
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	789b      	ldrb	r3, [r3, #2]
 8000e66:	73bb      	strb	r3, [r7, #14]
    tx_msg[7] = tx_reg[3];
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	78db      	ldrb	r3, [r3, #3]
 8000e6c:	73fb      	strb	r3, [r7, #15]
    tx_msg[8] = tx_reg[4];
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	791b      	ldrb	r3, [r3, #4]
 8000e72:	743b      	strb	r3, [r7, #16]
    tx_msg[9] = tx_reg[5];
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	795b      	ldrb	r3, [r3, #5]
 8000e78:	747b      	strb	r3, [r7, #17]
    tx_msg[10] = crc >> 8;
 8000e7a:	8afb      	ldrh	r3, [r7, #22]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	74bb      	strb	r3, [r7, #18]
    tx_msg[11] = crc;
 8000e84:	8afb      	ldrh	r3, [r7, #22]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	74fb      	strb	r3, [r7, #19]




#ifdef ALWAYS_STANDBY_WAKE
    wake_standby();
 8000e8a:	f7ff ff5b 	bl	8000d44 <wake_standby>
#endif
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e98:	f004 fa80 	bl	800539c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, tx_msg, 12, 1000);
 8000e9c:	f107 0108 	add.w	r1, r7, #8
 8000ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea4:	220c      	movs	r2, #12
 8000ea6:	4807      	ldr	r0, [pc, #28]	; (8000ec4 <broadcast_write+0xc8>)
 8000ea8:	f005 fd91 	bl	80069ce <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb6:	f004 fa71 	bl	800539c <HAL_GPIO_WritePin>
}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000448 	.word	0x20000448

08000ec8 <address_write>:


void address_write(uint8_t address, uint16_t command_code, uint8_t *tx_reg)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	603a      	str	r2, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	80bb      	strh	r3, [r7, #4]
    uint8_t CMD[2];

    // see Table 37 (Address Command Format) in LTC6811 datasheet
    CMD[0] = 0x80;               // CMD0 bit 7          = 1
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	753b      	strb	r3, [r7, #20]
    CMD[0] |= address << 3;      // CMD0 bits 3 thu 6   = address
 8000edc:	7d3b      	ldrb	r3, [r7, #20]
 8000ede:	b25a      	sxtb	r2, r3
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	b25b      	sxtb	r3, r3
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	753b      	strb	r3, [r7, #20]
    CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 8000eee:	7d3a      	ldrb	r2, [r7, #20]
 8000ef0:	88bb      	ldrh	r3, [r7, #4]
 8000ef2:	0a1b      	lsrs	r3, r3, #8
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	753b      	strb	r3, [r7, #20]
    CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 8000efe:	88bb      	ldrh	r3, [r7, #4]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	757b      	strb	r3, [r7, #21]

    uint16_t crc = pec15(CMD, 2); // CRC for CMD
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2102      	movs	r1, #2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fe80 	bl	8000c10 <pec15>
 8000f10:	4603      	mov	r3, r0
 8000f12:	82fb      	strh	r3, [r7, #22]
    uint8_t tx_msg[12];

    // See Table 33 (Address Write Command) in LTC6811 datasheet.
    // Send 2-byte CMD and 2-byte PEC15, then 6-byte register and 2-byte PEC15

    tx_msg[0] = CMD[0];
 8000f14:	7d3b      	ldrb	r3, [r7, #20]
 8000f16:	723b      	strb	r3, [r7, #8]
    tx_msg[1] = CMD[1];
 8000f18:	7d7b      	ldrb	r3, [r7, #21]
 8000f1a:	727b      	strb	r3, [r7, #9]
    tx_msg[2] = crc >> 8;
 8000f1c:	8afb      	ldrh	r3, [r7, #22]
 8000f1e:	0a1b      	lsrs	r3, r3, #8
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	72bb      	strb	r3, [r7, #10]
    tx_msg[3] = crc;
 8000f26:	8afb      	ldrh	r3, [r7, #22]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	72fb      	strb	r3, [r7, #11]

    crc = pec15(tx_reg, 6); // CRC for register value
 8000f2c:	2106      	movs	r1, #6
 8000f2e:	6838      	ldr	r0, [r7, #0]
 8000f30:	f7ff fe6e 	bl	8000c10 <pec15>
 8000f34:	4603      	mov	r3, r0
 8000f36:	82fb      	strh	r3, [r7, #22]

    tx_msg[4] = tx_reg[0];
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	733b      	strb	r3, [r7, #12]
    tx_msg[5] = tx_reg[1];
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	785b      	ldrb	r3, [r3, #1]
 8000f42:	737b      	strb	r3, [r7, #13]
    tx_msg[6] = tx_reg[2];
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	789b      	ldrb	r3, [r3, #2]
 8000f48:	73bb      	strb	r3, [r7, #14]
    tx_msg[7] = tx_reg[3];
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	78db      	ldrb	r3, [r3, #3]
 8000f4e:	73fb      	strb	r3, [r7, #15]
    tx_msg[8] = tx_reg[4];
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	791b      	ldrb	r3, [r3, #4]
 8000f54:	743b      	strb	r3, [r7, #16]
    tx_msg[9] = tx_reg[5];
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	795b      	ldrb	r3, [r3, #5]
 8000f5a:	747b      	strb	r3, [r7, #17]
    tx_msg[10] = crc >> 8;
 8000f5c:	8afb      	ldrh	r3, [r7, #22]
 8000f5e:	0a1b      	lsrs	r3, r3, #8
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	74bb      	strb	r3, [r7, #18]
    tx_msg[11] = crc;
 8000f66:	8afb      	ldrh	r3, [r7, #22]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	74fb      	strb	r3, [r7, #19]


#ifdef ALWAYS_STANDBY_WAKE
    wake_standby();
 8000f6c:	f7ff feea 	bl	8000d44 <wake_standby>
#endif
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7a:	f004 fa0f 	bl	800539c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, tx_msg, 12, 1000);
 8000f7e:	f107 0108 	add.w	r1, r7, #8
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	220c      	movs	r2, #12
 8000f88:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <address_write+0xdc>)
 8000f8a:	f005 fd20 	bl	80069ce <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f98:	f004 fa00 	bl	800539c <HAL_GPIO_WritePin>
}
 8000f9c:	bf00      	nop
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000448 	.word	0x20000448

08000fa8 <address_read>:



void address_read(uint8_t address, uint16_t command_code, uint8_t *rx_reg)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	603a      	str	r2, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	80bb      	strh	r3, [r7, #4]
    uint8_t CMD[2];

    // see Table 37 (Address Command Format) in LTC6811 datasheet
    CMD[0] = 0x80;               // CMD0 bit 7          = 1
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	773b      	strb	r3, [r7, #28]
    CMD[0] |= address << 3;      // CMD0 bits 3 thu 6   = address
 8000fbc:	7f3b      	ldrb	r3, [r7, #28]
 8000fbe:	b25a      	sxtb	r2, r3
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b25b      	sxtb	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	773b      	strb	r3, [r7, #28]
    CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 8000fce:	7f3a      	ldrb	r2, [r7, #28]
 8000fd0:	88bb      	ldrh	r3, [r7, #4]
 8000fd2:	0a1b      	lsrs	r3, r3, #8
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	773b      	strb	r3, [r7, #28]
    CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 8000fde:	88bb      	ldrh	r3, [r7, #4]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	777b      	strb	r3, [r7, #29]

    uint16_t crc = pec15(CMD, 2);
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	2102      	movs	r1, #2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fe10 	bl	8000c10 <pec15>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	847b      	strh	r3, [r7, #34]	; 0x22

    uint8_t tx_msg[12];

    // Send 2-byte CMD and PEC15, then read 6-byte register and 2-byte PEC15

    tx_msg[0] = CMD[0];
 8000ff4:	7f3b      	ldrb	r3, [r7, #28]
 8000ff6:	743b      	strb	r3, [r7, #16]
    tx_msg[1] = CMD[1];
 8000ff8:	7f7b      	ldrb	r3, [r7, #29]
 8000ffa:	747b      	strb	r3, [r7, #17]
    tx_msg[2] = crc >> 8;
 8000ffc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ffe:	0a1b      	lsrs	r3, r3, #8
 8001000:	b29b      	uxth	r3, r3
 8001002:	b2db      	uxtb	r3, r3
 8001004:	74bb      	strb	r3, [r7, #18]
    tx_msg[3] = crc;
 8001006:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001008:	b2db      	uxtb	r3, r3
 800100a:	74fb      	strb	r3, [r7, #19]
    tx_msg[4] = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	753b      	strb	r3, [r7, #20]
    tx_msg[5] = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	757b      	strb	r3, [r7, #21]
    tx_msg[6] = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	75bb      	strb	r3, [r7, #22]
    tx_msg[7] = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	75fb      	strb	r3, [r7, #23]
    tx_msg[8] = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	763b      	strb	r3, [r7, #24]
    tx_msg[9] = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	767b      	strb	r3, [r7, #25]
    tx_msg[10] = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	76bb      	strb	r3, [r7, #26]
    tx_msg[11] = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	76fb      	strb	r3, [r7, #27]

    uint8_t rx_msg[8] = {0};
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]

	#ifdef ALWAYS_STANDBY_WAKE
		wake_standby();
 8001034:	f7ff fe86 	bl	8000d44 <wake_standby>
	#endif
	HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800103e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001042:	f004 f9ab 	bl	800539c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, tx_msg, 4, 1000);
 8001046:	f107 0110 	add.w	r1, r7, #16
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	2204      	movs	r2, #4
 8001050:	481d      	ldr	r0, [pc, #116]	; (80010c8 <address_read+0x120>)
 8001052:	f005 fcbc 	bl	80069ce <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, rx_msg, 8, 1000);
 8001056:	f107 0108 	add.w	r1, r7, #8
 800105a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105e:	2208      	movs	r2, #8
 8001060:	4819      	ldr	r0, [pc, #100]	; (80010c8 <address_read+0x120>)
 8001062:	f005 fe22 	bl	8006caa <HAL_SPI_Receive>
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800106c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001070:	f004 f994 	bl	800539c <HAL_GPIO_WritePin>
        crc = pec15(rx_msg, 6); // calculate PEC15 for received message (first 6 bytes)
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	2106      	movs	r1, #6
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fdc8 	bl	8000c10 <pec15>
 8001080:	4603      	mov	r3, r0
 8001082:	847b      	strh	r3, [r7, #34]	; 0x22

        uint16_t rx_crc = (rx_msg[6] << 8) + rx_msg[7]; // received PEC15
 8001084:	7bbb      	ldrb	r3, [r7, #14]
 8001086:	b29b      	uxth	r3, r3
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	b29a      	uxth	r2, r3
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	b29b      	uxth	r3, r3
 8001090:	4413      	add	r3, r2
 8001092:	843b      	strh	r3, [r7, #32]

        if (crc == rx_crc)
 8001094:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001096:	8c3b      	ldrh	r3, [r7, #32]
 8001098:	429a      	cmp	r2, r3
 800109a:	d111      	bne.n	80010c0 <address_read+0x118>
        {
            for (int i = 0; i < 6; i++)
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
 80010a0:	e00b      	b.n	80010ba <address_read+0x112>
            {
                rx_reg[i] = rx_msg[i];
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	f107 0108 	add.w	r1, r7, #8
 80010ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ae:	440a      	add	r2, r1
 80010b0:	7812      	ldrb	r2, [r2, #0]
 80010b2:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 6; i++)
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	3301      	adds	r3, #1
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	2b05      	cmp	r3, #5
 80010be:	ddf0      	ble.n	80010a2 <address_read+0xfa>
            }
        }
}
 80010c0:	bf00      	nop
 80010c2:	3728      	adds	r7, #40	; 0x28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000448 	.word	0x20000448

080010cc <extract_voltage_reg>:



void extract_voltage_reg(uint8_t *voltage_reg, float *voltages)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	e036      	b.n	800114a <extract_voltage_reg+0x7e>
    {
        if (voltage_reg[i * 2] == 0xFF && voltage_reg[(i * 2) + 1] == 0xFF)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	461a      	mov	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2bff      	cmp	r3, #255	; 0xff
 80010ea:	d10e      	bne.n	800110a <extract_voltage_reg+0x3e>
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	3301      	adds	r3, #1
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2bff      	cmp	r3, #255	; 0xff
 80010fa:	d106      	bne.n	800110a <extract_voltage_reg+0x3e>
        {
#ifdef NAN
            voltages[i] = NAN;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a16      	ldr	r2, [pc, #88]	; (8001160 <extract_voltage_reg+0x94>)
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	e01c      	b.n	8001144 <extract_voltage_reg+0x78>
#endif
        }
        else
        {
            voltages[i] = (float)(voltage_reg[i * 2] + (voltage_reg[(i * 2) + 1] << 8)) * 0.0001f;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	461a      	mov	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4413      	add	r3, r2
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	4619      	mov	r1, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	3301      	adds	r3, #1
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	440b      	add	r3, r1
 8001128:	ee07 3a90 	vmov	s15, r3
 800112c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	4413      	add	r3, r2
 8001138:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001164 <extract_voltage_reg+0x98>
 800113c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001140:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	3301      	adds	r3, #1
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2b02      	cmp	r3, #2
 800114e:	ddc5      	ble.n	80010dc <extract_voltage_reg+0x10>
        }
    }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	7fc00000 	.word	0x7fc00000
 8001164:	38d1b717 	.word	0x38d1b717

08001168 <extract_all_voltages>:


void extract_all_voltages(ltc6811 *ltc6811, float *cell_voltage, int slave_num)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b094      	sub	sp, #80	; 0x50
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]

    int cell = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	64fb      	str	r3, [r7, #76]	; 0x4c

    for (int slave = 0; slave < slave_num; slave++)
 8001178:	2300      	movs	r3, #0
 800117a:	64bb      	str	r3, [r7, #72]	; 0x48
 800117c:	e066      	b.n	800124c <extract_all_voltages+0xe4>
    {
        int i_max = ltc6811[slave].cell_count;
 800117e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	461a      	mov	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4413      	add	r3, r2
 800118e:	785b      	ldrb	r3, [r3, #1]
 8001190:	643b      	str	r3, [r7, #64]	; 0x40

        float reg_voltages[12];

        extract_voltage_reg(ltc6811[slave].cva_reg, &reg_voltages[0]);
 8001192:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001194:	4613      	mov	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	461a      	mov	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4413      	add	r3, r2
 80011a2:	3302      	adds	r3, #2
 80011a4:	f107 0210 	add.w	r2, r7, #16
 80011a8:	4611      	mov	r1, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff8e 	bl	80010cc <extract_voltage_reg>
        extract_voltage_reg(ltc6811[slave].cvb_reg, &reg_voltages[3]);
 80011b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80011b2:	4613      	mov	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	461a      	mov	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	f103 0208 	add.w	r2, r3, #8
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	330c      	adds	r3, #12
 80011ca:	4619      	mov	r1, r3
 80011cc:	4610      	mov	r0, r2
 80011ce:	f7ff ff7d 	bl	80010cc <extract_voltage_reg>
        extract_voltage_reg(ltc6811[slave].cvc_reg, &reg_voltages[6]);
 80011d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80011d4:	4613      	mov	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	461a      	mov	r2, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4413      	add	r3, r2
 80011e2:	f103 020e 	add.w	r2, r3, #14
 80011e6:	f107 0310 	add.w	r3, r7, #16
 80011ea:	3318      	adds	r3, #24
 80011ec:	4619      	mov	r1, r3
 80011ee:	4610      	mov	r0, r2
 80011f0:	f7ff ff6c 	bl	80010cc <extract_voltage_reg>
        extract_voltage_reg(ltc6811[slave].cvd_reg, &reg_voltages[9]);
 80011f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4413      	add	r3, r2
 8001204:	f103 0214 	add.w	r2, r3, #20
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	3324      	adds	r3, #36	; 0x24
 800120e:	4619      	mov	r1, r3
 8001210:	4610      	mov	r0, r2
 8001212:	f7ff ff5b 	bl	80010cc <extract_voltage_reg>

        for (int i = 0; i < i_max; i++)
 8001216:	2300      	movs	r3, #0
 8001218:	647b      	str	r3, [r7, #68]	; 0x44
 800121a:	e010      	b.n	800123e <extract_all_voltages+0xd6>
        {
            cell_voltage[cell] = reg_voltages[i];
 800121c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	68ba      	ldr	r2, [r7, #8]
 8001222:	4413      	add	r3, r2
 8001224:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001226:	0092      	lsls	r2, r2, #2
 8001228:	3250      	adds	r2, #80	; 0x50
 800122a:	443a      	add	r2, r7
 800122c:	3a40      	subs	r2, #64	; 0x40
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	601a      	str	r2, [r3, #0]
            cell++;
 8001232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001234:	3301      	adds	r3, #1
 8001236:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < i_max; i++)
 8001238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800123a:	3301      	adds	r3, #1
 800123c:	647b      	str	r3, [r7, #68]	; 0x44
 800123e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001242:	429a      	cmp	r2, r3
 8001244:	dbea      	blt.n	800121c <extract_all_voltages+0xb4>
    for (int slave = 0; slave < slave_num; slave++)
 8001246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001248:	3301      	adds	r3, #1
 800124a:	64bb      	str	r3, [r7, #72]	; 0x48
 800124c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	429a      	cmp	r2, r3
 8001252:	db94      	blt.n	800117e <extract_all_voltages+0x16>
        }
    }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3750      	adds	r7, #80	; 0x50
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <read_all_voltages>:


void read_all_voltages(ltc6811 *ltc6811, int slave_num)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b084      	sub	sp, #16
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	6039      	str	r1, [r7, #0]

    for (int slave = 0; slave < slave_num; slave++)
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	e05a      	b.n	8001324 <read_all_voltages+0xc6>
    {
        address_read(ltc6811[slave].address, RDCVA, ltc6811[slave].cva_reg);
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	461a      	mov	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	7818      	ldrb	r0, [r3, #0]
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	461a      	mov	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4413      	add	r3, r2
 8001290:	3302      	adds	r3, #2
 8001292:	461a      	mov	r2, r3
 8001294:	2104      	movs	r1, #4
 8001296:	f7ff fe87 	bl	8000fa8 <address_read>
        address_read(ltc6811[slave].address, RDCVB, ltc6811[slave].cvb_reg);
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	461a      	mov	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	7818      	ldrb	r0, [r3, #0]
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	461a      	mov	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4413      	add	r3, r2
 80012bc:	3308      	adds	r3, #8
 80012be:	461a      	mov	r2, r3
 80012c0:	2106      	movs	r1, #6
 80012c2:	f7ff fe71 	bl	8000fa8 <address_read>
        address_read(ltc6811[slave].address, RDCVC, ltc6811[slave].cvc_reg);
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	461a      	mov	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	7818      	ldrb	r0, [r3, #0]
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	461a      	mov	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4413      	add	r3, r2
 80012e8:	330e      	adds	r3, #14
 80012ea:	461a      	mov	r2, r3
 80012ec:	2108      	movs	r1, #8
 80012ee:	f7ff fe5b 	bl	8000fa8 <address_read>
        address_read(ltc6811[slave].address, RDCVD, ltc6811[slave].cvd_reg);
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	461a      	mov	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	7818      	ldrb	r0, [r3, #0]
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	461a      	mov	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4413      	add	r3, r2
 8001314:	3314      	adds	r3, #20
 8001316:	461a      	mov	r2, r3
 8001318:	210a      	movs	r1, #10
 800131a:	f7ff fe45 	bl	8000fa8 <address_read>
    for (int slave = 0; slave < slave_num; slave++)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	3301      	adds	r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	429a      	cmp	r2, r3
 800132a:	dba0      	blt.n	800126e <read_all_voltages+0x10>
    }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <generate_i2c>:

void generate_i2c(uint8_t * comm_reg, uint8_t *comm_data, uint8_t len)
// comm_data is an array with maximum 3 bytes to be written to COMM register
// len is number of bytes to be written (how many are in comm_data)

{
 8001336:	b480      	push	{r7}
 8001338:	b085      	sub	sp, #20
 800133a:	af00      	add	r7, sp, #0
 800133c:	60f8      	str	r0, [r7, #12]
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	4613      	mov	r3, r2
 8001342:	71fb      	strb	r3, [r7, #7]

	switch (len) {
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d002      	beq.n	8001350 <generate_i2c+0x1a>
 800134a:	2b03      	cmp	r3, #3
 800134c:	d02f      	beq.n	80013ae <generate_i2c+0x78>
	    comm_reg[5] = ((comm_data[2] << 4) & 0b1111) | 0b00001001; //mask with lower half data byte and master ack bits

		//how to send stop bits (does it automatically if using all 5 bytes?)
	    break;
    }
}
 800134e:	e05d      	b.n	800140c <generate_i2c+0xd6>
        comm_reg[0] = ((comm_data[0] >> 4) & 0b00001111) | 0b01100000; //mask with upper half data bit and start bits
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	b2db      	uxtb	r3, r3
 8001358:	b25b      	sxtb	r3, r3
 800135a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800135e:	b25b      	sxtb	r3, r3
 8001360:	b2da      	uxtb	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	701a      	strb	r2, [r3, #0]
	    comm_reg[1] = (comm_data[0] << 4) & 0b11110000; //mask with lower half data byte and master ack bits
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	011a      	lsls	r2, r3, #4
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	3301      	adds	r3, #1
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	701a      	strb	r2, [r3, #0]
	    comm_reg[2] = (comm_data[1] >> 4) & 0b00001111; //mask with upper half data bit and blank bits
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	3301      	adds	r3, #1
 8001378:	781a      	ldrb	r2, [r3, #0]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	3302      	adds	r3, #2
 800137e:	0912      	lsrs	r2, r2, #4
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	701a      	strb	r2, [r3, #0]
	    comm_reg[3] = ((comm_data[1] << 4) & 0b11110000) | 0b00001001; //mask with lower half data byte and master ack bits
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	3301      	adds	r3, #1
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	b25b      	sxtb	r3, r3
 800138e:	f043 0309 	orr.w	r3, r3, #9
 8001392:	b25a      	sxtb	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	3303      	adds	r3, #3
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	701a      	strb	r2, [r3, #0]
	    comm_reg[4] = 0x00;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3304      	adds	r3, #4
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
	    comm_reg[5] = 0x00;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	3305      	adds	r3, #5
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
	    break;
 80013ac:	e02e      	b.n	800140c <generate_i2c+0xd6>
	    comm_reg[0] = ((comm_data[0] >> 4) & 0b00001111) | 0b01100000; //mask with upper half data bit and start bits
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	091b      	lsrs	r3, r3, #4
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	701a      	strb	r2, [r3, #0]
	    comm_reg[1] = (comm_data[0] << 4) & 0b11110000; //mask with lower half data byte and master ack bits
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	011a      	lsls	r2, r3, #4
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	3301      	adds	r3, #1
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	701a      	strb	r2, [r3, #0]
	    comm_reg[2] = (comm_data[1] >> 4) & 0b00001111; //mask with upper half data bit and blank bits
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	3301      	adds	r3, #1
 80013d6:	781a      	ldrb	r2, [r3, #0]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3302      	adds	r3, #2
 80013dc:	0912      	lsrs	r2, r2, #4
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	701a      	strb	r2, [r3, #0]
	    comm_reg[3] = (comm_data[1] << 4) & 0b11110000; //mask with lower half data byte and master ack bits
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	3301      	adds	r3, #1
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	011a      	lsls	r2, r3, #4
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	3303      	adds	r3, #3
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]
	    comm_reg[4] = (comm_data[2] >> 4) & 0b00001111; //mask with upper half data bit and blank bits
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	3302      	adds	r3, #2
 80013f6:	781a      	ldrb	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3304      	adds	r3, #4
 80013fc:	0912      	lsrs	r2, r2, #4
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	701a      	strb	r2, [r3, #0]
	    comm_reg[5] = ((comm_data[2] << 4) & 0b1111) | 0b00001001; //mask with lower half data byte and master ack bits
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3305      	adds	r3, #5
 8001406:	2209      	movs	r2, #9
 8001408:	701a      	strb	r2, [r3, #0]
	    break;
 800140a:	bf00      	nop
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <send_comm>:


void send_comm(ltc6811 slave, uint8_t *i2c_message, uint8_t len) {
 8001418:	b084      	sub	sp, #16
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	f107 0c10 	add.w	ip, r7, #16
 8001424:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    uint8_t comm_reg[6];

    generate_i2c(comm_reg, i2c_message, len);
 8001428:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800142c:	463b      	mov	r3, r7
 800142e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff80 	bl	8001336 <generate_i2c>

    wake_sleep();
 8001436:	f7ff fc6d 	bl	8000d14 <wake_sleep>

    address_write(slave.address, WRCOMM, comm_reg);
 800143a:	7c3b      	ldrb	r3, [r7, #16]
 800143c:	463a      	mov	r2, r7
 800143e:	f240 7121 	movw	r1, #1825	; 0x721
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fd40 	bl	8000ec8 <address_write>

    broadcast_command_stcomm(STCOMM);
 8001448:	f240 7023 	movw	r0, #1827	; 0x723
 800144c:	f000 f808 	bl	8001460 <broadcast_command_stcomm>


}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800145a:	b004      	add	sp, #16
 800145c:	4770      	bx	lr
	...

08001460 <broadcast_command_stcomm>:


void broadcast_command_stcomm(uint16_t command_code)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	80fb      	strh	r3, [r7, #6]
uint8_t CMD[2];

// see Table 36 (Broadcast Command Format) in LTC6811 datasheet
CMD[0] = 0;                  // CMD0 bits 3 thru 7  = 0
 800146a:	2300      	movs	r3, #0
 800146c:	773b      	strb	r3, [r7, #28]
CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 800146e:	7f3a      	ldrb	r2, [r7, #28]
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	0a1b      	lsrs	r3, r3, #8
 8001474:	b29b      	uxth	r3, r3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	b2db      	uxtb	r3, r3
 800147c:	773b      	strb	r3, [r7, #28]
CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	777b      	strb	r3, [r7, #29]

uint16_t crc = pec15(CMD, 2); // CRC for CMD
 8001484:	f107 031c 	add.w	r3, r7, #28
 8001488:	2102      	movs	r1, #2
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fbc0 	bl	8000c10 <pec15>
 8001490:	4603      	mov	r3, r0
 8001492:	83fb      	strh	r3, [r7, #30]





uint8_t tx_msg[13] = {CMD[0], CMD[1], crc >> 8, crc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001494:	7f3b      	ldrb	r3, [r7, #28]
 8001496:	733b      	strb	r3, [r7, #12]
 8001498:	7f7b      	ldrb	r3, [r7, #29]
 800149a:	737b      	strb	r3, [r7, #13]
 800149c:	8bfb      	ldrh	r3, [r7, #30]
 800149e:	0a1b      	lsrs	r3, r3, #8
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	73bb      	strb	r3, [r7, #14]
 80014a6:	8bfb      	ldrh	r3, [r7, #30]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	2300      	movs	r3, #0
 80014ae:	743b      	strb	r3, [r7, #16]
 80014b0:	2300      	movs	r3, #0
 80014b2:	747b      	strb	r3, [r7, #17]
 80014b4:	2300      	movs	r3, #0
 80014b6:	74bb      	strb	r3, [r7, #18]
 80014b8:	2300      	movs	r3, #0
 80014ba:	74fb      	strb	r3, [r7, #19]
 80014bc:	2300      	movs	r3, #0
 80014be:	753b      	strb	r3, [r7, #20]
 80014c0:	2300      	movs	r3, #0
 80014c2:	757b      	strb	r3, [r7, #21]
 80014c4:	2300      	movs	r3, #0
 80014c6:	75bb      	strb	r3, [r7, #22]
 80014c8:	2300      	movs	r3, #0
 80014ca:	75fb      	strb	r3, [r7, #23]
 80014cc:	2300      	movs	r3, #0
 80014ce:	763b      	strb	r3, [r7, #24]



#ifdef ALWAYS_STANDBY_WAKE
wake_standby();
 80014d0:	f7ff fc38 	bl	8000d44 <wake_standby>
#endif

HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014de:	f003 ff5d 	bl	800539c <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi3, tx_msg, 13, 1000);
 80014e2:	f107 010c 	add.w	r1, r7, #12
 80014e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ea:	220d      	movs	r2, #13
 80014ec:	4806      	ldr	r0, [pc, #24]	; (8001508 <broadcast_command_stcomm+0xa8>)
 80014ee:	f005 fa6e 	bl	80069ce <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 80014f2:	2201      	movs	r2, #1
 80014f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fc:	f003 ff4e 	bl	800539c <HAL_GPIO_WritePin>
}
 8001500:	bf00      	nop
 8001502:	3720      	adds	r7, #32
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000448 	.word	0x20000448
 800150c:	00000000 	.word	0x00000000

08001510 <calc_temp>:


double calc_temp(double adc_voltage) {
 8001510:	b5b0      	push	{r4, r5, r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	ed87 0b00 	vstr	d0, [r7]
  double steinhart;
  double resistance = 10000 * adc_voltage / (3 - adc_voltage);
 800151a:	a333      	add	r3, pc, #204	; (adr r3, 80015e8 <calc_temp+0xd8>)
 800151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001520:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001524:	f7ff f834 	bl	8000590 <__aeabi_dmul>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4614      	mov	r4, r2
 800152e:	461d      	mov	r5, r3
 8001530:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001534:	f04f 0000 	mov.w	r0, #0
 8001538:	4933      	ldr	r1, [pc, #204]	; (8001608 <calc_temp+0xf8>)
 800153a:	f7fe fe71 	bl	8000220 <__aeabi_dsub>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4620      	mov	r0, r4
 8001544:	4629      	mov	r1, r5
 8001546:	f7ff f94d 	bl	80007e4 <__aeabi_ddiv>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  steinhart = resistance / 10000;     // (R/Ro)
 8001552:	a325      	add	r3, pc, #148	; (adr r3, 80015e8 <calc_temp+0xd8>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800155c:	f7ff f942 	bl	80007e4 <__aeabi_ddiv>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	e9c7 2302 	strd	r2, r3, [r7, #8]
  steinhart = log(steinhart);                  // ln(R/Ro)
 8001568:	ed97 0b02 	vldr	d0, [r7, #8]
 800156c:	f006 f8d0 	bl	8007710 <log>
 8001570:	ed87 0b02 	vstr	d0, [r7, #8]
  steinhart /= 3950;                   // 1/B * ln(R/Ro)
 8001574:	a31e      	add	r3, pc, #120	; (adr r3, 80015f0 <calc_temp+0xe0>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800157e:	f7ff f931 	bl	80007e4 <__aeabi_ddiv>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	e9c7 2302 	strd	r2, r3, [r7, #8]
  steinhart += 1.0 / (25 + 273.15); // + (1/To)
 800158a:	a31b      	add	r3, pc, #108	; (adr r3, 80015f8 <calc_temp+0xe8>)
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001594:	f7fe fe46 	bl	8000224 <__adddf3>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  steinhart = 1.0 / steinhart;                 // Invert
 80015a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015a4:	f04f 0000 	mov.w	r0, #0
 80015a8:	4918      	ldr	r1, [pc, #96]	; (800160c <calc_temp+0xfc>)
 80015aa:	f7ff f91b 	bl	80007e4 <__aeabi_ddiv>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  steinhart -= 273.15;
 80015b6:	a312      	add	r3, pc, #72	; (adr r3, 8001600 <calc_temp+0xf0>)
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015c0:	f7fe fe2e 	bl	8000220 <__aeabi_dsub>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	e9c7 2302 	strd	r2, r3, [r7, #8]

  return steinhart;
 80015cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015d0:	ec43 2b17 	vmov	d7, r2, r3
}
 80015d4:	eeb0 0a47 	vmov.f32	s0, s14
 80015d8:	eef0 0a67 	vmov.f32	s1, s15
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bdb0      	pop	{r4, r5, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	f3af 8000 	nop.w
 80015e8:	00000000 	.word	0x00000000
 80015ec:	40c38800 	.word	0x40c38800
 80015f0:	00000000 	.word	0x00000000
 80015f4:	40aedc00 	.word	0x40aedc00
 80015f8:	dcb5db83 	.word	0xdcb5db83
 80015fc:	3f6b79e1 	.word	0x3f6b79e1
 8001600:	66666666 	.word	0x66666666
 8001604:	40711266 	.word	0x40711266
 8001608:	40080000 	.word	0x40080000
 800160c:	3ff00000 	.word	0x3ff00000

08001610 <read_all_temps>:


void read_all_temps(ltc6811 *ltc6811_arr, uint8_t mux_channels, int slave_num)
{
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001612:	b09f      	sub	sp, #124	; 0x7c
 8001614:	af08      	add	r7, sp, #32
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	460b      	mov	r3, r1
 800161a:	607a      	str	r2, [r7, #4]
 800161c:	72fb      	strb	r3, [r7, #11]
	double thermistor_temp;
	double thermistor_voltage;
	for(int slave = 0; slave < slave_num; slave++)
 800161e:	2300      	movs	r3, #0
 8001620:	657b      	str	r3, [r7, #84]	; 0x54
 8001622:	e0cf      	b.n	80017c4 <read_all_temps+0x1b4>
	{
		ltc6811 selected_slave = ltc6811_arr[slave]; //increment over all slaves
 8001624:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	461a      	mov	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4413      	add	r3, r2
 8001634:	461c      	mov	r4, r3
 8001636:	f107 0614 	add.w	r6, r7, #20
 800163a:	f104 0c20 	add.w	ip, r4, #32
 800163e:	4635      	mov	r5, r6
 8001640:	4623      	mov	r3, r4
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	6859      	ldr	r1, [r3, #4]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164c:	3410      	adds	r4, #16
 800164e:	3610      	adds	r6, #16
 8001650:	4564      	cmp	r4, ip
 8001652:	d1f4      	bne.n	800163e <read_all_temps+0x2e>
 8001654:	4633      	mov	r3, r6
 8001656:	4622      	mov	r2, r4
 8001658:	6810      	ldr	r0, [r2, #0]
 800165a:	6851      	ldr	r1, [r2, #4]
 800165c:	c303      	stmia	r3!, {r0, r1}

		uint8_t i2c_data[2] = {0b10010000, 0b00001000};	//bits 4 - 7 are address bits for the mux IC, bits 11 - 15 are the address bits for the mux channel, start with channel 0
 800165e:	f44f 6309 	mov.w	r3, #2192	; 0x890
 8001662:	87bb      	strh	r3, [r7, #60]	; 0x3c
		for (int i = 0;  i < mux_channels; i++)
 8001664:	2300      	movs	r3, #0
 8001666:	653b      	str	r3, [r7, #80]	; 0x50
 8001668:	e049      	b.n	80016fe <read_all_temps+0xee>
		{


		  send_comm(selected_slave, i2c_data, 2);
 800166a:	2302      	movs	r3, #2
 800166c:	9307      	str	r3, [sp, #28]
 800166e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001672:	9306      	str	r3, [sp, #24]
 8001674:	466d      	mov	r5, sp
 8001676:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800167a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800167c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800167e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001682:	e885 0003 	stmia.w	r5, {r0, r1}
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800168c:	f7ff fec4 	bl	8001418 <send_comm>

		  i2c_data[1]++;
 8001690:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001694:	3301      	adds	r3, #1
 8001696:	b2db      	uxtb	r3, r3
 8001698:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

		  broadcast_command(ADAX(MD_27k_14k, CHG_GPIO_1)); //measure gpio 1 (mux output)
 800169c:	f240 40e1 	movw	r0, #1249	; 0x4e1
 80016a0:	f7ff fb68 	bl	8000d74 <broadcast_command>

		  //DELAY?

		  address_read(selected_slave.address, RDAUXA, selected_slave.auxa_reg); //read auxa_reg where adc value was stored
 80016a4:	7d38      	ldrb	r0, [r7, #20]
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	331a      	adds	r3, #26
 80016ac:	461a      	mov	r2, r3
 80016ae:	210c      	movs	r1, #12
 80016b0:	f7ff fc7a 	bl	8000fa8 <address_read>

		  thermistor_voltage = ((selected_slave.auxa_reg[1] << 8) | selected_slave.auxa_reg[0]) * 0.0001;
 80016b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80016be:	4313      	orrs	r3, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe fefb 	bl	80004bc <__aeabi_i2d>
 80016c6:	a346      	add	r3, pc, #280	; (adr r3, 80017e0 <read_all_temps+0x1d0>)
 80016c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016cc:	f7fe ff60 	bl	8000590 <__aeabi_dmul>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		  thermistor_temp = calc_temp(thermistor_voltage); //convert voltage to temperature in degrees celcius
 80016d8:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80016dc:	f7ff ff18 	bl	8001510 <calc_temp>
 80016e0:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

		  if(thermistor_temp > 60) //if overtemp, trigger shutdown
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	4b3f      	ldr	r3, [pc, #252]	; (80017e8 <read_all_temps+0x1d8>)
 80016ea:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80016ee:	f7ff f9df 	bl	8000ab0 <__aeabi_dcmpgt>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d16b      	bne.n	80017d0 <read_all_temps+0x1c0>
		for (int i = 0;  i < mux_channels; i++)
 80016f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016fa:	3301      	adds	r3, #1
 80016fc:	653b      	str	r3, [r7, #80]	; 0x50
 80016fe:	7afb      	ldrb	r3, [r7, #11]
 8001700:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001702:	429a      	cmp	r2, r3
 8001704:	dbb1      	blt.n	800166a <read_all_temps+0x5a>
		  }


		}

		  broadcast_command(ADAX(MD_27k_14k, CHG_GPIO_2)); //measure gpio 2 (non mux'd thermistor)
 8001706:	f240 40e2 	movw	r0, #1250	; 0x4e2
 800170a:	f7ff fb33 	bl	8000d74 <broadcast_command>

		  address_read(selected_slave.address, RDAUXA, selected_slave.auxa_reg);
 800170e:	7d38      	ldrb	r0, [r7, #20]
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	331a      	adds	r3, #26
 8001716:	461a      	mov	r2, r3
 8001718:	210c      	movs	r1, #12
 800171a:	f7ff fc45 	bl	8000fa8 <address_read>

		  thermistor_voltage = ((selected_slave.auxa_reg[3] << 8) | selected_slave.auxa_reg[2]) * 0.0001;
 800171e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001728:	4313      	orrs	r3, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe fec6 	bl	80004bc <__aeabi_i2d>
 8001730:	a32b      	add	r3, pc, #172	; (adr r3, 80017e0 <read_all_temps+0x1d0>)
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	f7fe ff2b 	bl	8000590 <__aeabi_dmul>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		  thermistor_temp = calc_temp(thermistor_voltage); //convert voltage to temperature in degrees celcius
 8001742:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8001746:	f7ff fee3 	bl	8001510 <calc_temp>
 800174a:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

		  if(thermistor_temp > 60) //if overtemp, trigger shutdown
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <read_all_temps+0x1d8>)
 8001754:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001758:	f7ff f9aa 	bl	8000ab0 <__aeabi_dcmpgt>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d138      	bne.n	80017d4 <read_all_temps+0x1c4>
		  {
			  return; //ADD SDC
		  }

		  broadcast_command(ADAX(MD_27k_14k, CHG_GPIO_3)); //measure gpio 3 (non mux'd thermistor)
 8001762:	f240 40e3 	movw	r0, #1251	; 0x4e3
 8001766:	f7ff fb05 	bl	8000d74 <broadcast_command>

		  address_read(selected_slave.address, RDAUXA, selected_slave.auxa_reg);
 800176a:	7d38      	ldrb	r0, [r7, #20]
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	331a      	adds	r3, #26
 8001772:	461a      	mov	r2, r3
 8001774:	210c      	movs	r1, #12
 8001776:	f7ff fc17 	bl	8000fa8 <address_read>

		  thermistor_voltage = ((selected_slave.auxa_reg[5] << 8) | selected_slave.auxa_reg[4]) * 0.0001;
 800177a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8001784:	4313      	orrs	r3, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fe98 	bl	80004bc <__aeabi_i2d>
 800178c:	a314      	add	r3, pc, #80	; (adr r3, 80017e0 <read_all_temps+0x1d0>)
 800178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001792:	f7fe fefd 	bl	8000590 <__aeabi_dmul>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		  thermistor_temp = calc_temp(thermistor_voltage); //convert voltage to temperature in degrees celcius
 800179e:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80017a2:	f7ff feb5 	bl	8001510 <calc_temp>
 80017a6:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

		  if(thermistor_temp > 60) //if overtemp, trigger shutdown
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <read_all_temps+0x1d8>)
 80017b0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80017b4:	f7ff f97c 	bl	8000ab0 <__aeabi_dcmpgt>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10c      	bne.n	80017d8 <read_all_temps+0x1c8>
	for(int slave = 0; slave < slave_num; slave++)
 80017be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c0:	3301      	adds	r3, #1
 80017c2:	657b      	str	r3, [r7, #84]	; 0x54
 80017c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	f6ff af2b 	blt.w	8001624 <read_all_temps+0x14>
 80017ce:	e004      	b.n	80017da <read_all_temps+0x1ca>
			  return; //ADD SDC
 80017d0:	bf00      	nop
 80017d2:	e002      	b.n	80017da <read_all_temps+0x1ca>
			  return; //ADD SDC
 80017d4:	bf00      	nop
 80017d6:	e000      	b.n	80017da <read_all_temps+0x1ca>
		  {
			  return; //ADD SDC
 80017d8:	bf00      	nop
		  }
	}


}
 80017da:	375c      	adds	r7, #92	; 0x5c
 80017dc:	46bd      	mov	sp, r7
 80017de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e0:	eb1c432d 	.word	0xeb1c432d
 80017e4:	3f1a36e2 	.word	0x3f1a36e2
 80017e8:	404e0000 	.word	0x404e0000
 80017ec:	00000000 	.word	0x00000000

080017f0 <current_sense_voltage_to_current>:



//take voltage from current sensor and calculate current
int64_t current_sense_voltage_to_current (double current_sense_voltage)
{
 80017f0:	b5b0      	push	{r4, r5, r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	ed87 0b00 	vstr	d0, [r7]
return (current_sense_voltage - CURRENT_SENSE_OFFSET) / CURRENT_SENSE_RATIO * -1;  //multiplied by -1 because current sensor is backwards
 80017fa:	a312      	add	r3, pc, #72	; (adr r3, 8001844 <current_sense_voltage_to_current+0x54>)
 80017fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001800:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001804:	f7fe fd0c 	bl	8000220 <__aeabi_dsub>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <current_sense_voltage_to_current+0x50>)
 8001816:	f7fe ffe5 	bl	80007e4 <__aeabi_ddiv>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4614      	mov	r4, r2
 8001820:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001824:	4620      	mov	r0, r4
 8001826:	4629      	mov	r1, r5
 8001828:	f7ff f982 	bl	8000b30 <__aeabi_d2lz>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
}
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bdb0      	pop	{r4, r5, r7, pc}
 800183a:	bf00      	nop
 800183c:	f3af 8000 	nop.w
 8001840:	40290000 	.word	0x40290000
 8001844:	00000000 	.word	0x00000000
 8001848:	40a38800 	.word	0x40a38800

0800184c <reset_SOC>:


//once battery is charged, reset SOC value
//use lookup table / formula to measure pack voltage and estimate SOC
void reset_SOC()
{
 800184c:	b5b0      	push	{r4, r5, r7, lr}
 800184e:	af00      	add	r7, sp, #0
last_SOC_update_ms = HAL_GetTick();
 8001850:	f000 fe70 	bl	8002534 <HAL_GetTick>
 8001854:	4603      	mov	r3, r0
 8001856:	2200      	movs	r2, #0
 8001858:	461c      	mov	r4, r3
 800185a:	4615      	mov	r5, r2
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <reset_SOC+0x28>)
 800185e:	e9c3 4500 	strd	r4, r5, [r3]
SOC = 100;
 8001862:	4905      	ldr	r1, [pc, #20]	; (8001878 <reset_SOC+0x2c>)
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <reset_SOC+0x30>)
 800186a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800186e:	bf00      	nop
 8001870:	bdb0      	pop	{r4, r5, r7, pc}
 8001872:	bf00      	nop
 8001874:	200004b8 	.word	0x200004b8
 8001878:	200004b0 	.word	0x200004b0
 800187c:	40590000 	.word	0x40590000

08001880 <update_SOC>:


//take current and time since last caulcations to update SOC
//NEED TO UPDATE TO HAL
void update_SOC ()
{
 8001880:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0

//double current_sense_voltage = vcu_adc_read_millivolts(&hadc1, ADC_CHANNEL_4);
current_sense_voltage = adc_val[0] * 2500 / 4096;
 8001888:	4b37      	ldr	r3, [pc, #220]	; (8001968 <update_SOC+0xe8>)
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001892:	fb02 f303 	mul.w	r3, r2, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	da01      	bge.n	800189e <update_SOC+0x1e>
 800189a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800189e:	131b      	asrs	r3, r3, #12
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe0b 	bl	80004bc <__aeabi_i2d>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4930      	ldr	r1, [pc, #192]	; (800196c <update_SOC+0xec>)
 80018ac:	e9c1 2300 	strd	r2, r3, [r1]
current = current_sense_voltage_to_current(current_sense_voltage);
 80018b0:	4b2e      	ldr	r3, [pc, #184]	; (800196c <update_SOC+0xec>)
 80018b2:	ed93 7b00 	vldr	d7, [r3]
 80018b6:	eeb0 0a47 	vmov.f32	s0, s14
 80018ba:	eef0 0a67 	vmov.f32	s1, s15
 80018be:	f7ff ff97 	bl	80017f0 <current_sense_voltage_to_current>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	f7fe fe33 	bl	8000534 <__aeabi_l2d>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4927      	ldr	r1, [pc, #156]	; (8001970 <update_SOC+0xf0>)
 80018d4:	e9c1 2300 	strd	r2, r3, [r1]

uint64_t current_ms = HAL_GetTick();
 80018d8:	f000 fe2c 	bl	8002534 <HAL_GetTick>
 80018dc:	4603      	mov	r3, r0
 80018de:	2200      	movs	r2, #0
 80018e0:	4698      	mov	r8, r3
 80018e2:	4691      	mov	r9, r2
 80018e4:	e9c7 8900 	strd	r8, r9, [r7]

time_since_last_update = current_ms - last_SOC_update_ms;
 80018e8:	4b22      	ldr	r3, [pc, #136]	; (8001974 <update_SOC+0xf4>)
 80018ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018f2:	1a84      	subs	r4, r0, r2
 80018f4:	eb61 0503 	sbc.w	r5, r1, r3
 80018f8:	4622      	mov	r2, r4
 80018fa:	462b      	mov	r3, r5
 80018fc:	491e      	ldr	r1, [pc, #120]	; (8001978 <update_SOC+0xf8>)
 80018fe:	e9c1 2300 	strd	r2, r3, [r1]

last_SOC_update_ms = current_ms;
 8001902:	491c      	ldr	r1, [pc, #112]	; (8001974 <update_SOC+0xf4>)
 8001904:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001908:	e9c1 2300 	strd	r2, r3, [r1]

SOC -= current * time_since_last_update / BATTERY_CAPCITY;
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <update_SOC+0xfc>)
 800190e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001912:	4b19      	ldr	r3, [pc, #100]	; (8001978 <update_SOC+0xf8>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	f7fe fe0a 	bl	8000534 <__aeabi_l2d>
 8001920:	4b13      	ldr	r3, [pc, #76]	; (8001970 <update_SOC+0xf0>)
 8001922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001926:	f7fe fe33 	bl	8000590 <__aeabi_dmul>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4610      	mov	r0, r2
 8001930:	4619      	mov	r1, r3
 8001932:	a30b      	add	r3, pc, #44	; (adr r3, 8001960 <update_SOC+0xe0>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	f7fe ff54 	bl	80007e4 <__aeabi_ddiv>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4620      	mov	r0, r4
 8001942:	4629      	mov	r1, r5
 8001944:	f7fe fc6c 	bl	8000220 <__aeabi_dsub>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	490b      	ldr	r1, [pc, #44]	; (800197c <update_SOC+0xfc>)
 800194e:	e9c1 2300 	strd	r2, r3, [r1]

}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800195c:	f3af 8000 	nop.w
 8001960:	00000000 	.word	0x00000000
 8001964:	40c38800 	.word	0x40c38800
 8001968:	200004c0 	.word	0x200004c0
 800196c:	200004c8 	.word	0x200004c8
 8001970:	200004d0 	.word	0x200004d0
 8001974:	200004b8 	.word	0x200004b8
 8001978:	200004d8 	.word	0x200004d8
 800197c:	200004b0 	.word	0x200004b0

08001980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b0a6      	sub	sp, #152	; 0x98
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001986:	f000 fd70 	bl	800246a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800198a:	f000 f887 	bl	8001a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800198e:	f000 faa1 	bl	8001ed4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001992:	f000 fa75 	bl	8001e80 <MX_DMA_Init>
  MX_RTC_Init();
 8001996:	f000 f9d3 	bl	8001d40 <MX_RTC_Init>
  MX_FDCAN1_Init();
 800199a:	f000 f945 	bl	8001c28 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800199e:	f000 f989 	bl	8001cb4 <MX_FDCAN2_Init>
  MX_SPI3_Init();
 80019a2:	f000 fa2f 	bl	8001e04 <MX_SPI3_Init>
  MX_ADC1_Init();
 80019a6:	f000 f8c7 	bl	8001b38 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80019aa:	217f      	movs	r1, #127	; 0x7f
 80019ac:	4839      	ldr	r0, [pc, #228]	; (8001a94 <main+0x114>)
 80019ae:	f002 fc8f 	bl	80042d0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA (&hadc1, (uint32_t*)adc_val, 1);
 80019b2:	2201      	movs	r2, #1
 80019b4:	4938      	ldr	r1, [pc, #224]	; (8001a98 <main+0x118>)
 80019b6:	4837      	ldr	r0, [pc, #220]	; (8001a94 <main+0x114>)
 80019b8:	f001 fb46 	bl	8003048 <HAL_ADC_Start_DMA>
  HAL_ADC_Start(&hadc1);
 80019bc:	4835      	ldr	r0, [pc, #212]	; (8001a94 <main+0x114>)
 80019be:	f001 fa5f 	bl	8002e80 <HAL_ADC_Start>

  HAL_Delay(100); // 100ms should allow all relevant power circuitry to stabilize
 80019c2:	2064      	movs	r0, #100	; 0x64
 80019c4:	f000 fdc2 	bl	800254c <HAL_Delay>

  //reset_SOC();

  init_LTC6811();
 80019c8:	f7ff f956 	bl	8000c78 <init_LTC6811>

  wake_sleep(); // wake LTC6811 from sleep
 80019cc:	f7ff f9a2 	bl	8000d14 <wake_sleep>

  // Configuration for all LTC6811s
  struct ltc6811_config ltc6811_config;
  ltc6811_config.gpio_pulldowns = GPIO1_NO_PULLDOWN | GPIO2_NO_PULLDOWN | GPIO3_NO_PULLDOWN | GPIO4_NO_PULLDOWN | GPIO5_NO_PULLDOWN;
 80019d0:	231f      	movs	r3, #31
 80019d2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  ltc6811_config.refon = REFON_STAY_POWERED;
 80019d6:	2301      	movs	r3, #1
 80019d8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
  ltc6811_config.adcopt = ADCOPT_MODE_0;
 80019dc:	2300      	movs	r3, #0
 80019de:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  ltc6811_config.vuv = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  ltc6811_config.vov = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  ltc6811_config.dcto = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
  update_config(&ltc6811_config);
 80019f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff f943 	bl	8000c84 <update_config>
  float cell_voltage[NUM_OF_CELLS];      // index 0 = lowest potential
  float cell_voltage_ma[NUM_OF_CELLS];   // index 0 = lowest potential
  struct ltc6811 ltc6811[NUM_OF_SLAVES]; // index 0 = lowest potential

  // configure LTC6811 structs to match real life setup
  for (int i = 0; i < NUM_OF_SLAVES; i++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a04:	e01d      	b.n	8001a42 <main+0xc2>
  {
      ltc6811[i].address = i;
 8001a06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a0a:	b2d9      	uxtb	r1, r3
 8001a0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	3398      	adds	r3, #152	; 0x98
 8001a1a:	443b      	add	r3, r7
 8001a1c:	3b98      	subs	r3, #152	; 0x98
 8001a1e:	460a      	mov	r2, r1
 8001a20:	701a      	strb	r2, [r3, #0]
      ltc6811[i].cell_count = (i % 2 == 0) ? EVEN_SLAVE_CELLS : ODD_SLAVE_CELLS;
 8001a22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	3398      	adds	r3, #152	; 0x98
 8001a30:	443b      	add	r3, r7
 8001a32:	3b97      	subs	r3, #151	; 0x97
 8001a34:	220c      	movs	r2, #12
 8001a36:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < NUM_OF_SLAVES; i++)
 8001a38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	dddd      	ble.n	8001a06 <main+0x86>
  }

  reset_SOC();
 8001a4a:	f7ff feff 	bl	800184c <reset_SOC>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_Delay(100);
 8001a4e:	2064      	movs	r0, #100	; 0x64
 8001a50:	f000 fd7c 	bl	800254c <HAL_Delay>

      wake_sleep(); // wake LTC6811 from sleep
 8001a54:	f7ff f95e 	bl	8000d14 <wake_sleep>

      // send command to read cell voltages
      broadcast_command(ADCV(MD_26_2k, DCP_NOT_PERMITTED, CH_ALL));
 8001a58:	f44f 7078 	mov.w	r0, #992	; 0x3e0
 8001a5c:	f7ff f98a 	bl	8000d74 <broadcast_command>

      HAL_Delay(220); // reading all cell voltages @ "26Hz" should take 210ms
 8001a60:	20dc      	movs	r0, #220	; 0xdc
 8001a62:	f000 fd73 	bl	800254c <HAL_Delay>

      // read cell voltage registers from all slaves on the bus
      read_all_voltages(ltc6811, NUM_OF_SLAVES);
 8001a66:	463b      	mov	r3, r7
 8001a68:	2101      	movs	r1, #1
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fbf7 	bl	800125e <read_all_voltages>

      // calculate actual voltage values
      extract_all_voltages(ltc6811, cell_voltage, NUM_OF_SLAVES);
 8001a70:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001a74:	463b      	mov	r3, r7
 8001a76:	2201      	movs	r2, #1
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fb75 	bl	8001168 <extract_all_voltages>

	  wake_sleep(); // wake LTC6811 from sleep
 8001a7e:	f7ff f949 	bl	8000d14 <wake_sleep>

	  read_all_temps(ltc6811, NUM_OF_MUX_CHANNELS, NUM_OF_SLAVES);
 8001a82:	463b      	mov	r3, r7
 8001a84:	2201      	movs	r2, #1
 8001a86:	2108      	movs	r1, #8
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fdc1 	bl	8001610 <read_all_temps>

	  update_SOC();
 8001a8e:	f7ff fef7 	bl	8001880 <update_SOC>
      HAL_Delay(100);
 8001a92:	e7dc      	b.n	8001a4e <main+0xce>
 8001a94:	2000028c 	.word	0x2000028c
 8001a98:	200004c0 	.word	0x200004c0

08001a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b094      	sub	sp, #80	; 0x50
 8001aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aa2:	f107 0318 	add.w	r3, r7, #24
 8001aa6:	2238      	movs	r2, #56	; 0x38
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f005 fe26 	bl	80076fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f003 fc84 	bl	80053cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001ac4:	230a      	movs	r3, #10
 8001ac6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ac8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ace:	2340      	movs	r3, #64	; 0x40
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ada:	2302      	movs	r3, #2
 8001adc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001ade:	2304      	movs	r3, #4
 8001ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001ae2:	2355      	movs	r3, #85	; 0x55
 8001ae4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001aea:	2302      	movs	r3, #2
 8001aec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001aee:	2302      	movs	r3, #2
 8001af0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001af2:	f107 0318 	add.w	r3, r7, #24
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 fd1c 	bl	8005534 <HAL_RCC_OscConfig>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001b02:	f000 fa4b 	bl	8001f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b06:	230f      	movs	r3, #15
 8001b08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b12:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001b16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	2104      	movs	r1, #4
 8001b20:	4618      	mov	r0, r3
 8001b22:	f004 f81f 	bl	8005b64 <HAL_RCC_ClockConfig>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b2c:	f000 fa36 	bl	8001f9c <Error_Handler>
  }
}
 8001b30:	bf00      	nop
 8001b32:	3750      	adds	r7, #80	; 0x50
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08c      	sub	sp, #48	; 0x30
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	2220      	movs	r2, #32
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f005 fdd3 	bl	80076fc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b56:	4b32      	ldr	r3, [pc, #200]	; (8001c20 <MX_ADC1_Init+0xe8>)
 8001b58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001b5c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b5e:	4b30      	ldr	r3, [pc, #192]	; (8001c20 <MX_ADC1_Init+0xe8>)
 8001b60:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b64:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b66:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <MX_ADC1_Init+0xe8>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b6c:	4b2c      	ldr	r3, [pc, #176]	; (8001c20 <MX_ADC1_Init+0xe8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001b72:	4b2b      	ldr	r3, [pc, #172]	; (8001c20 <MX_ADC1_Init+0xe8>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b78:	4b29      	ldr	r3, [pc, #164]	; (8001c20 <MX_ADC1_Init+0xe8>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b7e:	4b28      	ldr	r3, [pc, #160]	; (8001c20 <MX_ADC1_Init+0xe8>)
 8001b80:	2204      	movs	r2, #4
 8001b82:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b84:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <MX_ADC1_Init+0xe8>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b8a:	4b25      	ldr	r3, [pc, #148]	; (8001c20 <MX_ADC1_Init+0xe8>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001b90:	4b23      	ldr	r3, [pc, #140]	; (8001c20 <MX_ADC1_Init+0xe8>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b96:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <MX_ADC1_Init+0xe8>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b9e:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <MX_ADC1_Init+0xe8>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ba4:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <MX_ADC1_Init+0xe8>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001baa:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <MX_ADC1_Init+0xe8>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001bb2:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <MX_ADC1_Init+0xe8>)
 8001bb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bb8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001bba:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <MX_ADC1_Init+0xe8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bc2:	4817      	ldr	r0, [pc, #92]	; (8001c20 <MX_ADC1_Init+0xe8>)
 8001bc4:	f000 ff9a 	bl	8002afc <HAL_ADC_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8001bce:	f000 f9e5 	bl	8001f9c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4810      	ldr	r0, [pc, #64]	; (8001c20 <MX_ADC1_Init+0xe8>)
 8001bde:	f002 fc0b 	bl	80043f8 <HAL_ADCEx_MultiModeConfigChannel>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001be8:	f000 f9d8 	bl	8001f9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001bec:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <MX_ADC1_Init+0xec>)
 8001bee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bf0:	2306      	movs	r3, #6
 8001bf2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001bf4:	2307      	movs	r3, #7
 8001bf6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bf8:	237f      	movs	r3, #127	; 0x7f
 8001bfa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001bfc:	2304      	movs	r3, #4
 8001bfe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_ADC1_Init+0xe8>)
 8001c0a:	f001 fd79 	bl	8003700 <HAL_ADC_ConfigChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001c14:	f000 f9c2 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	3730      	adds	r7, #48	; 0x30
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	2000028c 	.word	0x2000028c
 8001c24:	10c00010 	.word	0x10c00010

08001c28 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	; (8001cac <MX_FDCAN1_Init+0x84>)
 8001c2e:	4a20      	ldr	r2, [pc, #128]	; (8001cb0 <MX_FDCAN1_Init+0x88>)
 8001c30:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <MX_FDCAN1_Init+0x84>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001c38:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <MX_FDCAN1_Init+0x84>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <MX_FDCAN1_Init+0x84>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <MX_FDCAN1_Init+0x84>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <MX_FDCAN1_Init+0x84>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001c50:	4b16      	ldr	r3, [pc, #88]	; (8001cac <MX_FDCAN1_Init+0x84>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <MX_FDCAN1_Init+0x84>)
 8001c58:	2210      	movs	r2, #16
 8001c5a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001c5c:	4b13      	ldr	r3, [pc, #76]	; (8001cac <MX_FDCAN1_Init+0x84>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <MX_FDCAN1_Init+0x84>)
 8001c64:	2202      	movs	r2, #2
 8001c66:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001c68:	4b10      	ldr	r3, [pc, #64]	; (8001cac <MX_FDCAN1_Init+0x84>)
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <MX_FDCAN1_Init+0x84>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001c74:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <MX_FDCAN1_Init+0x84>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <MX_FDCAN1_Init+0x84>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <MX_FDCAN1_Init+0x84>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <MX_FDCAN1_Init+0x84>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <MX_FDCAN1_Init+0x84>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <MX_FDCAN1_Init+0x84>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001c98:	4804      	ldr	r0, [pc, #16]	; (8001cac <MX_FDCAN1_Init+0x84>)
 8001c9a:	f003 f837 	bl	8004d0c <HAL_FDCAN_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001ca4:	f000 f97a 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000358 	.word	0x20000358
 8001cb0:	40006400 	.word	0x40006400

08001cb4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <MX_FDCAN2_Init+0x84>)
 8001cba:	4a20      	ldr	r2, [pc, #128]	; (8001d3c <MX_FDCAN2_Init+0x88>)
 8001cbc:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <MX_FDCAN2_Init+0x84>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <MX_FDCAN2_Init+0x84>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001cca:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <MX_FDCAN2_Init+0x84>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <MX_FDCAN2_Init+0x84>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001cd6:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <MX_FDCAN2_Init+0x84>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001cdc:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <MX_FDCAN2_Init+0x84>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <MX_FDCAN2_Init+0x84>)
 8001ce4:	2210      	movs	r2, #16
 8001ce6:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <MX_FDCAN2_Init+0x84>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8001cee:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <MX_FDCAN2_Init+0x84>)
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001cf4:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <MX_FDCAN2_Init+0x84>)
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <MX_FDCAN2_Init+0x84>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <MX_FDCAN2_Init+0x84>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <MX_FDCAN2_Init+0x84>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <MX_FDCAN2_Init+0x84>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MX_FDCAN2_Init+0x84>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <MX_FDCAN2_Init+0x84>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <MX_FDCAN2_Init+0x84>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001d24:	4804      	ldr	r0, [pc, #16]	; (8001d38 <MX_FDCAN2_Init+0x84>)
 8001d26:	f002 fff1 	bl	8004d0c <HAL_FDCAN_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8001d30:	f000 f934 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	200003bc 	.word	0x200003bc
 8001d3c:	40006800 	.word	0x40006800

08001d40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001d54:	2300      	movs	r3, #0
 8001d56:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d58:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <MX_RTC_Init+0xbc>)
 8001d5a:	4a29      	ldr	r2, [pc, #164]	; (8001e00 <MX_RTC_Init+0xc0>)
 8001d5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d5e:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <MX_RTC_Init+0xbc>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001d64:	4b25      	ldr	r3, [pc, #148]	; (8001dfc <MX_RTC_Init+0xbc>)
 8001d66:	227f      	movs	r2, #127	; 0x7f
 8001d68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001d6a:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <MX_RTC_Init+0xbc>)
 8001d6c:	22ff      	movs	r2, #255	; 0xff
 8001d6e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d70:	4b22      	ldr	r3, [pc, #136]	; (8001dfc <MX_RTC_Init+0xbc>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001d76:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <MX_RTC_Init+0xbc>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <MX_RTC_Init+0xbc>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d82:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <MX_RTC_Init+0xbc>)
 8001d84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d88:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <MX_RTC_Init+0xbc>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d90:	481a      	ldr	r0, [pc, #104]	; (8001dfc <MX_RTC_Init+0xbc>)
 8001d92:	f004 fb19 	bl	80063c8 <HAL_RTC_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001d9c:	f000 f8fe 	bl	8001f9c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480f      	ldr	r0, [pc, #60]	; (8001dfc <MX_RTC_Init+0xbc>)
 8001dc0:	f004 fb77 	bl	80064b2 <HAL_RTC_SetTime>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_RTC_Init+0x8e>
  {
    Error_Handler();
 8001dca:	f000 f8e7 	bl	8001f9c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001dde:	463b      	mov	r3, r7
 8001de0:	2201      	movs	r2, #1
 8001de2:	4619      	mov	r1, r3
 8001de4:	4805      	ldr	r0, [pc, #20]	; (8001dfc <MX_RTC_Init+0xbc>)
 8001de6:	f004 fc01 	bl	80065ec <HAL_RTC_SetDate>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8001df0:	f000 f8d4 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001df4:	bf00      	nop
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000420 	.word	0x20000420
 8001e00:	40002800 	.word	0x40002800

08001e04 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <MX_SPI3_Init+0x74>)
 8001e0a:	4a1c      	ldr	r2, [pc, #112]	; (8001e7c <MX_SPI3_Init+0x78>)
 8001e0c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001e0e:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <MX_SPI3_Init+0x74>)
 8001e10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e14:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001e16:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <MX_SPI3_Init+0x74>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e1c:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <MX_SPI3_Init+0x74>)
 8001e1e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e22:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e24:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <MX_SPI3_Init+0x74>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e2a:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <MX_SPI3_Init+0x74>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <MX_SPI3_Init+0x74>)
 8001e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e36:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001e38:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <MX_SPI3_Init+0x74>)
 8001e3a:	2238      	movs	r2, #56	; 0x38
 8001e3c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <MX_SPI3_Init+0x74>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <MX_SPI3_Init+0x74>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <MX_SPI3_Init+0x74>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <MX_SPI3_Init+0x74>)
 8001e52:	2207      	movs	r2, #7
 8001e54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <MX_SPI3_Init+0x74>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <MX_SPI3_Init+0x74>)
 8001e5e:	2208      	movs	r2, #8
 8001e60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001e62:	4805      	ldr	r0, [pc, #20]	; (8001e78 <MX_SPI3_Init+0x74>)
 8001e64:	f004 fd08 	bl	8006878 <HAL_SPI_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001e6e:	f000 f895 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000448 	.word	0x20000448
 8001e7c:	40003c00 	.word	0x40003c00

08001e80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001e86:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <MX_DMA_Init+0x50>)
 8001e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e8a:	4a11      	ldr	r2, [pc, #68]	; (8001ed0 <MX_DMA_Init+0x50>)
 8001e8c:	f043 0304 	orr.w	r3, r3, #4
 8001e90:	6493      	str	r3, [r2, #72]	; 0x48
 8001e92:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <MX_DMA_Init+0x50>)
 8001e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <MX_DMA_Init+0x50>)
 8001ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea2:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <MX_DMA_Init+0x50>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6493      	str	r3, [r2, #72]	; 0x48
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <MX_DMA_Init+0x50>)
 8001eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2100      	movs	r1, #0
 8001eba:	200b      	movs	r0, #11
 8001ebc:	f002 fc7f 	bl	80047be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ec0:	200b      	movs	r0, #11
 8001ec2:	f002 fc96 	bl	80047f2 <HAL_NVIC_EnableIRQ>

}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000

08001ed4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eda:	f107 030c 	add.w	r3, r7, #12
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	60da      	str	r2, [r3, #12]
 8001ee8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	4b2a      	ldr	r3, [pc, #168]	; (8001f94 <MX_GPIO_Init+0xc0>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	4a29      	ldr	r2, [pc, #164]	; (8001f94 <MX_GPIO_Init+0xc0>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef6:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <MX_GPIO_Init+0xc0>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f02:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <MX_GPIO_Init+0xc0>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f06:	4a23      	ldr	r2, [pc, #140]	; (8001f94 <MX_GPIO_Init+0xc0>)
 8001f08:	f043 0302 	orr.w	r3, r3, #2
 8001f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f0e:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <MX_GPIO_Init+0xc0>)
 8001f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <MX_GPIO_Init+0xc0>)
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1e:	4a1d      	ldr	r2, [pc, #116]	; (8001f94 <MX_GPIO_Init+0xc0>)
 8001f20:	f043 0304 	orr.w	r3, r3, #4
 8001f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f26:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <MX_GPIO_Init+0xc0>)
 8001f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001f32:	2200      	movs	r2, #0
 8001f34:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001f38:	4817      	ldr	r0, [pc, #92]	; (8001f98 <MX_GPIO_Init+0xc4>)
 8001f3a:	f003 fa2f 	bl	800539c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f48:	f003 fa28 	bl	800539c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001f4c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f52:	2301      	movs	r3, #1
 8001f54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5e:	f107 030c 	add.w	r3, r7, #12
 8001f62:	4619      	mov	r1, r3
 8001f64:	480c      	ldr	r0, [pc, #48]	; (8001f98 <MX_GPIO_Init+0xc4>)
 8001f66:	f003 f897 	bl	8005098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f70:	2301      	movs	r3, #1
 8001f72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	4619      	mov	r1, r3
 8001f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f86:	f003 f887 	bl	8005098 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f8a:	bf00      	nop
 8001f8c:	3720      	adds	r7, #32
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
 8001f98:	48000400 	.word	0x48000400

08001f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa0:	b672      	cpsid	i
}
 8001fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <Error_Handler+0x8>
	...

08001fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fae:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <HAL_MspInit+0x54>)
 8001fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb2:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <HAL_MspInit+0x54>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6613      	str	r3, [r2, #96]	; 0x60
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <HAL_MspInit+0x54>)
 8001fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <HAL_MspInit+0x54>)
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	4a0c      	ldr	r2, [pc, #48]	; (8001ffc <HAL_MspInit+0x54>)
 8001fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	6593      	str	r3, [r2, #88]	; 0x58
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <HAL_MspInit+0x54>)
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1);
 8001fde:	2010      	movs	r0, #16
 8001fe0:	f000 fad6 	bl	8002590 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8001fe4:	f000 fafc 	bl	80025e0 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f000 fae5 	bl	80025b8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001fee:	f003 fa91 	bl	8005514 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000

08002000 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b09e      	sub	sp, #120	; 0x78
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002018:	f107 0310 	add.w	r3, r7, #16
 800201c:	2254      	movs	r2, #84	; 0x54
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f005 fb6b 	bl	80076fc <memset>
  if(hadc->Instance==ADC1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800202e:	d167      	bne.n	8002100 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002030:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002034:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002036:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800203a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800203c:	f107 0310 	add.w	r3, r7, #16
 8002040:	4618      	mov	r0, r3
 8002042:	f003 ff73 	bl	8005f2c <HAL_RCCEx_PeriphCLKConfig>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800204c:	f7ff ffa6 	bl	8001f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002050:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <HAL_ADC_MspInit+0x108>)
 8002052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002054:	4a2c      	ldr	r2, [pc, #176]	; (8002108 <HAL_ADC_MspInit+0x108>)
 8002056:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800205a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800205c:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <HAL_ADC_MspInit+0x108>)
 800205e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002060:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002068:	4b27      	ldr	r3, [pc, #156]	; (8002108 <HAL_ADC_MspInit+0x108>)
 800206a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206c:	4a26      	ldr	r2, [pc, #152]	; (8002108 <HAL_ADC_MspInit+0x108>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002074:	4b24      	ldr	r3, [pc, #144]	; (8002108 <HAL_ADC_MspInit+0x108>)
 8002076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002080:	2308      	movs	r3, #8
 8002082:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002084:	2303      	movs	r3, #3
 8002086:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002090:	4619      	mov	r1, r3
 8002092:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002096:	f002 ffff 	bl	8005098 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800209a:	4b1c      	ldr	r3, [pc, #112]	; (800210c <HAL_ADC_MspInit+0x10c>)
 800209c:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <HAL_ADC_MspInit+0x110>)
 800209e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80020a0:	4b1a      	ldr	r3, [pc, #104]	; (800210c <HAL_ADC_MspInit+0x10c>)
 80020a2:	2205      	movs	r2, #5
 80020a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020a6:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_ADC_MspInit+0x10c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ac:	4b17      	ldr	r3, [pc, #92]	; (800210c <HAL_ADC_MspInit+0x10c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020b2:	4b16      	ldr	r3, [pc, #88]	; (800210c <HAL_ADC_MspInit+0x10c>)
 80020b4:	2280      	movs	r2, #128	; 0x80
 80020b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020b8:	4b14      	ldr	r3, [pc, #80]	; (800210c <HAL_ADC_MspInit+0x10c>)
 80020ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_ADC_MspInit+0x10c>)
 80020c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020c6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020c8:	4b10      	ldr	r3, [pc, #64]	; (800210c <HAL_ADC_MspInit+0x10c>)
 80020ca:	2220      	movs	r2, #32
 80020cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020ce:	4b0f      	ldr	r3, [pc, #60]	; (800210c <HAL_ADC_MspInit+0x10c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020d4:	480d      	ldr	r0, [pc, #52]	; (800210c <HAL_ADC_MspInit+0x10c>)
 80020d6:	f002 fba7 	bl	8004828 <HAL_DMA_Init>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80020e0:	f7ff ff5c 	bl	8001f9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a09      	ldr	r2, [pc, #36]	; (800210c <HAL_ADC_MspInit+0x10c>)
 80020e8:	655a      	str	r2, [r3, #84]	; 0x54
 80020ea:	4a08      	ldr	r2, [pc, #32]	; (800210c <HAL_ADC_MspInit+0x10c>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80020f0:	2200      	movs	r2, #0
 80020f2:	2100      	movs	r1, #0
 80020f4:	2012      	movs	r0, #18
 80020f6:	f002 fb62 	bl	80047be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80020fa:	2012      	movs	r0, #18
 80020fc:	f002 fb79 	bl	80047f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002100:	bf00      	nop
 8002102:	3778      	adds	r7, #120	; 0x78
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000
 800210c:	200002f8 	.word	0x200002f8
 8002110:	40020008 	.word	0x40020008

08002114 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b0a0      	sub	sp, #128	; 0x80
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800212c:	f107 0318 	add.w	r3, r7, #24
 8002130:	2254      	movs	r2, #84	; 0x54
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f005 fae1 	bl	80076fc <memset>
  if(hfdcan->Instance==FDCAN1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a49      	ldr	r2, [pc, #292]	; (8002264 <HAL_FDCAN_MspInit+0x150>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d143      	bne.n	80021cc <HAL_FDCAN_MspInit+0xb8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002148:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800214a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800214e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002150:	f107 0318 	add.w	r3, r7, #24
 8002154:	4618      	mov	r0, r3
 8002156:	f003 fee9 	bl	8005f2c <HAL_RCCEx_PeriphCLKConfig>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002160:	f7ff ff1c 	bl	8001f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002164:	4b40      	ldr	r3, [pc, #256]	; (8002268 <HAL_FDCAN_MspInit+0x154>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	3301      	adds	r3, #1
 800216a:	4a3f      	ldr	r2, [pc, #252]	; (8002268 <HAL_FDCAN_MspInit+0x154>)
 800216c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800216e:	4b3e      	ldr	r3, [pc, #248]	; (8002268 <HAL_FDCAN_MspInit+0x154>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d10b      	bne.n	800218e <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002176:	4b3d      	ldr	r3, [pc, #244]	; (800226c <HAL_FDCAN_MspInit+0x158>)
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	4a3c      	ldr	r2, [pc, #240]	; (800226c <HAL_FDCAN_MspInit+0x158>)
 800217c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002180:	6593      	str	r3, [r2, #88]	; 0x58
 8002182:	4b3a      	ldr	r3, [pc, #232]	; (800226c <HAL_FDCAN_MspInit+0x158>)
 8002184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218e:	4b37      	ldr	r3, [pc, #220]	; (800226c <HAL_FDCAN_MspInit+0x158>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	4a36      	ldr	r2, [pc, #216]	; (800226c <HAL_FDCAN_MspInit+0x158>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800219a:	4b34      	ldr	r3, [pc, #208]	; (800226c <HAL_FDCAN_MspInit+0x158>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80021a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80021aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
 80021b6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80021b8:	2309      	movs	r3, #9
 80021ba:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021c0:	4619      	mov	r1, r3
 80021c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c6:	f002 ff67 	bl	8005098 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80021ca:	e046      	b.n	800225a <HAL_FDCAN_MspInit+0x146>
  else if(hfdcan->Instance==FDCAN2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a27      	ldr	r2, [pc, #156]	; (8002270 <HAL_FDCAN_MspInit+0x15c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d141      	bne.n	800225a <HAL_FDCAN_MspInit+0x146>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80021d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80021dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021e0:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021e2:	f107 0318 	add.w	r3, r7, #24
 80021e6:	4618      	mov	r0, r3
 80021e8:	f003 fea0 	bl	8005f2c <HAL_RCCEx_PeriphCLKConfig>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_FDCAN_MspInit+0xe2>
      Error_Handler();
 80021f2:	f7ff fed3 	bl	8001f9c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80021f6:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <HAL_FDCAN_MspInit+0x154>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	3301      	adds	r3, #1
 80021fc:	4a1a      	ldr	r2, [pc, #104]	; (8002268 <HAL_FDCAN_MspInit+0x154>)
 80021fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002200:	4b19      	ldr	r3, [pc, #100]	; (8002268 <HAL_FDCAN_MspInit+0x154>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d10b      	bne.n	8002220 <HAL_FDCAN_MspInit+0x10c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002208:	4b18      	ldr	r3, [pc, #96]	; (800226c <HAL_FDCAN_MspInit+0x158>)
 800220a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220c:	4a17      	ldr	r2, [pc, #92]	; (800226c <HAL_FDCAN_MspInit+0x158>)
 800220e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002212:	6593      	str	r3, [r2, #88]	; 0x58
 8002214:	4b15      	ldr	r3, [pc, #84]	; (800226c <HAL_FDCAN_MspInit+0x158>)
 8002216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_FDCAN_MspInit+0x158>)
 8002222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002224:	4a11      	ldr	r2, [pc, #68]	; (800226c <HAL_FDCAN_MspInit+0x158>)
 8002226:	f043 0302 	orr.w	r3, r3, #2
 800222a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800222c:	4b0f      	ldr	r3, [pc, #60]	; (800226c <HAL_FDCAN_MspInit+0x158>)
 800222e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002238:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800223c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223e:	2302      	movs	r3, #2
 8002240:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002246:	2300      	movs	r3, #0
 8002248:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800224a:	2309      	movs	r3, #9
 800224c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002252:	4619      	mov	r1, r3
 8002254:	4807      	ldr	r0, [pc, #28]	; (8002274 <HAL_FDCAN_MspInit+0x160>)
 8002256:	f002 ff1f 	bl	8005098 <HAL_GPIO_Init>
}
 800225a:	bf00      	nop
 800225c:	3780      	adds	r7, #128	; 0x80
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40006400 	.word	0x40006400
 8002268:	200004e0 	.word	0x200004e0
 800226c:	40021000 	.word	0x40021000
 8002270:	40006800 	.word	0x40006800
 8002274:	48000400 	.word	0x48000400

08002278 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b098      	sub	sp, #96	; 0x60
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	2254      	movs	r2, #84	; 0x54
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f005 fa37 	bl	80076fc <memset>
  if(hrtc->Instance==RTC)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a15      	ldr	r2, [pc, #84]	; (80022e8 <HAL_RTC_MspInit+0x70>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d123      	bne.n	80022e0 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002298:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800229c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800229e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022a4:	f107 030c 	add.w	r3, r7, #12
 80022a8:	4618      	mov	r0, r3
 80022aa:	f003 fe3f 	bl	8005f2c <HAL_RCCEx_PeriphCLKConfig>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80022b4:	f7ff fe72 	bl	8001f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <HAL_RTC_MspInit+0x74>)
 80022ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022be:	4a0b      	ldr	r2, [pc, #44]	; (80022ec <HAL_RTC_MspInit+0x74>)
 80022c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80022c8:	4b08      	ldr	r3, [pc, #32]	; (80022ec <HAL_RTC_MspInit+0x74>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022cc:	4a07      	ldr	r2, [pc, #28]	; (80022ec <HAL_RTC_MspInit+0x74>)
 80022ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022d2:	6593      	str	r3, [r2, #88]	; 0x58
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_RTC_MspInit+0x74>)
 80022d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80022e0:	bf00      	nop
 80022e2:	3760      	adds	r7, #96	; 0x60
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40002800 	.word	0x40002800
 80022ec:	40021000 	.word	0x40021000

080022f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a17      	ldr	r2, [pc, #92]	; (800236c <HAL_SPI_MspInit+0x7c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d128      	bne.n	8002364 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002312:	4b17      	ldr	r3, [pc, #92]	; (8002370 <HAL_SPI_MspInit+0x80>)
 8002314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002316:	4a16      	ldr	r2, [pc, #88]	; (8002370 <HAL_SPI_MspInit+0x80>)
 8002318:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800231c:	6593      	str	r3, [r2, #88]	; 0x58
 800231e:	4b14      	ldr	r3, [pc, #80]	; (8002370 <HAL_SPI_MspInit+0x80>)
 8002320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002322:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800232a:	4b11      	ldr	r3, [pc, #68]	; (8002370 <HAL_SPI_MspInit+0x80>)
 800232c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232e:	4a10      	ldr	r2, [pc, #64]	; (8002370 <HAL_SPI_MspInit+0x80>)
 8002330:	f043 0304 	orr.w	r3, r3, #4
 8002334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <HAL_SPI_MspInit+0x80>)
 8002338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002342:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002348:	2302      	movs	r3, #2
 800234a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002350:	2300      	movs	r3, #0
 8002352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002354:	2306      	movs	r3, #6
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	4619      	mov	r1, r3
 800235e:	4805      	ldr	r0, [pc, #20]	; (8002374 <HAL_SPI_MspInit+0x84>)
 8002360:	f002 fe9a 	bl	8005098 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002364:	bf00      	nop
 8002366:	3728      	adds	r7, #40	; 0x28
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40003c00 	.word	0x40003c00
 8002370:	40021000 	.word	0x40021000
 8002374:	48000800 	.word	0x48000800

08002378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800237c:	e7fe      	b.n	800237c <NMI_Handler+0x4>

0800237e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002382:	e7fe      	b.n	8002382 <HardFault_Handler+0x4>

08002384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002388:	e7fe      	b.n	8002388 <MemManage_Handler+0x4>

0800238a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800238e:	e7fe      	b.n	800238e <BusFault_Handler+0x4>

08002390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002394:	e7fe      	b.n	8002394 <UsageFault_Handler+0x4>

08002396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023c4:	f000 f8a4 	bl	8002510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}

080023cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <DMA1_Channel1_IRQHandler+0x10>)
 80023d2:	f002 fb4c 	bl	8004a6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200002f8 	.word	0x200002f8

080023e0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <ADC1_2_IRQHandler+0x10>)
 80023e6:	f000 ff03 	bl	80031f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	2000028c 	.word	0x2000028c

080023f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <SystemInit+0x20>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fe:	4a05      	ldr	r2, [pc, #20]	; (8002414 <SystemInit+0x20>)
 8002400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002418:	480d      	ldr	r0, [pc, #52]	; (8002450 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800241a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800241c:	480d      	ldr	r0, [pc, #52]	; (8002454 <LoopForever+0x6>)
  ldr r1, =_edata
 800241e:	490e      	ldr	r1, [pc, #56]	; (8002458 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002420:	4a0e      	ldr	r2, [pc, #56]	; (800245c <LoopForever+0xe>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002424:	e002      	b.n	800242c <LoopCopyDataInit>

08002426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242a:	3304      	adds	r3, #4

0800242c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800242c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002430:	d3f9      	bcc.n	8002426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002432:	4a0b      	ldr	r2, [pc, #44]	; (8002460 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002434:	4c0b      	ldr	r4, [pc, #44]	; (8002464 <LoopForever+0x16>)
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002438:	e001      	b.n	800243e <LoopFillZerobss>

0800243a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800243c:	3204      	adds	r2, #4

0800243e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002440:	d3fb      	bcc.n	800243a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002442:	f7ff ffd7 	bl	80023f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002446:	f005 f935 	bl	80076b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800244a:	f7ff fa99 	bl	8001980 <main>

0800244e <LoopForever>:

LoopForever:
    b LoopForever
 800244e:	e7fe      	b.n	800244e <LoopForever>
  ldr   r0, =_estack
 8002450:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002458:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800245c:	08007b4c 	.word	0x08007b4c
  ldr r2, =_sbss
 8002460:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002464:	200004e8 	.word	0x200004e8

08002468 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002468:	e7fe      	b.n	8002468 <ADC3_IRQHandler>

0800246a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002470:	2300      	movs	r3, #0
 8002472:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002474:	2003      	movs	r0, #3
 8002476:	f002 f997 	bl	80047a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800247a:	2000      	movs	r0, #0
 800247c:	f000 f80e 	bl	800249c <HAL_InitTick>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	71fb      	strb	r3, [r7, #7]
 800248a:	e001      	b.n	8002490 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800248c:	f7ff fd8c 	bl	8001fa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002490:	79fb      	ldrb	r3, [r7, #7]

}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80024a8:	4b16      	ldr	r3, [pc, #88]	; (8002504 <HAL_InitTick+0x68>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d022      	beq.n	80024f6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80024b0:	4b15      	ldr	r3, [pc, #84]	; (8002508 <HAL_InitTick+0x6c>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b13      	ldr	r3, [pc, #76]	; (8002504 <HAL_InitTick+0x68>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80024c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c4:	4618      	mov	r0, r3
 80024c6:	f002 f9a2 	bl	800480e <HAL_SYSTICK_Config>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10f      	bne.n	80024f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b0f      	cmp	r3, #15
 80024d4:	d809      	bhi.n	80024ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d6:	2200      	movs	r2, #0
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	f04f 30ff 	mov.w	r0, #4294967295
 80024de:	f002 f96e 	bl	80047be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024e2:	4a0a      	ldr	r2, [pc, #40]	; (800250c <HAL_InitTick+0x70>)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	e007      	b.n	80024fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
 80024ee:	e004      	b.n	80024fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
 80024f4:	e001      	b.n	80024fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20000008 	.word	0x20000008
 8002508:	20000000 	.word	0x20000000
 800250c:	20000004 	.word	0x20000004

08002510 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_IncTick+0x1c>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_IncTick+0x20>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4413      	add	r3, r2
 800251e:	4a03      	ldr	r2, [pc, #12]	; (800252c <HAL_IncTick+0x1c>)
 8002520:	6013      	str	r3, [r2, #0]
}
 8002522:	bf00      	nop
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	200004e4 	.word	0x200004e4
 8002530:	20000008 	.word	0x20000008

08002534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return uwTick;
 8002538:	4b03      	ldr	r3, [pc, #12]	; (8002548 <HAL_GetTick+0x14>)
 800253a:	681b      	ldr	r3, [r3, #0]
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	200004e4 	.word	0x200004e4

0800254c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002554:	f7ff ffee 	bl	8002534 <HAL_GetTick>
 8002558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d004      	beq.n	8002570 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_Delay+0x40>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4413      	add	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002570:	bf00      	nop
 8002572:	f7ff ffdf 	bl	8002534 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	429a      	cmp	r2, r3
 8002580:	d8f7      	bhi.n	8002572 <HAL_Delay+0x26>
  {
  }
}
 8002582:	bf00      	nop
 8002584:	bf00      	nop
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000008 	.word	0x20000008

08002590 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8002598:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025a0:	4904      	ldr	r1, [pc, #16]	; (80025b4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	40010030 	.word	0x40010030

080025b8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f023 0202 	bic.w	r2, r3, #2
 80025c8:	4904      	ldr	r1, [pc, #16]	; (80025dc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	40010030 	.word	0x40010030

080025e0 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80025e6:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a0e      	ldr	r2, [pc, #56]	; (8002624 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80025f2:	f7ff ff9f 	bl	8002534 <HAL_GetTick>
 80025f6:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80025f8:	e008      	b.n	800260c <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80025fa:	f7ff ff9b 	bl	8002534 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b0a      	cmp	r3, #10
 8002606:	d901      	bls.n	800260c <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e006      	b.n	800261a <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40010030 	.word	0x40010030

08002628 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	609a      	str	r2, [r3, #8]
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	609a      	str	r2, [r3, #8]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002684:	4618      	mov	r0, r3
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	3360      	adds	r3, #96	; 0x60
 80026a2:	461a      	mov	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <LL_ADC_SetOffset+0x44>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	4313      	orrs	r3, r2
 80026c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80026c8:	bf00      	nop
 80026ca:	371c      	adds	r7, #28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	03fff000 	.word	0x03fff000

080026d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3360      	adds	r3, #96	; 0x60
 80026e6:	461a      	mov	r2, r3
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3360      	adds	r3, #96	; 0x60
 8002714:	461a      	mov	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	431a      	orrs	r2, r3
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800272e:	bf00      	nop
 8002730:	371c      	adds	r7, #28
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800273a:	b480      	push	{r7}
 800273c:	b087      	sub	sp, #28
 800273e:	af00      	add	r7, sp, #0
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	3360      	adds	r3, #96	; 0x60
 800274a:	461a      	mov	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	431a      	orrs	r2, r3
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002764:	bf00      	nop
 8002766:	371c      	adds	r7, #28
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002770:	b480      	push	{r7}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	3360      	adds	r3, #96	; 0x60
 8002780:	461a      	mov	r2, r3
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	431a      	orrs	r2, r3
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800279a:	bf00      	nop
 800279c:	371c      	adds	r7, #28
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	615a      	str	r2, [r3, #20]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b087      	sub	sp, #28
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	3330      	adds	r3, #48	; 0x30
 8002802:	461a      	mov	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	0a1b      	lsrs	r3, r3, #8
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	4413      	add	r3, r2
 8002810:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	211f      	movs	r1, #31
 800281e:	fa01 f303 	lsl.w	r3, r1, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	401a      	ands	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	0e9b      	lsrs	r3, r3, #26
 800282a:	f003 011f 	and.w	r1, r3, #31
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	fa01 f303 	lsl.w	r3, r1, r3
 8002838:	431a      	orrs	r2, r3
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800283e:	bf00      	nop
 8002840:	371c      	adds	r7, #28
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002856:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002870:	b480      	push	{r7}
 8002872:	b087      	sub	sp, #28
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	3314      	adds	r3, #20
 8002880:	461a      	mov	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	0e5b      	lsrs	r3, r3, #25
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	4413      	add	r3, r2
 800288e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	0d1b      	lsrs	r3, r3, #20
 8002898:	f003 031f 	and.w	r3, r3, #31
 800289c:	2107      	movs	r1, #7
 800289e:	fa01 f303 	lsl.w	r3, r1, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	401a      	ands	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	0d1b      	lsrs	r3, r3, #20
 80028aa:	f003 031f 	and.w	r3, r3, #31
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	fa01 f303 	lsl.w	r3, r1, r3
 80028b4:	431a      	orrs	r2, r3
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80028ba:	bf00      	nop
 80028bc:	371c      	adds	r7, #28
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a0f      	ldr	r2, [pc, #60]	; (8002914 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d10a      	bne.n	80028f2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e8:	431a      	orrs	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80028f0:	e00a      	b.n	8002908 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fe:	43db      	mvns	r3, r3
 8002900:	401a      	ands	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	407f0000 	.word	0x407f0000

08002918 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 031f 	and.w	r3, r3, #31
}
 8002928:	4618      	mov	r0, r3
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002960:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6093      	str	r3, [r2, #8]
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002988:	d101      	bne.n	800298e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80029ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029d8:	d101      	bne.n	80029de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a00:	f043 0201 	orr.w	r2, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a28:	f043 0202 	orr.w	r2, r3, #2
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <LL_ADC_IsEnabled+0x18>
 8002a50:	2301      	movs	r3, #1
 8002a52:	e000      	b.n	8002a56 <LL_ADC_IsEnabled+0x1a>
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d101      	bne.n	8002a7a <LL_ADC_IsDisableOngoing+0x18>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <LL_ADC_IsDisableOngoing+0x1a>
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a9c:	f043 0204 	orr.w	r2, r3, #4
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d101      	bne.n	8002ac8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d101      	bne.n	8002aee <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002afc:	b590      	push	{r4, r7, lr}
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e1af      	b.n	8002e76 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d109      	bne.n	8002b38 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff fa6b 	bl	8002000 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff ff19 	bl	8002974 <LL_ADC_IsDeepPowerDownEnabled>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d004      	beq.n	8002b52 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff feff 	bl	8002950 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff ff34 	bl	80029c4 <LL_ADC_IsInternalRegulatorEnabled>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d115      	bne.n	8002b8e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff ff18 	bl	800299c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b6c:	4b9f      	ldr	r3, [pc, #636]	; (8002dec <HAL_ADC_Init+0x2f0>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	099b      	lsrs	r3, r3, #6
 8002b72:	4a9f      	ldr	r2, [pc, #636]	; (8002df0 <HAL_ADC_Init+0x2f4>)
 8002b74:	fba2 2303 	umull	r2, r3, r2, r3
 8002b78:	099b      	lsrs	r3, r3, #6
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b80:	e002      	b.n	8002b88 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	3b01      	subs	r3, #1
 8002b86:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f9      	bne.n	8002b82 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff ff16 	bl	80029c4 <LL_ADC_IsInternalRegulatorEnabled>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10d      	bne.n	8002bba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba2:	f043 0210 	orr.w	r2, r3, #16
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bae:	f043 0201 	orr.w	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ff76 	bl	8002ab0 <LL_ADC_REG_IsConversionOngoing>
 8002bc4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f040 8148 	bne.w	8002e64 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f040 8144 	bne.w	8002e64 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002be4:	f043 0202 	orr.w	r2, r3, #2
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff23 	bl	8002a3c <LL_ADC_IsEnabled>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d141      	bne.n	8002c80 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c04:	d004      	beq.n	8002c10 <HAL_ADC_Init+0x114>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a7a      	ldr	r2, [pc, #488]	; (8002df4 <HAL_ADC_Init+0x2f8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d10f      	bne.n	8002c30 <HAL_ADC_Init+0x134>
 8002c10:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c14:	f7ff ff12 	bl	8002a3c <LL_ADC_IsEnabled>
 8002c18:	4604      	mov	r4, r0
 8002c1a:	4876      	ldr	r0, [pc, #472]	; (8002df4 <HAL_ADC_Init+0x2f8>)
 8002c1c:	f7ff ff0e 	bl	8002a3c <LL_ADC_IsEnabled>
 8002c20:	4603      	mov	r3, r0
 8002c22:	4323      	orrs	r3, r4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf0c      	ite	eq
 8002c28:	2301      	moveq	r3, #1
 8002c2a:	2300      	movne	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	e012      	b.n	8002c56 <HAL_ADC_Init+0x15a>
 8002c30:	4871      	ldr	r0, [pc, #452]	; (8002df8 <HAL_ADC_Init+0x2fc>)
 8002c32:	f7ff ff03 	bl	8002a3c <LL_ADC_IsEnabled>
 8002c36:	4604      	mov	r4, r0
 8002c38:	4870      	ldr	r0, [pc, #448]	; (8002dfc <HAL_ADC_Init+0x300>)
 8002c3a:	f7ff feff 	bl	8002a3c <LL_ADC_IsEnabled>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	431c      	orrs	r4, r3
 8002c42:	486f      	ldr	r0, [pc, #444]	; (8002e00 <HAL_ADC_Init+0x304>)
 8002c44:	f7ff fefa 	bl	8002a3c <LL_ADC_IsEnabled>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	4323      	orrs	r3, r4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf0c      	ite	eq
 8002c50:	2301      	moveq	r3, #1
 8002c52:	2300      	movne	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d012      	beq.n	8002c80 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c62:	d004      	beq.n	8002c6e <HAL_ADC_Init+0x172>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a62      	ldr	r2, [pc, #392]	; (8002df4 <HAL_ADC_Init+0x2f8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d101      	bne.n	8002c72 <HAL_ADC_Init+0x176>
 8002c6e:	4a65      	ldr	r2, [pc, #404]	; (8002e04 <HAL_ADC_Init+0x308>)
 8002c70:	e000      	b.n	8002c74 <HAL_ADC_Init+0x178>
 8002c72:	4a65      	ldr	r2, [pc, #404]	; (8002e08 <HAL_ADC_Init+0x30c>)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	f7ff fcd4 	bl	8002628 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	7f5b      	ldrb	r3, [r3, #29]
 8002c84:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c8a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002c90:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002c96:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c9e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d106      	bne.n	8002cbc <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	045b      	lsls	r3, r3, #17
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d009      	beq.n	8002cd8 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	4b4b      	ldr	r3, [pc, #300]	; (8002e0c <HAL_ADC_Init+0x310>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	69b9      	ldr	r1, [r7, #24]
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff fed2 	bl	8002ab0 <LL_ADC_REG_IsConversionOngoing>
 8002d0c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fedf 	bl	8002ad6 <LL_ADC_INJ_IsConversionOngoing>
 8002d18:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d17f      	bne.n	8002e20 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d17c      	bne.n	8002e20 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d2a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d32:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d42:	f023 0302 	bic.w	r3, r3, #2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	69b9      	ldr	r1, [r7, #24]
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d017      	beq.n	8002d88 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691a      	ldr	r2, [r3, #16]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d66:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002d70:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6911      	ldr	r1, [r2, #16]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	430b      	orrs	r3, r1
 8002d82:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002d86:	e013      	b.n	8002db0 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d96:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002da8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d12a      	bne.n	8002e10 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002dc4:	f023 0304 	bic.w	r3, r3, #4
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002dd0:	4311      	orrs	r1, r2
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002dd6:	4311      	orrs	r1, r2
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0201 	orr.w	r2, r2, #1
 8002de8:	611a      	str	r2, [r3, #16]
 8002dea:	e019      	b.n	8002e20 <HAL_ADC_Init+0x324>
 8002dec:	20000000 	.word	0x20000000
 8002df0:	053e2d63 	.word	0x053e2d63
 8002df4:	50000100 	.word	0x50000100
 8002df8:	50000400 	.word	0x50000400
 8002dfc:	50000500 	.word	0x50000500
 8002e00:	50000600 	.word	0x50000600
 8002e04:	50000300 	.word	0x50000300
 8002e08:	50000700 	.word	0x50000700
 8002e0c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d10c      	bne.n	8002e42 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	f023 010f 	bic.w	r1, r3, #15
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	1e5a      	subs	r2, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	631a      	str	r2, [r3, #48]	; 0x30
 8002e40:	e007      	b.n	8002e52 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 020f 	bic.w	r2, r2, #15
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e56:	f023 0303 	bic.w	r3, r3, #3
 8002e5a:	f043 0201 	orr.w	r2, r3, #1
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e62:	e007      	b.n	8002e74 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e68:	f043 0210 	orr.w	r2, r3, #16
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e74:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3724      	adds	r7, #36	; 0x24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd90      	pop	{r4, r7, pc}
 8002e7e:	bf00      	nop

08002e80 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e90:	d004      	beq.n	8002e9c <HAL_ADC_Start+0x1c>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a67      	ldr	r2, [pc, #412]	; (8003034 <HAL_ADC_Start+0x1b4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d101      	bne.n	8002ea0 <HAL_ADC_Start+0x20>
 8002e9c:	4b66      	ldr	r3, [pc, #408]	; (8003038 <HAL_ADC_Start+0x1b8>)
 8002e9e:	e000      	b.n	8002ea2 <HAL_ADC_Start+0x22>
 8002ea0:	4b66      	ldr	r3, [pc, #408]	; (800303c <HAL_ADC_Start+0x1bc>)
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fd38 	bl	8002918 <LL_ADC_GetMultimode>
 8002ea8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff fdfe 	bl	8002ab0 <LL_ADC_REG_IsConversionOngoing>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f040 80b4 	bne.w	8003024 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_ADC_Start+0x4a>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e0af      	b.n	800302a <HAL_ADC_Start+0x1aa>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f001 f854 	bl	8003f80 <ADC_Enable>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002edc:	7dfb      	ldrb	r3, [r7, #23]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f040 809b 	bne.w	800301a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002eec:	f023 0301 	bic.w	r3, r3, #1
 8002ef0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a4d      	ldr	r2, [pc, #308]	; (8003034 <HAL_ADC_Start+0x1b4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d009      	beq.n	8002f16 <HAL_ADC_Start+0x96>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a4e      	ldr	r2, [pc, #312]	; (8003040 <HAL_ADC_Start+0x1c0>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d002      	beq.n	8002f12 <HAL_ADC_Start+0x92>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	e003      	b.n	8002f1a <HAL_ADC_Start+0x9a>
 8002f12:	4b4c      	ldr	r3, [pc, #304]	; (8003044 <HAL_ADC_Start+0x1c4>)
 8002f14:	e001      	b.n	8002f1a <HAL_ADC_Start+0x9a>
 8002f16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d002      	beq.n	8002f28 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d105      	bne.n	8002f34 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f40:	d106      	bne.n	8002f50 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f46:	f023 0206 	bic.w	r2, r3, #6
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	661a      	str	r2, [r3, #96]	; 0x60
 8002f4e:	e002      	b.n	8002f56 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	221c      	movs	r2, #28
 8002f5c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a32      	ldr	r2, [pc, #200]	; (8003034 <HAL_ADC_Start+0x1b4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d009      	beq.n	8002f84 <HAL_ADC_Start+0x104>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a32      	ldr	r2, [pc, #200]	; (8003040 <HAL_ADC_Start+0x1c0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d002      	beq.n	8002f80 <HAL_ADC_Start+0x100>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	e003      	b.n	8002f88 <HAL_ADC_Start+0x108>
 8002f80:	4b30      	ldr	r3, [pc, #192]	; (8003044 <HAL_ADC_Start+0x1c4>)
 8002f82:	e001      	b.n	8002f88 <HAL_ADC_Start+0x108>
 8002f84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d008      	beq.n	8002fa2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b05      	cmp	r3, #5
 8002f9a:	d002      	beq.n	8002fa2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	2b09      	cmp	r3, #9
 8002fa0:	d114      	bne.n	8002fcc <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d007      	beq.n	8002fc0 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fb8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fd5f 	bl	8002a88 <LL_ADC_REG_StartConversion>
 8002fca:	e02d      	b.n	8003028 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a15      	ldr	r2, [pc, #84]	; (8003034 <HAL_ADC_Start+0x1b4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d009      	beq.n	8002ff6 <HAL_ADC_Start+0x176>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a16      	ldr	r2, [pc, #88]	; (8003040 <HAL_ADC_Start+0x1c0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d002      	beq.n	8002ff2 <HAL_ADC_Start+0x172>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	e003      	b.n	8002ffa <HAL_ADC_Start+0x17a>
 8002ff2:	4b14      	ldr	r3, [pc, #80]	; (8003044 <HAL_ADC_Start+0x1c4>)
 8002ff4:	e001      	b.n	8002ffa <HAL_ADC_Start+0x17a>
 8002ff6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ffa:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00f      	beq.n	8003028 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003010:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	65da      	str	r2, [r3, #92]	; 0x5c
 8003018:	e006      	b.n	8003028 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003022:	e001      	b.n	8003028 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003024:	2302      	movs	r3, #2
 8003026:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003028:	7dfb      	ldrb	r3, [r7, #23]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	50000100 	.word	0x50000100
 8003038:	50000300 	.word	0x50000300
 800303c:	50000700 	.word	0x50000700
 8003040:	50000500 	.word	0x50000500
 8003044:	50000400 	.word	0x50000400

08003048 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800305c:	d004      	beq.n	8003068 <HAL_ADC_Start_DMA+0x20>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a5a      	ldr	r2, [pc, #360]	; (80031cc <HAL_ADC_Start_DMA+0x184>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d101      	bne.n	800306c <HAL_ADC_Start_DMA+0x24>
 8003068:	4b59      	ldr	r3, [pc, #356]	; (80031d0 <HAL_ADC_Start_DMA+0x188>)
 800306a:	e000      	b.n	800306e <HAL_ADC_Start_DMA+0x26>
 800306c:	4b59      	ldr	r3, [pc, #356]	; (80031d4 <HAL_ADC_Start_DMA+0x18c>)
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fc52 	bl	8002918 <LL_ADC_GetMultimode>
 8003074:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff fd18 	bl	8002ab0 <LL_ADC_REG_IsConversionOngoing>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	f040 809b 	bne.w	80031be <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_ADC_Start_DMA+0x4e>
 8003092:	2302      	movs	r3, #2
 8003094:	e096      	b.n	80031c4 <HAL_ADC_Start_DMA+0x17c>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a4d      	ldr	r2, [pc, #308]	; (80031d8 <HAL_ADC_Start_DMA+0x190>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d008      	beq.n	80030ba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d005      	beq.n	80030ba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	2b05      	cmp	r3, #5
 80030b2:	d002      	beq.n	80030ba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	2b09      	cmp	r3, #9
 80030b8:	d17a      	bne.n	80031b0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 ff60 	bl	8003f80 <ADC_Enable>
 80030c0:	4603      	mov	r3, r0
 80030c2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80030c4:	7dfb      	ldrb	r3, [r7, #23]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d16d      	bne.n	80031a6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030d2:	f023 0301 	bic.w	r3, r3, #1
 80030d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a3a      	ldr	r2, [pc, #232]	; (80031cc <HAL_ADC_Start_DMA+0x184>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d009      	beq.n	80030fc <HAL_ADC_Start_DMA+0xb4>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a3b      	ldr	r2, [pc, #236]	; (80031dc <HAL_ADC_Start_DMA+0x194>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d002      	beq.n	80030f8 <HAL_ADC_Start_DMA+0xb0>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	e003      	b.n	8003100 <HAL_ADC_Start_DMA+0xb8>
 80030f8:	4b39      	ldr	r3, [pc, #228]	; (80031e0 <HAL_ADC_Start_DMA+0x198>)
 80030fa:	e001      	b.n	8003100 <HAL_ADC_Start_DMA+0xb8>
 80030fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	4293      	cmp	r3, r2
 8003106:	d002      	beq.n	800310e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d105      	bne.n	800311a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003112:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d006      	beq.n	8003134 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312a:	f023 0206 	bic.w	r2, r3, #6
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	661a      	str	r2, [r3, #96]	; 0x60
 8003132:	e002      	b.n	800313a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313e:	4a29      	ldr	r2, [pc, #164]	; (80031e4 <HAL_ADC_Start_DMA+0x19c>)
 8003140:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003146:	4a28      	ldr	r2, [pc, #160]	; (80031e8 <HAL_ADC_Start_DMA+0x1a0>)
 8003148:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314e:	4a27      	ldr	r2, [pc, #156]	; (80031ec <HAL_ADC_Start_DMA+0x1a4>)
 8003150:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	221c      	movs	r2, #28
 8003158:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0210 	orr.w	r2, r2, #16
 8003170:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0201 	orr.w	r2, r2, #1
 8003180:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	3340      	adds	r3, #64	; 0x40
 800318c:	4619      	mov	r1, r3
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f001 fbf1 	bl	8004978 <HAL_DMA_Start_IT>
 8003196:	4603      	mov	r3, r0
 8003198:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff fc72 	bl	8002a88 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80031a4:	e00d      	b.n	80031c2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80031ae:	e008      	b.n	80031c2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80031bc:	e001      	b.n	80031c2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031be:	2302      	movs	r3, #2
 80031c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80031c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	50000100 	.word	0x50000100
 80031d0:	50000300 	.word	0x50000300
 80031d4:	50000700 	.word	0x50000700
 80031d8:	50000600 	.word	0x50000600
 80031dc:	50000500 	.word	0x50000500
 80031e0:	50000400 	.word	0x50000400
 80031e4:	08004103 	.word	0x08004103
 80031e8:	080041db 	.word	0x080041db
 80031ec:	080041f7 	.word	0x080041f7

080031f0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08a      	sub	sp, #40	; 0x28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80031f8:	2300      	movs	r3, #0
 80031fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003214:	d004      	beq.n	8003220 <HAL_ADC_IRQHandler+0x30>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a8e      	ldr	r2, [pc, #568]	; (8003454 <HAL_ADC_IRQHandler+0x264>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d101      	bne.n	8003224 <HAL_ADC_IRQHandler+0x34>
 8003220:	4b8d      	ldr	r3, [pc, #564]	; (8003458 <HAL_ADC_IRQHandler+0x268>)
 8003222:	e000      	b.n	8003226 <HAL_ADC_IRQHandler+0x36>
 8003224:	4b8d      	ldr	r3, [pc, #564]	; (800345c <HAL_ADC_IRQHandler+0x26c>)
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff fb76 	bl	8002918 <LL_ADC_GetMultimode>
 800322c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d017      	beq.n	8003268 <HAL_ADC_IRQHandler+0x78>
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d012      	beq.n	8003268 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003246:	f003 0310 	and.w	r3, r3, #16
 800324a:	2b00      	cmp	r3, #0
 800324c:	d105      	bne.n	800325a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003252:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f001 f8c2 	bl	80043e4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2202      	movs	r2, #2
 8003266:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	d004      	beq.n	800327c <HAL_ADC_IRQHandler+0x8c>
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10b      	bne.n	8003294 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 8094 	beq.w	80033b0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 808e 	beq.w	80033b0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	2b00      	cmp	r3, #0
 800329e:	d105      	bne.n	80032ac <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fa8b 	bl	80027cc <LL_ADC_REG_IsTriggerSourceSWStart>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d072      	beq.n	80033a2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a64      	ldr	r2, [pc, #400]	; (8003454 <HAL_ADC_IRQHandler+0x264>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d009      	beq.n	80032da <HAL_ADC_IRQHandler+0xea>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a65      	ldr	r2, [pc, #404]	; (8003460 <HAL_ADC_IRQHandler+0x270>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d002      	beq.n	80032d6 <HAL_ADC_IRQHandler+0xe6>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	e003      	b.n	80032de <HAL_ADC_IRQHandler+0xee>
 80032d6:	4b63      	ldr	r3, [pc, #396]	; (8003464 <HAL_ADC_IRQHandler+0x274>)
 80032d8:	e001      	b.n	80032de <HAL_ADC_IRQHandler+0xee>
 80032da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6812      	ldr	r2, [r2, #0]
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d008      	beq.n	80032f8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2b05      	cmp	r3, #5
 80032f0:	d002      	beq.n	80032f8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b09      	cmp	r3, #9
 80032f6:	d104      	bne.n	8003302 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	623b      	str	r3, [r7, #32]
 8003300:	e014      	b.n	800332c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a53      	ldr	r2, [pc, #332]	; (8003454 <HAL_ADC_IRQHandler+0x264>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d009      	beq.n	8003320 <HAL_ADC_IRQHandler+0x130>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a53      	ldr	r2, [pc, #332]	; (8003460 <HAL_ADC_IRQHandler+0x270>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d002      	beq.n	800331c <HAL_ADC_IRQHandler+0x12c>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	e003      	b.n	8003324 <HAL_ADC_IRQHandler+0x134>
 800331c:	4b51      	ldr	r3, [pc, #324]	; (8003464 <HAL_ADC_IRQHandler+0x274>)
 800331e:	e001      	b.n	8003324 <HAL_ADC_IRQHandler+0x134>
 8003320:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003324:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d135      	bne.n	80033a2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b08      	cmp	r3, #8
 8003342:	d12e      	bne.n	80033a2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fbb1 	bl	8002ab0 <LL_ADC_REG_IsConversionOngoing>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d11a      	bne.n	800338a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 020c 	bic.w	r2, r2, #12
 8003362:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003368:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d112      	bne.n	80033a2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003380:	f043 0201 	orr.w	r2, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	65da      	str	r2, [r3, #92]	; 0x5c
 8003388:	e00b      	b.n	80033a2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338e:	f043 0210 	orr.w	r2, r3, #16
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800339a:	f043 0201 	orr.w	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f984 	bl	80036b0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	220c      	movs	r2, #12
 80033ae:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f003 0320 	and.w	r3, r3, #32
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d004      	beq.n	80033c4 <HAL_ADC_IRQHandler+0x1d4>
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	f003 0320 	and.w	r3, r3, #32
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10b      	bne.n	80033dc <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80b3 	beq.w	8003536 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 80ad 	beq.w	8003536 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d105      	bne.n	80033f4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fa26 	bl	800284a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80033fe:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff f9e1 	bl	80027cc <LL_ADC_REG_IsTriggerSourceSWStart>
 800340a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a10      	ldr	r2, [pc, #64]	; (8003454 <HAL_ADC_IRQHandler+0x264>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d009      	beq.n	800342a <HAL_ADC_IRQHandler+0x23a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a11      	ldr	r2, [pc, #68]	; (8003460 <HAL_ADC_IRQHandler+0x270>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d002      	beq.n	8003426 <HAL_ADC_IRQHandler+0x236>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	e003      	b.n	800342e <HAL_ADC_IRQHandler+0x23e>
 8003426:	4b0f      	ldr	r3, [pc, #60]	; (8003464 <HAL_ADC_IRQHandler+0x274>)
 8003428:	e001      	b.n	800342e <HAL_ADC_IRQHandler+0x23e>
 800342a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	4293      	cmp	r3, r2
 8003434:	d008      	beq.n	8003448 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b06      	cmp	r3, #6
 8003440:	d002      	beq.n	8003448 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2b07      	cmp	r3, #7
 8003446:	d10f      	bne.n	8003468 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	623b      	str	r3, [r7, #32]
 8003450:	e01f      	b.n	8003492 <HAL_ADC_IRQHandler+0x2a2>
 8003452:	bf00      	nop
 8003454:	50000100 	.word	0x50000100
 8003458:	50000300 	.word	0x50000300
 800345c:	50000700 	.word	0x50000700
 8003460:	50000500 	.word	0x50000500
 8003464:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a8b      	ldr	r2, [pc, #556]	; (800369c <HAL_ADC_IRQHandler+0x4ac>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d009      	beq.n	8003486 <HAL_ADC_IRQHandler+0x296>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a8a      	ldr	r2, [pc, #552]	; (80036a0 <HAL_ADC_IRQHandler+0x4b0>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d002      	beq.n	8003482 <HAL_ADC_IRQHandler+0x292>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	e003      	b.n	800348a <HAL_ADC_IRQHandler+0x29a>
 8003482:	4b88      	ldr	r3, [pc, #544]	; (80036a4 <HAL_ADC_IRQHandler+0x4b4>)
 8003484:	e001      	b.n	800348a <HAL_ADC_IRQHandler+0x29a>
 8003486:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800348a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d047      	beq.n	8003528 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d007      	beq.n	80034b2 <HAL_ADC_IRQHandler+0x2c2>
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d03f      	beq.n	8003528 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d13a      	bne.n	8003528 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d133      	bne.n	8003528 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d12e      	bne.n	8003528 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fb01 	bl	8002ad6 <LL_ADC_INJ_IsConversionOngoing>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d11a      	bne.n	8003510 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034e8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d112      	bne.n	8003528 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003506:	f043 0201 	orr.w	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	65da      	str	r2, [r3, #92]	; 0x5c
 800350e:	e00b      	b.n	8003528 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003514:	f043 0210 	orr.w	r2, r3, #16
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003520:	f043 0201 	orr.w	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 ff33 	bl	8004394 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2260      	movs	r2, #96	; 0x60
 8003534:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353c:	2b00      	cmp	r3, #0
 800353e:	d011      	beq.n	8003564 <HAL_ADC_IRQHandler+0x374>
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00c      	beq.n	8003564 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f8be 	bl	80036d8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2280      	movs	r2, #128	; 0x80
 8003562:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356a:	2b00      	cmp	r3, #0
 800356c:	d012      	beq.n	8003594 <HAL_ADC_IRQHandler+0x3a4>
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00d      	beq.n	8003594 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 ff19 	bl	80043bc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003592:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800359a:	2b00      	cmp	r3, #0
 800359c:	d012      	beq.n	80035c4 <HAL_ADC_IRQHandler+0x3d4>
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00d      	beq.n	80035c4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 ff0b 	bl	80043d0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d043      	beq.n	8003656 <HAL_ADC_IRQHandler+0x466>
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d03e      	beq.n	8003656 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d102      	bne.n	80035e6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80035e0:	2301      	movs	r3, #1
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
 80035e4:	e021      	b.n	800362a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d015      	beq.n	8003618 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035f4:	d004      	beq.n	8003600 <HAL_ADC_IRQHandler+0x410>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a28      	ldr	r2, [pc, #160]	; (800369c <HAL_ADC_IRQHandler+0x4ac>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d101      	bne.n	8003604 <HAL_ADC_IRQHandler+0x414>
 8003600:	4b29      	ldr	r3, [pc, #164]	; (80036a8 <HAL_ADC_IRQHandler+0x4b8>)
 8003602:	e000      	b.n	8003606 <HAL_ADC_IRQHandler+0x416>
 8003604:	4b29      	ldr	r3, [pc, #164]	; (80036ac <HAL_ADC_IRQHandler+0x4bc>)
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff f994 	bl	8002934 <LL_ADC_GetMultiDMATransfer>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00b      	beq.n	800362a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003612:	2301      	movs	r3, #1
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
 8003616:	e008      	b.n	800362a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003626:	2301      	movs	r3, #1
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	2b01      	cmp	r3, #1
 800362e:	d10e      	bne.n	800364e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003634:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003640:	f043 0202 	orr.w	r2, r3, #2
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f84f 	bl	80036ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2210      	movs	r2, #16
 8003654:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365c:	2b00      	cmp	r3, #0
 800365e:	d018      	beq.n	8003692 <HAL_ADC_IRQHandler+0x4a2>
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003666:	2b00      	cmp	r3, #0
 8003668:	d013      	beq.n	8003692 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367a:	f043 0208 	orr.w	r2, r3, #8
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800368a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 fe8b 	bl	80043a8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003692:	bf00      	nop
 8003694:	3728      	adds	r7, #40	; 0x28
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	50000100 	.word	0x50000100
 80036a0:	50000500 	.word	0x50000500
 80036a4:	50000400 	.word	0x50000400
 80036a8:	50000300 	.word	0x50000300
 80036ac:	50000700 	.word	0x50000700

080036b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b0b6      	sub	sp, #216	; 0xd8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800371a:	2b01      	cmp	r3, #1
 800371c:	d102      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x24>
 800371e:	2302      	movs	r3, #2
 8003720:	f000 bc13 	b.w	8003f4a <HAL_ADC_ConfigChannel+0x84a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff f9bd 	bl	8002ab0 <LL_ADC_REG_IsConversionOngoing>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	f040 83f3 	bne.w	8003f24 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6818      	ldr	r0, [r3, #0]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	6859      	ldr	r1, [r3, #4]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	f7ff f851 	bl	80027f2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff f9ab 	bl	8002ab0 <LL_ADC_REG_IsConversionOngoing>
 800375a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff f9b7 	bl	8002ad6 <LL_ADC_INJ_IsConversionOngoing>
 8003768:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800376c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003770:	2b00      	cmp	r3, #0
 8003772:	f040 81d9 	bne.w	8003b28 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003776:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800377a:	2b00      	cmp	r3, #0
 800377c:	f040 81d4 	bne.w	8003b28 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003788:	d10f      	bne.n	80037aa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2200      	movs	r2, #0
 8003794:	4619      	mov	r1, r3
 8003796:	f7ff f86b 	bl	8002870 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe ffff 	bl	80027a6 <LL_ADC_SetSamplingTimeCommonConfig>
 80037a8:	e00e      	b.n	80037c8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6818      	ldr	r0, [r3, #0]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	6819      	ldr	r1, [r3, #0]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	461a      	mov	r2, r3
 80037b8:	f7ff f85a 	bl	8002870 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2100      	movs	r1, #0
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe ffef 	bl	80027a6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	695a      	ldr	r2, [r3, #20]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	08db      	lsrs	r3, r3, #3
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d022      	beq.n	8003830 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	6919      	ldr	r1, [r3, #16]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80037fa:	f7fe ff49 	bl	8002690 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6919      	ldr	r1, [r3, #16]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	461a      	mov	r2, r3
 800380c:	f7fe ff95 	bl	800273a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6818      	ldr	r0, [r3, #0]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	6919      	ldr	r1, [r3, #16]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	7f1b      	ldrb	r3, [r3, #28]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d102      	bne.n	8003826 <HAL_ADC_ConfigChannel+0x126>
 8003820:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003824:	e000      	b.n	8003828 <HAL_ADC_ConfigChannel+0x128>
 8003826:	2300      	movs	r3, #0
 8003828:	461a      	mov	r2, r3
 800382a:	f7fe ffa1 	bl	8002770 <LL_ADC_SetOffsetSaturation>
 800382e:	e17b      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2100      	movs	r1, #0
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe ff4e 	bl	80026d8 <LL_ADC_GetOffsetChannel>
 800383c:	4603      	mov	r3, r0
 800383e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10a      	bne.n	800385c <HAL_ADC_ConfigChannel+0x15c>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2100      	movs	r1, #0
 800384c:	4618      	mov	r0, r3
 800384e:	f7fe ff43 	bl	80026d8 <LL_ADC_GetOffsetChannel>
 8003852:	4603      	mov	r3, r0
 8003854:	0e9b      	lsrs	r3, r3, #26
 8003856:	f003 021f 	and.w	r2, r3, #31
 800385a:	e01e      	b.n	800389a <HAL_ADC_ConfigChannel+0x19a>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2100      	movs	r1, #0
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe ff38 	bl	80026d8 <LL_ADC_GetOffsetChannel>
 8003868:	4603      	mov	r3, r0
 800386a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003872:	fa93 f3a3 	rbit	r3, r3
 8003876:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800387a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800387e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003882:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800388a:	2320      	movs	r3, #32
 800388c:	e004      	b.n	8003898 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800388e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003892:	fab3 f383 	clz	r3, r3
 8003896:	b2db      	uxtb	r3, r3
 8003898:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d105      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x1b2>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	0e9b      	lsrs	r3, r3, #26
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	e018      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x1e4>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80038be:	fa93 f3a3 	rbit	r3, r3
 80038c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80038c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80038ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80038d6:	2320      	movs	r3, #32
 80038d8:	e004      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80038da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80038de:	fab3 f383 	clz	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d106      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2200      	movs	r2, #0
 80038ee:	2100      	movs	r1, #0
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fe ff07 	bl	8002704 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2101      	movs	r1, #1
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fe feeb 	bl	80026d8 <LL_ADC_GetOffsetChannel>
 8003902:	4603      	mov	r3, r0
 8003904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10a      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x222>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2101      	movs	r1, #1
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe fee0 	bl	80026d8 <LL_ADC_GetOffsetChannel>
 8003918:	4603      	mov	r3, r0
 800391a:	0e9b      	lsrs	r3, r3, #26
 800391c:	f003 021f 	and.w	r2, r3, #31
 8003920:	e01e      	b.n	8003960 <HAL_ADC_ConfigChannel+0x260>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2101      	movs	r1, #1
 8003928:	4618      	mov	r0, r3
 800392a:	f7fe fed5 	bl	80026d8 <LL_ADC_GetOffsetChannel>
 800392e:	4603      	mov	r3, r0
 8003930:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003934:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003938:	fa93 f3a3 	rbit	r3, r3
 800393c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003940:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003944:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003948:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003950:	2320      	movs	r3, #32
 8003952:	e004      	b.n	800395e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003954:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003958:	fab3 f383 	clz	r3, r3
 800395c:	b2db      	uxtb	r3, r3
 800395e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003968:	2b00      	cmp	r3, #0
 800396a:	d105      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x278>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	0e9b      	lsrs	r3, r3, #26
 8003972:	f003 031f 	and.w	r3, r3, #31
 8003976:	e018      	b.n	80039aa <HAL_ADC_ConfigChannel+0x2aa>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003980:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003984:	fa93 f3a3 	rbit	r3, r3
 8003988:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800398c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003990:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003994:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800399c:	2320      	movs	r3, #32
 800399e:	e004      	b.n	80039aa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80039a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039a4:	fab3 f383 	clz	r3, r3
 80039a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d106      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2200      	movs	r2, #0
 80039b4:	2101      	movs	r1, #1
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe fea4 	bl	8002704 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2102      	movs	r1, #2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe fe88 	bl	80026d8 <LL_ADC_GetOffsetChannel>
 80039c8:	4603      	mov	r3, r0
 80039ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10a      	bne.n	80039e8 <HAL_ADC_ConfigChannel+0x2e8>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2102      	movs	r1, #2
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fe fe7d 	bl	80026d8 <LL_ADC_GetOffsetChannel>
 80039de:	4603      	mov	r3, r0
 80039e0:	0e9b      	lsrs	r3, r3, #26
 80039e2:	f003 021f 	and.w	r2, r3, #31
 80039e6:	e01e      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x326>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2102      	movs	r1, #2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe fe72 	bl	80026d8 <LL_ADC_GetOffsetChannel>
 80039f4:	4603      	mov	r3, r0
 80039f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039fe:	fa93 f3a3 	rbit	r3, r3
 8003a02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003a06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003a0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003a16:	2320      	movs	r3, #32
 8003a18:	e004      	b.n	8003a24 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003a1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a1e:	fab3 f383 	clz	r3, r3
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d105      	bne.n	8003a3e <HAL_ADC_ConfigChannel+0x33e>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	0e9b      	lsrs	r3, r3, #26
 8003a38:	f003 031f 	and.w	r3, r3, #31
 8003a3c:	e016      	b.n	8003a6c <HAL_ADC_ConfigChannel+0x36c>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a4a:	fa93 f3a3 	rbit	r3, r3
 8003a4e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003a50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003a56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003a5e:	2320      	movs	r3, #32
 8003a60:	e004      	b.n	8003a6c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003a62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a66:	fab3 f383 	clz	r3, r3
 8003a6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d106      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2200      	movs	r2, #0
 8003a76:	2102      	movs	r1, #2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fe fe43 	bl	8002704 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2103      	movs	r1, #3
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe fe27 	bl	80026d8 <LL_ADC_GetOffsetChannel>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10a      	bne.n	8003aaa <HAL_ADC_ConfigChannel+0x3aa>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2103      	movs	r1, #3
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe fe1c 	bl	80026d8 <LL_ADC_GetOffsetChannel>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	0e9b      	lsrs	r3, r3, #26
 8003aa4:	f003 021f 	and.w	r2, r3, #31
 8003aa8:	e017      	b.n	8003ada <HAL_ADC_ConfigChannel+0x3da>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2103      	movs	r1, #3
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fe fe11 	bl	80026d8 <LL_ADC_GetOffsetChannel>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003abc:	fa93 f3a3 	rbit	r3, r3
 8003ac0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003ac2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ac4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003ac6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003acc:	2320      	movs	r3, #32
 8003ace:	e003      	b.n	8003ad8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003ad0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ad2:	fab3 f383 	clz	r3, r3
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d105      	bne.n	8003af2 <HAL_ADC_ConfigChannel+0x3f2>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	0e9b      	lsrs	r3, r3, #26
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	e011      	b.n	8003b16 <HAL_ADC_ConfigChannel+0x416>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003afa:	fa93 f3a3 	rbit	r3, r3
 8003afe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003b00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b02:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003b0a:	2320      	movs	r3, #32
 8003b0c:	e003      	b.n	8003b16 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b10:	fab3 f383 	clz	r3, r3
 8003b14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d106      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2103      	movs	r1, #3
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fe fdee 	bl	8002704 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fe ff85 	bl	8002a3c <LL_ADC_IsEnabled>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f040 813d 	bne.w	8003db4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	6819      	ldr	r1, [r3, #0]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	461a      	mov	r2, r3
 8003b48:	f7fe febe 	bl	80028c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4aa2      	ldr	r2, [pc, #648]	; (8003ddc <HAL_ADC_ConfigChannel+0x6dc>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	f040 812e 	bne.w	8003db4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10b      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x480>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	0e9b      	lsrs	r3, r3, #26
 8003b6e:	3301      	adds	r3, #1
 8003b70:	f003 031f 	and.w	r3, r3, #31
 8003b74:	2b09      	cmp	r3, #9
 8003b76:	bf94      	ite	ls
 8003b78:	2301      	movls	r3, #1
 8003b7a:	2300      	movhi	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	e019      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x4b4>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b88:	fa93 f3a3 	rbit	r3, r3
 8003b8c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003b8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b90:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003b92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003b98:	2320      	movs	r3, #32
 8003b9a:	e003      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003b9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b9e:	fab3 f383 	clz	r3, r3
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	f003 031f 	and.w	r3, r3, #31
 8003baa:	2b09      	cmp	r3, #9
 8003bac:	bf94      	ite	ls
 8003bae:	2301      	movls	r3, #1
 8003bb0:	2300      	movhi	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d079      	beq.n	8003cac <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d107      	bne.n	8003bd4 <HAL_ADC_ConfigChannel+0x4d4>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	0e9b      	lsrs	r3, r3, #26
 8003bca:	3301      	adds	r3, #1
 8003bcc:	069b      	lsls	r3, r3, #26
 8003bce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bd2:	e015      	b.n	8003c00 <HAL_ADC_ConfigChannel+0x500>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bdc:	fa93 f3a3 	rbit	r3, r3
 8003be0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003bec:	2320      	movs	r3, #32
 8003bee:	e003      	b.n	8003bf8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf2:	fab3 f383 	clz	r3, r3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	069b      	lsls	r3, r3, #26
 8003bfc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d109      	bne.n	8003c20 <HAL_ADC_ConfigChannel+0x520>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	0e9b      	lsrs	r3, r3, #26
 8003c12:	3301      	adds	r3, #1
 8003c14:	f003 031f 	and.w	r3, r3, #31
 8003c18:	2101      	movs	r1, #1
 8003c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1e:	e017      	b.n	8003c50 <HAL_ADC_ConfigChannel+0x550>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c28:	fa93 f3a3 	rbit	r3, r3
 8003c2c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c30:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003c38:	2320      	movs	r3, #32
 8003c3a:	e003      	b.n	8003c44 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c3e:	fab3 f383 	clz	r3, r3
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	3301      	adds	r3, #1
 8003c46:	f003 031f 	and.w	r3, r3, #31
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c50:	ea42 0103 	orr.w	r1, r2, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10a      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x576>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	0e9b      	lsrs	r3, r3, #26
 8003c66:	3301      	adds	r3, #1
 8003c68:	f003 021f 	and.w	r2, r3, #31
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	4413      	add	r3, r2
 8003c72:	051b      	lsls	r3, r3, #20
 8003c74:	e018      	b.n	8003ca8 <HAL_ADC_ConfigChannel+0x5a8>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7e:	fa93 f3a3 	rbit	r3, r3
 8003c82:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003c8e:	2320      	movs	r3, #32
 8003c90:	e003      	b.n	8003c9a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c94:	fab3 f383 	clz	r3, r3
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	f003 021f 	and.w	r2, r3, #31
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	4413      	add	r3, r2
 8003ca6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	e07e      	b.n	8003daa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d107      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x5c8>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	0e9b      	lsrs	r3, r3, #26
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	069b      	lsls	r3, r3, #26
 8003cc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cc6:	e015      	b.n	8003cf4 <HAL_ADC_ConfigChannel+0x5f4>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	fa93 f3a3 	rbit	r3, r3
 8003cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003ce0:	2320      	movs	r3, #32
 8003ce2:	e003      	b.n	8003cec <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce6:	fab3 f383 	clz	r3, r3
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	3301      	adds	r3, #1
 8003cee:	069b      	lsls	r3, r3, #26
 8003cf0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d109      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x614>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	0e9b      	lsrs	r3, r3, #26
 8003d06:	3301      	adds	r3, #1
 8003d08:	f003 031f 	and.w	r3, r3, #31
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d12:	e017      	b.n	8003d44 <HAL_ADC_ConfigChannel+0x644>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	fa93 f3a3 	rbit	r3, r3
 8003d20:	61fb      	str	r3, [r7, #28]
  return result;
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003d2c:	2320      	movs	r3, #32
 8003d2e:	e003      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	fab3 f383 	clz	r3, r3
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	3301      	adds	r3, #1
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	2101      	movs	r1, #1
 8003d40:	fa01 f303 	lsl.w	r3, r1, r3
 8003d44:	ea42 0103 	orr.w	r1, r2, r3
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10d      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x670>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	0e9b      	lsrs	r3, r3, #26
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	f003 021f 	and.w	r2, r3, #31
 8003d60:	4613      	mov	r3, r2
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	4413      	add	r3, r2
 8003d66:	3b1e      	subs	r3, #30
 8003d68:	051b      	lsls	r3, r3, #20
 8003d6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d6e:	e01b      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x6a8>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	fa93 f3a3 	rbit	r3, r3
 8003d7c:	613b      	str	r3, [r7, #16]
  return result;
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003d88:	2320      	movs	r3, #32
 8003d8a:	e003      	b.n	8003d94 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	fab3 f383 	clz	r3, r3
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	3301      	adds	r3, #1
 8003d96:	f003 021f 	and.w	r2, r3, #31
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	4413      	add	r3, r2
 8003da0:	3b1e      	subs	r3, #30
 8003da2:	051b      	lsls	r3, r3, #20
 8003da4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003da8:	430b      	orrs	r3, r1
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	6892      	ldr	r2, [r2, #8]
 8003dae:	4619      	mov	r1, r3
 8003db0:	f7fe fd5e 	bl	8002870 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <HAL_ADC_ConfigChannel+0x6e0>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80be 	beq.w	8003f3e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dca:	d004      	beq.n	8003dd6 <HAL_ADC_ConfigChannel+0x6d6>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a04      	ldr	r2, [pc, #16]	; (8003de4 <HAL_ADC_ConfigChannel+0x6e4>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d10a      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x6ec>
 8003dd6:	4b04      	ldr	r3, [pc, #16]	; (8003de8 <HAL_ADC_ConfigChannel+0x6e8>)
 8003dd8:	e009      	b.n	8003dee <HAL_ADC_ConfigChannel+0x6ee>
 8003dda:	bf00      	nop
 8003ddc:	407f0000 	.word	0x407f0000
 8003de0:	80080000 	.word	0x80080000
 8003de4:	50000100 	.word	0x50000100
 8003de8:	50000300 	.word	0x50000300
 8003dec:	4b59      	ldr	r3, [pc, #356]	; (8003f54 <HAL_ADC_ConfigChannel+0x854>)
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fe fc40 	bl	8002674 <LL_ADC_GetCommonPathInternalCh>
 8003df4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a56      	ldr	r2, [pc, #344]	; (8003f58 <HAL_ADC_ConfigChannel+0x858>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d004      	beq.n	8003e0c <HAL_ADC_ConfigChannel+0x70c>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a55      	ldr	r2, [pc, #340]	; (8003f5c <HAL_ADC_ConfigChannel+0x85c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d13a      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d134      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e20:	d005      	beq.n	8003e2e <HAL_ADC_ConfigChannel+0x72e>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a4e      	ldr	r2, [pc, #312]	; (8003f60 <HAL_ADC_ConfigChannel+0x860>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	f040 8085 	bne.w	8003f38 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e36:	d004      	beq.n	8003e42 <HAL_ADC_ConfigChannel+0x742>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a49      	ldr	r2, [pc, #292]	; (8003f64 <HAL_ADC_ConfigChannel+0x864>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d101      	bne.n	8003e46 <HAL_ADC_ConfigChannel+0x746>
 8003e42:	4a49      	ldr	r2, [pc, #292]	; (8003f68 <HAL_ADC_ConfigChannel+0x868>)
 8003e44:	e000      	b.n	8003e48 <HAL_ADC_ConfigChannel+0x748>
 8003e46:	4a43      	ldr	r2, [pc, #268]	; (8003f54 <HAL_ADC_ConfigChannel+0x854>)
 8003e48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e50:	4619      	mov	r1, r3
 8003e52:	4610      	mov	r0, r2
 8003e54:	f7fe fbfb 	bl	800264e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e58:	4b44      	ldr	r3, [pc, #272]	; (8003f6c <HAL_ADC_ConfigChannel+0x86c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	099b      	lsrs	r3, r3, #6
 8003e5e:	4a44      	ldr	r2, [pc, #272]	; (8003f70 <HAL_ADC_ConfigChannel+0x870>)
 8003e60:	fba2 2303 	umull	r2, r3, r2, r3
 8003e64:	099b      	lsrs	r3, r3, #6
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	4613      	mov	r3, r2
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e72:	e002      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1f9      	bne.n	8003e74 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e80:	e05a      	b.n	8003f38 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a3b      	ldr	r2, [pc, #236]	; (8003f74 <HAL_ADC_ConfigChannel+0x874>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d125      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x7d8>
 8003e8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d11f      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a31      	ldr	r2, [pc, #196]	; (8003f64 <HAL_ADC_ConfigChannel+0x864>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d104      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x7ac>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a34      	ldr	r2, [pc, #208]	; (8003f78 <HAL_ADC_ConfigChannel+0x878>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d047      	beq.n	8003f3c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eb4:	d004      	beq.n	8003ec0 <HAL_ADC_ConfigChannel+0x7c0>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a2a      	ldr	r2, [pc, #168]	; (8003f64 <HAL_ADC_ConfigChannel+0x864>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d101      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x7c4>
 8003ec0:	4a29      	ldr	r2, [pc, #164]	; (8003f68 <HAL_ADC_ConfigChannel+0x868>)
 8003ec2:	e000      	b.n	8003ec6 <HAL_ADC_ConfigChannel+0x7c6>
 8003ec4:	4a23      	ldr	r2, [pc, #140]	; (8003f54 <HAL_ADC_ConfigChannel+0x854>)
 8003ec6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	f7fe fbbc 	bl	800264e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ed6:	e031      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a27      	ldr	r2, [pc, #156]	; (8003f7c <HAL_ADC_ConfigChannel+0x87c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d12d      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ee2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d127      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a1c      	ldr	r2, [pc, #112]	; (8003f64 <HAL_ADC_ConfigChannel+0x864>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d022      	beq.n	8003f3e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f00:	d004      	beq.n	8003f0c <HAL_ADC_ConfigChannel+0x80c>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a17      	ldr	r2, [pc, #92]	; (8003f64 <HAL_ADC_ConfigChannel+0x864>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d101      	bne.n	8003f10 <HAL_ADC_ConfigChannel+0x810>
 8003f0c:	4a16      	ldr	r2, [pc, #88]	; (8003f68 <HAL_ADC_ConfigChannel+0x868>)
 8003f0e:	e000      	b.n	8003f12 <HAL_ADC_ConfigChannel+0x812>
 8003f10:	4a10      	ldr	r2, [pc, #64]	; (8003f54 <HAL_ADC_ConfigChannel+0x854>)
 8003f12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	f7fe fb96 	bl	800264e <LL_ADC_SetCommonPathInternalCh>
 8003f22:	e00c      	b.n	8003f3e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f28:	f043 0220 	orr.w	r2, r3, #32
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003f36:	e002      	b.n	8003f3e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f38:	bf00      	nop
 8003f3a:	e000      	b.n	8003f3e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f3c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f46:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	37d8      	adds	r7, #216	; 0xd8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	50000700 	.word	0x50000700
 8003f58:	c3210000 	.word	0xc3210000
 8003f5c:	90c00010 	.word	0x90c00010
 8003f60:	50000600 	.word	0x50000600
 8003f64:	50000100 	.word	0x50000100
 8003f68:	50000300 	.word	0x50000300
 8003f6c:	20000000 	.word	0x20000000
 8003f70:	053e2d63 	.word	0x053e2d63
 8003f74:	c7520000 	.word	0xc7520000
 8003f78:	50000500 	.word	0x50000500
 8003f7c:	cb840000 	.word	0xcb840000

08003f80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fe fd55 	bl	8002a3c <LL_ADC_IsEnabled>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d14d      	bne.n	8004034 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	4b28      	ldr	r3, [pc, #160]	; (8004040 <ADC_Enable+0xc0>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00d      	beq.n	8003fc2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003faa:	f043 0210 	orr.w	r2, r3, #16
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb6:	f043 0201 	orr.w	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e039      	b.n	8004036 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fe fd10 	bl	80029ec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003fcc:	f7fe fab2 	bl	8002534 <HAL_GetTick>
 8003fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fd2:	e028      	b.n	8004026 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fe fd2f 	bl	8002a3c <LL_ADC_IsEnabled>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d104      	bne.n	8003fee <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fe fcff 	bl	80029ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003fee:	f7fe faa1 	bl	8002534 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d914      	bls.n	8004026 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b01      	cmp	r3, #1
 8004008:	d00d      	beq.n	8004026 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400e:	f043 0210 	orr.w	r2, r3, #16
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800401a:	f043 0201 	orr.w	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e007      	b.n	8004036 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b01      	cmp	r3, #1
 8004032:	d1cf      	bne.n	8003fd4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	8000003f 	.word	0x8000003f

08004044 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	f7fe fd06 	bl	8002a62 <LL_ADC_IsDisableOngoing>
 8004056:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f7fe fced 	bl	8002a3c <LL_ADC_IsEnabled>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d047      	beq.n	80040f8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d144      	bne.n	80040f8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 030d 	and.w	r3, r3, #13
 8004078:	2b01      	cmp	r3, #1
 800407a:	d10c      	bne.n	8004096 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f7fe fcc7 	bl	8002a14 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2203      	movs	r2, #3
 800408c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800408e:	f7fe fa51 	bl	8002534 <HAL_GetTick>
 8004092:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004094:	e029      	b.n	80040ea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800409a:	f043 0210 	orr.w	r2, r3, #16
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a6:	f043 0201 	orr.w	r2, r3, #1
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e023      	b.n	80040fa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80040b2:	f7fe fa3f 	bl	8002534 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d914      	bls.n	80040ea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00d      	beq.n	80040ea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d2:	f043 0210 	orr.w	r2, r3, #16
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040de:	f043 0201 	orr.w	r2, r3, #1
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e007      	b.n	80040fa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1dc      	bne.n	80040b2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b084      	sub	sp, #16
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004114:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004118:	2b00      	cmp	r3, #0
 800411a:	d14b      	bne.n	80041b4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004120:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d021      	beq.n	800417a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe fb46 	bl	80027cc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d032      	beq.n	80041ac <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d12b      	bne.n	80041ac <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004158:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d11f      	bne.n	80041ac <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004170:	f043 0201 	orr.w	r2, r3, #1
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	65da      	str	r2, [r3, #92]	; 0x5c
 8004178:	e018      	b.n	80041ac <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d111      	bne.n	80041ac <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d105      	bne.n	80041ac <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a4:	f043 0201 	orr.w	r2, r3, #1
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f7ff fa7f 	bl	80036b0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041b2:	e00e      	b.n	80041d2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f7ff fa93 	bl	80036ec <HAL_ADC_ErrorCallback>
}
 80041c6:	e004      	b.n	80041d2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	4798      	blx	r3
}
 80041d2:	bf00      	nop
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f7ff fa6b 	bl	80036c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041ee:	bf00      	nop
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004208:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004214:	f043 0204 	orr.w	r2, r3, #4
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7ff fa65 	bl	80036ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <LL_ADC_IsEnabled>:
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b01      	cmp	r3, #1
 800423c:	d101      	bne.n	8004242 <LL_ADC_IsEnabled+0x18>
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <LL_ADC_IsEnabled+0x1a>
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <LL_ADC_StartCalibration>:
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004262:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800426c:	4313      	orrs	r3, r2
 800426e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	609a      	str	r2, [r3, #8]
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <LL_ADC_IsCalibrationOnGoing>:
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004296:	d101      	bne.n	800429c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004298:	2301      	movs	r3, #1
 800429a:	e000      	b.n	800429e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <LL_ADC_REG_IsConversionOngoing>:
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d101      	bne.n	80042c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80042da:	2300      	movs	r3, #0
 80042dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_ADCEx_Calibration_Start+0x1c>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e04d      	b.n	8004388 <HAL_ADCEx_Calibration_Start+0xb8>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff fea5 	bl	8004044 <ADC_Disable>
 80042fa:	4603      	mov	r3, r0
 80042fc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d136      	bne.n	8004372 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004308:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800430c:	f023 0302 	bic.w	r3, r3, #2
 8004310:	f043 0202 	orr.w	r2, r3, #2
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6839      	ldr	r1, [r7, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff ff96 	bl	8004250 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004324:	e014      	b.n	8004350 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	3301      	adds	r3, #1
 800432a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4a18      	ldr	r2, [pc, #96]	; (8004390 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d90d      	bls.n	8004350 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004338:	f023 0312 	bic.w	r3, r3, #18
 800433c:	f043 0210 	orr.w	r2, r3, #16
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e01b      	b.n	8004388 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff ff94 	bl	8004282 <LL_ADC_IsCalibrationOnGoing>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e2      	bne.n	8004326 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004364:	f023 0303 	bic.w	r3, r3, #3
 8004368:	f043 0201 	orr.w	r2, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004370:	e005      	b.n	800437e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004376:	f043 0210 	orr.w	r2, r3, #16
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004386:	7bfb      	ldrb	r3, [r7, #15]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	0004de01 	.word	0x0004de01

08004394 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80043f8:	b590      	push	{r4, r7, lr}
 80043fa:	b0a1      	sub	sp, #132	; 0x84
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004412:	2302      	movs	r3, #2
 8004414:	e0e7      	b.n	80045e6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800441e:	2300      	movs	r3, #0
 8004420:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004422:	2300      	movs	r3, #0
 8004424:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800442e:	d102      	bne.n	8004436 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004430:	4b6f      	ldr	r3, [pc, #444]	; (80045f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004432:	60bb      	str	r3, [r7, #8]
 8004434:	e009      	b.n	800444a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a6e      	ldr	r2, [pc, #440]	; (80045f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d102      	bne.n	8004446 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004440:	4b6d      	ldr	r3, [pc, #436]	; (80045f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004442:	60bb      	str	r3, [r7, #8]
 8004444:	e001      	b.n	800444a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004446:	2300      	movs	r3, #0
 8004448:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10b      	bne.n	8004468 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004454:	f043 0220 	orr.w	r2, r3, #32
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0be      	b.n	80045e6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff ff1d 	bl	80042aa <LL_ADC_REG_IsConversionOngoing>
 8004470:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff ff17 	bl	80042aa <LL_ADC_REG_IsConversionOngoing>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	f040 80a0 	bne.w	80045c4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004484:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004486:	2b00      	cmp	r3, #0
 8004488:	f040 809c 	bne.w	80045c4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004494:	d004      	beq.n	80044a0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a55      	ldr	r2, [pc, #340]	; (80045f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d101      	bne.n	80044a4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80044a0:	4b56      	ldr	r3, [pc, #344]	; (80045fc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80044a2:	e000      	b.n	80044a6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80044a4:	4b56      	ldr	r3, [pc, #344]	; (8004600 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80044a6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d04b      	beq.n	8004548 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80044b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	6859      	ldr	r1, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044c2:	035b      	lsls	r3, r3, #13
 80044c4:	430b      	orrs	r3, r1
 80044c6:	431a      	orrs	r2, r3
 80044c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044d4:	d004      	beq.n	80044e0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a45      	ldr	r2, [pc, #276]	; (80045f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d10f      	bne.n	8004500 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80044e0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80044e4:	f7ff fea1 	bl	800422a <LL_ADC_IsEnabled>
 80044e8:	4604      	mov	r4, r0
 80044ea:	4841      	ldr	r0, [pc, #260]	; (80045f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80044ec:	f7ff fe9d 	bl	800422a <LL_ADC_IsEnabled>
 80044f0:	4603      	mov	r3, r0
 80044f2:	4323      	orrs	r3, r4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	bf0c      	ite	eq
 80044f8:	2301      	moveq	r3, #1
 80044fa:	2300      	movne	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	e012      	b.n	8004526 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004500:	483c      	ldr	r0, [pc, #240]	; (80045f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004502:	f7ff fe92 	bl	800422a <LL_ADC_IsEnabled>
 8004506:	4604      	mov	r4, r0
 8004508:	483b      	ldr	r0, [pc, #236]	; (80045f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800450a:	f7ff fe8e 	bl	800422a <LL_ADC_IsEnabled>
 800450e:	4603      	mov	r3, r0
 8004510:	431c      	orrs	r4, r3
 8004512:	483c      	ldr	r0, [pc, #240]	; (8004604 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004514:	f7ff fe89 	bl	800422a <LL_ADC_IsEnabled>
 8004518:	4603      	mov	r3, r0
 800451a:	4323      	orrs	r3, r4
 800451c:	2b00      	cmp	r3, #0
 800451e:	bf0c      	ite	eq
 8004520:	2301      	moveq	r3, #1
 8004522:	2300      	movne	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d056      	beq.n	80045d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800452a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004532:	f023 030f 	bic.w	r3, r3, #15
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	6811      	ldr	r1, [r2, #0]
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	6892      	ldr	r2, [r2, #8]
 800453e:	430a      	orrs	r2, r1
 8004540:	431a      	orrs	r2, r3
 8004542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004544:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004546:	e047      	b.n	80045d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004550:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004552:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800455c:	d004      	beq.n	8004568 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a23      	ldr	r2, [pc, #140]	; (80045f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d10f      	bne.n	8004588 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004568:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800456c:	f7ff fe5d 	bl	800422a <LL_ADC_IsEnabled>
 8004570:	4604      	mov	r4, r0
 8004572:	481f      	ldr	r0, [pc, #124]	; (80045f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004574:	f7ff fe59 	bl	800422a <LL_ADC_IsEnabled>
 8004578:	4603      	mov	r3, r0
 800457a:	4323      	orrs	r3, r4
 800457c:	2b00      	cmp	r3, #0
 800457e:	bf0c      	ite	eq
 8004580:	2301      	moveq	r3, #1
 8004582:	2300      	movne	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	e012      	b.n	80045ae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004588:	481a      	ldr	r0, [pc, #104]	; (80045f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800458a:	f7ff fe4e 	bl	800422a <LL_ADC_IsEnabled>
 800458e:	4604      	mov	r4, r0
 8004590:	4819      	ldr	r0, [pc, #100]	; (80045f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004592:	f7ff fe4a 	bl	800422a <LL_ADC_IsEnabled>
 8004596:	4603      	mov	r3, r0
 8004598:	431c      	orrs	r4, r3
 800459a:	481a      	ldr	r0, [pc, #104]	; (8004604 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800459c:	f7ff fe45 	bl	800422a <LL_ADC_IsEnabled>
 80045a0:	4603      	mov	r3, r0
 80045a2:	4323      	orrs	r3, r4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	bf0c      	ite	eq
 80045a8:	2301      	moveq	r3, #1
 80045aa:	2300      	movne	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d012      	beq.n	80045d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80045b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80045ba:	f023 030f 	bic.w	r3, r3, #15
 80045be:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80045c0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045c2:	e009      	b.n	80045d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c8:	f043 0220 	orr.w	r2, r3, #32
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80045d6:	e000      	b.n	80045da <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80045e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3784      	adds	r7, #132	; 0x84
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd90      	pop	{r4, r7, pc}
 80045ee:	bf00      	nop
 80045f0:	50000100 	.word	0x50000100
 80045f4:	50000400 	.word	0x50000400
 80045f8:	50000500 	.word	0x50000500
 80045fc:	50000300 	.word	0x50000300
 8004600:	50000700 	.word	0x50000700
 8004604:	50000600 	.word	0x50000600

08004608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004618:	4b0c      	ldr	r3, [pc, #48]	; (800464c <__NVIC_SetPriorityGrouping+0x44>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004624:	4013      	ands	r3, r2
 8004626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800463a:	4a04      	ldr	r2, [pc, #16]	; (800464c <__NVIC_SetPriorityGrouping+0x44>)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	60d3      	str	r3, [r2, #12]
}
 8004640:	bf00      	nop
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	e000ed00 	.word	0xe000ed00

08004650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004654:	4b04      	ldr	r3, [pc, #16]	; (8004668 <__NVIC_GetPriorityGrouping+0x18>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	0a1b      	lsrs	r3, r3, #8
 800465a:	f003 0307 	and.w	r3, r3, #7
}
 800465e:	4618      	mov	r0, r3
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	e000ed00 	.word	0xe000ed00

0800466c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467a:	2b00      	cmp	r3, #0
 800467c:	db0b      	blt.n	8004696 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	f003 021f 	and.w	r2, r3, #31
 8004684:	4907      	ldr	r1, [pc, #28]	; (80046a4 <__NVIC_EnableIRQ+0x38>)
 8004686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	2001      	movs	r0, #1
 800468e:	fa00 f202 	lsl.w	r2, r0, r2
 8004692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	e000e100 	.word	0xe000e100

080046a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	4603      	mov	r3, r0
 80046b0:	6039      	str	r1, [r7, #0]
 80046b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	db0a      	blt.n	80046d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	490c      	ldr	r1, [pc, #48]	; (80046f4 <__NVIC_SetPriority+0x4c>)
 80046c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c6:	0112      	lsls	r2, r2, #4
 80046c8:	b2d2      	uxtb	r2, r2
 80046ca:	440b      	add	r3, r1
 80046cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046d0:	e00a      	b.n	80046e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	4908      	ldr	r1, [pc, #32]	; (80046f8 <__NVIC_SetPriority+0x50>)
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	3b04      	subs	r3, #4
 80046e0:	0112      	lsls	r2, r2, #4
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	440b      	add	r3, r1
 80046e6:	761a      	strb	r2, [r3, #24]
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	e000e100 	.word	0xe000e100
 80046f8:	e000ed00 	.word	0xe000ed00

080046fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b089      	sub	sp, #36	; 0x24
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f1c3 0307 	rsb	r3, r3, #7
 8004716:	2b04      	cmp	r3, #4
 8004718:	bf28      	it	cs
 800471a:	2304      	movcs	r3, #4
 800471c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	3304      	adds	r3, #4
 8004722:	2b06      	cmp	r3, #6
 8004724:	d902      	bls.n	800472c <NVIC_EncodePriority+0x30>
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	3b03      	subs	r3, #3
 800472a:	e000      	b.n	800472e <NVIC_EncodePriority+0x32>
 800472c:	2300      	movs	r3, #0
 800472e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004730:	f04f 32ff 	mov.w	r2, #4294967295
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43da      	mvns	r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	401a      	ands	r2, r3
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004744:	f04f 31ff 	mov.w	r1, #4294967295
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	fa01 f303 	lsl.w	r3, r1, r3
 800474e:	43d9      	mvns	r1, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004754:	4313      	orrs	r3, r2
         );
}
 8004756:	4618      	mov	r0, r3
 8004758:	3724      	adds	r7, #36	; 0x24
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
	...

08004764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3b01      	subs	r3, #1
 8004770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004774:	d301      	bcc.n	800477a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004776:	2301      	movs	r3, #1
 8004778:	e00f      	b.n	800479a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800477a:	4a0a      	ldr	r2, [pc, #40]	; (80047a4 <SysTick_Config+0x40>)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3b01      	subs	r3, #1
 8004780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004782:	210f      	movs	r1, #15
 8004784:	f04f 30ff 	mov.w	r0, #4294967295
 8004788:	f7ff ff8e 	bl	80046a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800478c:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <SysTick_Config+0x40>)
 800478e:	2200      	movs	r2, #0
 8004790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004792:	4b04      	ldr	r3, [pc, #16]	; (80047a4 <SysTick_Config+0x40>)
 8004794:	2207      	movs	r2, #7
 8004796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	e000e010 	.word	0xe000e010

080047a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff ff29 	bl	8004608 <__NVIC_SetPriorityGrouping>
}
 80047b6:	bf00      	nop
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b086      	sub	sp, #24
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	4603      	mov	r3, r0
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	607a      	str	r2, [r7, #4]
 80047ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047cc:	f7ff ff40 	bl	8004650 <__NVIC_GetPriorityGrouping>
 80047d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	68b9      	ldr	r1, [r7, #8]
 80047d6:	6978      	ldr	r0, [r7, #20]
 80047d8:	f7ff ff90 	bl	80046fc <NVIC_EncodePriority>
 80047dc:	4602      	mov	r2, r0
 80047de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047e2:	4611      	mov	r1, r2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff ff5f 	bl	80046a8 <__NVIC_SetPriority>
}
 80047ea:	bf00      	nop
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b082      	sub	sp, #8
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	4603      	mov	r3, r0
 80047fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff ff33 	bl	800466c <__NVIC_EnableIRQ>
}
 8004806:	bf00      	nop
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff ffa4 	bl	8004764 <SysTick_Config>
 800481c:	4603      	mov	r3, r0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e08d      	b.n	8004956 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	4b47      	ldr	r3, [pc, #284]	; (8004960 <HAL_DMA_Init+0x138>)
 8004842:	429a      	cmp	r2, r3
 8004844:	d80f      	bhi.n	8004866 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	4b45      	ldr	r3, [pc, #276]	; (8004964 <HAL_DMA_Init+0x13c>)
 800484e:	4413      	add	r3, r2
 8004850:	4a45      	ldr	r2, [pc, #276]	; (8004968 <HAL_DMA_Init+0x140>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	091b      	lsrs	r3, r3, #4
 8004858:	009a      	lsls	r2, r3, #2
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a42      	ldr	r2, [pc, #264]	; (800496c <HAL_DMA_Init+0x144>)
 8004862:	641a      	str	r2, [r3, #64]	; 0x40
 8004864:	e00e      	b.n	8004884 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	461a      	mov	r2, r3
 800486c:	4b40      	ldr	r3, [pc, #256]	; (8004970 <HAL_DMA_Init+0x148>)
 800486e:	4413      	add	r3, r2
 8004870:	4a3d      	ldr	r2, [pc, #244]	; (8004968 <HAL_DMA_Init+0x140>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	091b      	lsrs	r3, r3, #4
 8004878:	009a      	lsls	r2, r3, #2
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a3c      	ldr	r2, [pc, #240]	; (8004974 <HAL_DMA_Init+0x14c>)
 8004882:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800489a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80048a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f9b6 	bl	8004c48 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048e4:	d102      	bne.n	80048ec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004900:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d010      	beq.n	800492c <HAL_DMA_Init+0x104>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b04      	cmp	r3, #4
 8004910:	d80c      	bhi.n	800492c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f9d6 	bl	8004cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004928:	605a      	str	r2, [r3, #4]
 800492a:	e008      	b.n	800493e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40020407 	.word	0x40020407
 8004964:	bffdfff8 	.word	0xbffdfff8
 8004968:	cccccccd 	.word	0xcccccccd
 800496c:	40020000 	.word	0x40020000
 8004970:	bffdfbf8 	.word	0xbffdfbf8
 8004974:	40020400 	.word	0x40020400

08004978 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_DMA_Start_IT+0x20>
 8004994:	2302      	movs	r3, #2
 8004996:	e066      	b.n	8004a66 <HAL_DMA_Start_IT+0xee>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d155      	bne.n	8004a58 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0201 	bic.w	r2, r2, #1
 80049c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 f8fb 	bl	8004bcc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d008      	beq.n	80049f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 020e 	orr.w	r2, r2, #14
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	e00f      	b.n	8004a10 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0204 	bic.w	r2, r2, #4
 80049fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 020a 	orr.w	r2, r2, #10
 8004a0e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d007      	beq.n	8004a2e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a2c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d007      	beq.n	8004a46 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a44:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 0201 	orr.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	e005      	b.n	8004a64 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004a60:	2302      	movs	r3, #2
 8004a62:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b084      	sub	sp, #16
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8a:	f003 031f 	and.w	r3, r3, #31
 8004a8e:	2204      	movs	r2, #4
 8004a90:	409a      	lsls	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4013      	ands	r3, r2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d026      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0x7a>
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d021      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d107      	bne.n	8004ac2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0204 	bic.w	r2, r2, #4
 8004ac0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac6:	f003 021f 	and.w	r2, r3, #31
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	2104      	movs	r1, #4
 8004ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ad4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d071      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004ae6:	e06c      	b.n	8004bc2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aec:	f003 031f 	and.w	r3, r3, #31
 8004af0:	2202      	movs	r2, #2
 8004af2:	409a      	lsls	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4013      	ands	r3, r2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d02e      	beq.n	8004b5a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d029      	beq.n	8004b5a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0320 	and.w	r3, r3, #32
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10b      	bne.n	8004b2c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 020a 	bic.w	r2, r2, #10
 8004b22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b30:	f003 021f 	and.w	r2, r3, #31
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	2102      	movs	r1, #2
 8004b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b3e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d038      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004b58:	e033      	b.n	8004bc2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5e:	f003 031f 	and.w	r3, r3, #31
 8004b62:	2208      	movs	r2, #8
 8004b64:	409a      	lsls	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d02a      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d025      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 020e 	bic.w	r2, r2, #14
 8004b86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8c:	f003 021f 	and.w	r2, r3, #31
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b94:	2101      	movs	r1, #1
 8004b96:	fa01 f202 	lsl.w	r2, r1, r2
 8004b9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d004      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004bc2:	bf00      	nop
 8004bc4:	bf00      	nop
}
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004be2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d004      	beq.n	8004bf6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004bf4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfa:	f003 021f 	and.w	r2, r3, #31
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	2101      	movs	r1, #1
 8004c04:	fa01 f202 	lsl.w	r2, r1, r2
 8004c08:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	2b10      	cmp	r3, #16
 8004c18:	d108      	bne.n	8004c2c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c2a:	e007      	b.n	8004c3c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	60da      	str	r2, [r3, #12]
}
 8004c3c:	bf00      	nop
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	4b16      	ldr	r3, [pc, #88]	; (8004cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d802      	bhi.n	8004c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004c5c:	4b15      	ldr	r3, [pc, #84]	; (8004cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	e001      	b.n	8004c66 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004c62:	4b15      	ldr	r3, [pc, #84]	; (8004cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004c64:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	3b08      	subs	r3, #8
 8004c72:	4a12      	ldr	r2, [pc, #72]	; (8004cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004c74:	fba2 2303 	umull	r2, r3, r2, r3
 8004c78:	091b      	lsrs	r3, r3, #4
 8004c7a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c80:	089b      	lsrs	r3, r3, #2
 8004c82:	009a      	lsls	r2, r3, #2
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	4413      	add	r3, r2
 8004c88:	461a      	mov	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a0b      	ldr	r2, [pc, #44]	; (8004cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004c92:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 031f 	and.w	r3, r3, #31
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	409a      	lsls	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ca2:	bf00      	nop
 8004ca4:	371c      	adds	r7, #28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40020407 	.word	0x40020407
 8004cb4:	40020800 	.word	0x40020800
 8004cb8:	40020820 	.word	0x40020820
 8004cbc:	cccccccd 	.word	0xcccccccd
 8004cc0:	40020880 	.word	0x40020880

08004cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	461a      	mov	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a08      	ldr	r2, [pc, #32]	; (8004d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004ce6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	f003 031f 	and.w	r3, r3, #31
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	409a      	lsls	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004cf8:	bf00      	nop
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	1000823f 	.word	0x1000823f
 8004d08:	40020940 	.word	0x40020940

08004d0c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e147      	b.n	8004fae <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d106      	bne.n	8004d38 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fd f9ee 	bl	8002114 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0210 	bic.w	r2, r2, #16
 8004d46:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d48:	f7fd fbf4 	bl	8002534 <HAL_GetTick>
 8004d4c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004d4e:	e012      	b.n	8004d76 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004d50:	f7fd fbf0 	bl	8002534 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b0a      	cmp	r3, #10
 8004d5c:	d90b      	bls.n	8004d76 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d62:	f043 0201 	orr.w	r2, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2203      	movs	r2, #3
 8004d6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e11b      	b.n	8004fae <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	f003 0308 	and.w	r3, r3, #8
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d0e5      	beq.n	8004d50 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d94:	f7fd fbce 	bl	8002534 <HAL_GetTick>
 8004d98:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004d9a:	e012      	b.n	8004dc2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004d9c:	f7fd fbca 	bl	8002534 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b0a      	cmp	r3, #10
 8004da8:	d90b      	bls.n	8004dc2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dae:	f043 0201 	orr.w	r2, r3, #1
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2203      	movs	r2, #3
 8004dba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e0f5      	b.n	8004fae <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0e5      	beq.n	8004d9c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699a      	ldr	r2, [r3, #24]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0202 	orr.w	r2, r2, #2
 8004dde:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a74      	ldr	r2, [pc, #464]	; (8004fb8 <HAL_FDCAN_Init+0x2ac>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d103      	bne.n	8004df2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004dea:	4a74      	ldr	r2, [pc, #464]	; (8004fbc <HAL_FDCAN_Init+0x2b0>)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	7c1b      	ldrb	r3, [r3, #16]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d108      	bne.n	8004e0c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	699a      	ldr	r2, [r3, #24]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e08:	619a      	str	r2, [r3, #24]
 8004e0a:	e007      	b.n	8004e1c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e1a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	7c5b      	ldrb	r3, [r3, #17]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d108      	bne.n	8004e36 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699a      	ldr	r2, [r3, #24]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e32:	619a      	str	r2, [r3, #24]
 8004e34:	e007      	b.n	8004e46 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699a      	ldr	r2, [r3, #24]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e44:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	7c9b      	ldrb	r3, [r3, #18]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d108      	bne.n	8004e60 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	699a      	ldr	r2, [r3, #24]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e5c:	619a      	str	r2, [r3, #24]
 8004e5e:	e007      	b.n	8004e70 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699a      	ldr	r2, [r3, #24]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e6e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	699a      	ldr	r2, [r3, #24]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004e94:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	691a      	ldr	r2, [r3, #16]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0210 	bic.w	r2, r2, #16
 8004ea4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d108      	bne.n	8004ec0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699a      	ldr	r2, [r3, #24]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f042 0204 	orr.w	r2, r2, #4
 8004ebc:	619a      	str	r2, [r3, #24]
 8004ebe:	e02c      	b.n	8004f1a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d028      	beq.n	8004f1a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d01c      	beq.n	8004f0a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699a      	ldr	r2, [r3, #24]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ede:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	691a      	ldr	r2, [r3, #16]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0210 	orr.w	r2, r2, #16
 8004eee:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d110      	bne.n	8004f1a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	699a      	ldr	r2, [r3, #24]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0220 	orr.w	r2, r2, #32
 8004f06:	619a      	str	r2, [r3, #24]
 8004f08:	e007      	b.n	8004f1a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	699a      	ldr	r2, [r3, #24]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 0220 	orr.w	r2, r2, #32
 8004f18:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f2a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004f32:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004f42:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f44:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f4e:	d115      	bne.n	8004f7c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f54:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004f5e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f64:	3b01      	subs	r3, #1
 8004f66:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004f68:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	3b01      	subs	r3, #1
 8004f72:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004f78:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004f7a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f814 	bl	8004fc0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40006400 	.word	0x40006400
 8004fbc:	40006500 	.word	0x40006500

08004fc0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004fc8:	4b30      	ldr	r3, [pc, #192]	; (800508c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8004fca:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a2f      	ldr	r2, [pc, #188]	; (8005090 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d103      	bne.n	8004fde <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004fdc:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a2c      	ldr	r2, [pc, #176]	; (8005094 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d103      	bne.n	8004ff0 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8004fee:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ffe:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005006:	041a      	lsls	r2, r3, #16
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005024:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502c:	061a      	lsls	r2, r3, #24
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	e005      	b.n	8005072 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	3304      	adds	r3, #4
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	429a      	cmp	r2, r3
 800507c:	d3f3      	bcc.n	8005066 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800507e:	bf00      	nop
 8005080:	bf00      	nop
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	4000a400 	.word	0x4000a400
 8005090:	40006800 	.word	0x40006800
 8005094:	40006c00 	.word	0x40006c00

08005098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80050a6:	e15a      	b.n	800535e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	2101      	movs	r1, #1
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	fa01 f303 	lsl.w	r3, r1, r3
 80050b4:	4013      	ands	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 814c 	beq.w	8005358 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f003 0303 	and.w	r3, r3, #3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d005      	beq.n	80050d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d130      	bne.n	800513a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	2203      	movs	r2, #3
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	43db      	mvns	r3, r3
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4013      	ands	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	68da      	ldr	r2, [r3, #12]
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800510e:	2201      	movs	r2, #1
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	fa02 f303 	lsl.w	r3, r2, r3
 8005116:	43db      	mvns	r3, r3
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	4013      	ands	r3, r2
 800511c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	091b      	lsrs	r3, r3, #4
 8005124:	f003 0201 	and.w	r2, r3, #1
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	fa02 f303 	lsl.w	r3, r2, r3
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	4313      	orrs	r3, r2
 8005132:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	2b03      	cmp	r3, #3
 8005144:	d017      	beq.n	8005176 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	2203      	movs	r2, #3
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	43db      	mvns	r3, r3
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4013      	ands	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	fa02 f303 	lsl.w	r3, r2, r3
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d123      	bne.n	80051ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	08da      	lsrs	r2, r3, #3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	3208      	adds	r2, #8
 800518a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800518e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	220f      	movs	r2, #15
 800519a:	fa02 f303 	lsl.w	r3, r2, r3
 800519e:	43db      	mvns	r3, r3
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	4013      	ands	r3, r2
 80051a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	691a      	ldr	r2, [r3, #16]
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	08da      	lsrs	r2, r3, #3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3208      	adds	r2, #8
 80051c4:	6939      	ldr	r1, [r7, #16]
 80051c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	2203      	movs	r2, #3
 80051d6:	fa02 f303 	lsl.w	r3, r2, r3
 80051da:	43db      	mvns	r3, r3
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4013      	ands	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f003 0203 	and.w	r2, r3, #3
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 80a6 	beq.w	8005358 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800520c:	4b5b      	ldr	r3, [pc, #364]	; (800537c <HAL_GPIO_Init+0x2e4>)
 800520e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005210:	4a5a      	ldr	r2, [pc, #360]	; (800537c <HAL_GPIO_Init+0x2e4>)
 8005212:	f043 0301 	orr.w	r3, r3, #1
 8005216:	6613      	str	r3, [r2, #96]	; 0x60
 8005218:	4b58      	ldr	r3, [pc, #352]	; (800537c <HAL_GPIO_Init+0x2e4>)
 800521a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	60bb      	str	r3, [r7, #8]
 8005222:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005224:	4a56      	ldr	r2, [pc, #344]	; (8005380 <HAL_GPIO_Init+0x2e8>)
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	089b      	lsrs	r3, r3, #2
 800522a:	3302      	adds	r3, #2
 800522c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005230:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f003 0303 	and.w	r3, r3, #3
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	220f      	movs	r2, #15
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	43db      	mvns	r3, r3
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4013      	ands	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800524e:	d01f      	beq.n	8005290 <HAL_GPIO_Init+0x1f8>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a4c      	ldr	r2, [pc, #304]	; (8005384 <HAL_GPIO_Init+0x2ec>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d019      	beq.n	800528c <HAL_GPIO_Init+0x1f4>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a4b      	ldr	r2, [pc, #300]	; (8005388 <HAL_GPIO_Init+0x2f0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d013      	beq.n	8005288 <HAL_GPIO_Init+0x1f0>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a4a      	ldr	r2, [pc, #296]	; (800538c <HAL_GPIO_Init+0x2f4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d00d      	beq.n	8005284 <HAL_GPIO_Init+0x1ec>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a49      	ldr	r2, [pc, #292]	; (8005390 <HAL_GPIO_Init+0x2f8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d007      	beq.n	8005280 <HAL_GPIO_Init+0x1e8>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a48      	ldr	r2, [pc, #288]	; (8005394 <HAL_GPIO_Init+0x2fc>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d101      	bne.n	800527c <HAL_GPIO_Init+0x1e4>
 8005278:	2305      	movs	r3, #5
 800527a:	e00a      	b.n	8005292 <HAL_GPIO_Init+0x1fa>
 800527c:	2306      	movs	r3, #6
 800527e:	e008      	b.n	8005292 <HAL_GPIO_Init+0x1fa>
 8005280:	2304      	movs	r3, #4
 8005282:	e006      	b.n	8005292 <HAL_GPIO_Init+0x1fa>
 8005284:	2303      	movs	r3, #3
 8005286:	e004      	b.n	8005292 <HAL_GPIO_Init+0x1fa>
 8005288:	2302      	movs	r3, #2
 800528a:	e002      	b.n	8005292 <HAL_GPIO_Init+0x1fa>
 800528c:	2301      	movs	r3, #1
 800528e:	e000      	b.n	8005292 <HAL_GPIO_Init+0x1fa>
 8005290:	2300      	movs	r3, #0
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	f002 0203 	and.w	r2, r2, #3
 8005298:	0092      	lsls	r2, r2, #2
 800529a:	4093      	lsls	r3, r2
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052a2:	4937      	ldr	r1, [pc, #220]	; (8005380 <HAL_GPIO_Init+0x2e8>)
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	089b      	lsrs	r3, r3, #2
 80052a8:	3302      	adds	r3, #2
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052b0:	4b39      	ldr	r3, [pc, #228]	; (8005398 <HAL_GPIO_Init+0x300>)
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	43db      	mvns	r3, r3
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4013      	ands	r3, r2
 80052be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80052d4:	4a30      	ldr	r2, [pc, #192]	; (8005398 <HAL_GPIO_Init+0x300>)
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80052da:	4b2f      	ldr	r3, [pc, #188]	; (8005398 <HAL_GPIO_Init+0x300>)
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	43db      	mvns	r3, r3
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4013      	ands	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80052fe:	4a26      	ldr	r2, [pc, #152]	; (8005398 <HAL_GPIO_Init+0x300>)
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005304:	4b24      	ldr	r3, [pc, #144]	; (8005398 <HAL_GPIO_Init+0x300>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	43db      	mvns	r3, r3
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4013      	ands	r3, r2
 8005312:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005328:	4a1b      	ldr	r2, [pc, #108]	; (8005398 <HAL_GPIO_Init+0x300>)
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800532e:	4b1a      	ldr	r3, [pc, #104]	; (8005398 <HAL_GPIO_Init+0x300>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	43db      	mvns	r3, r3
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	4013      	ands	r3, r2
 800533c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4313      	orrs	r3, r2
 8005350:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005352:	4a11      	ldr	r2, [pc, #68]	; (8005398 <HAL_GPIO_Init+0x300>)
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	3301      	adds	r3, #1
 800535c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	fa22 f303 	lsr.w	r3, r2, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	f47f ae9d 	bne.w	80050a8 <HAL_GPIO_Init+0x10>
  }
}
 800536e:	bf00      	nop
 8005370:	bf00      	nop
 8005372:	371c      	adds	r7, #28
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	40021000 	.word	0x40021000
 8005380:	40010000 	.word	0x40010000
 8005384:	48000400 	.word	0x48000400
 8005388:	48000800 	.word	0x48000800
 800538c:	48000c00 	.word	0x48000c00
 8005390:	48001000 	.word	0x48001000
 8005394:	48001400 	.word	0x48001400
 8005398:	40010400 	.word	0x40010400

0800539c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	807b      	strh	r3, [r7, #2]
 80053a8:	4613      	mov	r3, r2
 80053aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053ac:	787b      	ldrb	r3, [r7, #1]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053b2:	887a      	ldrh	r2, [r7, #2]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053b8:	e002      	b.n	80053c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053ba:	887a      	ldrh	r2, [r7, #2]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d141      	bne.n	800545e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80053da:	4b4b      	ldr	r3, [pc, #300]	; (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e6:	d131      	bne.n	800544c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053e8:	4b47      	ldr	r3, [pc, #284]	; (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053ee:	4a46      	ldr	r2, [pc, #280]	; (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053f8:	4b43      	ldr	r3, [pc, #268]	; (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005400:	4a41      	ldr	r2, [pc, #260]	; (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005406:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005408:	4b40      	ldr	r3, [pc, #256]	; (800550c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2232      	movs	r2, #50	; 0x32
 800540e:	fb02 f303 	mul.w	r3, r2, r3
 8005412:	4a3f      	ldr	r2, [pc, #252]	; (8005510 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005414:	fba2 2303 	umull	r2, r3, r2, r3
 8005418:	0c9b      	lsrs	r3, r3, #18
 800541a:	3301      	adds	r3, #1
 800541c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800541e:	e002      	b.n	8005426 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3b01      	subs	r3, #1
 8005424:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005426:	4b38      	ldr	r3, [pc, #224]	; (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800542e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005432:	d102      	bne.n	800543a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1f2      	bne.n	8005420 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800543a:	4b33      	ldr	r3, [pc, #204]	; (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005446:	d158      	bne.n	80054fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e057      	b.n	80054fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800544c:	4b2e      	ldr	r3, [pc, #184]	; (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800544e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005452:	4a2d      	ldr	r2, [pc, #180]	; (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005458:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800545c:	e04d      	b.n	80054fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005464:	d141      	bne.n	80054ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005466:	4b28      	ldr	r3, [pc, #160]	; (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800546e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005472:	d131      	bne.n	80054d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005474:	4b24      	ldr	r3, [pc, #144]	; (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800547a:	4a23      	ldr	r2, [pc, #140]	; (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800547c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005480:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005484:	4b20      	ldr	r3, [pc, #128]	; (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800548c:	4a1e      	ldr	r2, [pc, #120]	; (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800548e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005492:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005494:	4b1d      	ldr	r3, [pc, #116]	; (800550c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2232      	movs	r2, #50	; 0x32
 800549a:	fb02 f303 	mul.w	r3, r2, r3
 800549e:	4a1c      	ldr	r2, [pc, #112]	; (8005510 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80054a0:	fba2 2303 	umull	r2, r3, r2, r3
 80054a4:	0c9b      	lsrs	r3, r3, #18
 80054a6:	3301      	adds	r3, #1
 80054a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054aa:	e002      	b.n	80054b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054b2:	4b15      	ldr	r3, [pc, #84]	; (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054be:	d102      	bne.n	80054c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1f2      	bne.n	80054ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054c6:	4b10      	ldr	r3, [pc, #64]	; (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d2:	d112      	bne.n	80054fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e011      	b.n	80054fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054d8:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054de:	4a0a      	ldr	r2, [pc, #40]	; (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80054e8:	e007      	b.n	80054fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80054ea:	4b07      	ldr	r3, [pc, #28]	; (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80054f2:	4a05      	ldr	r2, [pc, #20]	; (8005508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	40007000 	.word	0x40007000
 800550c:	20000000 	.word	0x20000000
 8005510:	431bde83 	.word	0x431bde83

08005514 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005518:	4b05      	ldr	r3, [pc, #20]	; (8005530 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	4a04      	ldr	r2, [pc, #16]	; (8005530 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800551e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005522:	6093      	str	r3, [r2, #8]
}
 8005524:	bf00      	nop
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40007000 	.word	0x40007000

08005534 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e306      	b.n	8005b54 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d075      	beq.n	800563e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005552:	4b97      	ldr	r3, [pc, #604]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 030c 	and.w	r3, r3, #12
 800555a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800555c:	4b94      	ldr	r3, [pc, #592]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 0303 	and.w	r3, r3, #3
 8005564:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	2b0c      	cmp	r3, #12
 800556a:	d102      	bne.n	8005572 <HAL_RCC_OscConfig+0x3e>
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2b03      	cmp	r3, #3
 8005570:	d002      	beq.n	8005578 <HAL_RCC_OscConfig+0x44>
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	2b08      	cmp	r3, #8
 8005576:	d10b      	bne.n	8005590 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005578:	4b8d      	ldr	r3, [pc, #564]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d05b      	beq.n	800563c <HAL_RCC_OscConfig+0x108>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d157      	bne.n	800563c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e2e1      	b.n	8005b54 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005598:	d106      	bne.n	80055a8 <HAL_RCC_OscConfig+0x74>
 800559a:	4b85      	ldr	r3, [pc, #532]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a84      	ldr	r2, [pc, #528]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 80055a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	e01d      	b.n	80055e4 <HAL_RCC_OscConfig+0xb0>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055b0:	d10c      	bne.n	80055cc <HAL_RCC_OscConfig+0x98>
 80055b2:	4b7f      	ldr	r3, [pc, #508]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a7e      	ldr	r2, [pc, #504]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 80055b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	4b7c      	ldr	r3, [pc, #496]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a7b      	ldr	r2, [pc, #492]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 80055c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c8:	6013      	str	r3, [r2, #0]
 80055ca:	e00b      	b.n	80055e4 <HAL_RCC_OscConfig+0xb0>
 80055cc:	4b78      	ldr	r3, [pc, #480]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a77      	ldr	r2, [pc, #476]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 80055d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055d6:	6013      	str	r3, [r2, #0]
 80055d8:	4b75      	ldr	r3, [pc, #468]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a74      	ldr	r2, [pc, #464]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 80055de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d013      	beq.n	8005614 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ec:	f7fc ffa2 	bl	8002534 <HAL_GetTick>
 80055f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055f2:	e008      	b.n	8005606 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055f4:	f7fc ff9e 	bl	8002534 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b64      	cmp	r3, #100	; 0x64
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e2a6      	b.n	8005b54 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005606:	4b6a      	ldr	r3, [pc, #424]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0f0      	beq.n	80055f4 <HAL_RCC_OscConfig+0xc0>
 8005612:	e014      	b.n	800563e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005614:	f7fc ff8e 	bl	8002534 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800561c:	f7fc ff8a 	bl	8002534 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b64      	cmp	r3, #100	; 0x64
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e292      	b.n	8005b54 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800562e:	4b60      	ldr	r3, [pc, #384]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1f0      	bne.n	800561c <HAL_RCC_OscConfig+0xe8>
 800563a:	e000      	b.n	800563e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800563c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d075      	beq.n	8005736 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800564a:	4b59      	ldr	r3, [pc, #356]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 030c 	and.w	r3, r3, #12
 8005652:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005654:	4b56      	ldr	r3, [pc, #344]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f003 0303 	and.w	r3, r3, #3
 800565c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	2b0c      	cmp	r3, #12
 8005662:	d102      	bne.n	800566a <HAL_RCC_OscConfig+0x136>
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d002      	beq.n	8005670 <HAL_RCC_OscConfig+0x13c>
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	2b04      	cmp	r3, #4
 800566e:	d11f      	bne.n	80056b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005670:	4b4f      	ldr	r3, [pc, #316]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005678:	2b00      	cmp	r3, #0
 800567a:	d005      	beq.n	8005688 <HAL_RCC_OscConfig+0x154>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e265      	b.n	8005b54 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005688:	4b49      	ldr	r3, [pc, #292]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	061b      	lsls	r3, r3, #24
 8005696:	4946      	ldr	r1, [pc, #280]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 8005698:	4313      	orrs	r3, r2
 800569a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800569c:	4b45      	ldr	r3, [pc, #276]	; (80057b4 <HAL_RCC_OscConfig+0x280>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7fc fefb 	bl	800249c <HAL_InitTick>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d043      	beq.n	8005734 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e251      	b.n	8005b54 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d023      	beq.n	8005700 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056b8:	4b3d      	ldr	r3, [pc, #244]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a3c      	ldr	r2, [pc, #240]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 80056be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c4:	f7fc ff36 	bl	8002534 <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056cc:	f7fc ff32 	bl	8002534 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e23a      	b.n	8005b54 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056de:	4b34      	ldr	r3, [pc, #208]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0f0      	beq.n	80056cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ea:	4b31      	ldr	r3, [pc, #196]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	061b      	lsls	r3, r3, #24
 80056f8:	492d      	ldr	r1, [pc, #180]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	604b      	str	r3, [r1, #4]
 80056fe:	e01a      	b.n	8005736 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005700:	4b2b      	ldr	r3, [pc, #172]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a2a      	ldr	r2, [pc, #168]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 8005706:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800570a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800570c:	f7fc ff12 	bl	8002534 <HAL_GetTick>
 8005710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005712:	e008      	b.n	8005726 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005714:	f7fc ff0e 	bl	8002534 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e216      	b.n	8005b54 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005726:	4b22      	ldr	r3, [pc, #136]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1f0      	bne.n	8005714 <HAL_RCC_OscConfig+0x1e0>
 8005732:	e000      	b.n	8005736 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005734:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0308 	and.w	r3, r3, #8
 800573e:	2b00      	cmp	r3, #0
 8005740:	d041      	beq.n	80057c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d01c      	beq.n	8005784 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800574a:	4b19      	ldr	r3, [pc, #100]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 800574c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005750:	4a17      	ldr	r2, [pc, #92]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 8005752:	f043 0301 	orr.w	r3, r3, #1
 8005756:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800575a:	f7fc feeb 	bl	8002534 <HAL_GetTick>
 800575e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005760:	e008      	b.n	8005774 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005762:	f7fc fee7 	bl	8002534 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b02      	cmp	r3, #2
 800576e:	d901      	bls.n	8005774 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e1ef      	b.n	8005b54 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005774:	4b0e      	ldr	r3, [pc, #56]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 8005776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0ef      	beq.n	8005762 <HAL_RCC_OscConfig+0x22e>
 8005782:	e020      	b.n	80057c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005784:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 8005786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800578a:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <HAL_RCC_OscConfig+0x27c>)
 800578c:	f023 0301 	bic.w	r3, r3, #1
 8005790:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005794:	f7fc fece 	bl	8002534 <HAL_GetTick>
 8005798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800579a:	e00d      	b.n	80057b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800579c:	f7fc feca 	bl	8002534 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d906      	bls.n	80057b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e1d2      	b.n	8005b54 <HAL_RCC_OscConfig+0x620>
 80057ae:	bf00      	nop
 80057b0:	40021000 	.word	0x40021000
 80057b4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057b8:	4b8c      	ldr	r3, [pc, #560]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 80057ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1ea      	bne.n	800579c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 80a6 	beq.w	8005920 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057d4:	2300      	movs	r3, #0
 80057d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057d8:	4b84      	ldr	r3, [pc, #528]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 80057da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <HAL_RCC_OscConfig+0x2b4>
 80057e4:	2301      	movs	r3, #1
 80057e6:	e000      	b.n	80057ea <HAL_RCC_OscConfig+0x2b6>
 80057e8:	2300      	movs	r3, #0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00d      	beq.n	800580a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ee:	4b7f      	ldr	r3, [pc, #508]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 80057f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f2:	4a7e      	ldr	r2, [pc, #504]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 80057f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057f8:	6593      	str	r3, [r2, #88]	; 0x58
 80057fa:	4b7c      	ldr	r3, [pc, #496]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 80057fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005806:	2301      	movs	r3, #1
 8005808:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800580a:	4b79      	ldr	r3, [pc, #484]	; (80059f0 <HAL_RCC_OscConfig+0x4bc>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005812:	2b00      	cmp	r3, #0
 8005814:	d118      	bne.n	8005848 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005816:	4b76      	ldr	r3, [pc, #472]	; (80059f0 <HAL_RCC_OscConfig+0x4bc>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a75      	ldr	r2, [pc, #468]	; (80059f0 <HAL_RCC_OscConfig+0x4bc>)
 800581c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005822:	f7fc fe87 	bl	8002534 <HAL_GetTick>
 8005826:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005828:	e008      	b.n	800583c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800582a:	f7fc fe83 	bl	8002534 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d901      	bls.n	800583c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e18b      	b.n	8005b54 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800583c:	4b6c      	ldr	r3, [pc, #432]	; (80059f0 <HAL_RCC_OscConfig+0x4bc>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005844:	2b00      	cmp	r3, #0
 8005846:	d0f0      	beq.n	800582a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d108      	bne.n	8005862 <HAL_RCC_OscConfig+0x32e>
 8005850:	4b66      	ldr	r3, [pc, #408]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 8005852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005856:	4a65      	ldr	r2, [pc, #404]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 8005858:	f043 0301 	orr.w	r3, r3, #1
 800585c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005860:	e024      	b.n	80058ac <HAL_RCC_OscConfig+0x378>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	2b05      	cmp	r3, #5
 8005868:	d110      	bne.n	800588c <HAL_RCC_OscConfig+0x358>
 800586a:	4b60      	ldr	r3, [pc, #384]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 800586c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005870:	4a5e      	ldr	r2, [pc, #376]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 8005872:	f043 0304 	orr.w	r3, r3, #4
 8005876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800587a:	4b5c      	ldr	r3, [pc, #368]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 800587c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005880:	4a5a      	ldr	r2, [pc, #360]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 8005882:	f043 0301 	orr.w	r3, r3, #1
 8005886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800588a:	e00f      	b.n	80058ac <HAL_RCC_OscConfig+0x378>
 800588c:	4b57      	ldr	r3, [pc, #348]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 800588e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005892:	4a56      	ldr	r2, [pc, #344]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 8005894:	f023 0301 	bic.w	r3, r3, #1
 8005898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800589c:	4b53      	ldr	r3, [pc, #332]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 800589e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a2:	4a52      	ldr	r2, [pc, #328]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 80058a4:	f023 0304 	bic.w	r3, r3, #4
 80058a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d016      	beq.n	80058e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b4:	f7fc fe3e 	bl	8002534 <HAL_GetTick>
 80058b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ba:	e00a      	b.n	80058d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058bc:	f7fc fe3a 	bl	8002534 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e140      	b.n	8005b54 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058d2:	4b46      	ldr	r3, [pc, #280]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 80058d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d0ed      	beq.n	80058bc <HAL_RCC_OscConfig+0x388>
 80058e0:	e015      	b.n	800590e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e2:	f7fc fe27 	bl	8002534 <HAL_GetTick>
 80058e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058e8:	e00a      	b.n	8005900 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ea:	f7fc fe23 	bl	8002534 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d901      	bls.n	8005900 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e129      	b.n	8005b54 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005900:	4b3a      	ldr	r3, [pc, #232]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 8005902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1ed      	bne.n	80058ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800590e:	7ffb      	ldrb	r3, [r7, #31]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d105      	bne.n	8005920 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005914:	4b35      	ldr	r3, [pc, #212]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 8005916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005918:	4a34      	ldr	r2, [pc, #208]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 800591a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800591e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0320 	and.w	r3, r3, #32
 8005928:	2b00      	cmp	r3, #0
 800592a:	d03c      	beq.n	80059a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d01c      	beq.n	800596e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005934:	4b2d      	ldr	r3, [pc, #180]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 8005936:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800593a:	4a2c      	ldr	r2, [pc, #176]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 800593c:	f043 0301 	orr.w	r3, r3, #1
 8005940:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005944:	f7fc fdf6 	bl	8002534 <HAL_GetTick>
 8005948:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800594a:	e008      	b.n	800595e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800594c:	f7fc fdf2 	bl	8002534 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e0fa      	b.n	8005b54 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800595e:	4b23      	ldr	r3, [pc, #140]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 8005960:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0ef      	beq.n	800594c <HAL_RCC_OscConfig+0x418>
 800596c:	e01b      	b.n	80059a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800596e:	4b1f      	ldr	r3, [pc, #124]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 8005970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005974:	4a1d      	ldr	r2, [pc, #116]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 8005976:	f023 0301 	bic.w	r3, r3, #1
 800597a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597e:	f7fc fdd9 	bl	8002534 <HAL_GetTick>
 8005982:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005984:	e008      	b.n	8005998 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005986:	f7fc fdd5 	bl	8002534 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d901      	bls.n	8005998 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e0dd      	b.n	8005b54 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005998:	4b14      	ldr	r3, [pc, #80]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 800599a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1ef      	bne.n	8005986 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 80d1 	beq.w	8005b52 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059b0:	4b0e      	ldr	r3, [pc, #56]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f003 030c 	and.w	r3, r3, #12
 80059b8:	2b0c      	cmp	r3, #12
 80059ba:	f000 808b 	beq.w	8005ad4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d15e      	bne.n	8005a84 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059c6:	4b09      	ldr	r3, [pc, #36]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a08      	ldr	r2, [pc, #32]	; (80059ec <HAL_RCC_OscConfig+0x4b8>)
 80059cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d2:	f7fc fdaf 	bl	8002534 <HAL_GetTick>
 80059d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059d8:	e00c      	b.n	80059f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059da:	f7fc fdab 	bl	8002534 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d905      	bls.n	80059f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e0b3      	b.n	8005b54 <HAL_RCC_OscConfig+0x620>
 80059ec:	40021000 	.word	0x40021000
 80059f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059f4:	4b59      	ldr	r3, [pc, #356]	; (8005b5c <HAL_RCC_OscConfig+0x628>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1ec      	bne.n	80059da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a00:	4b56      	ldr	r3, [pc, #344]	; (8005b5c <HAL_RCC_OscConfig+0x628>)
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	4b56      	ldr	r3, [pc, #344]	; (8005b60 <HAL_RCC_OscConfig+0x62c>)
 8005a06:	4013      	ands	r3, r2
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6a11      	ldr	r1, [r2, #32]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a10:	3a01      	subs	r2, #1
 8005a12:	0112      	lsls	r2, r2, #4
 8005a14:	4311      	orrs	r1, r2
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005a1a:	0212      	lsls	r2, r2, #8
 8005a1c:	4311      	orrs	r1, r2
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a22:	0852      	lsrs	r2, r2, #1
 8005a24:	3a01      	subs	r2, #1
 8005a26:	0552      	lsls	r2, r2, #21
 8005a28:	4311      	orrs	r1, r2
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a2e:	0852      	lsrs	r2, r2, #1
 8005a30:	3a01      	subs	r2, #1
 8005a32:	0652      	lsls	r2, r2, #25
 8005a34:	4311      	orrs	r1, r2
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a3a:	06d2      	lsls	r2, r2, #27
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	4947      	ldr	r1, [pc, #284]	; (8005b5c <HAL_RCC_OscConfig+0x628>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a44:	4b45      	ldr	r3, [pc, #276]	; (8005b5c <HAL_RCC_OscConfig+0x628>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a44      	ldr	r2, [pc, #272]	; (8005b5c <HAL_RCC_OscConfig+0x628>)
 8005a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a4e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a50:	4b42      	ldr	r3, [pc, #264]	; (8005b5c <HAL_RCC_OscConfig+0x628>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	4a41      	ldr	r2, [pc, #260]	; (8005b5c <HAL_RCC_OscConfig+0x628>)
 8005a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a5a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a5c:	f7fc fd6a 	bl	8002534 <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a64:	f7fc fd66 	bl	8002534 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e06e      	b.n	8005b54 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a76:	4b39      	ldr	r3, [pc, #228]	; (8005b5c <HAL_RCC_OscConfig+0x628>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d0f0      	beq.n	8005a64 <HAL_RCC_OscConfig+0x530>
 8005a82:	e066      	b.n	8005b52 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a84:	4b35      	ldr	r3, [pc, #212]	; (8005b5c <HAL_RCC_OscConfig+0x628>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a34      	ldr	r2, [pc, #208]	; (8005b5c <HAL_RCC_OscConfig+0x628>)
 8005a8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a8e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005a90:	4b32      	ldr	r3, [pc, #200]	; (8005b5c <HAL_RCC_OscConfig+0x628>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	4a31      	ldr	r2, [pc, #196]	; (8005b5c <HAL_RCC_OscConfig+0x628>)
 8005a96:	f023 0303 	bic.w	r3, r3, #3
 8005a9a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005a9c:	4b2f      	ldr	r3, [pc, #188]	; (8005b5c <HAL_RCC_OscConfig+0x628>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	4a2e      	ldr	r2, [pc, #184]	; (8005b5c <HAL_RCC_OscConfig+0x628>)
 8005aa2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aaa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aac:	f7fc fd42 	bl	8002534 <HAL_GetTick>
 8005ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ab2:	e008      	b.n	8005ac6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ab4:	f7fc fd3e 	bl	8002534 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e046      	b.n	8005b54 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ac6:	4b25      	ldr	r3, [pc, #148]	; (8005b5c <HAL_RCC_OscConfig+0x628>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1f0      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x580>
 8005ad2:	e03e      	b.n	8005b52 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e039      	b.n	8005b54 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005ae0:	4b1e      	ldr	r3, [pc, #120]	; (8005b5c <HAL_RCC_OscConfig+0x628>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f003 0203 	and.w	r2, r3, #3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d12c      	bne.n	8005b4e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	3b01      	subs	r3, #1
 8005b00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d123      	bne.n	8005b4e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b10:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d11b      	bne.n	8005b4e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b20:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d113      	bne.n	8005b4e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b30:	085b      	lsrs	r3, r3, #1
 8005b32:	3b01      	subs	r3, #1
 8005b34:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d109      	bne.n	8005b4e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b44:	085b      	lsrs	r3, r3, #1
 8005b46:	3b01      	subs	r3, #1
 8005b48:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d001      	beq.n	8005b52 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3720      	adds	r7, #32
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	40021000 	.word	0x40021000
 8005b60:	019f800c 	.word	0x019f800c

08005b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e11e      	b.n	8005dba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b7c:	4b91      	ldr	r3, [pc, #580]	; (8005dc4 <HAL_RCC_ClockConfig+0x260>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 030f 	and.w	r3, r3, #15
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d910      	bls.n	8005bac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b8a:	4b8e      	ldr	r3, [pc, #568]	; (8005dc4 <HAL_RCC_ClockConfig+0x260>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f023 020f 	bic.w	r2, r3, #15
 8005b92:	498c      	ldr	r1, [pc, #560]	; (8005dc4 <HAL_RCC_ClockConfig+0x260>)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b9a:	4b8a      	ldr	r3, [pc, #552]	; (8005dc4 <HAL_RCC_ClockConfig+0x260>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 030f 	and.w	r3, r3, #15
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d001      	beq.n	8005bac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e106      	b.n	8005dba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d073      	beq.n	8005ca0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d129      	bne.n	8005c14 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bc0:	4b81      	ldr	r3, [pc, #516]	; (8005dc8 <HAL_RCC_ClockConfig+0x264>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d101      	bne.n	8005bd0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e0f4      	b.n	8005dba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005bd0:	f000 f966 	bl	8005ea0 <RCC_GetSysClockFreqFromPLLSource>
 8005bd4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	4a7c      	ldr	r2, [pc, #496]	; (8005dcc <HAL_RCC_ClockConfig+0x268>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d93f      	bls.n	8005c5e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005bde:	4b7a      	ldr	r3, [pc, #488]	; (8005dc8 <HAL_RCC_ClockConfig+0x264>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d009      	beq.n	8005bfe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d033      	beq.n	8005c5e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d12f      	bne.n	8005c5e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005bfe:	4b72      	ldr	r3, [pc, #456]	; (8005dc8 <HAL_RCC_ClockConfig+0x264>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c06:	4a70      	ldr	r2, [pc, #448]	; (8005dc8 <HAL_RCC_ClockConfig+0x264>)
 8005c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c0e:	2380      	movs	r3, #128	; 0x80
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	e024      	b.n	8005c5e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d107      	bne.n	8005c2c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c1c:	4b6a      	ldr	r3, [pc, #424]	; (8005dc8 <HAL_RCC_ClockConfig+0x264>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d109      	bne.n	8005c3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e0c6      	b.n	8005dba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c2c:	4b66      	ldr	r3, [pc, #408]	; (8005dc8 <HAL_RCC_ClockConfig+0x264>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0be      	b.n	8005dba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005c3c:	f000 f8ce 	bl	8005ddc <HAL_RCC_GetSysClockFreq>
 8005c40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	4a61      	ldr	r2, [pc, #388]	; (8005dcc <HAL_RCC_ClockConfig+0x268>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d909      	bls.n	8005c5e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c4a:	4b5f      	ldr	r3, [pc, #380]	; (8005dc8 <HAL_RCC_ClockConfig+0x264>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c52:	4a5d      	ldr	r2, [pc, #372]	; (8005dc8 <HAL_RCC_ClockConfig+0x264>)
 8005c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c58:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005c5a:	2380      	movs	r3, #128	; 0x80
 8005c5c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c5e:	4b5a      	ldr	r3, [pc, #360]	; (8005dc8 <HAL_RCC_ClockConfig+0x264>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f023 0203 	bic.w	r2, r3, #3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	4957      	ldr	r1, [pc, #348]	; (8005dc8 <HAL_RCC_ClockConfig+0x264>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c70:	f7fc fc60 	bl	8002534 <HAL_GetTick>
 8005c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c76:	e00a      	b.n	8005c8e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c78:	f7fc fc5c 	bl	8002534 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e095      	b.n	8005dba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c8e:	4b4e      	ldr	r3, [pc, #312]	; (8005dc8 <HAL_RCC_ClockConfig+0x264>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 020c 	and.w	r2, r3, #12
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d1eb      	bne.n	8005c78 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d023      	beq.n	8005cf4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d005      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cb8:	4b43      	ldr	r3, [pc, #268]	; (8005dc8 <HAL_RCC_ClockConfig+0x264>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	4a42      	ldr	r2, [pc, #264]	; (8005dc8 <HAL_RCC_ClockConfig+0x264>)
 8005cbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005cc2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0308 	and.w	r3, r3, #8
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d007      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005cd0:	4b3d      	ldr	r3, [pc, #244]	; (8005dc8 <HAL_RCC_ClockConfig+0x264>)
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005cd8:	4a3b      	ldr	r2, [pc, #236]	; (8005dc8 <HAL_RCC_ClockConfig+0x264>)
 8005cda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005cde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ce0:	4b39      	ldr	r3, [pc, #228]	; (8005dc8 <HAL_RCC_ClockConfig+0x264>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	4936      	ldr	r1, [pc, #216]	; (8005dc8 <HAL_RCC_ClockConfig+0x264>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	608b      	str	r3, [r1, #8]
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	2b80      	cmp	r3, #128	; 0x80
 8005cf8:	d105      	bne.n	8005d06 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005cfa:	4b33      	ldr	r3, [pc, #204]	; (8005dc8 <HAL_RCC_ClockConfig+0x264>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	4a32      	ldr	r2, [pc, #200]	; (8005dc8 <HAL_RCC_ClockConfig+0x264>)
 8005d00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d04:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d06:	4b2f      	ldr	r3, [pc, #188]	; (8005dc4 <HAL_RCC_ClockConfig+0x260>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d21d      	bcs.n	8005d50 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d14:	4b2b      	ldr	r3, [pc, #172]	; (8005dc4 <HAL_RCC_ClockConfig+0x260>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f023 020f 	bic.w	r2, r3, #15
 8005d1c:	4929      	ldr	r1, [pc, #164]	; (8005dc4 <HAL_RCC_ClockConfig+0x260>)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d24:	f7fc fc06 	bl	8002534 <HAL_GetTick>
 8005d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d2a:	e00a      	b.n	8005d42 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d2c:	f7fc fc02 	bl	8002534 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e03b      	b.n	8005dba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d42:	4b20      	ldr	r3, [pc, #128]	; (8005dc4 <HAL_RCC_ClockConfig+0x260>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d1ed      	bne.n	8005d2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0304 	and.w	r3, r3, #4
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d008      	beq.n	8005d6e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d5c:	4b1a      	ldr	r3, [pc, #104]	; (8005dc8 <HAL_RCC_ClockConfig+0x264>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	4917      	ldr	r1, [pc, #92]	; (8005dc8 <HAL_RCC_ClockConfig+0x264>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0308 	and.w	r3, r3, #8
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d009      	beq.n	8005d8e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d7a:	4b13      	ldr	r3, [pc, #76]	; (8005dc8 <HAL_RCC_ClockConfig+0x264>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	490f      	ldr	r1, [pc, #60]	; (8005dc8 <HAL_RCC_ClockConfig+0x264>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d8e:	f000 f825 	bl	8005ddc <HAL_RCC_GetSysClockFreq>
 8005d92:	4602      	mov	r2, r0
 8005d94:	4b0c      	ldr	r3, [pc, #48]	; (8005dc8 <HAL_RCC_ClockConfig+0x264>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	091b      	lsrs	r3, r3, #4
 8005d9a:	f003 030f 	and.w	r3, r3, #15
 8005d9e:	490c      	ldr	r1, [pc, #48]	; (8005dd0 <HAL_RCC_ClockConfig+0x26c>)
 8005da0:	5ccb      	ldrb	r3, [r1, r3]
 8005da2:	f003 031f 	and.w	r3, r3, #31
 8005da6:	fa22 f303 	lsr.w	r3, r2, r3
 8005daa:	4a0a      	ldr	r2, [pc, #40]	; (8005dd4 <HAL_RCC_ClockConfig+0x270>)
 8005dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005dae:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <HAL_RCC_ClockConfig+0x274>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fc fb72 	bl	800249c <HAL_InitTick>
 8005db8:	4603      	mov	r3, r0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3718      	adds	r7, #24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	40022000 	.word	0x40022000
 8005dc8:	40021000 	.word	0x40021000
 8005dcc:	04c4b400 	.word	0x04c4b400
 8005dd0:	08007b30 	.word	0x08007b30
 8005dd4:	20000000 	.word	0x20000000
 8005dd8:	20000004 	.word	0x20000004

08005ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005de2:	4b2c      	ldr	r3, [pc, #176]	; (8005e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 030c 	and.w	r3, r3, #12
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d102      	bne.n	8005df4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005dee:	4b2a      	ldr	r3, [pc, #168]	; (8005e98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005df0:	613b      	str	r3, [r7, #16]
 8005df2:	e047      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005df4:	4b27      	ldr	r3, [pc, #156]	; (8005e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f003 030c 	and.w	r3, r3, #12
 8005dfc:	2b08      	cmp	r3, #8
 8005dfe:	d102      	bne.n	8005e06 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e00:	4b26      	ldr	r3, [pc, #152]	; (8005e9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e02:	613b      	str	r3, [r7, #16]
 8005e04:	e03e      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005e06:	4b23      	ldr	r3, [pc, #140]	; (8005e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 030c 	and.w	r3, r3, #12
 8005e0e:	2b0c      	cmp	r3, #12
 8005e10:	d136      	bne.n	8005e80 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e12:	4b20      	ldr	r3, [pc, #128]	; (8005e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	f003 0303 	and.w	r3, r3, #3
 8005e1a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e1c:	4b1d      	ldr	r3, [pc, #116]	; (8005e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	091b      	lsrs	r3, r3, #4
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	3301      	adds	r3, #1
 8005e28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	d10c      	bne.n	8005e4a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e30:	4a1a      	ldr	r2, [pc, #104]	; (8005e9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e38:	4a16      	ldr	r2, [pc, #88]	; (8005e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e3a:	68d2      	ldr	r2, [r2, #12]
 8005e3c:	0a12      	lsrs	r2, r2, #8
 8005e3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e42:	fb02 f303 	mul.w	r3, r2, r3
 8005e46:	617b      	str	r3, [r7, #20]
      break;
 8005e48:	e00c      	b.n	8005e64 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e4a:	4a13      	ldr	r2, [pc, #76]	; (8005e98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e52:	4a10      	ldr	r2, [pc, #64]	; (8005e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e54:	68d2      	ldr	r2, [r2, #12]
 8005e56:	0a12      	lsrs	r2, r2, #8
 8005e58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e5c:	fb02 f303 	mul.w	r3, r2, r3
 8005e60:	617b      	str	r3, [r7, #20]
      break;
 8005e62:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e64:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	0e5b      	lsrs	r3, r3, #25
 8005e6a:	f003 0303 	and.w	r3, r3, #3
 8005e6e:	3301      	adds	r3, #1
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e7c:	613b      	str	r3, [r7, #16]
 8005e7e:	e001      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005e84:	693b      	ldr	r3, [r7, #16]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	371c      	adds	r7, #28
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	40021000 	.word	0x40021000
 8005e98:	00f42400 	.word	0x00f42400
 8005e9c:	016e3600 	.word	0x016e3600

08005ea0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ea6:	4b1e      	ldr	r3, [pc, #120]	; (8005f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005eb0:	4b1b      	ldr	r3, [pc, #108]	; (8005f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	091b      	lsrs	r3, r3, #4
 8005eb6:	f003 030f 	and.w	r3, r3, #15
 8005eba:	3301      	adds	r3, #1
 8005ebc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	2b03      	cmp	r3, #3
 8005ec2:	d10c      	bne.n	8005ede <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ec4:	4a17      	ldr	r2, [pc, #92]	; (8005f24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ecc:	4a14      	ldr	r2, [pc, #80]	; (8005f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ece:	68d2      	ldr	r2, [r2, #12]
 8005ed0:	0a12      	lsrs	r2, r2, #8
 8005ed2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ed6:	fb02 f303 	mul.w	r3, r2, r3
 8005eda:	617b      	str	r3, [r7, #20]
    break;
 8005edc:	e00c      	b.n	8005ef8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ede:	4a12      	ldr	r2, [pc, #72]	; (8005f28 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee6:	4a0e      	ldr	r2, [pc, #56]	; (8005f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ee8:	68d2      	ldr	r2, [r2, #12]
 8005eea:	0a12      	lsrs	r2, r2, #8
 8005eec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ef0:	fb02 f303 	mul.w	r3, r2, r3
 8005ef4:	617b      	str	r3, [r7, #20]
    break;
 8005ef6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ef8:	4b09      	ldr	r3, [pc, #36]	; (8005f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	0e5b      	lsrs	r3, r3, #25
 8005efe:	f003 0303 	and.w	r3, r3, #3
 8005f02:	3301      	adds	r3, #1
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f10:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005f12:	687b      	ldr	r3, [r7, #4]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	371c      	adds	r7, #28
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	40021000 	.word	0x40021000
 8005f24:	016e3600 	.word	0x016e3600
 8005f28:	00f42400 	.word	0x00f42400

08005f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f34:	2300      	movs	r3, #0
 8005f36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f38:	2300      	movs	r3, #0
 8005f3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 8098 	beq.w	800607a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f4e:	4b43      	ldr	r3, [pc, #268]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10d      	bne.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f5a:	4b40      	ldr	r3, [pc, #256]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f5e:	4a3f      	ldr	r2, [pc, #252]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f64:	6593      	str	r3, [r2, #88]	; 0x58
 8005f66:	4b3d      	ldr	r3, [pc, #244]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f6e:	60bb      	str	r3, [r7, #8]
 8005f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f72:	2301      	movs	r3, #1
 8005f74:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f76:	4b3a      	ldr	r3, [pc, #232]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a39      	ldr	r2, [pc, #228]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f82:	f7fc fad7 	bl	8002534 <HAL_GetTick>
 8005f86:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f88:	e009      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f8a:	f7fc fad3 	bl	8002534 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d902      	bls.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	74fb      	strb	r3, [r7, #19]
        break;
 8005f9c:	e005      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f9e:	4b30      	ldr	r3, [pc, #192]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d0ef      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005faa:	7cfb      	ldrb	r3, [r7, #19]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d159      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005fb0:	4b2a      	ldr	r3, [pc, #168]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d01e      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d019      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005fcc:	4b23      	ldr	r3, [pc, #140]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fd8:	4b20      	ldr	r3, [pc, #128]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fde:	4a1f      	ldr	r2, [pc, #124]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fe8:	4b1c      	ldr	r3, [pc, #112]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fee:	4a1b      	ldr	r2, [pc, #108]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ff8:	4a18      	ldr	r2, [pc, #96]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d016      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800600a:	f7fc fa93 	bl	8002534 <HAL_GetTick>
 800600e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006010:	e00b      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006012:	f7fc fa8f 	bl	8002534 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006020:	4293      	cmp	r3, r2
 8006022:	d902      	bls.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	74fb      	strb	r3, [r7, #19]
            break;
 8006028:	e006      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800602a:	4b0c      	ldr	r3, [pc, #48]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800602c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d0ec      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006038:	7cfb      	ldrb	r3, [r7, #19]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10b      	bne.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800603e:	4b07      	ldr	r3, [pc, #28]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800604c:	4903      	ldr	r1, [pc, #12]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800604e:	4313      	orrs	r3, r2
 8006050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006054:	e008      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006056:	7cfb      	ldrb	r3, [r7, #19]
 8006058:	74bb      	strb	r3, [r7, #18]
 800605a:	e005      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800605c:	40021000 	.word	0x40021000
 8006060:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006064:	7cfb      	ldrb	r3, [r7, #19]
 8006066:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006068:	7c7b      	ldrb	r3, [r7, #17]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d105      	bne.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800606e:	4ba7      	ldr	r3, [pc, #668]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006072:	4aa6      	ldr	r2, [pc, #664]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006078:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00a      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006086:	4ba1      	ldr	r3, [pc, #644]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608c:	f023 0203 	bic.w	r2, r3, #3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	499d      	ldr	r1, [pc, #628]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006096:	4313      	orrs	r3, r2
 8006098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00a      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060a8:	4b98      	ldr	r3, [pc, #608]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ae:	f023 020c 	bic.w	r2, r3, #12
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	4995      	ldr	r1, [pc, #596]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060ca:	4b90      	ldr	r3, [pc, #576]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	498c      	ldr	r1, [pc, #560]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0308 	and.w	r3, r3, #8
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80060ec:	4b87      	ldr	r3, [pc, #540]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	4984      	ldr	r1, [pc, #528]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0310 	and.w	r3, r3, #16
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800610e:	4b7f      	ldr	r3, [pc, #508]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006114:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	497b      	ldr	r1, [pc, #492]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800611e:	4313      	orrs	r3, r2
 8006120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0320 	and.w	r3, r3, #32
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00a      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006130:	4b76      	ldr	r3, [pc, #472]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006136:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	4973      	ldr	r1, [pc, #460]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006140:	4313      	orrs	r3, r2
 8006142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006152:	4b6e      	ldr	r3, [pc, #440]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006158:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	496a      	ldr	r1, [pc, #424]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006162:	4313      	orrs	r3, r2
 8006164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00a      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006174:	4b65      	ldr	r3, [pc, #404]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	4962      	ldr	r1, [pc, #392]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006184:	4313      	orrs	r3, r2
 8006186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00a      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006196:	4b5d      	ldr	r3, [pc, #372]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800619c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a4:	4959      	ldr	r1, [pc, #356]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00a      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061b8:	4b54      	ldr	r3, [pc, #336]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061be:	f023 0203 	bic.w	r2, r3, #3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c6:	4951      	ldr	r1, [pc, #324]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00a      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061da:	4b4c      	ldr	r3, [pc, #304]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	4948      	ldr	r1, [pc, #288]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d015      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061fc:	4b43      	ldr	r3, [pc, #268]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006202:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620a:	4940      	ldr	r1, [pc, #256]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800620c:	4313      	orrs	r3, r2
 800620e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800621a:	d105      	bne.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800621c:	4b3b      	ldr	r3, [pc, #236]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	4a3a      	ldr	r2, [pc, #232]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006222:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006226:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006230:	2b00      	cmp	r3, #0
 8006232:	d015      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006234:	4b35      	ldr	r3, [pc, #212]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800623a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006242:	4932      	ldr	r1, [pc, #200]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006244:	4313      	orrs	r3, r2
 8006246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006252:	d105      	bne.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006254:	4b2d      	ldr	r3, [pc, #180]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	4a2c      	ldr	r2, [pc, #176]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800625a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800625e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d015      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800626c:	4b27      	ldr	r3, [pc, #156]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800626e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006272:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627a:	4924      	ldr	r1, [pc, #144]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800627c:	4313      	orrs	r3, r2
 800627e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006286:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800628a:	d105      	bne.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800628c:	4b1f      	ldr	r3, [pc, #124]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	4a1e      	ldr	r2, [pc, #120]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006292:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006296:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d015      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062a4:	4b19      	ldr	r3, [pc, #100]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b2:	4916      	ldr	r1, [pc, #88]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062c2:	d105      	bne.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062c4:	4b11      	ldr	r3, [pc, #68]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	4a10      	ldr	r2, [pc, #64]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d019      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062dc:	4b0b      	ldr	r3, [pc, #44]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ea:	4908      	ldr	r1, [pc, #32]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062fa:	d109      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062fc:	4b03      	ldr	r3, [pc, #12]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	4a02      	ldr	r2, [pc, #8]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006306:	60d3      	str	r3, [r2, #12]
 8006308:	e002      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800630a:	bf00      	nop
 800630c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d015      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800631c:	4b29      	ldr	r3, [pc, #164]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800631e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006322:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800632a:	4926      	ldr	r1, [pc, #152]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800632c:	4313      	orrs	r3, r2
 800632e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006336:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800633a:	d105      	bne.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800633c:	4b21      	ldr	r3, [pc, #132]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	4a20      	ldr	r2, [pc, #128]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006346:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d015      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006354:	4b1b      	ldr	r3, [pc, #108]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800635a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006362:	4918      	ldr	r1, [pc, #96]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006364:	4313      	orrs	r3, r2
 8006366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800636e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006372:	d105      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006374:	4b13      	ldr	r3, [pc, #76]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	4a12      	ldr	r2, [pc, #72]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800637a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800637e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d015      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800638c:	4b0d      	ldr	r3, [pc, #52]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800638e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006392:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800639a:	490a      	ldr	r1, [pc, #40]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800639c:	4313      	orrs	r3, r2
 800639e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063aa:	d105      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063ac:	4b05      	ldr	r3, [pc, #20]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	4a04      	ldr	r2, [pc, #16]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80063b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	40021000 	.word	0x40021000

080063c8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d066      	beq.n	80064a8 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d106      	bne.n	80063f4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7fb ff42 	bl	8002278 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	22ca      	movs	r2, #202	; 0xca
 8006402:	625a      	str	r2, [r3, #36]	; 0x24
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2253      	movs	r2, #83	; 0x53
 800640a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f99a 	bl	8006746 <RTC_EnterInitMode>
 8006412:	4603      	mov	r3, r0
 8006414:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d13a      	bne.n	8006492 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	6812      	ldr	r2, [r2, #0]
 8006426:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800642a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800642e:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6999      	ldr	r1, [r3, #24]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	431a      	orrs	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	431a      	orrs	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68d9      	ldr	r1, [r3, #12]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	041a      	lsls	r2, r3, #16
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f9a6 	bl	80067b2 <RTC_ExitInitMode>
 8006466:	4603      	mov	r3, r0
 8006468:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800646a:	7bfb      	ldrb	r3, [r7, #15]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d110      	bne.n	8006492 <HAL_RTC_Init+0xca>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1a      	ldr	r2, [r3, #32]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	431a      	orrs	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	431a      	orrs	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	619a      	str	r2, [r3, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	22ff      	movs	r2, #255	; 0xff
 8006498:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800649a:	7bfb      	ldrb	r3, [r7, #15]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d103      	bne.n	80064a8 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80064b2:	b590      	push	{r4, r7, lr}
 80064b4:	b087      	sub	sp, #28
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	60f8      	str	r0, [r7, #12]
 80064ba:	60b9      	str	r1, [r7, #8]
 80064bc:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d101      	bne.n	80064cc <HAL_RTC_SetTime+0x1a>
 80064c8:	2302      	movs	r3, #2
 80064ca:	e08b      	b.n	80065e4 <HAL_RTC_SetTime+0x132>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	22ca      	movs	r2, #202	; 0xca
 80064e2:	625a      	str	r2, [r3, #36]	; 0x24
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2253      	movs	r2, #83	; 0x53
 80064ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 f92a 	bl	8006746 <RTC_EnterInitMode>
 80064f2:	4603      	mov	r3, r0
 80064f4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80064f6:	7cfb      	ldrb	r3, [r7, #19]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d163      	bne.n	80065c4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d126      	bne.n	8006550 <HAL_RTC_SetTime+0x9e>
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650c:	2b00      	cmp	r3, #0
 800650e:	d102      	bne.n	8006516 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	2200      	movs	r2, #0
 8006514:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	4618      	mov	r0, r3
 800651c:	f000 f98c 	bl	8006838 <RTC_ByteToBcd2>
 8006520:	4603      	mov	r3, r0
 8006522:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	785b      	ldrb	r3, [r3, #1]
 8006528:	4618      	mov	r0, r3
 800652a:	f000 f985 	bl	8006838 <RTC_ByteToBcd2>
 800652e:	4603      	mov	r3, r0
 8006530:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006532:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	789b      	ldrb	r3, [r3, #2]
 8006538:	4618      	mov	r0, r3
 800653a:	f000 f97d 	bl	8006838 <RTC_ByteToBcd2>
 800653e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006540:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	78db      	ldrb	r3, [r3, #3]
 8006548:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800654a:	4313      	orrs	r3, r2
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	e018      	b.n	8006582 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655a:	2b00      	cmp	r3, #0
 800655c:	d102      	bne.n	8006564 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	2200      	movs	r2, #0
 8006562:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	785b      	ldrb	r3, [r3, #1]
 800656e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006570:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006576:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	78db      	ldrb	r3, [r3, #3]
 800657c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800657e:	4313      	orrs	r3, r2
 8006580:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(hrtc->Instance->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800658c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006590:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BKP);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	699a      	ldr	r2, [r3, #24]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80065a0:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(hrtc->Instance->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6999      	ldr	r1, [r3, #24]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	68da      	ldr	r2, [r3, #12]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	431a      	orrs	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 f8f9 	bl	80067b2 <RTC_ExitInitMode>
 80065c0:	4603      	mov	r3, r0
 80065c2:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	22ff      	movs	r2, #255	; 0xff
 80065ca:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80065cc:	7cfb      	ldrb	r3, [r7, #19]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d103      	bne.n	80065da <HAL_RTC_SetTime+0x128>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
    __HAL_UNLOCK(hrtc);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80065e2:	7cfb      	ldrb	r3, [r7, #19]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	371c      	adds	r7, #28
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd90      	pop	{r4, r7, pc}

080065ec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80065ec:	b590      	push	{r4, r7, lr}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d101      	bne.n	8006606 <HAL_RTC_SetDate+0x1a>
 8006602:	2302      	movs	r3, #2
 8006604:	e075      	b.n	80066f2 <HAL_RTC_SetDate+0x106>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2202      	movs	r2, #2
 8006612:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10e      	bne.n	800663a <HAL_RTC_SetDate+0x4e>
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	785b      	ldrb	r3, [r3, #1]
 8006620:	f003 0310 	and.w	r3, r3, #16
 8006624:	2b00      	cmp	r3, #0
 8006626:	d008      	beq.n	800663a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	785b      	ldrb	r3, [r3, #1]
 800662c:	f023 0310 	bic.w	r3, r3, #16
 8006630:	b2db      	uxtb	r3, r3
 8006632:	330a      	adds	r3, #10
 8006634:	b2da      	uxtb	r2, r3
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d11c      	bne.n	800667a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	78db      	ldrb	r3, [r3, #3]
 8006644:	4618      	mov	r0, r3
 8006646:	f000 f8f7 	bl	8006838 <RTC_ByteToBcd2>
 800664a:	4603      	mov	r3, r0
 800664c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	785b      	ldrb	r3, [r3, #1]
 8006652:	4618      	mov	r0, r3
 8006654:	f000 f8f0 	bl	8006838 <RTC_ByteToBcd2>
 8006658:	4603      	mov	r3, r0
 800665a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800665c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	789b      	ldrb	r3, [r3, #2]
 8006662:	4618      	mov	r0, r3
 8006664:	f000 f8e8 	bl	8006838 <RTC_ByteToBcd2>
 8006668:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800666a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006674:	4313      	orrs	r3, r2
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	e00e      	b.n	8006698 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	78db      	ldrb	r3, [r3, #3]
 800667e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	785b      	ldrb	r3, [r3, #1]
 8006684:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006686:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800668c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006694:	4313      	orrs	r3, r2
 8006696:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	22ca      	movs	r2, #202	; 0xca
 800669e:	625a      	str	r2, [r3, #36]	; 0x24
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2253      	movs	r2, #83	; 0x53
 80066a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 f84c 	bl	8006746 <RTC_EnterInitMode>
 80066ae:	4603      	mov	r3, r0
 80066b0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80066b2:	7cfb      	ldrb	r3, [r7, #19]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10c      	bne.n	80066d2 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    WRITE_REG(hrtc->Instance->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80066c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80066c6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 f872 	bl	80067b2 <RTC_ExitInitMode>
 80066ce:	4603      	mov	r3, r0
 80066d0:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	22ff      	movs	r2, #255	; 0xff
 80066d8:	625a      	str	r2, [r3, #36]	; 0x24
 
  if (status == HAL_OK)
 80066da:	7cfb      	ldrb	r3, [r7, #19]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d103      	bne.n	80066e8 <HAL_RTC_SetDate+0xfc>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80066f0:	7cfb      	ldrb	r3, [r7, #19]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd90      	pop	{r4, r7, pc}

080066fa <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b084      	sub	sp, #16
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68da      	ldr	r2, [r3, #12]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 0220 	bic.w	r2, r2, #32
 8006710:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006712:	f7fb ff0f 	bl	8002534 <HAL_GetTick>
 8006716:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8006718:	e009      	b.n	800672e <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800671a:	f7fb ff0b 	bl	8002534 <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006728:	d901      	bls.n	800672e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e007      	b.n	800673e <HAL_RTC_WaitForSynchro+0x44>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	f003 0320 	and.w	r3, r3, #32
 8006738:	2b00      	cmp	r3, #0
 800673a:	d0ee      	beq.n	800671a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800674e:	2300      	movs	r3, #0
 8006750:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675c:	2b00      	cmp	r3, #0
 800675e:	d123      	bne.n	80067a8 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800676e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006770:	f7fb fee0 	bl	8002534 <HAL_GetTick>
 8006774:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006776:	e00d      	b.n	8006794 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006778:	f7fb fedc 	bl	8002534 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006786:	d905      	bls.n	8006794 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2203      	movs	r2, #3
 8006790:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d102      	bne.n	80067a8 <RTC_EnterInitMode+0x62>
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d1e7      	bne.n	8006778 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b084      	sub	sp, #16
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68da      	ldr	r2, [r3, #12]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067cc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	f003 0320 	and.w	r3, r3, #32
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10c      	bne.n	80067f6 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f7ff ff8c 	bl	80066fa <HAL_RTC_WaitForSynchro>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d022      	beq.n	800682e <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2203      	movs	r2, #3
 80067ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	73fb      	strb	r3, [r7, #15]
 80067f4:	e01b      	b.n	800682e <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	699a      	ldr	r2, [r3, #24]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 0220 	bic.w	r2, r2, #32
 8006804:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7ff ff77 	bl	80066fa <HAL_RTC_WaitForSynchro>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d005      	beq.n	800681e <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2203      	movs	r2, #3
 8006816:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	699a      	ldr	r2, [r3, #24]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f042 0220 	orr.w	r2, r2, #32
 800682c:	619a      	str	r2, [r3, #24]
  }

  return status;
 800682e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	4603      	mov	r3, r0
 8006840:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006846:	79fb      	ldrb	r3, [r7, #7]
 8006848:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800684a:	e005      	b.n	8006858 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3301      	adds	r3, #1
 8006850:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006852:	7afb      	ldrb	r3, [r7, #11]
 8006854:	3b0a      	subs	r3, #10
 8006856:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006858:	7afb      	ldrb	r3, [r7, #11]
 800685a:	2b09      	cmp	r3, #9
 800685c:	d8f6      	bhi.n	800684c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	b2db      	uxtb	r3, r3
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	b2da      	uxtb	r2, r3
 8006866:	7afb      	ldrb	r3, [r7, #11]
 8006868:	4313      	orrs	r3, r2
 800686a:	b2db      	uxtb	r3, r3
}
 800686c:	4618      	mov	r0, r3
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e09d      	b.n	80069c6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	2b00      	cmp	r3, #0
 8006890:	d108      	bne.n	80068a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800689a:	d009      	beq.n	80068b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	61da      	str	r2, [r3, #28]
 80068a2:	e005      	b.n	80068b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d106      	bne.n	80068d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7fb fd10 	bl	80022f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068f0:	d902      	bls.n	80068f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80068f2:	2300      	movs	r3, #0
 80068f4:	60fb      	str	r3, [r7, #12]
 80068f6:	e002      	b.n	80068fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80068f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006906:	d007      	beq.n	8006918 <HAL_SPI_Init+0xa0>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006910:	d002      	beq.n	8006918 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006928:	431a      	orrs	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	431a      	orrs	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	431a      	orrs	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006946:	431a      	orrs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006950:	431a      	orrs	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800695a:	ea42 0103 	orr.w	r1, r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006962:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	0c1b      	lsrs	r3, r3, #16
 8006974:	f003 0204 	and.w	r2, r3, #4
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	f003 0310 	and.w	r3, r3, #16
 8006980:	431a      	orrs	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006986:	f003 0308 	and.w	r3, r3, #8
 800698a:	431a      	orrs	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006994:	ea42 0103 	orr.w	r1, r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	69da      	ldr	r2, [r3, #28]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b088      	sub	sp, #32
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	603b      	str	r3, [r7, #0]
 80069da:	4613      	mov	r3, r2
 80069dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d101      	bne.n	80069f0 <HAL_SPI_Transmit+0x22>
 80069ec:	2302      	movs	r3, #2
 80069ee:	e158      	b.n	8006ca2 <HAL_SPI_Transmit+0x2d4>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069f8:	f7fb fd9c 	bl	8002534 <HAL_GetTick>
 80069fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80069fe:	88fb      	ldrh	r3, [r7, #6]
 8006a00:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d002      	beq.n	8006a14 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006a0e:	2302      	movs	r3, #2
 8006a10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a12:	e13d      	b.n	8006c90 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <HAL_SPI_Transmit+0x52>
 8006a1a:	88fb      	ldrh	r3, [r7, #6]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d102      	bne.n	8006a26 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a24:	e134      	b.n	8006c90 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2203      	movs	r2, #3
 8006a2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	88fa      	ldrh	r2, [r7, #6]
 8006a3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	88fa      	ldrh	r2, [r7, #6]
 8006a44:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a70:	d10f      	bne.n	8006a92 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a90:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9c:	2b40      	cmp	r3, #64	; 0x40
 8006a9e:	d007      	beq.n	8006ab0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ab8:	d94b      	bls.n	8006b52 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d002      	beq.n	8006ac8 <HAL_SPI_Transmit+0xfa>
 8006ac2:	8afb      	ldrh	r3, [r7, #22]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d13e      	bne.n	8006b46 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006acc:	881a      	ldrh	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad8:	1c9a      	adds	r2, r3, #2
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006aec:	e02b      	b.n	8006b46 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d112      	bne.n	8006b22 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b00:	881a      	ldrh	r2, [r3, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0c:	1c9a      	adds	r2, r3, #2
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b20:	e011      	b.n	8006b46 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b22:	f7fb fd07 	bl	8002534 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	683a      	ldr	r2, [r7, #0]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d803      	bhi.n	8006b3a <HAL_SPI_Transmit+0x16c>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b38:	d102      	bne.n	8006b40 <HAL_SPI_Transmit+0x172>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d102      	bne.n	8006b46 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b44:	e0a4      	b.n	8006c90 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1ce      	bne.n	8006aee <HAL_SPI_Transmit+0x120>
 8006b50:	e07c      	b.n	8006c4c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d002      	beq.n	8006b60 <HAL_SPI_Transmit+0x192>
 8006b5a:	8afb      	ldrh	r3, [r7, #22]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d170      	bne.n	8006c42 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d912      	bls.n	8006b90 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6e:	881a      	ldrh	r2, [r3, #0]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7a:	1c9a      	adds	r2, r3, #2
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	3b02      	subs	r3, #2
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b8e:	e058      	b.n	8006c42 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	330c      	adds	r3, #12
 8006b9a:	7812      	ldrb	r2, [r2, #0]
 8006b9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006bb6:	e044      	b.n	8006c42 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d12b      	bne.n	8006c1e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d912      	bls.n	8006bf6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd4:	881a      	ldrh	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be0:	1c9a      	adds	r2, r3, #2
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	3b02      	subs	r3, #2
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006bf4:	e025      	b.n	8006c42 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	330c      	adds	r3, #12
 8006c00:	7812      	ldrb	r2, [r2, #0]
 8006c02:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c1c:	e011      	b.n	8006c42 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c1e:	f7fb fc89 	bl	8002534 <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d803      	bhi.n	8006c36 <HAL_SPI_Transmit+0x268>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c34:	d102      	bne.n	8006c3c <HAL_SPI_Transmit+0x26e>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d102      	bne.n	8006c42 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c40:	e026      	b.n	8006c90 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1b5      	bne.n	8006bb8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 fce3 	bl	800761c <SPI_EndRxTxTransaction>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d002      	beq.n	8006c62 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10a      	bne.n	8006c80 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	613b      	str	r3, [r7, #16]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	613b      	str	r3, [r7, #16]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	613b      	str	r3, [r7, #16]
 8006c7e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d002      	beq.n	8006c8e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	77fb      	strb	r3, [r7, #31]
 8006c8c:	e000      	b.n	8006c90 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006c8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006ca0:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3720      	adds	r7, #32
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b088      	sub	sp, #32
 8006cae:	af02      	add	r7, sp, #8
 8006cb0:	60f8      	str	r0, [r7, #12]
 8006cb2:	60b9      	str	r1, [r7, #8]
 8006cb4:	603b      	str	r3, [r7, #0]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cc6:	d112      	bne.n	8006cee <HAL_SPI_Receive+0x44>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10e      	bne.n	8006cee <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2204      	movs	r2, #4
 8006cd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006cd8:	88fa      	ldrh	r2, [r7, #6]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	4613      	mov	r3, r2
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 f910 	bl	8006f0a <HAL_SPI_TransmitReceive>
 8006cea:	4603      	mov	r3, r0
 8006cec:	e109      	b.n	8006f02 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <HAL_SPI_Receive+0x52>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e102      	b.n	8006f02 <HAL_SPI_Receive+0x258>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d04:	f7fb fc16 	bl	8002534 <HAL_GetTick>
 8006d08:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d002      	beq.n	8006d1c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006d16:	2302      	movs	r3, #2
 8006d18:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d1a:	e0e9      	b.n	8006ef0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d002      	beq.n	8006d28 <HAL_SPI_Receive+0x7e>
 8006d22:	88fb      	ldrh	r3, [r7, #6]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d102      	bne.n	8006d2e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d2c:	e0e0      	b.n	8006ef0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2204      	movs	r2, #4
 8006d32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	88fa      	ldrh	r2, [r7, #6]
 8006d46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	88fa      	ldrh	r2, [r7, #6]
 8006d4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d78:	d908      	bls.n	8006d8c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	685a      	ldr	r2, [r3, #4]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d88:	605a      	str	r2, [r3, #4]
 8006d8a:	e007      	b.n	8006d9c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d9a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006da4:	d10f      	bne.n	8006dc6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006db4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006dc4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd0:	2b40      	cmp	r3, #64	; 0x40
 8006dd2:	d007      	beq.n	8006de4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006de2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006dec:	d867      	bhi.n	8006ebe <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006dee:	e030      	b.n	8006e52 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d117      	bne.n	8006e2e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f103 020c 	add.w	r2, r3, #12
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0a:	7812      	ldrb	r2, [r2, #0]
 8006e0c:	b2d2      	uxtb	r2, r2
 8006e0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e14:	1c5a      	adds	r2, r3, #1
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	3b01      	subs	r3, #1
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006e2c:	e011      	b.n	8006e52 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e2e:	f7fb fb81 	bl	8002534 <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d803      	bhi.n	8006e46 <HAL_SPI_Receive+0x19c>
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e44:	d102      	bne.n	8006e4c <HAL_SPI_Receive+0x1a2>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d102      	bne.n	8006e52 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006e50:	e04e      	b.n	8006ef0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1c8      	bne.n	8006df0 <HAL_SPI_Receive+0x146>
 8006e5e:	e034      	b.n	8006eca <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f003 0301 	and.w	r3, r3, #1
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d115      	bne.n	8006e9a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68da      	ldr	r2, [r3, #12]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e78:	b292      	uxth	r2, r2
 8006e7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e80:	1c9a      	adds	r2, r3, #2
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006e98:	e011      	b.n	8006ebe <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e9a:	f7fb fb4b 	bl	8002534 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d803      	bhi.n	8006eb2 <HAL_SPI_Receive+0x208>
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb0:	d102      	bne.n	8006eb8 <HAL_SPI_Receive+0x20e>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d102      	bne.n	8006ebe <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006ebc:	e018      	b.n	8006ef0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1ca      	bne.n	8006e60 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f000 fb4c 	bl	800756c <SPI_EndRxTransaction>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2220      	movs	r2, #32
 8006ede:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	75fb      	strb	r3, [r7, #23]
 8006eec:	e000      	b.n	8006ef0 <HAL_SPI_Receive+0x246>
  }

error :
 8006eee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3718      	adds	r7, #24
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b08a      	sub	sp, #40	; 0x28
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	60f8      	str	r0, [r7, #12]
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	607a      	str	r2, [r7, #4]
 8006f16:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d101      	bne.n	8006f30 <HAL_SPI_TransmitReceive+0x26>
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	e1fb      	b.n	8007328 <HAL_SPI_TransmitReceive+0x41e>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f38:	f7fb fafc 	bl	8002534 <HAL_GetTick>
 8006f3c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f44:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006f4c:	887b      	ldrh	r3, [r7, #2]
 8006f4e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006f50:	887b      	ldrh	r3, [r7, #2]
 8006f52:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f54:	7efb      	ldrb	r3, [r7, #27]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d00e      	beq.n	8006f78 <HAL_SPI_TransmitReceive+0x6e>
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f60:	d106      	bne.n	8006f70 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d102      	bne.n	8006f70 <HAL_SPI_TransmitReceive+0x66>
 8006f6a:	7efb      	ldrb	r3, [r7, #27]
 8006f6c:	2b04      	cmp	r3, #4
 8006f6e:	d003      	beq.n	8006f78 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006f70:	2302      	movs	r3, #2
 8006f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006f76:	e1cd      	b.n	8007314 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d005      	beq.n	8006f8a <HAL_SPI_TransmitReceive+0x80>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d002      	beq.n	8006f8a <HAL_SPI_TransmitReceive+0x80>
 8006f84:	887b      	ldrh	r3, [r7, #2]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d103      	bne.n	8006f92 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006f90:	e1c0      	b.n	8007314 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b04      	cmp	r3, #4
 8006f9c:	d003      	beq.n	8006fa6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2205      	movs	r2, #5
 8006fa2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	887a      	ldrh	r2, [r7, #2]
 8006fb6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	887a      	ldrh	r2, [r7, #2]
 8006fbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	887a      	ldrh	r2, [r7, #2]
 8006fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	887a      	ldrh	r2, [r7, #2]
 8006fd2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006fe8:	d802      	bhi.n	8006ff0 <HAL_SPI_TransmitReceive+0xe6>
 8006fea:	8a3b      	ldrh	r3, [r7, #16]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d908      	bls.n	8007002 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ffe:	605a      	str	r2, [r3, #4]
 8007000:	e007      	b.n	8007012 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685a      	ldr	r2, [r3, #4]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007010:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701c:	2b40      	cmp	r3, #64	; 0x40
 800701e:	d007      	beq.n	8007030 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800702e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007038:	d97c      	bls.n	8007134 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d002      	beq.n	8007048 <HAL_SPI_TransmitReceive+0x13e>
 8007042:	8a7b      	ldrh	r3, [r7, #18]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d169      	bne.n	800711c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704c:	881a      	ldrh	r2, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007058:	1c9a      	adds	r2, r3, #2
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007062:	b29b      	uxth	r3, r3
 8007064:	3b01      	subs	r3, #1
 8007066:	b29a      	uxth	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800706c:	e056      	b.n	800711c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f003 0302 	and.w	r3, r3, #2
 8007078:	2b02      	cmp	r3, #2
 800707a:	d11b      	bne.n	80070b4 <HAL_SPI_TransmitReceive+0x1aa>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007080:	b29b      	uxth	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d016      	beq.n	80070b4 <HAL_SPI_TransmitReceive+0x1aa>
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	2b01      	cmp	r3, #1
 800708a:	d113      	bne.n	80070b4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007090:	881a      	ldrh	r2, [r3, #0]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709c:	1c9a      	adds	r2, r3, #2
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	3b01      	subs	r3, #1
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070b0:	2300      	movs	r3, #0
 80070b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d11c      	bne.n	80070fc <HAL_SPI_TransmitReceive+0x1f2>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d016      	beq.n	80070fc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68da      	ldr	r2, [r3, #12]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d8:	b292      	uxth	r2, r2
 80070da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e0:	1c9a      	adds	r2, r3, #2
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	3b01      	subs	r3, #1
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070f8:	2301      	movs	r3, #1
 80070fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80070fc:	f7fb fa1a 	bl	8002534 <HAL_GetTick>
 8007100:	4602      	mov	r2, r0
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007108:	429a      	cmp	r2, r3
 800710a:	d807      	bhi.n	800711c <HAL_SPI_TransmitReceive+0x212>
 800710c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007112:	d003      	beq.n	800711c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800711a:	e0fb      	b.n	8007314 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007120:	b29b      	uxth	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1a3      	bne.n	800706e <HAL_SPI_TransmitReceive+0x164>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800712c:	b29b      	uxth	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	d19d      	bne.n	800706e <HAL_SPI_TransmitReceive+0x164>
 8007132:	e0df      	b.n	80072f4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <HAL_SPI_TransmitReceive+0x23a>
 800713c:	8a7b      	ldrh	r3, [r7, #18]
 800713e:	2b01      	cmp	r3, #1
 8007140:	f040 80cb 	bne.w	80072da <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007148:	b29b      	uxth	r3, r3
 800714a:	2b01      	cmp	r3, #1
 800714c:	d912      	bls.n	8007174 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007152:	881a      	ldrh	r2, [r3, #0]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715e:	1c9a      	adds	r2, r3, #2
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007168:	b29b      	uxth	r3, r3
 800716a:	3b02      	subs	r3, #2
 800716c:	b29a      	uxth	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007172:	e0b2      	b.n	80072da <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	330c      	adds	r3, #12
 800717e:	7812      	ldrb	r2, [r2, #0]
 8007180:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007186:	1c5a      	adds	r2, r3, #1
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007190:	b29b      	uxth	r3, r3
 8007192:	3b01      	subs	r3, #1
 8007194:	b29a      	uxth	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800719a:	e09e      	b.n	80072da <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 0302 	and.w	r3, r3, #2
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d134      	bne.n	8007214 <HAL_SPI_TransmitReceive+0x30a>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d02f      	beq.n	8007214 <HAL_SPI_TransmitReceive+0x30a>
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d12c      	bne.n	8007214 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071be:	b29b      	uxth	r3, r3
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d912      	bls.n	80071ea <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c8:	881a      	ldrh	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d4:	1c9a      	adds	r2, r3, #2
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071de:	b29b      	uxth	r3, r3
 80071e0:	3b02      	subs	r3, #2
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071e8:	e012      	b.n	8007210 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	330c      	adds	r3, #12
 80071f4:	7812      	ldrb	r2, [r2, #0]
 80071f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fc:	1c5a      	adds	r2, r3, #1
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007206:	b29b      	uxth	r3, r3
 8007208:	3b01      	subs	r3, #1
 800720a:	b29a      	uxth	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007210:	2300      	movs	r3, #0
 8007212:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b01      	cmp	r3, #1
 8007220:	d148      	bne.n	80072b4 <HAL_SPI_TransmitReceive+0x3aa>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007228:	b29b      	uxth	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d042      	beq.n	80072b4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007234:	b29b      	uxth	r3, r3
 8007236:	2b01      	cmp	r3, #1
 8007238:	d923      	bls.n	8007282 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68da      	ldr	r2, [r3, #12]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007244:	b292      	uxth	r2, r2
 8007246:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724c:	1c9a      	adds	r2, r3, #2
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007258:	b29b      	uxth	r3, r3
 800725a:	3b02      	subs	r3, #2
 800725c:	b29a      	uxth	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800726a:	b29b      	uxth	r3, r3
 800726c:	2b01      	cmp	r3, #1
 800726e:	d81f      	bhi.n	80072b0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685a      	ldr	r2, [r3, #4]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800727e:	605a      	str	r2, [r3, #4]
 8007280:	e016      	b.n	80072b0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f103 020c 	add.w	r2, r3, #12
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728e:	7812      	ldrb	r2, [r2, #0]
 8007290:	b2d2      	uxtb	r2, r2
 8007292:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	3b01      	subs	r3, #1
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072b0:	2301      	movs	r3, #1
 80072b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80072b4:	f7fb f93e 	bl	8002534 <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d803      	bhi.n	80072cc <HAL_SPI_TransmitReceive+0x3c2>
 80072c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ca:	d102      	bne.n	80072d2 <HAL_SPI_TransmitReceive+0x3c8>
 80072cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d103      	bne.n	80072da <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80072d8:	e01c      	b.n	8007314 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072de:	b29b      	uxth	r3, r3
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f47f af5b 	bne.w	800719c <HAL_SPI_TransmitReceive+0x292>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f47f af54 	bne.w	800719c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072f4:	69fa      	ldr	r2, [r7, #28]
 80072f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 f98f 	bl	800761c <SPI_EndRxTxTransaction>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d006      	beq.n	8007312 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2220      	movs	r2, #32
 800730e:	661a      	str	r2, [r3, #96]	; 0x60
 8007310:	e000      	b.n	8007314 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007312:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007324:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007328:	4618      	mov	r0, r3
 800732a:	3728      	adds	r7, #40	; 0x28
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	603b      	str	r3, [r7, #0]
 800733c:	4613      	mov	r3, r2
 800733e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007340:	f7fb f8f8 	bl	8002534 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007348:	1a9b      	subs	r3, r3, r2
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	4413      	add	r3, r2
 800734e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007350:	f7fb f8f0 	bl	8002534 <HAL_GetTick>
 8007354:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007356:	4b39      	ldr	r3, [pc, #228]	; (800743c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	015b      	lsls	r3, r3, #5
 800735c:	0d1b      	lsrs	r3, r3, #20
 800735e:	69fa      	ldr	r2, [r7, #28]
 8007360:	fb02 f303 	mul.w	r3, r2, r3
 8007364:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007366:	e054      	b.n	8007412 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736e:	d050      	beq.n	8007412 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007370:	f7fb f8e0 	bl	8002534 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	69fa      	ldr	r2, [r7, #28]
 800737c:	429a      	cmp	r2, r3
 800737e:	d902      	bls.n	8007386 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d13d      	bne.n	8007402 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	685a      	ldr	r2, [r3, #4]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007394:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800739e:	d111      	bne.n	80073c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073a8:	d004      	beq.n	80073b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073b2:	d107      	bne.n	80073c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073cc:	d10f      	bne.n	80073ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e017      	b.n	8007432 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007408:	2300      	movs	r3, #0
 800740a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	3b01      	subs	r3, #1
 8007410:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	4013      	ands	r3, r2
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	429a      	cmp	r2, r3
 8007420:	bf0c      	ite	eq
 8007422:	2301      	moveq	r3, #1
 8007424:	2300      	movne	r3, #0
 8007426:	b2db      	uxtb	r3, r3
 8007428:	461a      	mov	r2, r3
 800742a:	79fb      	ldrb	r3, [r7, #7]
 800742c:	429a      	cmp	r2, r3
 800742e:	d19b      	bne.n	8007368 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3720      	adds	r7, #32
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	20000000 	.word	0x20000000

08007440 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b08a      	sub	sp, #40	; 0x28
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007452:	f7fb f86f 	bl	8002534 <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745a:	1a9b      	subs	r3, r3, r2
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	4413      	add	r3, r2
 8007460:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007462:	f7fb f867 	bl	8002534 <HAL_GetTick>
 8007466:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	330c      	adds	r3, #12
 800746e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007470:	4b3d      	ldr	r3, [pc, #244]	; (8007568 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	4613      	mov	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	00da      	lsls	r2, r3, #3
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	0d1b      	lsrs	r3, r3, #20
 8007480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007482:	fb02 f303 	mul.w	r3, r2, r3
 8007486:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007488:	e060      	b.n	800754c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007490:	d107      	bne.n	80074a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d104      	bne.n	80074a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	b2db      	uxtb	r3, r3
 800749e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80074a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a8:	d050      	beq.n	800754c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074aa:	f7fb f843 	bl	8002534 <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d902      	bls.n	80074c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d13d      	bne.n	800753c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074d8:	d111      	bne.n	80074fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074e2:	d004      	beq.n	80074ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074ec:	d107      	bne.n	80074fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007506:	d10f      	bne.n	8007528 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007526:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e010      	b.n	800755e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007542:	2300      	movs	r3, #0
 8007544:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	3b01      	subs	r3, #1
 800754a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689a      	ldr	r2, [r3, #8]
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	4013      	ands	r3, r2
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	429a      	cmp	r2, r3
 800755a:	d196      	bne.n	800748a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3728      	adds	r7, #40	; 0x28
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	20000000 	.word	0x20000000

0800756c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af02      	add	r7, sp, #8
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007580:	d111      	bne.n	80075a6 <SPI_EndRxTransaction+0x3a>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800758a:	d004      	beq.n	8007596 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007594:	d107      	bne.n	80075a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075a4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	2200      	movs	r2, #0
 80075ae:	2180      	movs	r1, #128	; 0x80
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f7ff febd 	bl	8007330 <SPI_WaitFlagStateUntilTimeout>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d007      	beq.n	80075cc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075c0:	f043 0220 	orr.w	r2, r3, #32
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e023      	b.n	8007614 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075d4:	d11d      	bne.n	8007612 <SPI_EndRxTransaction+0xa6>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075de:	d004      	beq.n	80075ea <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075e8:	d113      	bne.n	8007612 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f7ff ff22 	bl	8007440 <SPI_WaitFifoStateUntilTimeout>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d007      	beq.n	8007612 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007606:	f043 0220 	orr.w	r2, r3, #32
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e000      	b.n	8007614 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af02      	add	r7, sp, #8
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	2200      	movs	r2, #0
 8007630:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f7ff ff03 	bl	8007440 <SPI_WaitFifoStateUntilTimeout>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d007      	beq.n	8007650 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007644:	f043 0220 	orr.w	r2, r3, #32
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e027      	b.n	80076a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2200      	movs	r2, #0
 8007658:	2180      	movs	r1, #128	; 0x80
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f7ff fe68 	bl	8007330 <SPI_WaitFlagStateUntilTimeout>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d007      	beq.n	8007676 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800766a:	f043 0220 	orr.w	r2, r3, #32
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e014      	b.n	80076a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	2200      	movs	r2, #0
 800767e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f7ff fedc 	bl	8007440 <SPI_WaitFifoStateUntilTimeout>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d007      	beq.n	800769e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007692:	f043 0220 	orr.w	r2, r3, #32
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e000      	b.n	80076a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <__errno>:
 80076a8:	4b01      	ldr	r3, [pc, #4]	; (80076b0 <__errno+0x8>)
 80076aa:	6818      	ldr	r0, [r3, #0]
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	2000000c 	.word	0x2000000c

080076b4 <__libc_init_array>:
 80076b4:	b570      	push	{r4, r5, r6, lr}
 80076b6:	4d0d      	ldr	r5, [pc, #52]	; (80076ec <__libc_init_array+0x38>)
 80076b8:	4c0d      	ldr	r4, [pc, #52]	; (80076f0 <__libc_init_array+0x3c>)
 80076ba:	1b64      	subs	r4, r4, r5
 80076bc:	10a4      	asrs	r4, r4, #2
 80076be:	2600      	movs	r6, #0
 80076c0:	42a6      	cmp	r6, r4
 80076c2:	d109      	bne.n	80076d8 <__libc_init_array+0x24>
 80076c4:	4d0b      	ldr	r5, [pc, #44]	; (80076f4 <__libc_init_array+0x40>)
 80076c6:	4c0c      	ldr	r4, [pc, #48]	; (80076f8 <__libc_init_array+0x44>)
 80076c8:	f000 fa26 	bl	8007b18 <_init>
 80076cc:	1b64      	subs	r4, r4, r5
 80076ce:	10a4      	asrs	r4, r4, #2
 80076d0:	2600      	movs	r6, #0
 80076d2:	42a6      	cmp	r6, r4
 80076d4:	d105      	bne.n	80076e2 <__libc_init_array+0x2e>
 80076d6:	bd70      	pop	{r4, r5, r6, pc}
 80076d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80076dc:	4798      	blx	r3
 80076de:	3601      	adds	r6, #1
 80076e0:	e7ee      	b.n	80076c0 <__libc_init_array+0xc>
 80076e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80076e6:	4798      	blx	r3
 80076e8:	3601      	adds	r6, #1
 80076ea:	e7f2      	b.n	80076d2 <__libc_init_array+0x1e>
 80076ec:	08007b44 	.word	0x08007b44
 80076f0:	08007b44 	.word	0x08007b44
 80076f4:	08007b44 	.word	0x08007b44
 80076f8:	08007b48 	.word	0x08007b48

080076fc <memset>:
 80076fc:	4402      	add	r2, r0
 80076fe:	4603      	mov	r3, r0
 8007700:	4293      	cmp	r3, r2
 8007702:	d100      	bne.n	8007706 <memset+0xa>
 8007704:	4770      	bx	lr
 8007706:	f803 1b01 	strb.w	r1, [r3], #1
 800770a:	e7f9      	b.n	8007700 <memset+0x4>
 800770c:	0000      	movs	r0, r0
	...

08007710 <log>:
 8007710:	b538      	push	{r3, r4, r5, lr}
 8007712:	ed2d 8b02 	vpush	{d8}
 8007716:	ec55 4b10 	vmov	r4, r5, d0
 800771a:	f000 f839 	bl	8007790 <__ieee754_log>
 800771e:	4622      	mov	r2, r4
 8007720:	462b      	mov	r3, r5
 8007722:	4620      	mov	r0, r4
 8007724:	4629      	mov	r1, r5
 8007726:	eeb0 8a40 	vmov.f32	s16, s0
 800772a:	eef0 8a60 	vmov.f32	s17, s1
 800772e:	f7f9 f9c9 	bl	8000ac4 <__aeabi_dcmpun>
 8007732:	b998      	cbnz	r0, 800775c <log+0x4c>
 8007734:	2200      	movs	r2, #0
 8007736:	2300      	movs	r3, #0
 8007738:	4620      	mov	r0, r4
 800773a:	4629      	mov	r1, r5
 800773c:	f7f9 f9b8 	bl	8000ab0 <__aeabi_dcmpgt>
 8007740:	b960      	cbnz	r0, 800775c <log+0x4c>
 8007742:	2200      	movs	r2, #0
 8007744:	2300      	movs	r3, #0
 8007746:	4620      	mov	r0, r4
 8007748:	4629      	mov	r1, r5
 800774a:	f7f9 f989 	bl	8000a60 <__aeabi_dcmpeq>
 800774e:	b160      	cbz	r0, 800776a <log+0x5a>
 8007750:	f7ff ffaa 	bl	80076a8 <__errno>
 8007754:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8007780 <log+0x70>
 8007758:	2322      	movs	r3, #34	; 0x22
 800775a:	6003      	str	r3, [r0, #0]
 800775c:	eeb0 0a48 	vmov.f32	s0, s16
 8007760:	eef0 0a68 	vmov.f32	s1, s17
 8007764:	ecbd 8b02 	vpop	{d8}
 8007768:	bd38      	pop	{r3, r4, r5, pc}
 800776a:	f7ff ff9d 	bl	80076a8 <__errno>
 800776e:	ecbd 8b02 	vpop	{d8}
 8007772:	2321      	movs	r3, #33	; 0x21
 8007774:	6003      	str	r3, [r0, #0]
 8007776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800777a:	4803      	ldr	r0, [pc, #12]	; (8007788 <log+0x78>)
 800777c:	f000 b9c4 	b.w	8007b08 <nan>
 8007780:	00000000 	.word	0x00000000
 8007784:	fff00000 	.word	0xfff00000
 8007788:	08007b40 	.word	0x08007b40
 800778c:	00000000 	.word	0x00000000

08007790 <__ieee754_log>:
 8007790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007794:	ec51 0b10 	vmov	r0, r1, d0
 8007798:	ed2d 8b04 	vpush	{d8-d9}
 800779c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80077a0:	b083      	sub	sp, #12
 80077a2:	460d      	mov	r5, r1
 80077a4:	da29      	bge.n	80077fa <__ieee754_log+0x6a>
 80077a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80077aa:	4303      	orrs	r3, r0
 80077ac:	ee10 2a10 	vmov	r2, s0
 80077b0:	d10c      	bne.n	80077cc <__ieee754_log+0x3c>
 80077b2:	49cf      	ldr	r1, [pc, #828]	; (8007af0 <__ieee754_log+0x360>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	2300      	movs	r3, #0
 80077b8:	2000      	movs	r0, #0
 80077ba:	f7f9 f813 	bl	80007e4 <__aeabi_ddiv>
 80077be:	ec41 0b10 	vmov	d0, r0, r1
 80077c2:	b003      	add	sp, #12
 80077c4:	ecbd 8b04 	vpop	{d8-d9}
 80077c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077cc:	2900      	cmp	r1, #0
 80077ce:	da05      	bge.n	80077dc <__ieee754_log+0x4c>
 80077d0:	460b      	mov	r3, r1
 80077d2:	f7f8 fd25 	bl	8000220 <__aeabi_dsub>
 80077d6:	2200      	movs	r2, #0
 80077d8:	2300      	movs	r3, #0
 80077da:	e7ee      	b.n	80077ba <__ieee754_log+0x2a>
 80077dc:	4bc5      	ldr	r3, [pc, #788]	; (8007af4 <__ieee754_log+0x364>)
 80077de:	2200      	movs	r2, #0
 80077e0:	f7f8 fed6 	bl	8000590 <__aeabi_dmul>
 80077e4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80077e8:	460d      	mov	r5, r1
 80077ea:	4ac3      	ldr	r2, [pc, #780]	; (8007af8 <__ieee754_log+0x368>)
 80077ec:	4295      	cmp	r5, r2
 80077ee:	dd06      	ble.n	80077fe <__ieee754_log+0x6e>
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	f7f8 fd16 	bl	8000224 <__adddf3>
 80077f8:	e7e1      	b.n	80077be <__ieee754_log+0x2e>
 80077fa:	2300      	movs	r3, #0
 80077fc:	e7f5      	b.n	80077ea <__ieee754_log+0x5a>
 80077fe:	152c      	asrs	r4, r5, #20
 8007800:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007804:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007808:	441c      	add	r4, r3
 800780a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800780e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8007812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007816:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800781a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800781e:	ea42 0105 	orr.w	r1, r2, r5
 8007822:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8007826:	2200      	movs	r2, #0
 8007828:	4bb4      	ldr	r3, [pc, #720]	; (8007afc <__ieee754_log+0x36c>)
 800782a:	f7f8 fcf9 	bl	8000220 <__aeabi_dsub>
 800782e:	1cab      	adds	r3, r5, #2
 8007830:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007834:	2b02      	cmp	r3, #2
 8007836:	4682      	mov	sl, r0
 8007838:	468b      	mov	fp, r1
 800783a:	f04f 0200 	mov.w	r2, #0
 800783e:	dc53      	bgt.n	80078e8 <__ieee754_log+0x158>
 8007840:	2300      	movs	r3, #0
 8007842:	f7f9 f90d 	bl	8000a60 <__aeabi_dcmpeq>
 8007846:	b1d0      	cbz	r0, 800787e <__ieee754_log+0xee>
 8007848:	2c00      	cmp	r4, #0
 800784a:	f000 8122 	beq.w	8007a92 <__ieee754_log+0x302>
 800784e:	4620      	mov	r0, r4
 8007850:	f7f8 fe34 	bl	80004bc <__aeabi_i2d>
 8007854:	a390      	add	r3, pc, #576	; (adr r3, 8007a98 <__ieee754_log+0x308>)
 8007856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785a:	4606      	mov	r6, r0
 800785c:	460f      	mov	r7, r1
 800785e:	f7f8 fe97 	bl	8000590 <__aeabi_dmul>
 8007862:	a38f      	add	r3, pc, #572	; (adr r3, 8007aa0 <__ieee754_log+0x310>)
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	4604      	mov	r4, r0
 800786a:	460d      	mov	r5, r1
 800786c:	4630      	mov	r0, r6
 800786e:	4639      	mov	r1, r7
 8007870:	f7f8 fe8e 	bl	8000590 <__aeabi_dmul>
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	4620      	mov	r0, r4
 800787a:	4629      	mov	r1, r5
 800787c:	e7ba      	b.n	80077f4 <__ieee754_log+0x64>
 800787e:	a38a      	add	r3, pc, #552	; (adr r3, 8007aa8 <__ieee754_log+0x318>)
 8007880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007884:	4650      	mov	r0, sl
 8007886:	4659      	mov	r1, fp
 8007888:	f7f8 fe82 	bl	8000590 <__aeabi_dmul>
 800788c:	4602      	mov	r2, r0
 800788e:	460b      	mov	r3, r1
 8007890:	2000      	movs	r0, #0
 8007892:	499b      	ldr	r1, [pc, #620]	; (8007b00 <__ieee754_log+0x370>)
 8007894:	f7f8 fcc4 	bl	8000220 <__aeabi_dsub>
 8007898:	4652      	mov	r2, sl
 800789a:	4606      	mov	r6, r0
 800789c:	460f      	mov	r7, r1
 800789e:	465b      	mov	r3, fp
 80078a0:	4650      	mov	r0, sl
 80078a2:	4659      	mov	r1, fp
 80078a4:	f7f8 fe74 	bl	8000590 <__aeabi_dmul>
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	4630      	mov	r0, r6
 80078ae:	4639      	mov	r1, r7
 80078b0:	f7f8 fe6e 	bl	8000590 <__aeabi_dmul>
 80078b4:	4606      	mov	r6, r0
 80078b6:	460f      	mov	r7, r1
 80078b8:	b914      	cbnz	r4, 80078c0 <__ieee754_log+0x130>
 80078ba:	4632      	mov	r2, r6
 80078bc:	463b      	mov	r3, r7
 80078be:	e0a2      	b.n	8007a06 <__ieee754_log+0x276>
 80078c0:	4620      	mov	r0, r4
 80078c2:	f7f8 fdfb 	bl	80004bc <__aeabi_i2d>
 80078c6:	a374      	add	r3, pc, #464	; (adr r3, 8007a98 <__ieee754_log+0x308>)
 80078c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078cc:	4680      	mov	r8, r0
 80078ce:	4689      	mov	r9, r1
 80078d0:	f7f8 fe5e 	bl	8000590 <__aeabi_dmul>
 80078d4:	a372      	add	r3, pc, #456	; (adr r3, 8007aa0 <__ieee754_log+0x310>)
 80078d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078da:	4604      	mov	r4, r0
 80078dc:	460d      	mov	r5, r1
 80078de:	4640      	mov	r0, r8
 80078e0:	4649      	mov	r1, r9
 80078e2:	f7f8 fe55 	bl	8000590 <__aeabi_dmul>
 80078e6:	e0a7      	b.n	8007a38 <__ieee754_log+0x2a8>
 80078e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80078ec:	f7f8 fc9a 	bl	8000224 <__adddf3>
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	4650      	mov	r0, sl
 80078f6:	4659      	mov	r1, fp
 80078f8:	f7f8 ff74 	bl	80007e4 <__aeabi_ddiv>
 80078fc:	ec41 0b18 	vmov	d8, r0, r1
 8007900:	4620      	mov	r0, r4
 8007902:	f7f8 fddb 	bl	80004bc <__aeabi_i2d>
 8007906:	ec53 2b18 	vmov	r2, r3, d8
 800790a:	ec41 0b19 	vmov	d9, r0, r1
 800790e:	ec51 0b18 	vmov	r0, r1, d8
 8007912:	f7f8 fe3d 	bl	8000590 <__aeabi_dmul>
 8007916:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800791a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800791e:	9301      	str	r3, [sp, #4]
 8007920:	4602      	mov	r2, r0
 8007922:	460b      	mov	r3, r1
 8007924:	4680      	mov	r8, r0
 8007926:	4689      	mov	r9, r1
 8007928:	f7f8 fe32 	bl	8000590 <__aeabi_dmul>
 800792c:	a360      	add	r3, pc, #384	; (adr r3, 8007ab0 <__ieee754_log+0x320>)
 800792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007932:	4606      	mov	r6, r0
 8007934:	460f      	mov	r7, r1
 8007936:	f7f8 fe2b 	bl	8000590 <__aeabi_dmul>
 800793a:	a35f      	add	r3, pc, #380	; (adr r3, 8007ab8 <__ieee754_log+0x328>)
 800793c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007940:	f7f8 fc70 	bl	8000224 <__adddf3>
 8007944:	4632      	mov	r2, r6
 8007946:	463b      	mov	r3, r7
 8007948:	f7f8 fe22 	bl	8000590 <__aeabi_dmul>
 800794c:	a35c      	add	r3, pc, #368	; (adr r3, 8007ac0 <__ieee754_log+0x330>)
 800794e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007952:	f7f8 fc67 	bl	8000224 <__adddf3>
 8007956:	4632      	mov	r2, r6
 8007958:	463b      	mov	r3, r7
 800795a:	f7f8 fe19 	bl	8000590 <__aeabi_dmul>
 800795e:	a35a      	add	r3, pc, #360	; (adr r3, 8007ac8 <__ieee754_log+0x338>)
 8007960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007964:	f7f8 fc5e 	bl	8000224 <__adddf3>
 8007968:	4642      	mov	r2, r8
 800796a:	464b      	mov	r3, r9
 800796c:	f7f8 fe10 	bl	8000590 <__aeabi_dmul>
 8007970:	a357      	add	r3, pc, #348	; (adr r3, 8007ad0 <__ieee754_log+0x340>)
 8007972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007976:	4680      	mov	r8, r0
 8007978:	4689      	mov	r9, r1
 800797a:	4630      	mov	r0, r6
 800797c:	4639      	mov	r1, r7
 800797e:	f7f8 fe07 	bl	8000590 <__aeabi_dmul>
 8007982:	a355      	add	r3, pc, #340	; (adr r3, 8007ad8 <__ieee754_log+0x348>)
 8007984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007988:	f7f8 fc4c 	bl	8000224 <__adddf3>
 800798c:	4632      	mov	r2, r6
 800798e:	463b      	mov	r3, r7
 8007990:	f7f8 fdfe 	bl	8000590 <__aeabi_dmul>
 8007994:	a352      	add	r3, pc, #328	; (adr r3, 8007ae0 <__ieee754_log+0x350>)
 8007996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799a:	f7f8 fc43 	bl	8000224 <__adddf3>
 800799e:	4632      	mov	r2, r6
 80079a0:	463b      	mov	r3, r7
 80079a2:	f7f8 fdf5 	bl	8000590 <__aeabi_dmul>
 80079a6:	460b      	mov	r3, r1
 80079a8:	4602      	mov	r2, r0
 80079aa:	4649      	mov	r1, r9
 80079ac:	4640      	mov	r0, r8
 80079ae:	f7f8 fc39 	bl	8000224 <__adddf3>
 80079b2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80079b6:	9b01      	ldr	r3, [sp, #4]
 80079b8:	3551      	adds	r5, #81	; 0x51
 80079ba:	431d      	orrs	r5, r3
 80079bc:	2d00      	cmp	r5, #0
 80079be:	4680      	mov	r8, r0
 80079c0:	4689      	mov	r9, r1
 80079c2:	dd48      	ble.n	8007a56 <__ieee754_log+0x2c6>
 80079c4:	4b4e      	ldr	r3, [pc, #312]	; (8007b00 <__ieee754_log+0x370>)
 80079c6:	2200      	movs	r2, #0
 80079c8:	4650      	mov	r0, sl
 80079ca:	4659      	mov	r1, fp
 80079cc:	f7f8 fde0 	bl	8000590 <__aeabi_dmul>
 80079d0:	4652      	mov	r2, sl
 80079d2:	465b      	mov	r3, fp
 80079d4:	f7f8 fddc 	bl	8000590 <__aeabi_dmul>
 80079d8:	4602      	mov	r2, r0
 80079da:	460b      	mov	r3, r1
 80079dc:	4606      	mov	r6, r0
 80079de:	460f      	mov	r7, r1
 80079e0:	4640      	mov	r0, r8
 80079e2:	4649      	mov	r1, r9
 80079e4:	f7f8 fc1e 	bl	8000224 <__adddf3>
 80079e8:	ec53 2b18 	vmov	r2, r3, d8
 80079ec:	f7f8 fdd0 	bl	8000590 <__aeabi_dmul>
 80079f0:	4680      	mov	r8, r0
 80079f2:	4689      	mov	r9, r1
 80079f4:	b964      	cbnz	r4, 8007a10 <__ieee754_log+0x280>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4630      	mov	r0, r6
 80079fc:	4639      	mov	r1, r7
 80079fe:	f7f8 fc0f 	bl	8000220 <__aeabi_dsub>
 8007a02:	4602      	mov	r2, r0
 8007a04:	460b      	mov	r3, r1
 8007a06:	4650      	mov	r0, sl
 8007a08:	4659      	mov	r1, fp
 8007a0a:	f7f8 fc09 	bl	8000220 <__aeabi_dsub>
 8007a0e:	e6d6      	b.n	80077be <__ieee754_log+0x2e>
 8007a10:	a321      	add	r3, pc, #132	; (adr r3, 8007a98 <__ieee754_log+0x308>)
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	ec51 0b19 	vmov	r0, r1, d9
 8007a1a:	f7f8 fdb9 	bl	8000590 <__aeabi_dmul>
 8007a1e:	a320      	add	r3, pc, #128	; (adr r3, 8007aa0 <__ieee754_log+0x310>)
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	4604      	mov	r4, r0
 8007a26:	460d      	mov	r5, r1
 8007a28:	ec51 0b19 	vmov	r0, r1, d9
 8007a2c:	f7f8 fdb0 	bl	8000590 <__aeabi_dmul>
 8007a30:	4642      	mov	r2, r8
 8007a32:	464b      	mov	r3, r9
 8007a34:	f7f8 fbf6 	bl	8000224 <__adddf3>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	4639      	mov	r1, r7
 8007a40:	f7f8 fbee 	bl	8000220 <__aeabi_dsub>
 8007a44:	4652      	mov	r2, sl
 8007a46:	465b      	mov	r3, fp
 8007a48:	f7f8 fbea 	bl	8000220 <__aeabi_dsub>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4620      	mov	r0, r4
 8007a52:	4629      	mov	r1, r5
 8007a54:	e7d9      	b.n	8007a0a <__ieee754_log+0x27a>
 8007a56:	4602      	mov	r2, r0
 8007a58:	460b      	mov	r3, r1
 8007a5a:	4650      	mov	r0, sl
 8007a5c:	4659      	mov	r1, fp
 8007a5e:	f7f8 fbdf 	bl	8000220 <__aeabi_dsub>
 8007a62:	ec53 2b18 	vmov	r2, r3, d8
 8007a66:	f7f8 fd93 	bl	8000590 <__aeabi_dmul>
 8007a6a:	4606      	mov	r6, r0
 8007a6c:	460f      	mov	r7, r1
 8007a6e:	2c00      	cmp	r4, #0
 8007a70:	f43f af23 	beq.w	80078ba <__ieee754_log+0x12a>
 8007a74:	a308      	add	r3, pc, #32	; (adr r3, 8007a98 <__ieee754_log+0x308>)
 8007a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7a:	ec51 0b19 	vmov	r0, r1, d9
 8007a7e:	f7f8 fd87 	bl	8000590 <__aeabi_dmul>
 8007a82:	a307      	add	r3, pc, #28	; (adr r3, 8007aa0 <__ieee754_log+0x310>)
 8007a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a88:	4604      	mov	r4, r0
 8007a8a:	460d      	mov	r5, r1
 8007a8c:	ec51 0b19 	vmov	r0, r1, d9
 8007a90:	e727      	b.n	80078e2 <__ieee754_log+0x152>
 8007a92:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8007ae8 <__ieee754_log+0x358>
 8007a96:	e694      	b.n	80077c2 <__ieee754_log+0x32>
 8007a98:	fee00000 	.word	0xfee00000
 8007a9c:	3fe62e42 	.word	0x3fe62e42
 8007aa0:	35793c76 	.word	0x35793c76
 8007aa4:	3dea39ef 	.word	0x3dea39ef
 8007aa8:	55555555 	.word	0x55555555
 8007aac:	3fd55555 	.word	0x3fd55555
 8007ab0:	df3e5244 	.word	0xdf3e5244
 8007ab4:	3fc2f112 	.word	0x3fc2f112
 8007ab8:	96cb03de 	.word	0x96cb03de
 8007abc:	3fc74664 	.word	0x3fc74664
 8007ac0:	94229359 	.word	0x94229359
 8007ac4:	3fd24924 	.word	0x3fd24924
 8007ac8:	55555593 	.word	0x55555593
 8007acc:	3fe55555 	.word	0x3fe55555
 8007ad0:	d078c69f 	.word	0xd078c69f
 8007ad4:	3fc39a09 	.word	0x3fc39a09
 8007ad8:	1d8e78af 	.word	0x1d8e78af
 8007adc:	3fcc71c5 	.word	0x3fcc71c5
 8007ae0:	9997fa04 	.word	0x9997fa04
 8007ae4:	3fd99999 	.word	0x3fd99999
	...
 8007af0:	c3500000 	.word	0xc3500000
 8007af4:	43500000 	.word	0x43500000
 8007af8:	7fefffff 	.word	0x7fefffff
 8007afc:	3ff00000 	.word	0x3ff00000
 8007b00:	3fe00000 	.word	0x3fe00000
 8007b04:	00000000 	.word	0x00000000

08007b08 <nan>:
 8007b08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007b10 <nan+0x8>
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	00000000 	.word	0x00000000
 8007b14:	7ff80000 	.word	0x7ff80000

08007b18 <_init>:
 8007b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1a:	bf00      	nop
 8007b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b1e:	bc08      	pop	{r3}
 8007b20:	469e      	mov	lr, r3
 8007b22:	4770      	bx	lr

08007b24 <_fini>:
 8007b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b26:	bf00      	nop
 8007b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b2a:	bc08      	pop	{r3}
 8007b2c:	469e      	mov	lr, r3
 8007b2e:	4770      	bx	lr
