
AMS-Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cd8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08008eb0  08008eb0  00018eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ec0  08008ec0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08008ec0  08008ec0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ec0  08008ec0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ec0  08008ec0  00018ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ec4  08008ec4  00018ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000680  20000010  08008ed4  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000690  08008ed4  00020690  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001950b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dcc  00000000  00000000  00039547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001780  00000000  00000000  0003c318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001648  00000000  00000000  0003da98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029eee  00000000  00000000  0003f0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000182f2  00000000  00000000  00068fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011b4e1  00000000  00000000  000812c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019c7a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000664c  00000000  00000000  0019c7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008e98 	.word	0x08008e98

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08008e98 	.word	0x08008e98

08000218 <init_PEC15_Table>:

int16_t pec15Table[256];
const int16_t CRC15_POLY = 0x4599;

void init_PEC15_Table(void)
{
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
    int16_t remainder;

    for (int i = 0; i < 256; i++)
 800021e:	2300      	movs	r3, #0
 8000220:	60bb      	str	r3, [r7, #8]
 8000222:	e026      	b.n	8000272 <init_PEC15_Table+0x5a>
    {
        remainder = i << 7;
 8000224:	68bb      	ldr	r3, [r7, #8]
 8000226:	01db      	lsls	r3, r3, #7
 8000228:	81fb      	strh	r3, [r7, #14]
        for (int bit = 8; bit > 0; --bit)
 800022a:	2308      	movs	r3, #8
 800022c:	607b      	str	r3, [r7, #4]
 800022e:	e015      	b.n	800025c <init_PEC15_Table+0x44>
        {
            if (remainder & 0x4000)
 8000230:	89fb      	ldrh	r3, [r7, #14]
 8000232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000236:	2b00      	cmp	r3, #0
 8000238:	d009      	beq.n	800024e <init_PEC15_Table+0x36>
            {
                remainder = ((remainder << 1));
 800023a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800023e:	005b      	lsls	r3, r3, #1
 8000240:	81fb      	strh	r3, [r7, #14]
                remainder = (remainder ^ CRC15_POLY);
 8000242:	f244 5299 	movw	r2, #17817	; 0x4599
 8000246:	89fb      	ldrh	r3, [r7, #14]
 8000248:	4053      	eors	r3, r2
 800024a:	81fb      	strh	r3, [r7, #14]
 800024c:	e003      	b.n	8000256 <init_PEC15_Table+0x3e>
            }
            else
            {
                remainder = ((remainder << 1));
 800024e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000252:	005b      	lsls	r3, r3, #1
 8000254:	81fb      	strh	r3, [r7, #14]
        for (int bit = 8; bit > 0; --bit)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	3b01      	subs	r3, #1
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b00      	cmp	r3, #0
 8000260:	dce6      	bgt.n	8000230 <init_PEC15_Table+0x18>
            }
        }
        pec15Table[i] = remainder & 0xFFFF;
 8000262:	4909      	ldr	r1, [pc, #36]	; (8000288 <init_PEC15_Table+0x70>)
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	89fa      	ldrh	r2, [r7, #14]
 8000268:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int i = 0; i < 256; i++)
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	3301      	adds	r3, #1
 8000270:	60bb      	str	r3, [r7, #8]
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	2bff      	cmp	r3, #255	; 0xff
 8000276:	ddd5      	ble.n	8000224 <init_PEC15_Table+0xc>
    }
}
 8000278:	bf00      	nop
 800027a:	bf00      	nop
 800027c:	3714      	adds	r7, #20
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	2000002c 	.word	0x2000002c

0800028c <pec15>:


uint16_t pec15(uint8_t *data, int len)
{
 800028c:	b480      	push	{r7}
 800028e:	b087      	sub	sp, #28
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	6039      	str	r1, [r7, #0]
    int16_t remainder, address;

    remainder = 16; // PEC seed
 8000296:	2310      	movs	r3, #16
 8000298:	82fb      	strh	r3, [r7, #22]

    for (int i = 0; i < len; i++)
 800029a:	2300      	movs	r3, #0
 800029c:	613b      	str	r3, [r7, #16]
 800029e:	e01a      	b.n	80002d6 <pec15+0x4a>
    {
        address = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 80002a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80002a4:	11db      	asrs	r3, r3, #7
 80002a6:	b21a      	sxth	r2, r3
 80002a8:	693b      	ldr	r3, [r7, #16]
 80002aa:	6879      	ldr	r1, [r7, #4]
 80002ac:	440b      	add	r3, r1
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	b21b      	sxth	r3, r3
 80002b2:	4053      	eors	r3, r2
 80002b4:	b21b      	sxth	r3, r3
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	81fb      	strh	r3, [r7, #14]
        remainder = (remainder << 8) ^ pec15Table[address];
 80002ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80002be:	021b      	lsls	r3, r3, #8
 80002c0:	b21a      	sxth	r2, r3
 80002c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80002c6:	490a      	ldr	r1, [pc, #40]	; (80002f0 <pec15+0x64>)
 80002c8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80002cc:	4053      	eors	r3, r2
 80002ce:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < len; i++)
 80002d0:	693b      	ldr	r3, [r7, #16]
 80002d2:	3301      	adds	r3, #1
 80002d4:	613b      	str	r3, [r7, #16]
 80002d6:	693a      	ldr	r2, [r7, #16]
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	429a      	cmp	r2, r3
 80002dc:	dbe0      	blt.n	80002a0 <pec15+0x14>
    }
    return (remainder * 2); // The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 80002de:	8afb      	ldrh	r3, [r7, #22]
 80002e0:	005b      	lsls	r3, r3, #1
 80002e2:	b29b      	uxth	r3, r3
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	371c      	adds	r7, #28
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	2000002c 	.word	0x2000002c

080002f4 <init_LTC6811>:


void init_LTC6811(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
    init_PEC15_Table();
 80002f8:	f7ff ff8e 	bl	8000218 <init_PEC15_Table>
}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}

08000300 <update_config>:


void update_config(ltc6811_config *config)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
    uint8_t cfgr[6] = {0};
 8000308:	2300      	movs	r3, #0
 800030a:	60bb      	str	r3, [r7, #8]
 800030c:	2300      	movs	r3, #0
 800030e:	81bb      	strh	r3, [r7, #12]

    cfgr[0] = config->gpio_pulldowns << 3;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	00db      	lsls	r3, r3, #3
 8000316:	b2db      	uxtb	r3, r3
 8000318:	723b      	strb	r3, [r7, #8]
    cfgr[0] |= config->refon << 2;
 800031a:	7a3b      	ldrb	r3, [r7, #8]
 800031c:	b25a      	sxtb	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	785b      	ldrb	r3, [r3, #1]
 8000322:	009b      	lsls	r3, r3, #2
 8000324:	b25b      	sxtb	r3, r3
 8000326:	4313      	orrs	r3, r2
 8000328:	b25b      	sxtb	r3, r3
 800032a:	b2db      	uxtb	r3, r3
 800032c:	723b      	strb	r3, [r7, #8]
    cfgr[0] |= config->adcopt;
 800032e:	7a3b      	ldrb	r3, [r7, #8]
 8000330:	687a      	ldr	r2, [r7, #4]
 8000332:	7892      	ldrb	r2, [r2, #2]
 8000334:	4313      	orrs	r3, r2
 8000336:	b2db      	uxtb	r3, r3
 8000338:	723b      	strb	r3, [r7, #8]

    cfgr[1] = config->vuv;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	889b      	ldrh	r3, [r3, #4]
 800033e:	b2db      	uxtb	r3, r3
 8000340:	727b      	strb	r3, [r7, #9]

    cfgr[2] = config->vuv >> 8;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	889b      	ldrh	r3, [r3, #4]
 8000346:	0a1b      	lsrs	r3, r3, #8
 8000348:	b29b      	uxth	r3, r3
 800034a:	b2db      	uxtb	r3, r3
 800034c:	72bb      	strb	r3, [r7, #10]
    cfgr[2] |= config->vov << 4;
 800034e:	7abb      	ldrb	r3, [r7, #10]
 8000350:	b25a      	sxtb	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	88db      	ldrh	r3, [r3, #6]
 8000356:	011b      	lsls	r3, r3, #4
 8000358:	b25b      	sxtb	r3, r3
 800035a:	4313      	orrs	r3, r2
 800035c:	b25b      	sxtb	r3, r3
 800035e:	b2db      	uxtb	r3, r3
 8000360:	72bb      	strb	r3, [r7, #10]

    cfgr[3] = config->vov >> 4;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	88db      	ldrh	r3, [r3, #6]
 8000366:	091b      	lsrs	r3, r3, #4
 8000368:	b29b      	uxth	r3, r3
 800036a:	b2db      	uxtb	r3, r3
 800036c:	72fb      	strb	r3, [r7, #11]

    cfgr[4] = 0;
 800036e:	2300      	movs	r3, #0
 8000370:	733b      	strb	r3, [r7, #12]

    cfgr[5] = config->dcto << 4;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	7a1b      	ldrb	r3, [r3, #8]
 8000376:	011b      	lsls	r3, r3, #4
 8000378:	b2db      	uxtb	r3, r3
 800037a:	737b      	strb	r3, [r7, #13]

    wake_sleep();
 800037c:	f000 f80a 	bl	8000394 <wake_sleep>

    broadcast_write(WRCFGA, cfgr);
 8000380:	f107 0308 	add.w	r3, r7, #8
 8000384:	4619      	mov	r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	f000 f878 	bl	800047c <broadcast_write>
}
 800038c:	bf00      	nop
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <wake_sleep>:

////NEED TO CHANGE TO HAL
void wake_sleep()
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800039e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a2:	f004 fad9 	bl	8004958 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 80003a6:	2001      	movs	r0, #1
 80003a8:	f001 fbae 	bl	8001b08 <HAL_Delay>

    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b6:	f004 facf 	bl	8004958 <HAL_GPIO_WritePin>

    HAL_Delay(1);
 80003ba:	2001      	movs	r0, #1
 80003bc:	f001 fba4 	bl	8001b08 <HAL_Delay>
}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <wake_standby>:


void wake_standby()
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d2:	f004 fac1 	bl	8004958 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 80003d6:	2001      	movs	r0, #1
 80003d8:	f001 fb96 	bl	8001b08 <HAL_Delay>

    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e6:	f004 fab7 	bl	8004958 <HAL_GPIO_WritePin>

    HAL_Delay(1);
 80003ea:	2001      	movs	r0, #1
 80003ec:	f001 fb8c 	bl	8001b08 <HAL_Delay>
}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <broadcast_command>:


void broadcast_command(uint16_t command_code)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	80fb      	strh	r3, [r7, #6]
    uint8_t CMD[2];

    // see Table 36 (Broadcast Command Format) in LTC6811 datasheet
    CMD[0] = 0;                  // CMD0 bits 3 thru 7  = 0
 80003fe:	2300      	movs	r3, #0
 8000400:	733b      	strb	r3, [r7, #12]
    CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 8000402:	7b3a      	ldrb	r2, [r7, #12]
 8000404:	88fb      	ldrh	r3, [r7, #6]
 8000406:	0a1b      	lsrs	r3, r3, #8
 8000408:	b29b      	uxth	r3, r3
 800040a:	b2db      	uxtb	r3, r3
 800040c:	4313      	orrs	r3, r2
 800040e:	b2db      	uxtb	r3, r3
 8000410:	733b      	strb	r3, [r7, #12]
    CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 8000412:	88fb      	ldrh	r3, [r7, #6]
 8000414:	b2db      	uxtb	r3, r3
 8000416:	737b      	strb	r3, [r7, #13]

    uint16_t crc = pec15(CMD, 2); // CRC for CMD
 8000418:	f107 030c 	add.w	r3, r7, #12
 800041c:	2102      	movs	r1, #2
 800041e:	4618      	mov	r0, r3
 8000420:	f7ff ff34 	bl	800028c <pec15>
 8000424:	4603      	mov	r3, r0
 8000426:	81fb      	strh	r3, [r7, #14]

    uint8_t tx_msg[4];

    // Send 2-byte CMD and 2-byte PEC15.

    tx_msg[0] = CMD[0];
 8000428:	7b3b      	ldrb	r3, [r7, #12]
 800042a:	723b      	strb	r3, [r7, #8]
    tx_msg[1] = CMD[1];
 800042c:	7b7b      	ldrb	r3, [r7, #13]
 800042e:	727b      	strb	r3, [r7, #9]
    tx_msg[2] = crc >> 8;
 8000430:	89fb      	ldrh	r3, [r7, #14]
 8000432:	0a1b      	lsrs	r3, r3, #8
 8000434:	b29b      	uxth	r3, r3
 8000436:	b2db      	uxtb	r3, r3
 8000438:	72bb      	strb	r3, [r7, #10]
    tx_msg[3] = crc;
 800043a:	89fb      	ldrh	r3, [r7, #14]
 800043c:	b2db      	uxtb	r3, r3
 800043e:	72fb      	strb	r3, [r7, #11]




#ifdef ALWAYS_STANDBY_WAKE
    wake_standby();
 8000440:	f7ff ffc0 	bl	80003c4 <wake_standby>
#endif
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800044a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800044e:	f004 fa83 	bl	8004958 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, tx_msg, 4, 1000);
 8000452:	f107 0108 	add.w	r1, r7, #8
 8000456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800045a:	2204      	movs	r2, #4
 800045c:	4806      	ldr	r0, [pc, #24]	; (8000478 <broadcast_command+0x84>)
 800045e:	f005 fd94 	bl	8005f8a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000462:	2201      	movs	r2, #1
 8000464:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800046c:	f004 fa74 	bl	8004958 <HAL_GPIO_WritePin>
}
 8000470:	bf00      	nop
 8000472:	3710      	adds	r7, #16
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	200004b4 	.word	0x200004b4

0800047c <broadcast_write>:


void broadcast_write(uint16_t command_code, uint8_t *tx_reg)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	6039      	str	r1, [r7, #0]
 8000486:	80fb      	strh	r3, [r7, #6]
    uint8_t CMD[2];

    // see Table 36 (Broadcast Command Format) in LTC6811 datasheet
    CMD[0] = 0;                  // CMD0 bits 3 thru 7  = 0
 8000488:	2300      	movs	r3, #0
 800048a:	753b      	strb	r3, [r7, #20]
    CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 800048c:	7d3a      	ldrb	r2, [r7, #20]
 800048e:	88fb      	ldrh	r3, [r7, #6]
 8000490:	0a1b      	lsrs	r3, r3, #8
 8000492:	b29b      	uxth	r3, r3
 8000494:	b2db      	uxtb	r3, r3
 8000496:	4313      	orrs	r3, r2
 8000498:	b2db      	uxtb	r3, r3
 800049a:	753b      	strb	r3, [r7, #20]
    CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 800049c:	88fb      	ldrh	r3, [r7, #6]
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	757b      	strb	r3, [r7, #21]

    uint16_t crc = pec15(CMD, 2); // CRC for CMD
 80004a2:	f107 0314 	add.w	r3, r7, #20
 80004a6:	2102      	movs	r1, #2
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff feef 	bl	800028c <pec15>
 80004ae:	4603      	mov	r3, r0
 80004b0:	82fb      	strh	r3, [r7, #22]

    uint8_t tx_msg[12];

    // Send 2-byte CMD and 2-byte PEC15, then 6-byte register and 2-byte PEC15. No shift bytes.

    tx_msg[0] = CMD[0];
 80004b2:	7d3b      	ldrb	r3, [r7, #20]
 80004b4:	723b      	strb	r3, [r7, #8]
    tx_msg[1] = CMD[1];
 80004b6:	7d7b      	ldrb	r3, [r7, #21]
 80004b8:	727b      	strb	r3, [r7, #9]
    tx_msg[2] = crc >> 8;
 80004ba:	8afb      	ldrh	r3, [r7, #22]
 80004bc:	0a1b      	lsrs	r3, r3, #8
 80004be:	b29b      	uxth	r3, r3
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	72bb      	strb	r3, [r7, #10]
    tx_msg[3] = crc;
 80004c4:	8afb      	ldrh	r3, [r7, #22]
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	72fb      	strb	r3, [r7, #11]

    crc = pec15(tx_reg, 6); // CRC for register value
 80004ca:	2106      	movs	r1, #6
 80004cc:	6838      	ldr	r0, [r7, #0]
 80004ce:	f7ff fedd 	bl	800028c <pec15>
 80004d2:	4603      	mov	r3, r0
 80004d4:	82fb      	strh	r3, [r7, #22]

    tx_msg[4] = tx_reg[0];
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	733b      	strb	r3, [r7, #12]
    tx_msg[5] = tx_reg[1];
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	785b      	ldrb	r3, [r3, #1]
 80004e0:	737b      	strb	r3, [r7, #13]
    tx_msg[6] = tx_reg[2];
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	789b      	ldrb	r3, [r3, #2]
 80004e6:	73bb      	strb	r3, [r7, #14]
    tx_msg[7] = tx_reg[3];
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	78db      	ldrb	r3, [r3, #3]
 80004ec:	73fb      	strb	r3, [r7, #15]
    tx_msg[8] = tx_reg[4];
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	791b      	ldrb	r3, [r3, #4]
 80004f2:	743b      	strb	r3, [r7, #16]
    tx_msg[9] = tx_reg[5];
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	795b      	ldrb	r3, [r3, #5]
 80004f8:	747b      	strb	r3, [r7, #17]
    tx_msg[10] = crc >> 8;
 80004fa:	8afb      	ldrh	r3, [r7, #22]
 80004fc:	0a1b      	lsrs	r3, r3, #8
 80004fe:	b29b      	uxth	r3, r3
 8000500:	b2db      	uxtb	r3, r3
 8000502:	74bb      	strb	r3, [r7, #18]
    tx_msg[11] = crc;
 8000504:	8afb      	ldrh	r3, [r7, #22]
 8000506:	b2db      	uxtb	r3, r3
 8000508:	74fb      	strb	r3, [r7, #19]




#ifdef ALWAYS_STANDBY_WAKE
    wake_standby();
 800050a:	f7ff ff5b 	bl	80003c4 <wake_standby>
#endif
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 800050e:	2200      	movs	r2, #0
 8000510:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000518:	f004 fa1e 	bl	8004958 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, tx_msg, 12, 1000);
 800051c:	f107 0108 	add.w	r1, r7, #8
 8000520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000524:	220c      	movs	r2, #12
 8000526:	4807      	ldr	r0, [pc, #28]	; (8000544 <broadcast_write+0xc8>)
 8000528:	f005 fd2f 	bl	8005f8a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000536:	f004 fa0f 	bl	8004958 <HAL_GPIO_WritePin>
}
 800053a:	bf00      	nop
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	200004b4 	.word	0x200004b4

08000548 <address_read>:
}



void address_read(uint8_t address, uint16_t command_code, uint8_t *rx_reg)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b08a      	sub	sp, #40	; 0x28
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	603a      	str	r2, [r7, #0]
 8000552:	71fb      	strb	r3, [r7, #7]
 8000554:	460b      	mov	r3, r1
 8000556:	80bb      	strh	r3, [r7, #4]
    uint8_t CMD[2];

    // see Table 37 (Address Command Format) in LTC6811 datasheet
    CMD[0] = 0x80;               // CMD0 bit 7          = 1
 8000558:	2380      	movs	r3, #128	; 0x80
 800055a:	773b      	strb	r3, [r7, #28]
    CMD[0] |= address << 3;      // CMD0 bits 3 thu 6   = address
 800055c:	7f3b      	ldrb	r3, [r7, #28]
 800055e:	b25a      	sxtb	r2, r3
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	00db      	lsls	r3, r3, #3
 8000564:	b25b      	sxtb	r3, r3
 8000566:	4313      	orrs	r3, r2
 8000568:	b25b      	sxtb	r3, r3
 800056a:	b2db      	uxtb	r3, r3
 800056c:	773b      	strb	r3, [r7, #28]
    CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 800056e:	7f3a      	ldrb	r2, [r7, #28]
 8000570:	88bb      	ldrh	r3, [r7, #4]
 8000572:	0a1b      	lsrs	r3, r3, #8
 8000574:	b29b      	uxth	r3, r3
 8000576:	b2db      	uxtb	r3, r3
 8000578:	4313      	orrs	r3, r2
 800057a:	b2db      	uxtb	r3, r3
 800057c:	773b      	strb	r3, [r7, #28]
    CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 800057e:	88bb      	ldrh	r3, [r7, #4]
 8000580:	b2db      	uxtb	r3, r3
 8000582:	777b      	strb	r3, [r7, #29]

    uint16_t crc = pec15(CMD, 2);
 8000584:	f107 031c 	add.w	r3, r7, #28
 8000588:	2102      	movs	r1, #2
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff fe7e 	bl	800028c <pec15>
 8000590:	4603      	mov	r3, r0
 8000592:	847b      	strh	r3, [r7, #34]	; 0x22

    uint8_t tx_msg[12];

    // Send 2-byte CMD and PEC15, then read 6-byte register and 2-byte PEC15

    tx_msg[0] = CMD[0];
 8000594:	7f3b      	ldrb	r3, [r7, #28]
 8000596:	743b      	strb	r3, [r7, #16]
    tx_msg[1] = CMD[1];
 8000598:	7f7b      	ldrb	r3, [r7, #29]
 800059a:	747b      	strb	r3, [r7, #17]
    tx_msg[2] = crc >> 8;
 800059c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800059e:	0a1b      	lsrs	r3, r3, #8
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	74bb      	strb	r3, [r7, #18]
    tx_msg[3] = crc;
 80005a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	74fb      	strb	r3, [r7, #19]
    tx_msg[4] = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	753b      	strb	r3, [r7, #20]
    tx_msg[5] = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	757b      	strb	r3, [r7, #21]
    tx_msg[6] = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	75bb      	strb	r3, [r7, #22]
    tx_msg[7] = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	75fb      	strb	r3, [r7, #23]
    tx_msg[8] = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	763b      	strb	r3, [r7, #24]
    tx_msg[9] = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	767b      	strb	r3, [r7, #25]
    tx_msg[10] = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	76bb      	strb	r3, [r7, #26]
    tx_msg[11] = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	76fb      	strb	r3, [r7, #27]

    uint8_t rx_msg[8] = {0};
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	2300      	movs	r3, #0
 80005d2:	60fb      	str	r3, [r7, #12]

	#ifdef ALWAYS_STANDBY_WAKE
		wake_standby();
 80005d4:	f7ff fef6 	bl	80003c4 <wake_standby>
	#endif
	HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e2:	f004 f9b9 	bl	8004958 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, tx_msg, 4, 1000);
 80005e6:	f107 0110 	add.w	r1, r7, #16
 80005ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ee:	2204      	movs	r2, #4
 80005f0:	481d      	ldr	r0, [pc, #116]	; (8000668 <address_read+0x120>)
 80005f2:	f005 fcca 	bl	8005f8a <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, rx_msg, 8, 1000);
 80005f6:	f107 0108 	add.w	r1, r7, #8
 80005fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fe:	2208      	movs	r2, #8
 8000600:	4819      	ldr	r0, [pc, #100]	; (8000668 <address_read+0x120>)
 8000602:	f005 fe30 	bl	8006266 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800060c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000610:	f004 f9a2 	bl	8004958 <HAL_GPIO_WritePin>
        crc = pec15(rx_msg, 6); // calculate PEC15 for received message (first 6 bytes)
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	2106      	movs	r1, #6
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff fe36 	bl	800028c <pec15>
 8000620:	4603      	mov	r3, r0
 8000622:	847b      	strh	r3, [r7, #34]	; 0x22

        uint16_t rx_crc = (rx_msg[6] << 8) + rx_msg[7]; // received PEC15
 8000624:	7bbb      	ldrb	r3, [r7, #14]
 8000626:	b29b      	uxth	r3, r3
 8000628:	021b      	lsls	r3, r3, #8
 800062a:	b29a      	uxth	r2, r3
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	b29b      	uxth	r3, r3
 8000630:	4413      	add	r3, r2
 8000632:	843b      	strh	r3, [r7, #32]

        if (crc == rx_crc)
 8000634:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000636:	8c3b      	ldrh	r3, [r7, #32]
 8000638:	429a      	cmp	r2, r3
 800063a:	d111      	bne.n	8000660 <address_read+0x118>
        {
            for (int i = 0; i < 6; i++)
 800063c:	2300      	movs	r3, #0
 800063e:	627b      	str	r3, [r7, #36]	; 0x24
 8000640:	e00b      	b.n	800065a <address_read+0x112>
            {
                rx_reg[i] = rx_msg[i];
 8000642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000644:	683a      	ldr	r2, [r7, #0]
 8000646:	4413      	add	r3, r2
 8000648:	f107 0108 	add.w	r1, r7, #8
 800064c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800064e:	440a      	add	r2, r1
 8000650:	7812      	ldrb	r2, [r2, #0]
 8000652:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 6; i++)
 8000654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000656:	3301      	adds	r3, #1
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
 800065a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065c:	2b05      	cmp	r3, #5
 800065e:	ddf0      	ble.n	8000642 <address_read+0xfa>
            }
        }
}
 8000660:	bf00      	nop
 8000662:	3728      	adds	r7, #40	; 0x28
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200004b4 	.word	0x200004b4

0800066c <extract_voltage_reg>:



void extract_voltage_reg(uint8_t *voltage_reg, float *voltages)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++)
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	e036      	b.n	80006ea <extract_voltage_reg+0x7e>
    {
        if (voltage_reg[i * 2] == 0xFF && voltage_reg[(i * 2) + 1] == 0xFF)
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	461a      	mov	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2bff      	cmp	r3, #255	; 0xff
 800068a:	d10e      	bne.n	80006aa <extract_voltage_reg+0x3e>
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	3301      	adds	r3, #1
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2bff      	cmp	r3, #255	; 0xff
 800069a:	d106      	bne.n	80006aa <extract_voltage_reg+0x3e>
        {
#ifdef NAN
            voltages[i] = NAN;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	683a      	ldr	r2, [r7, #0]
 80006a2:	4413      	add	r3, r2
 80006a4:	4a16      	ldr	r2, [pc, #88]	; (8000700 <extract_voltage_reg+0x94>)
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	e01c      	b.n	80006e4 <extract_voltage_reg+0x78>
#endif
        }
        else
        {
            voltages[i] = (float)(voltage_reg[i * 2] + (voltage_reg[(i * 2) + 1] << 8)) * 0.0001f;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	461a      	mov	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	4619      	mov	r1, r3
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	3301      	adds	r3, #1
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	4413      	add	r3, r2
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	021b      	lsls	r3, r3, #8
 80006c6:	440b      	add	r3, r1
 80006c8:	ee07 3a90 	vmov	s15, r3
 80006cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	683a      	ldr	r2, [r7, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000704 <extract_voltage_reg+0x98>
 80006dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006e0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++)
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	3301      	adds	r3, #1
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	2b02      	cmp	r3, #2
 80006ee:	ddc5      	ble.n	800067c <extract_voltage_reg+0x10>
        }
    }
}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	7fc00000 	.word	0x7fc00000
 8000704:	38d1b717 	.word	0x38d1b717

08000708 <extract_all_voltages>:


void extract_all_voltages(ltc6811 *ltc6811, float *cell_voltage, int slave_num)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	; 0x50
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]

    int cell = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c

    for (int slave = 0; slave < slave_num; slave++)
 8000718:	2300      	movs	r3, #0
 800071a:	64bb      	str	r3, [r7, #72]	; 0x48
 800071c:	e066      	b.n	80007ec <extract_all_voltages+0xe4>
    {
        int i_max = ltc6811[slave].cell_count;
 800071e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000720:	4613      	mov	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	461a      	mov	r2, r3
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	4413      	add	r3, r2
 800072e:	785b      	ldrb	r3, [r3, #1]
 8000730:	643b      	str	r3, [r7, #64]	; 0x40

        float reg_voltages[12];

        extract_voltage_reg(ltc6811[slave].cva_reg, &reg_voltages[0]);
 8000732:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000734:	4613      	mov	r3, r2
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	4413      	add	r3, r2
 800073a:	00db      	lsls	r3, r3, #3
 800073c:	461a      	mov	r2, r3
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	4413      	add	r3, r2
 8000742:	3302      	adds	r3, #2
 8000744:	f107 0210 	add.w	r2, r7, #16
 8000748:	4611      	mov	r1, r2
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff8e 	bl	800066c <extract_voltage_reg>
        extract_voltage_reg(ltc6811[slave].cvb_reg, &reg_voltages[3]);
 8000750:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000752:	4613      	mov	r3, r2
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4413      	add	r3, r2
 8000758:	00db      	lsls	r3, r3, #3
 800075a:	461a      	mov	r2, r3
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	4413      	add	r3, r2
 8000760:	f103 0208 	add.w	r2, r3, #8
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	330c      	adds	r3, #12
 800076a:	4619      	mov	r1, r3
 800076c:	4610      	mov	r0, r2
 800076e:	f7ff ff7d 	bl	800066c <extract_voltage_reg>
        extract_voltage_reg(ltc6811[slave].cvc_reg, &reg_voltages[6]);
 8000772:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000774:	4613      	mov	r3, r2
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	4413      	add	r3, r2
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	461a      	mov	r2, r3
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	4413      	add	r3, r2
 8000782:	f103 020e 	add.w	r2, r3, #14
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	3318      	adds	r3, #24
 800078c:	4619      	mov	r1, r3
 800078e:	4610      	mov	r0, r2
 8000790:	f7ff ff6c 	bl	800066c <extract_voltage_reg>
        extract_voltage_reg(ltc6811[slave].cvd_reg, &reg_voltages[9]);
 8000794:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000796:	4613      	mov	r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	4413      	add	r3, r2
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	461a      	mov	r2, r3
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	4413      	add	r3, r2
 80007a4:	f103 0214 	add.w	r2, r3, #20
 80007a8:	f107 0310 	add.w	r3, r7, #16
 80007ac:	3324      	adds	r3, #36	; 0x24
 80007ae:	4619      	mov	r1, r3
 80007b0:	4610      	mov	r0, r2
 80007b2:	f7ff ff5b 	bl	800066c <extract_voltage_reg>

        for (int i = 0; i < i_max; i++)
 80007b6:	2300      	movs	r3, #0
 80007b8:	647b      	str	r3, [r7, #68]	; 0x44
 80007ba:	e010      	b.n	80007de <extract_all_voltages+0xd6>
        {
            cell_voltage[cell] = reg_voltages[i];
 80007bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	68ba      	ldr	r2, [r7, #8]
 80007c2:	4413      	add	r3, r2
 80007c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80007c6:	0092      	lsls	r2, r2, #2
 80007c8:	3250      	adds	r2, #80	; 0x50
 80007ca:	443a      	add	r2, r7
 80007cc:	3a40      	subs	r2, #64	; 0x40
 80007ce:	6812      	ldr	r2, [r2, #0]
 80007d0:	601a      	str	r2, [r3, #0]
            cell++;
 80007d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007d4:	3301      	adds	r3, #1
 80007d6:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < i_max; i++)
 80007d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007da:	3301      	adds	r3, #1
 80007dc:	647b      	str	r3, [r7, #68]	; 0x44
 80007de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80007e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007e2:	429a      	cmp	r2, r3
 80007e4:	dbea      	blt.n	80007bc <extract_all_voltages+0xb4>
    for (int slave = 0; slave < slave_num; slave++)
 80007e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007e8:	3301      	adds	r3, #1
 80007ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80007ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	db94      	blt.n	800071e <extract_all_voltages+0x16>
        }
    }
}
 80007f4:	bf00      	nop
 80007f6:	bf00      	nop
 80007f8:	3750      	adds	r7, #80	; 0x50
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <read_all_voltages>:


void read_all_voltages(ltc6811 *ltc6811, int slave_num)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b084      	sub	sp, #16
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
 8000806:	6039      	str	r1, [r7, #0]

    for (int slave = 0; slave < slave_num; slave++)
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	e05a      	b.n	80008c4 <read_all_voltages+0xc6>
    {
        address_read(ltc6811[slave].address, RDCVA, ltc6811[slave].cva_reg);
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	4613      	mov	r3, r2
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	4413      	add	r3, r2
 8000816:	00db      	lsls	r3, r3, #3
 8000818:	461a      	mov	r2, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	7818      	ldrb	r0, [r3, #0]
 8000820:	68fa      	ldr	r2, [r7, #12]
 8000822:	4613      	mov	r3, r2
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	4413      	add	r3, r2
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	461a      	mov	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4413      	add	r3, r2
 8000830:	3302      	adds	r3, #2
 8000832:	461a      	mov	r2, r3
 8000834:	2104      	movs	r1, #4
 8000836:	f7ff fe87 	bl	8000548 <address_read>
        address_read(ltc6811[slave].address, RDCVB, ltc6811[slave].cvb_reg);
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	4613      	mov	r3, r2
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	4413      	add	r3, r2
 8000842:	00db      	lsls	r3, r3, #3
 8000844:	461a      	mov	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	7818      	ldrb	r0, [r3, #0]
 800084c:	68fa      	ldr	r2, [r7, #12]
 800084e:	4613      	mov	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4413      	add	r3, r2
 8000854:	00db      	lsls	r3, r3, #3
 8000856:	461a      	mov	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4413      	add	r3, r2
 800085c:	3308      	adds	r3, #8
 800085e:	461a      	mov	r2, r3
 8000860:	2106      	movs	r1, #6
 8000862:	f7ff fe71 	bl	8000548 <address_read>
        address_read(ltc6811[slave].address, RDCVC, ltc6811[slave].cvc_reg);
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	4613      	mov	r3, r2
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	4413      	add	r3, r2
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	461a      	mov	r2, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	7818      	ldrb	r0, [r3, #0]
 8000878:	68fa      	ldr	r2, [r7, #12]
 800087a:	4613      	mov	r3, r2
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	4413      	add	r3, r2
 8000880:	00db      	lsls	r3, r3, #3
 8000882:	461a      	mov	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4413      	add	r3, r2
 8000888:	330e      	adds	r3, #14
 800088a:	461a      	mov	r2, r3
 800088c:	2108      	movs	r1, #8
 800088e:	f7ff fe5b 	bl	8000548 <address_read>
        address_read(ltc6811[slave].address, RDCVD, ltc6811[slave].cvd_reg);
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	4613      	mov	r3, r2
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	4413      	add	r3, r2
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	461a      	mov	r2, r3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4413      	add	r3, r2
 80008a2:	7818      	ldrb	r0, [r3, #0]
 80008a4:	68fa      	ldr	r2, [r7, #12]
 80008a6:	4613      	mov	r3, r2
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	4413      	add	r3, r2
 80008ac:	00db      	lsls	r3, r3, #3
 80008ae:	461a      	mov	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4413      	add	r3, r2
 80008b4:	3314      	adds	r3, #20
 80008b6:	461a      	mov	r2, r3
 80008b8:	210a      	movs	r1, #10
 80008ba:	f7ff fe45 	bl	8000548 <address_read>
    for (int slave = 0; slave < slave_num; slave++)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	3301      	adds	r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fa      	ldr	r2, [r7, #12]
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	dba0      	blt.n	800080e <read_all_voltages+0x10>
    }
}
 80008cc:	bf00      	nop
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <reset_SOC>:


//once battery is charged, reset SOC value
//use lookup table / formula to measure pack voltage and estimate SOC
void reset_SOC()
{
 80008d8:	b5b0      	push	{r4, r5, r7, lr}
 80008da:	af00      	add	r7, sp, #0
last_SOC_update_ms = HAL_GetTick();
 80008dc:	f001 f908 	bl	8001af0 <HAL_GetTick>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2200      	movs	r2, #0
 80008e4:	461c      	mov	r4, r3
 80008e6:	4615      	mov	r5, r2
 80008e8:	4b05      	ldr	r3, [pc, #20]	; (8000900 <reset_SOC+0x28>)
 80008ea:	e9c3 4500 	strd	r4, r5, [r3]
SOC = 100;
 80008ee:	4905      	ldr	r1, [pc, #20]	; (8000904 <reset_SOC+0x2c>)
 80008f0:	f04f 0200 	mov.w	r2, #0
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <reset_SOC+0x30>)
 80008f6:	e9c1 2300 	strd	r2, r3, [r1]
}
 80008fa:	bf00      	nop
 80008fc:	bdb0      	pop	{r4, r5, r7, pc}
 80008fe:	bf00      	nop
 8000900:	200005b8 	.word	0x200005b8
 8000904:	200005b0 	.word	0x200005b0
 8000908:	40590000 	.word	0x40590000

0800090c <HAL_TIM_IC_CaptureCallback>:




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // If the interrupt is triggered by channel 1
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	7f1b      	ldrb	r3, [r3, #28]
 8000918:	2b02      	cmp	r3, #2
 800091a:	d125      	bne.n	8000968 <HAL_TIM_IC_CaptureCallback+0x5c>
	{
		// Read the IC value
		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800091c:	2104      	movs	r1, #4
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f007 faa8 	bl	8007e74 <HAL_TIM_ReadCapturedValue>
 8000924:	4603      	mov	r3, r0
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000928:	6013      	str	r3, [r2, #0]

		if (ICValue != 0)
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <HAL_TIM_IC_CaptureCallback+0x64>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d01a      	beq.n	8000968 <HAL_TIM_IC_CaptureCallback+0x5c>
		{
			// calculate the Duty Cycle
			duty = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) *100)/ICValue;
 8000932:	2100      	movs	r1, #0
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f007 fa9d 	bl	8007e74 <HAL_TIM_ReadCapturedValue>
 800093a:	4603      	mov	r3, r0
 800093c:	2264      	movs	r2, #100	; 0x64
 800093e:	fb03 f202 	mul.w	r2, r3, r2
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	fbb2 f3f3 	udiv	r3, r2, r3
 800094a:	ee07 3a90 	vmov	s15, r3
 800094e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <HAL_TIM_IC_CaptureCallback+0x68>)
 8000954:	edc3 7a00 	vstr	s15, [r3]

			frequency = 7500/ICValue;
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <HAL_TIM_IC_CaptureCallback+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000960:	fbb2 f3f3 	udiv	r3, r2, r3
 8000964:	4a04      	ldr	r2, [pc, #16]	; (8000978 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000966:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000678 	.word	0x20000678
 8000974:	20000680 	.word	0x20000680
 8000978:	2000067c 	.word	0x2000067c

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000982:	f001 f850 	bl	8001a26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000986:	f000 f8a3 	bl	8000ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098a:	f000 fc55 	bl	8001238 <MX_GPIO_Init>
  MX_DMA_Init();
 800098e:	f000 fc21 	bl	80011d4 <MX_DMA_Init>
  MX_RTC_Init();
 8000992:	f000 fa65 	bl	8000e60 <MX_RTC_Init>
  MX_FDCAN1_Init();
 8000996:	f000 f9d7 	bl	8000d48 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800099a:	f000 fa1b 	bl	8000dd4 <MX_FDCAN2_Init>
  MX_SPI3_Init();
 800099e:	f000 fac1 	bl	8000f24 <MX_SPI3_Init>
  MX_ADC1_Init();
 80009a2:	f000 f8e3 	bl	8000b6c <MX_ADC1_Init>
  MX_ADC2_Init();
 80009a6:	f000 f959 	bl	8000c5c <MX_ADC2_Init>
  MX_TIM2_Init();
 80009aa:	f000 faf9 	bl	8000fa0 <MX_TIM2_Init>
  MX_TIM15_Init();
 80009ae:	f000 fb6d 	bl	800108c <MX_TIM15_Init>





  HAL_Delay(100); // 100ms should allow all relevant power circuitry to stabilize
 80009b2:	2064      	movs	r0, #100	; 0x64
 80009b4:	f001 f8a8 	bl	8001b08 <HAL_Delay>

  //start ADCs
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80009b8:	217f      	movs	r1, #127	; 0x7f
 80009ba:	483d      	ldr	r0, [pc, #244]	; (8000ab0 <main+0x134>)
 80009bc:	f002 ff66 	bl	800388c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, 1);
 80009c0:	2201      	movs	r2, #1
 80009c2:	493c      	ldr	r1, [pc, #240]	; (8000ab4 <main+0x138>)
 80009c4:	483a      	ldr	r0, [pc, #232]	; (8000ab0 <main+0x134>)
 80009c6:	f001 fe1d 	bl	8002604 <HAL_ADC_Start_DMA>
  HAL_ADC_Start(&hadc1);
 80009ca:	4839      	ldr	r0, [pc, #228]	; (8000ab0 <main+0x134>)
 80009cc:	f001 fd36 	bl	800243c <HAL_ADC_Start>

  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80009d0:	217f      	movs	r1, #127	; 0x7f
 80009d2:	4839      	ldr	r0, [pc, #228]	; (8000ab8 <main+0x13c>)
 80009d4:	f002 ff5a 	bl	800388c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_val2, 2);
 80009d8:	2202      	movs	r2, #2
 80009da:	4938      	ldr	r1, [pc, #224]	; (8000abc <main+0x140>)
 80009dc:	4836      	ldr	r0, [pc, #216]	; (8000ab8 <main+0x13c>)
 80009de:	f001 fe11 	bl	8002604 <HAL_ADC_Start_DMA>
  HAL_ADC_Start(&hadc2);
 80009e2:	4835      	ldr	r0, [pc, #212]	; (8000ab8 <main+0x13c>)
 80009e4:	f001 fd2a 	bl	800243c <HAL_ADC_Start>

  //start PWM measurement for IMD measurement
  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_2);   // main channel
 80009e8:	2104      	movs	r1, #4
 80009ea:	4835      	ldr	r0, [pc, #212]	; (8000ac0 <main+0x144>)
 80009ec:	f006 fc6a 	bl	80072c4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_1);   // indirect channel
 80009f0:	2100      	movs	r1, #0
 80009f2:	4833      	ldr	r0, [pc, #204]	; (8000ac0 <main+0x144>)
 80009f4:	f006 fb62 	bl	80070bc <HAL_TIM_IC_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80009f8:	210c      	movs	r1, #12
 80009fa:	4832      	ldr	r0, [pc, #200]	; (8000ac4 <main+0x148>)
 80009fc:	f006 f9ea 	bl	8006dd4 <HAL_TIM_PWM_Start>

  //reset_SOC();

  init_LTC6811();
 8000a00:	f7ff fc78 	bl	80002f4 <init_LTC6811>

  wake_sleep(); // wake LTC6811 from sleep
 8000a04:	f7ff fcc6 	bl	8000394 <wake_sleep>

  // Configuration for all LTC6811s
  struct ltc6811_config ltc6811_config;
  ltc6811_config.gpio_pulldowns = GPIO1_NO_PULLDOWN | GPIO2_NO_PULLDOWN | GPIO3_NO_PULLDOWN | GPIO4_NO_PULLDOWN | GPIO5_NO_PULLDOWN;
 8000a08:	231f      	movs	r3, #31
 8000a0a:	703b      	strb	r3, [r7, #0]
  ltc6811_config.refon = REFON_STAY_POWERED;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	707b      	strb	r3, [r7, #1]
  ltc6811_config.adcopt = ADCOPT_MODE_0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	70bb      	strb	r3, [r7, #2]
  ltc6811_config.vuv = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	80bb      	strh	r3, [r7, #4]
  ltc6811_config.vov = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	80fb      	strh	r3, [r7, #6]
  ltc6811_config.dcto = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	723b      	strb	r3, [r7, #8]
  update_config(&ltc6811_config);
 8000a20:	463b      	mov	r3, r7
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fc6c 	bl	8000300 <update_config>


  // configure LTC6811 structs to match real life setup
  for (int i = 0; i < NUM_OF_SLAVES; i++)
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	e01f      	b.n	8000a6e <main+0xf2>
  {
      ltc6811_arr[i].address = i;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	b2d8      	uxtb	r0, r3
 8000a32:	4925      	ldr	r1, [pc, #148]	; (8000ac8 <main+0x14c>)
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	4613      	mov	r3, r2
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	4413      	add	r3, r2
 8000a3c:	00db      	lsls	r3, r3, #3
 8000a3e:	440b      	add	r3, r1
 8000a40:	4602      	mov	r2, r0
 8000a42:	701a      	strb	r2, [r3, #0]
      ltc6811_arr[i].cell_count = (i % 2 == 0) ? EVEN_SLAVE_CELLS : ODD_SLAVE_CELLS;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d101      	bne.n	8000a52 <main+0xd6>
 8000a4e:	200c      	movs	r0, #12
 8000a50:	e000      	b.n	8000a54 <main+0xd8>
 8000a52:	200b      	movs	r0, #11
 8000a54:	491c      	ldr	r1, [pc, #112]	; (8000ac8 <main+0x14c>)
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	00db      	lsls	r3, r3, #3
 8000a60:	440b      	add	r3, r1
 8000a62:	3301      	adds	r3, #1
 8000a64:	4602      	mov	r2, r0
 8000a66:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < NUM_OF_SLAVES; i++)
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	dddc      	ble.n	8000a2e <main+0xb2>
  }

  reset_SOC();
 8000a74:	f7ff ff30 	bl	80008d8 <reset_SOC>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);	//set AMS_OK
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2104      	movs	r1, #4
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a80:	f003 ff6a 	bl	8004958 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      wake_sleep(); // wake LTC6811 from sleep
 8000a84:	f7ff fc86 	bl	8000394 <wake_sleep>
      // send command to read cell voltages
      broadcast_command(ADCV(MD_27k_14k, DCP_NOT_PERMITTED, CH_ALL));
 8000a88:	f44f 7038 	mov.w	r0, #736	; 0x2e0
 8000a8c:	f7ff fcb2 	bl	80003f4 <broadcast_command>

      HAL_Delay(1); // reading all cell voltages @ "27kHz" should take 1ms
 8000a90:	2001      	movs	r0, #1
 8000a92:	f001 f839 	bl	8001b08 <HAL_Delay>

      // read cell voltage registers from all slaves on the bus
      read_all_voltages(ltc6811_arr, NUM_OF_SLAVES);
 8000a96:	2102      	movs	r1, #2
 8000a98:	480b      	ldr	r0, [pc, #44]	; (8000ac8 <main+0x14c>)
 8000a9a:	f7ff feb0 	bl	80007fe <read_all_voltages>

      // calculate actual voltage values
      extract_all_voltages(ltc6811_arr, cell_voltage, NUM_OF_SLAVES);
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	490a      	ldr	r1, [pc, #40]	; (8000acc <main+0x150>)
 8000aa2:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <main+0x14c>)
 8000aa4:	f7ff fe30 	bl	8000708 <extract_all_voltages>

      HAL_Delay(100);
 8000aa8:	2064      	movs	r0, #100	; 0x64
 8000aaa:	f001 f82d 	bl	8001b08 <HAL_Delay>
      wake_sleep(); // wake LTC6811 from sleep
 8000aae:	e7e9      	b.n	8000a84 <main+0x108>
 8000ab0:	2000022c 	.word	0x2000022c
 8000ab4:	200005c0 	.word	0x200005c0
 8000ab8:	20000298 	.word	0x20000298
 8000abc:	200005c4 	.word	0x200005c4
 8000ac0:	20000564 	.word	0x20000564
 8000ac4:	20000518 	.word	0x20000518
 8000ac8:	20000628 	.word	0x20000628
 8000acc:	200005c8 	.word	0x200005c8

08000ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b094      	sub	sp, #80	; 0x50
 8000ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad6:	f107 0318 	add.w	r3, r7, #24
 8000ada:	2238      	movs	r2, #56	; 0x38
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f008 f9d2 	bl	8008e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
 8000af0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000af2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000af6:	f003 ff47 	bl	8004988 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000afa:	230a      	movs	r3, #10
 8000afc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b04:	2340      	movs	r3, #64	; 0x40
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b10:	2302      	movs	r3, #2
 8000b12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000b14:	2301      	movs	r3, #1
 8000b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 15;
 8000b18:	230f      	movs	r3, #15
 8000b1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b24:	2302      	movs	r3, #2
 8000b26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b28:	f107 0318 	add.w	r3, r7, #24
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f003 ffdf 	bl	8004af0 <HAL_RCC_OscConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000b38:	f000 fbda 	bl	80012f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3c:	230f      	movs	r3, #15
 8000b3e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b40:	2303      	movs	r3, #3
 8000b42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2103      	movs	r1, #3
 8000b54:	4618      	mov	r0, r3
 8000b56:	f004 fae3 	bl	8005120 <HAL_RCC_ClockConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b60:	f000 fbc6 	bl	80012f0 <Error_Handler>
  }
}
 8000b64:	bf00      	nop
 8000b66:	3750      	adds	r7, #80	; 0x50
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08c      	sub	sp, #48	; 0x30
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	2220      	movs	r2, #32
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f008 f97f 	bl	8008e88 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b8a:	4b32      	ldr	r3, [pc, #200]	; (8000c54 <MX_ADC1_Init+0xe8>)
 8000b8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b92:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <MX_ADC1_Init+0xe8>)
 8000b94:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b9a:	4b2e      	ldr	r3, [pc, #184]	; (8000c54 <MX_ADC1_Init+0xe8>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba0:	4b2c      	ldr	r3, [pc, #176]	; (8000c54 <MX_ADC1_Init+0xe8>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000ba6:	4b2b      	ldr	r3, [pc, #172]	; (8000c54 <MX_ADC1_Init+0xe8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bac:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <MX_ADC1_Init+0xe8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bb2:	4b28      	ldr	r3, [pc, #160]	; (8000c54 <MX_ADC1_Init+0xe8>)
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bb8:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <MX_ADC1_Init+0xe8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bbe:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <MX_ADC1_Init+0xe8>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000bc4:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <MX_ADC1_Init+0xe8>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bca:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <MX_ADC1_Init+0xe8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd2:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <MX_ADC1_Init+0xe8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bd8:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <MX_ADC1_Init+0xe8>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000bde:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <MX_ADC1_Init+0xe8>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000be6:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <MX_ADC1_Init+0xe8>)
 8000be8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bec:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <MX_ADC1_Init+0xe8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bf6:	4817      	ldr	r0, [pc, #92]	; (8000c54 <MX_ADC1_Init+0xe8>)
 8000bf8:	f001 fa5e 	bl	80020b8 <HAL_ADC_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8000c02:	f000 fb75 	bl	80012f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4810      	ldr	r0, [pc, #64]	; (8000c54 <MX_ADC1_Init+0xe8>)
 8000c12:	f002 fecf 	bl	80039b4 <HAL_ADCEx_MultiModeConfigChannel>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000c1c:	f000 fb68 	bl	80012f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <MX_ADC1_Init+0xec>)
 8000c22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c24:	2306      	movs	r3, #6
 8000c26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000c28:	2307      	movs	r3, #7
 8000c2a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c2c:	237f      	movs	r3, #127	; 0x7f
 8000c2e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c30:	2304      	movs	r3, #4
 8000c32:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_ADC1_Init+0xe8>)
 8000c3e:	f002 f83d 	bl	8002cbc <HAL_ADC_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000c48:	f000 fb52 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	3730      	adds	r7, #48	; 0x30
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2000022c 	.word	0x2000022c
 8000c58:	10c00010 	.word	0x10c00010

08000c5c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c62:	463b      	mov	r3, r7
 8000c64:	2220      	movs	r2, #32
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f008 f90d 	bl	8008e88 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c6e:	4b32      	ldr	r3, [pc, #200]	; (8000d38 <MX_ADC2_Init+0xdc>)
 8000c70:	4a32      	ldr	r2, [pc, #200]	; (8000d3c <MX_ADC2_Init+0xe0>)
 8000c72:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c74:	4b30      	ldr	r3, [pc, #192]	; (8000d38 <MX_ADC2_Init+0xdc>)
 8000c76:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c7a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c7c:	4b2e      	ldr	r3, [pc, #184]	; (8000d38 <MX_ADC2_Init+0xdc>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c82:	4b2d      	ldr	r3, [pc, #180]	; (8000d38 <MX_ADC2_Init+0xdc>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000c88:	4b2b      	ldr	r3, [pc, #172]	; (8000d38 <MX_ADC2_Init+0xdc>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c8e:	4b2a      	ldr	r3, [pc, #168]	; (8000d38 <MX_ADC2_Init+0xdc>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c94:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <MX_ADC2_Init+0xdc>)
 8000c96:	2208      	movs	r2, #8
 8000c98:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000c9a:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <MX_ADC2_Init+0xdc>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000ca0:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <MX_ADC2_Init+0xdc>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8000ca6:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <MX_ADC2_Init+0xdc>)
 8000ca8:	2202      	movs	r2, #2
 8000caa:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cac:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <MX_ADC2_Init+0xdc>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cb4:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <MX_ADC2_Init+0xdc>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cba:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <MX_ADC2_Init+0xdc>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <MX_ADC2_Init+0xdc>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <MX_ADC2_Init+0xdc>)
 8000cca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cce:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000cd0:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <MX_ADC2_Init+0xdc>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cd8:	4817      	ldr	r0, [pc, #92]	; (8000d38 <MX_ADC2_Init+0xdc>)
 8000cda:	f001 f9ed 	bl	80020b8 <HAL_ADC_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8000ce4:	f000 fb04 	bl	80012f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <MX_ADC2_Init+0xe4>)
 8000cea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cec:	2306      	movs	r3, #6
 8000cee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000cf0:	2307      	movs	r3, #7
 8000cf2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cf4:	237f      	movs	r3, #127	; 0x7f
 8000cf6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d00:	463b      	mov	r3, r7
 8000d02:	4619      	mov	r1, r3
 8000d04:	480c      	ldr	r0, [pc, #48]	; (8000d38 <MX_ADC2_Init+0xdc>)
 8000d06:	f001 ffd9 	bl	8002cbc <HAL_ADC_ConfigChannel>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000d10:	f000 faee 	bl	80012f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <MX_ADC2_Init+0xe8>)
 8000d16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d18:	230c      	movs	r3, #12
 8000d1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_ADC2_Init+0xdc>)
 8000d22:	f001 ffcb 	bl	8002cbc <HAL_ADC_ConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8000d2c:	f000 fae0 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	3720      	adds	r7, #32
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000298 	.word	0x20000298
 8000d3c:	50000100 	.word	0x50000100
 8000d40:	47520000 	.word	0x47520000
 8000d44:	36902000 	.word	0x36902000

08000d48 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <MX_FDCAN1_Init+0x84>)
 8000d4e:	4a20      	ldr	r2, [pc, #128]	; (8000dd0 <MX_FDCAN1_Init+0x88>)
 8000d50:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000d52:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <MX_FDCAN1_Init+0x84>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d58:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <MX_FDCAN1_Init+0x84>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d5e:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <MX_FDCAN1_Init+0x84>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <MX_FDCAN1_Init+0x84>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <MX_FDCAN1_Init+0x84>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d70:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <MX_FDCAN1_Init+0x84>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 12;
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <MX_FDCAN1_Init+0x84>)
 8000d78:	220c      	movs	r2, #12
 8000d7a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <MX_FDCAN1_Init+0x84>)
 8000d7e:	2203      	movs	r2, #3
 8000d80:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 16;
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <MX_FDCAN1_Init+0x84>)
 8000d84:	2210      	movs	r2, #16
 8000d86:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 8000d88:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <MX_FDCAN1_Init+0x84>)
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 20;
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <MX_FDCAN1_Init+0x84>)
 8000d90:	2214      	movs	r2, #20
 8000d92:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8000d94:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <MX_FDCAN1_Init+0x84>)
 8000d96:	2205      	movs	r2, #5
 8000d98:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 6;
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <MX_FDCAN1_Init+0x84>)
 8000d9c:	2206      	movs	r2, #6
 8000d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <MX_FDCAN1_Init+0x84>)
 8000da2:	2205      	movs	r2, #5
 8000da4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_FDCAN1_Init+0x84>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <MX_FDCAN1_Init+0x84>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_FDCAN1_Init+0x84>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000db8:	4804      	ldr	r0, [pc, #16]	; (8000dcc <MX_FDCAN1_Init+0x84>)
 8000dba:	f003 fa85 	bl	80042c8 <HAL_FDCAN_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000dc4:	f000 fa94 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200003c4 	.word	0x200003c4
 8000dd0:	40006400 	.word	0x40006400

08000dd4 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <MX_FDCAN2_Init+0x84>)
 8000dda:	4a20      	ldr	r2, [pc, #128]	; (8000e5c <MX_FDCAN2_Init+0x88>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <MX_FDCAN2_Init+0x84>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000de4:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MX_FDCAN2_Init+0x84>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000dea:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <MX_FDCAN2_Init+0x84>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000df0:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <MX_FDCAN2_Init+0x84>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000df6:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <MX_FDCAN2_Init+0x84>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000dfc:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_FDCAN2_Init+0x84>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <MX_FDCAN2_Init+0x84>)
 8000e04:	2210      	movs	r2, #16
 8000e06:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000e08:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <MX_FDCAN2_Init+0x84>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <MX_FDCAN2_Init+0x84>)
 8000e10:	2202      	movs	r2, #2
 8000e12:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000e14:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <MX_FDCAN2_Init+0x84>)
 8000e16:	2202      	movs	r2, #2
 8000e18:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_FDCAN2_Init+0x84>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000e20:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <MX_FDCAN2_Init+0x84>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_FDCAN2_Init+0x84>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <MX_FDCAN2_Init+0x84>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_FDCAN2_Init+0x84>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000e38:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <MX_FDCAN2_Init+0x84>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_FDCAN2_Init+0x84>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000e44:	4804      	ldr	r0, [pc, #16]	; (8000e58 <MX_FDCAN2_Init+0x84>)
 8000e46:	f003 fa3f 	bl	80042c8 <HAL_FDCAN_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8000e50:	f000 fa4e 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000428 	.word	0x20000428
 8000e5c:	40006800 	.word	0x40006800

08000e60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e74:	2300      	movs	r3, #0
 8000e76:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e78:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <MX_RTC_Init+0xbc>)
 8000e7a:	4a29      	ldr	r2, [pc, #164]	; (8000f20 <MX_RTC_Init+0xc0>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e7e:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <MX_RTC_Init+0xbc>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e84:	4b25      	ldr	r3, [pc, #148]	; (8000f1c <MX_RTC_Init+0xbc>)
 8000e86:	227f      	movs	r2, #127	; 0x7f
 8000e88:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e8a:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <MX_RTC_Init+0xbc>)
 8000e8c:	22ff      	movs	r2, #255	; 0xff
 8000e8e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e90:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <MX_RTC_Init+0xbc>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <MX_RTC_Init+0xbc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <MX_RTC_Init+0xbc>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <MX_RTC_Init+0xbc>)
 8000ea4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <MX_RTC_Init+0xbc>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000eb0:	481a      	ldr	r0, [pc, #104]	; (8000f1c <MX_RTC_Init+0xbc>)
 8000eb2:	f004 fd67 	bl	8005984 <HAL_RTC_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000ebc:	f000 fa18 	bl	80012f0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	2201      	movs	r2, #1
 8000edc:	4619      	mov	r1, r3
 8000ede:	480f      	ldr	r0, [pc, #60]	; (8000f1c <MX_RTC_Init+0xbc>)
 8000ee0:	f004 fdc5 	bl	8005a6e <HAL_RTC_SetTime>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_RTC_Init+0x8e>
  {
    Error_Handler();
 8000eea:	f000 fa01 	bl	80012f0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000efe:	463b      	mov	r3, r7
 8000f00:	2201      	movs	r2, #1
 8000f02:	4619      	mov	r1, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_RTC_Init+0xbc>)
 8000f06:	f004 fe4f 	bl	8005ba8 <HAL_RTC_SetDate>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000f10:	f000 f9ee 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	2000048c 	.word	0x2000048c
 8000f20:	40002800 	.word	0x40002800

08000f24 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <MX_SPI3_Init+0x74>)
 8000f2a:	4a1c      	ldr	r2, [pc, #112]	; (8000f9c <MX_SPI3_Init+0x78>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <MX_SPI3_Init+0x74>)
 8000f30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f34:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <MX_SPI3_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <MX_SPI3_Init+0x74>)
 8000f3e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f42:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_SPI3_Init+0x74>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <MX_SPI3_Init+0x74>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_SPI3_Init+0x74>)
 8000f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f56:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_SPI3_Init+0x74>)
 8000f5a:	2238      	movs	r2, #56	; 0x38
 8000f5c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_SPI3_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_SPI3_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <MX_SPI3_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_SPI3_Init+0x74>)
 8000f72:	2207      	movs	r2, #7
 8000f74:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <MX_SPI3_Init+0x74>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_SPI3_Init+0x74>)
 8000f7e:	2208      	movs	r2, #8
 8000f80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_SPI3_Init+0x74>)
 8000f84:	f004 ff56 	bl	8005e34 <HAL_SPI_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000f8e:	f000 f9af 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200004b4 	.word	0x200004b4
 8000f9c:	40003c00 	.word	0x40003c00

08000fa0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08e      	sub	sp, #56	; 0x38
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]
 8000fce:	615a      	str	r2, [r3, #20]
 8000fd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fd2:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <MX_TIM2_Init+0xe8>)
 8000fd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fd8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 8000fda:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <MX_TIM2_Init+0xe8>)
 8000fdc:	2277      	movs	r2, #119	; 0x77
 8000fde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe0:	4b29      	ldr	r3, [pc, #164]	; (8001088 <MX_TIM2_Init+0xe8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000fe6:	4b28      	ldr	r3, [pc, #160]	; (8001088 <MX_TIM2_Init+0xe8>)
 8000fe8:	2263      	movs	r2, #99	; 0x63
 8000fea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fec:	4b26      	ldr	r3, [pc, #152]	; (8001088 <MX_TIM2_Init+0xe8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff2:	4b25      	ldr	r3, [pc, #148]	; (8001088 <MX_TIM2_Init+0xe8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ff8:	4823      	ldr	r0, [pc, #140]	; (8001088 <MX_TIM2_Init+0xe8>)
 8000ffa:	f005 fe33 	bl	8006c64 <HAL_TIM_Base_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001004:	f000 f974 	bl	80012f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800100e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001012:	4619      	mov	r1, r3
 8001014:	481c      	ldr	r0, [pc, #112]	; (8001088 <MX_TIM2_Init+0xe8>)
 8001016:	f006 fdd5 	bl	8007bc4 <HAL_TIM_ConfigClockSource>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001020:	f000 f966 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001024:	4818      	ldr	r0, [pc, #96]	; (8001088 <MX_TIM2_Init+0xe8>)
 8001026:	f005 fe74 	bl	8006d12 <HAL_TIM_PWM_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001030:	f000 f95e 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	4811      	ldr	r0, [pc, #68]	; (8001088 <MX_TIM2_Init+0xe8>)
 8001044:	f007 fe20 	bl	8008c88 <HAL_TIMEx_MasterConfigSynchronization>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800104e:	f000 f94f 	bl	80012f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001052:	2360      	movs	r3, #96	; 0x60
 8001054:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800105a:	2300      	movs	r3, #0
 800105c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001062:	463b      	mov	r3, r7
 8001064:	220c      	movs	r2, #12
 8001066:	4619      	mov	r1, r3
 8001068:	4807      	ldr	r0, [pc, #28]	; (8001088 <MX_TIM2_Init+0xe8>)
 800106a:	f006 fc97 	bl	800799c <HAL_TIM_PWM_ConfigChannel>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001074:	f000 f93c 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001078:	4803      	ldr	r0, [pc, #12]	; (8001088 <MX_TIM2_Init+0xe8>)
 800107a:	f000 fc0d 	bl	8001898 <HAL_TIM_MspPostInit>

}
 800107e:	bf00      	nop
 8001080:	3738      	adds	r7, #56	; 0x38
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000518 	.word	0x20000518

0800108c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b090      	sub	sp, #64	; 0x40
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001092:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010be:	463b      	mov	r3, r7
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80010c8:	4b40      	ldr	r3, [pc, #256]	; (80011cc <MX_TIM15_Init+0x140>)
 80010ca:	4a41      	ldr	r2, [pc, #260]	; (80011d0 <MX_TIM15_Init+0x144>)
 80010cc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 16000;
 80010ce:	4b3f      	ldr	r3, [pc, #252]	; (80011cc <MX_TIM15_Init+0x140>)
 80010d0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80010d4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d6:	4b3d      	ldr	r3, [pc, #244]	; (80011cc <MX_TIM15_Init+0x140>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80010dc:	4b3b      	ldr	r3, [pc, #236]	; (80011cc <MX_TIM15_Init+0x140>)
 80010de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80010e4:	4b39      	ldr	r3, [pc, #228]	; (80011cc <MX_TIM15_Init+0x140>)
 80010e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ea:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80010ec:	4b37      	ldr	r3, [pc, #220]	; (80011cc <MX_TIM15_Init+0x140>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f2:	4b36      	ldr	r3, [pc, #216]	; (80011cc <MX_TIM15_Init+0x140>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80010f8:	4834      	ldr	r0, [pc, #208]	; (80011cc <MX_TIM15_Init+0x140>)
 80010fa:	f005 fdb3 	bl	8006c64 <HAL_TIM_Base_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001104:	f000 f8f4 	bl	80012f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800110e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001112:	4619      	mov	r1, r3
 8001114:	482d      	ldr	r0, [pc, #180]	; (80011cc <MX_TIM15_Init+0x140>)
 8001116:	f006 fd55 	bl	8007bc4 <HAL_TIM_ConfigClockSource>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001120:	f000 f8e6 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001124:	4829      	ldr	r0, [pc, #164]	; (80011cc <MX_TIM15_Init+0x140>)
 8001126:	f005 ff67 	bl	8006ff8 <HAL_TIM_IC_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001130:	f000 f8de 	bl	80012f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001134:	2304      	movs	r3, #4
 8001136:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001138:	2360      	movs	r3, #96	; 0x60
 800113a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	481f      	ldr	r0, [pc, #124]	; (80011cc <MX_TIM15_Init+0x140>)
 8001150:	f006 fe4e 	bl	8007df0 <HAL_TIM_SlaveConfigSynchro>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM15_Init+0xd2>
  {
    Error_Handler();
 800115a:	f000 f8c9 	bl	80012f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800115e:	2302      	movs	r3, #2
 8001160:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001162:	2302      	movs	r3, #2
 8001164:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	2200      	movs	r2, #0
 8001174:	4619      	mov	r1, r3
 8001176:	4815      	ldr	r0, [pc, #84]	; (80011cc <MX_TIM15_Init+0x140>)
 8001178:	f006 fb73 	bl	8007862 <HAL_TIM_IC_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8001182:	f000 f8b5 	bl	80012f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800118a:	2301      	movs	r3, #1
 800118c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	2204      	movs	r2, #4
 8001194:	4619      	mov	r1, r3
 8001196:	480d      	ldr	r0, [pc, #52]	; (80011cc <MX_TIM15_Init+0x140>)
 8001198:	f006 fb63 	bl	8007862 <HAL_TIM_IC_ConfigChannel>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM15_Init+0x11a>
  {
    Error_Handler();
 80011a2:	f000 f8a5 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80011ae:	463b      	mov	r3, r7
 80011b0:	4619      	mov	r1, r3
 80011b2:	4806      	ldr	r0, [pc, #24]	; (80011cc <MX_TIM15_Init+0x140>)
 80011b4:	f007 fd68 	bl	8008c88 <HAL_TIMEx_MasterConfigSynchronization>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM15_Init+0x136>
  {
    Error_Handler();
 80011be:	f000 f897 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	3740      	adds	r7, #64	; 0x40
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000564 	.word	0x20000564
 80011d0:	40014000 	.word	0x40014000

080011d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <MX_DMA_Init+0x60>)
 80011dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011de:	4a15      	ldr	r2, [pc, #84]	; (8001234 <MX_DMA_Init+0x60>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	6493      	str	r3, [r2, #72]	; 0x48
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <MX_DMA_Init+0x60>)
 80011e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <MX_DMA_Init+0x60>)
 80011f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f6:	4a0f      	ldr	r2, [pc, #60]	; (8001234 <MX_DMA_Init+0x60>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6493      	str	r3, [r2, #72]	; 0x48
 80011fe:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <MX_DMA_Init+0x60>)
 8001200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	200b      	movs	r0, #11
 8001210:	f002 fdb3 	bl	8003d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001214:	200b      	movs	r0, #11
 8001216:	f002 fdca 	bl	8003dae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	200c      	movs	r0, #12
 8001220:	f002 fdab 	bl	8003d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001224:	200c      	movs	r0, #12
 8001226:	f002 fdc2 	bl	8003dae <HAL_NVIC_EnableIRQ>

}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000

08001238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <MX_GPIO_Init+0xb0>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4a25      	ldr	r2, [pc, #148]	; (80012e8 <MX_GPIO_Init+0xb0>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125a:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <MX_GPIO_Init+0xb0>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <MX_GPIO_Init+0xb0>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	4a1f      	ldr	r2, [pc, #124]	; (80012e8 <MX_GPIO_Init+0xb0>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <MX_GPIO_Init+0xb0>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_GPIO_Init+0xb0>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a19      	ldr	r2, [pc, #100]	; (80012e8 <MX_GPIO_Init+0xb0>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <MX_GPIO_Init+0xb0>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_15, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	f248 0104 	movw	r1, #32772	; 0x8004
 800129c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a0:	f003 fb5a 	bl	8004958 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80012a4:	f248 0304 	movw	r3, #32772	; 0x8004
 80012a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	4619      	mov	r1, r3
 80012bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c0:	f003 f9c8 	bl	8004654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	4619      	mov	r1, r3
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <MX_GPIO_Init+0xb4>)
 80012da:	f003 f9bb 	bl	8004654 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012de:	bf00      	nop
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000
 80012ec:	48000400 	.word	0x48000400

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <Error_Handler+0x8>
	...

080012fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <HAL_MspInit+0x54>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001306:	4a12      	ldr	r2, [pc, #72]	; (8001350 <HAL_MspInit+0x54>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6613      	str	r3, [r2, #96]	; 0x60
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <HAL_MspInit+0x54>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <HAL_MspInit+0x54>)
 800131c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131e:	4a0c      	ldr	r2, [pc, #48]	; (8001350 <HAL_MspInit+0x54>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001324:	6593      	str	r3, [r2, #88]	; 0x58
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_MspInit+0x54>)
 8001328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8001332:	2020      	movs	r0, #32
 8001334:	f000 fc0a 	bl	8001b4c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8001338:	f000 fc30 	bl	8001b9c <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 800133c:	2000      	movs	r0, #0
 800133e:	f000 fc19 	bl	8001b74 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001342:	f003 fbc5 	bl	8004ad0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000

08001354 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b0a0      	sub	sp, #128	; 0x80
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800136c:	f107 0318 	add.w	r3, r7, #24
 8001370:	2254      	movs	r2, #84	; 0x54
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f007 fd87 	bl	8008e88 <memset>
  if(hadc->Instance==ADC1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001382:	d171      	bne.n	8001468 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001384:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001388:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800138a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800138e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001390:	f107 0318 	add.w	r3, r7, #24
 8001394:	4618      	mov	r0, r3
 8001396:	f004 f8a7 	bl	80054e8 <HAL_RCCEx_PeriphCLKConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80013a0:	f7ff ffa6 	bl	80012f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013a4:	4b6d      	ldr	r3, [pc, #436]	; (800155c <HAL_ADC_MspInit+0x208>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	3301      	adds	r3, #1
 80013aa:	4a6c      	ldr	r2, [pc, #432]	; (800155c <HAL_ADC_MspInit+0x208>)
 80013ac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013ae:	4b6b      	ldr	r3, [pc, #428]	; (800155c <HAL_ADC_MspInit+0x208>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d10b      	bne.n	80013ce <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013b6:	4b6a      	ldr	r3, [pc, #424]	; (8001560 <HAL_ADC_MspInit+0x20c>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	4a69      	ldr	r2, [pc, #420]	; (8001560 <HAL_ADC_MspInit+0x20c>)
 80013bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c2:	4b67      	ldr	r3, [pc, #412]	; (8001560 <HAL_ADC_MspInit+0x20c>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4b64      	ldr	r3, [pc, #400]	; (8001560 <HAL_ADC_MspInit+0x20c>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	4a63      	ldr	r2, [pc, #396]	; (8001560 <HAL_ADC_MspInit+0x20c>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013da:	4b61      	ldr	r3, [pc, #388]	; (8001560 <HAL_ADC_MspInit+0x20c>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013e6:	2308      	movs	r3, #8
 80013e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ea:	2303      	movs	r3, #3
 80013ec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013f6:	4619      	mov	r1, r3
 80013f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fc:	f003 f92a 	bl	8004654 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001400:	4b58      	ldr	r3, [pc, #352]	; (8001564 <HAL_ADC_MspInit+0x210>)
 8001402:	4a59      	ldr	r2, [pc, #356]	; (8001568 <HAL_ADC_MspInit+0x214>)
 8001404:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001406:	4b57      	ldr	r3, [pc, #348]	; (8001564 <HAL_ADC_MspInit+0x210>)
 8001408:	2205      	movs	r2, #5
 800140a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800140c:	4b55      	ldr	r3, [pc, #340]	; (8001564 <HAL_ADC_MspInit+0x210>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001412:	4b54      	ldr	r3, [pc, #336]	; (8001564 <HAL_ADC_MspInit+0x210>)
 8001414:	2200      	movs	r2, #0
 8001416:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001418:	4b52      	ldr	r3, [pc, #328]	; (8001564 <HAL_ADC_MspInit+0x210>)
 800141a:	2280      	movs	r2, #128	; 0x80
 800141c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800141e:	4b51      	ldr	r3, [pc, #324]	; (8001564 <HAL_ADC_MspInit+0x210>)
 8001420:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001424:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001426:	4b4f      	ldr	r3, [pc, #316]	; (8001564 <HAL_ADC_MspInit+0x210>)
 8001428:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800142c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800142e:	4b4d      	ldr	r3, [pc, #308]	; (8001564 <HAL_ADC_MspInit+0x210>)
 8001430:	2220      	movs	r2, #32
 8001432:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001434:	4b4b      	ldr	r3, [pc, #300]	; (8001564 <HAL_ADC_MspInit+0x210>)
 8001436:	2200      	movs	r2, #0
 8001438:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800143a:	484a      	ldr	r0, [pc, #296]	; (8001564 <HAL_ADC_MspInit+0x210>)
 800143c:	f002 fcd2 	bl	8003de4 <HAL_DMA_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8001446:	f7ff ff53 	bl	80012f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a45      	ldr	r2, [pc, #276]	; (8001564 <HAL_ADC_MspInit+0x210>)
 800144e:	655a      	str	r2, [r3, #84]	; 0x54
 8001450:	4a44      	ldr	r2, [pc, #272]	; (8001564 <HAL_ADC_MspInit+0x210>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	2012      	movs	r0, #18
 800145c:	f002 fc8d 	bl	8003d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001460:	2012      	movs	r0, #18
 8001462:	f002 fca4 	bl	8003dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001466:	e075      	b.n	8001554 <HAL_ADC_MspInit+0x200>
  else if(hadc->Instance==ADC2)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a3f      	ldr	r2, [pc, #252]	; (800156c <HAL_ADC_MspInit+0x218>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d170      	bne.n	8001554 <HAL_ADC_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001476:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001478:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800147c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800147e:	f107 0318 	add.w	r3, r7, #24
 8001482:	4618      	mov	r0, r3
 8001484:	f004 f830 	bl	80054e8 <HAL_RCCEx_PeriphCLKConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 800148e:	f7ff ff2f 	bl	80012f0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001492:	4b32      	ldr	r3, [pc, #200]	; (800155c <HAL_ADC_MspInit+0x208>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	4a30      	ldr	r2, [pc, #192]	; (800155c <HAL_ADC_MspInit+0x208>)
 800149a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800149c:	4b2f      	ldr	r3, [pc, #188]	; (800155c <HAL_ADC_MspInit+0x208>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d10b      	bne.n	80014bc <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80014a4:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <HAL_ADC_MspInit+0x20c>)
 80014a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a8:	4a2d      	ldr	r2, [pc, #180]	; (8001560 <HAL_ADC_MspInit+0x20c>)
 80014aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b0:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <HAL_ADC_MspInit+0x20c>)
 80014b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014bc:	4b28      	ldr	r3, [pc, #160]	; (8001560 <HAL_ADC_MspInit+0x20c>)
 80014be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c0:	4a27      	ldr	r2, [pc, #156]	; (8001560 <HAL_ADC_MspInit+0x20c>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c8:	4b25      	ldr	r3, [pc, #148]	; (8001560 <HAL_ADC_MspInit+0x20c>)
 80014ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014d4:	2330      	movs	r3, #48	; 0x30
 80014d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d8:	2303      	movs	r3, #3
 80014da:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014e4:	4619      	mov	r1, r3
 80014e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ea:	f003 f8b3 	bl	8004654 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80014ee:	4b20      	ldr	r3, [pc, #128]	; (8001570 <HAL_ADC_MspInit+0x21c>)
 80014f0:	4a20      	ldr	r2, [pc, #128]	; (8001574 <HAL_ADC_MspInit+0x220>)
 80014f2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <HAL_ADC_MspInit+0x21c>)
 80014f6:	2224      	movs	r2, #36	; 0x24
 80014f8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <HAL_ADC_MspInit+0x21c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <HAL_ADC_MspInit+0x21c>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <HAL_ADC_MspInit+0x21c>)
 8001508:	2280      	movs	r2, #128	; 0x80
 800150a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <HAL_ADC_MspInit+0x21c>)
 800150e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001512:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <HAL_ADC_MspInit+0x21c>)
 8001516:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800151a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <HAL_ADC_MspInit+0x21c>)
 800151e:	2220      	movs	r2, #32
 8001520:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <HAL_ADC_MspInit+0x21c>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001528:	4811      	ldr	r0, [pc, #68]	; (8001570 <HAL_ADC_MspInit+0x21c>)
 800152a:	f002 fc5b 	bl	8003de4 <HAL_DMA_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_ADC_MspInit+0x1e4>
      Error_Handler();
 8001534:	f7ff fedc 	bl	80012f0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <HAL_ADC_MspInit+0x21c>)
 800153c:	655a      	str	r2, [r3, #84]	; 0x54
 800153e:	4a0c      	ldr	r2, [pc, #48]	; (8001570 <HAL_ADC_MspInit+0x21c>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001544:	2200      	movs	r2, #0
 8001546:	2100      	movs	r1, #0
 8001548:	2012      	movs	r0, #18
 800154a:	f002 fc16 	bl	8003d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800154e:	2012      	movs	r0, #18
 8001550:	f002 fc2d 	bl	8003dae <HAL_NVIC_EnableIRQ>
}
 8001554:	bf00      	nop
 8001556:	3780      	adds	r7, #128	; 0x80
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000684 	.word	0x20000684
 8001560:	40021000 	.word	0x40021000
 8001564:	20000304 	.word	0x20000304
 8001568:	40020008 	.word	0x40020008
 800156c:	50000100 	.word	0x50000100
 8001570:	20000364 	.word	0x20000364
 8001574:	4002001c 	.word	0x4002001c

08001578 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b0a0      	sub	sp, #128	; 0x80
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001590:	f107 0318 	add.w	r3, r7, #24
 8001594:	2254      	movs	r2, #84	; 0x54
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f007 fc75 	bl	8008e88 <memset>
  if(hfdcan->Instance==FDCAN1)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a49      	ldr	r2, [pc, #292]	; (80016c8 <HAL_FDCAN_MspInit+0x150>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d143      	bne.n	8001630 <HAL_FDCAN_MspInit+0xb8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80015a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80015ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015b2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015b4:	f107 0318 	add.w	r3, r7, #24
 80015b8:	4618      	mov	r0, r3
 80015ba:	f003 ff95 	bl	80054e8 <HAL_RCCEx_PeriphCLKConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80015c4:	f7ff fe94 	bl	80012f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80015c8:	4b40      	ldr	r3, [pc, #256]	; (80016cc <HAL_FDCAN_MspInit+0x154>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	3301      	adds	r3, #1
 80015ce:	4a3f      	ldr	r2, [pc, #252]	; (80016cc <HAL_FDCAN_MspInit+0x154>)
 80015d0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80015d2:	4b3e      	ldr	r3, [pc, #248]	; (80016cc <HAL_FDCAN_MspInit+0x154>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d10b      	bne.n	80015f2 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80015da:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <HAL_FDCAN_MspInit+0x158>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	4a3c      	ldr	r2, [pc, #240]	; (80016d0 <HAL_FDCAN_MspInit+0x158>)
 80015e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015e4:	6593      	str	r3, [r2, #88]	; 0x58
 80015e6:	4b3a      	ldr	r3, [pc, #232]	; (80016d0 <HAL_FDCAN_MspInit+0x158>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	4b37      	ldr	r3, [pc, #220]	; (80016d0 <HAL_FDCAN_MspInit+0x158>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	4a36      	ldr	r2, [pc, #216]	; (80016d0 <HAL_FDCAN_MspInit+0x158>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fe:	4b34      	ldr	r3, [pc, #208]	; (80016d0 <HAL_FDCAN_MspInit+0x158>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800160a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800160e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800161c:	2309      	movs	r3, #9
 800161e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001620:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001624:	4619      	mov	r1, r3
 8001626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162a:	f003 f813 	bl	8004654 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800162e:	e046      	b.n	80016be <HAL_FDCAN_MspInit+0x146>
  else if(hfdcan->Instance==FDCAN2)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a27      	ldr	r2, [pc, #156]	; (80016d4 <HAL_FDCAN_MspInit+0x15c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d141      	bne.n	80016be <HAL_FDCAN_MspInit+0x146>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800163a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001644:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001646:	f107 0318 	add.w	r3, r7, #24
 800164a:	4618      	mov	r0, r3
 800164c:	f003 ff4c 	bl	80054e8 <HAL_RCCEx_PeriphCLKConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_FDCAN_MspInit+0xe2>
      Error_Handler();
 8001656:	f7ff fe4b 	bl	80012f0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800165a:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <HAL_FDCAN_MspInit+0x154>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	4a1a      	ldr	r2, [pc, #104]	; (80016cc <HAL_FDCAN_MspInit+0x154>)
 8001662:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001664:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_FDCAN_MspInit+0x154>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d10b      	bne.n	8001684 <HAL_FDCAN_MspInit+0x10c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_FDCAN_MspInit+0x158>)
 800166e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001670:	4a17      	ldr	r2, [pc, #92]	; (80016d0 <HAL_FDCAN_MspInit+0x158>)
 8001672:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001676:	6593      	str	r3, [r2, #88]	; 0x58
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_FDCAN_MspInit+0x158>)
 800167a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_FDCAN_MspInit+0x158>)
 8001686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001688:	4a11      	ldr	r2, [pc, #68]	; (80016d0 <HAL_FDCAN_MspInit+0x158>)
 800168a:	f043 0302 	orr.w	r3, r3, #2
 800168e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_FDCAN_MspInit+0x158>)
 8001692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800169c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80016a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80016ae:	2309      	movs	r3, #9
 80016b0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016b6:	4619      	mov	r1, r3
 80016b8:	4807      	ldr	r0, [pc, #28]	; (80016d8 <HAL_FDCAN_MspInit+0x160>)
 80016ba:	f002 ffcb 	bl	8004654 <HAL_GPIO_Init>
}
 80016be:	bf00      	nop
 80016c0:	3780      	adds	r7, #128	; 0x80
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40006400 	.word	0x40006400
 80016cc:	20000688 	.word	0x20000688
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40006800 	.word	0x40006800
 80016d8:	48000400 	.word	0x48000400

080016dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b098      	sub	sp, #96	; 0x60
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	2254      	movs	r2, #84	; 0x54
 80016ea:	2100      	movs	r1, #0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f007 fbcb 	bl	8008e88 <memset>
  if(hrtc->Instance==RTC)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a15      	ldr	r2, [pc, #84]	; (800174c <HAL_RTC_MspInit+0x70>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d123      	bne.n	8001744 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001700:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001702:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001706:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	4618      	mov	r0, r3
 800170e:	f003 feeb 	bl	80054e8 <HAL_RCCEx_PeriphCLKConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001718:	f7ff fdea 	bl	80012f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <HAL_RTC_MspInit+0x74>)
 800171e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <HAL_RTC_MspInit+0x74>)
 8001724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <HAL_RTC_MspInit+0x74>)
 800172e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001730:	4a07      	ldr	r2, [pc, #28]	; (8001750 <HAL_RTC_MspInit+0x74>)
 8001732:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001736:	6593      	str	r3, [r2, #88]	; 0x58
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_RTC_MspInit+0x74>)
 800173a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001744:	bf00      	nop
 8001746:	3760      	adds	r7, #96	; 0x60
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40002800 	.word	0x40002800
 8001750:	40021000 	.word	0x40021000

08001754 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <HAL_SPI_MspInit+0x7c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d128      	bne.n	80017c8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <HAL_SPI_MspInit+0x80>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177a:	4a16      	ldr	r2, [pc, #88]	; (80017d4 <HAL_SPI_MspInit+0x80>)
 800177c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001780:	6593      	str	r3, [r2, #88]	; 0x58
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <HAL_SPI_MspInit+0x80>)
 8001784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_SPI_MspInit+0x80>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	4a10      	ldr	r2, [pc, #64]	; (80017d4 <HAL_SPI_MspInit+0x80>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <HAL_SPI_MspInit+0x80>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80017a6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017b8:	2306      	movs	r3, #6
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <HAL_SPI_MspInit+0x84>)
 80017c4:	f002 ff46 	bl	8004654 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017c8:	bf00      	nop
 80017ca:	3728      	adds	r7, #40	; 0x28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40003c00 	.word	0x40003c00
 80017d4:	40021000 	.word	0x40021000
 80017d8:	48000800 	.word	0x48000800

080017dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017fc:	d10c      	bne.n	8001818 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017fe:	4b23      	ldr	r3, [pc, #140]	; (800188c <HAL_TIM_Base_MspInit+0xb0>)
 8001800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001802:	4a22      	ldr	r2, [pc, #136]	; (800188c <HAL_TIM_Base_MspInit+0xb0>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6593      	str	r3, [r2, #88]	; 0x58
 800180a:	4b20      	ldr	r3, [pc, #128]	; (800188c <HAL_TIM_Base_MspInit+0xb0>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001816:	e035      	b.n	8001884 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM15)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a1c      	ldr	r2, [pc, #112]	; (8001890 <HAL_TIM_Base_MspInit+0xb4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d130      	bne.n	8001884 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <HAL_TIM_Base_MspInit+0xb0>)
 8001824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001826:	4a19      	ldr	r2, [pc, #100]	; (800188c <HAL_TIM_Base_MspInit+0xb0>)
 8001828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182c:	6613      	str	r3, [r2, #96]	; 0x60
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <HAL_TIM_Base_MspInit+0xb0>)
 8001830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	4b14      	ldr	r3, [pc, #80]	; (800188c <HAL_TIM_Base_MspInit+0xb0>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	4a13      	ldr	r2, [pc, #76]	; (800188c <HAL_TIM_Base_MspInit+0xb0>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001846:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_TIM_Base_MspInit+0xb0>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001864:	2301      	movs	r3, #1
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	4619      	mov	r1, r3
 800186e:	4809      	ldr	r0, [pc, #36]	; (8001894 <HAL_TIM_Base_MspInit+0xb8>)
 8001870:	f002 fef0 	bl	8004654 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001874:	2200      	movs	r2, #0
 8001876:	2100      	movs	r1, #0
 8001878:	2018      	movs	r0, #24
 800187a:	f002 fa7e 	bl	8003d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800187e:	2018      	movs	r0, #24
 8001880:	f002 fa95 	bl	8003dae <HAL_NVIC_EnableIRQ>
}
 8001884:	bf00      	nop
 8001886:	3728      	adds	r7, #40	; 0x28
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40021000 	.word	0x40021000
 8001890:	40014000 	.word	0x40014000
 8001894:	48000400 	.word	0x48000400

08001898 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 030c 	add.w	r3, r7, #12
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018b8:	d11d      	bne.n	80018f6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	4b11      	ldr	r3, [pc, #68]	; (8001900 <HAL_TIM_MspPostInit+0x68>)
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	4a10      	ldr	r2, [pc, #64]	; (8001900 <HAL_TIM_MspPostInit+0x68>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <HAL_TIM_MspPostInit+0x68>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA10     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 80018e4:	230a      	movs	r3, #10
 80018e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	4619      	mov	r1, r3
 80018ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f2:	f002 feaf 	bl	8004654 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018f6:	bf00      	nop
 80018f8:	3720      	adds	r7, #32
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000

08001904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <NMI_Handler+0x4>

0800190a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190e:	e7fe      	b.n	800190e <HardFault_Handler+0x4>

08001910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <MemManage_Handler+0x4>

08001916 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <BusFault_Handler+0x4>

0800191c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <UsageFault_Handler+0x4>

08001922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001950:	f000 f8bc 	bl	8001acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}

08001958 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <DMA1_Channel1_IRQHandler+0x10>)
 800195e:	f002 fb64 	bl	800402a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000304 	.word	0x20000304

0800196c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <DMA1_Channel2_IRQHandler+0x10>)
 8001972:	f002 fb5a 	bl	800402a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000364 	.word	0x20000364

08001980 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001984:	4803      	ldr	r0, [pc, #12]	; (8001994 <ADC1_2_IRQHandler+0x14>)
 8001986:	f000 ff11 	bl	80027ac <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800198a:	4803      	ldr	r0, [pc, #12]	; (8001998 <ADC1_2_IRQHandler+0x18>)
 800198c:	f000 ff0e 	bl	80027ac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	2000022c 	.word	0x2000022c
 8001998:	20000298 	.word	0x20000298

0800199c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80019a2:	f005 fddf 	bl	8007564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000564 	.word	0x20000564

080019b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <SystemInit+0x20>)
 80019b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ba:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <SystemInit+0x20>)
 80019bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019d4:	480d      	ldr	r0, [pc, #52]	; (8001a0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d8:	480d      	ldr	r0, [pc, #52]	; (8001a10 <LoopForever+0x6>)
  ldr r1, =_edata
 80019da:	490e      	ldr	r1, [pc, #56]	; (8001a14 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019dc:	4a0e      	ldr	r2, [pc, #56]	; (8001a18 <LoopForever+0xe>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019e0:	e002      	b.n	80019e8 <LoopCopyDataInit>

080019e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e6:	3304      	adds	r3, #4

080019e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019ec:	d3f9      	bcc.n	80019e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ee:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <LoopForever+0x12>)
  ldr r4, =_ebss
 80019f0:	4c0b      	ldr	r4, [pc, #44]	; (8001a20 <LoopForever+0x16>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f4:	e001      	b.n	80019fa <LoopFillZerobss>

080019f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f8:	3204      	adds	r2, #4

080019fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019fc:	d3fb      	bcc.n	80019f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019fe:	f7ff ffd7 	bl	80019b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a02:	f007 fa1d 	bl	8008e40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a06:	f7fe ffb9 	bl	800097c <main>

08001a0a <LoopForever>:

LoopForever:
    b LoopForever
 8001a0a:	e7fe      	b.n	8001a0a <LoopForever>
  ldr   r0, =_estack
 8001a0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a18:	08008ec8 	.word	0x08008ec8
  ldr r2, =_sbss
 8001a1c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001a20:	20000690 	.word	0x20000690

08001a24 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a24:	e7fe      	b.n	8001a24 <ADC3_IRQHandler>

08001a26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a30:	2003      	movs	r0, #3
 8001a32:	f002 f997 	bl	8003d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a36:	2000      	movs	r0, #0
 8001a38:	f000 f80e 	bl	8001a58 <HAL_InitTick>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	71fb      	strb	r3, [r7, #7]
 8001a46:	e001      	b.n	8001a4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a48:	f7ff fc58 	bl	80012fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a4c:	79fb      	ldrb	r3, [r7, #7]

}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a64:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <HAL_InitTick+0x68>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d022      	beq.n	8001ab2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a6c:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_InitTick+0x6c>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <HAL_InitTick+0x68>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a80:	4618      	mov	r0, r3
 8001a82:	f002 f9a2 	bl	8003dca <HAL_SYSTICK_Config>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10f      	bne.n	8001aac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b0f      	cmp	r3, #15
 8001a90:	d809      	bhi.n	8001aa6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a92:	2200      	movs	r2, #0
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9a:	f002 f96e 	bl	8003d7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <HAL_InitTick+0x70>)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	e007      	b.n	8001ab6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	73fb      	strb	r3, [r7, #15]
 8001aaa:	e004      	b.n	8001ab6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
 8001ab0:	e001      	b.n	8001ab6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000008 	.word	0x20000008
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000004 	.word	0x20000004

08001acc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_IncTick+0x1c>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_IncTick+0x20>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4413      	add	r3, r2
 8001ada:	4a03      	ldr	r2, [pc, #12]	; (8001ae8 <HAL_IncTick+0x1c>)
 8001adc:	6013      	str	r3, [r2, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	2000068c 	.word	0x2000068c
 8001aec:	20000008 	.word	0x20000008

08001af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return uwTick;
 8001af4:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <HAL_GetTick+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	2000068c 	.word	0x2000068c

08001b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b10:	f7ff ffee 	bl	8001af0 <HAL_GetTick>
 8001b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b20:	d004      	beq.n	8001b2c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_Delay+0x40>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4413      	add	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b2c:	bf00      	nop
 8001b2e:	f7ff ffdf 	bl	8001af0 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d8f7      	bhi.n	8001b2e <HAL_Delay+0x26>
  {
  }
}
 8001b3e:	bf00      	nop
 8001b40:	bf00      	nop
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000008 	.word	0x20000008

08001b4c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001b5c:	4904      	ldr	r1, [pc, #16]	; (8001b70 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	600b      	str	r3, [r1, #0]
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	40010030 	.word	0x40010030

08001b74 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f023 0202 	bic.w	r2, r3, #2
 8001b84:	4904      	ldr	r1, [pc, #16]	; (8001b98 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	600b      	str	r3, [r1, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	40010030 	.word	0x40010030

08001b9c <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a0e      	ldr	r2, [pc, #56]	; (8001be0 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001bae:	f7ff ff9f 	bl	8001af0 <HAL_GetTick>
 8001bb2:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8001bb4:	e008      	b.n	8001bc8 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8001bb6:	f7ff ff9b 	bl	8001af0 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b0a      	cmp	r3, #10
 8001bc2:	d901      	bls.n	8001bc8 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e006      	b.n	8001bd6 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0308 	and.w	r3, r3, #8
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40010030 	.word	0x40010030

08001be4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	609a      	str	r2, [r3, #8]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	3360      	adds	r3, #96	; 0x60
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <LL_ADC_SetOffset+0x44>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c84:	bf00      	nop
 8001c86:	371c      	adds	r7, #28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	03fff000 	.word	0x03fff000

08001c94 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3360      	adds	r3, #96	; 0x60
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	3360      	adds	r3, #96	; 0x60
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001cea:	bf00      	nop
 8001cec:	371c      	adds	r7, #28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b087      	sub	sp, #28
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	3360      	adds	r3, #96	; 0x60
 8001d06:	461a      	mov	r2, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001d20:	bf00      	nop
 8001d22:	371c      	adds	r7, #28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3360      	adds	r3, #96	; 0x60
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	431a      	orrs	r2, r3
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001d56:	bf00      	nop
 8001d58:	371c      	adds	r7, #28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	615a      	str	r2, [r3, #20]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b087      	sub	sp, #28
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3330      	adds	r3, #48	; 0x30
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	0a1b      	lsrs	r3, r3, #8
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	4413      	add	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	f003 031f 	and.w	r3, r3, #31
 8001dd8:	211f      	movs	r1, #31
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	401a      	ands	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	0e9b      	lsrs	r3, r3, #26
 8001de6:	f003 011f 	and.w	r1, r3, #31
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	f003 031f 	and.w	r3, r3, #31
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	431a      	orrs	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001dfa:	bf00      	nop
 8001dfc:	371c      	adds	r7, #28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	3314      	adds	r3, #20
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	0e5b      	lsrs	r3, r3, #25
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	4413      	add	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	0d1b      	lsrs	r3, r3, #20
 8001e54:	f003 031f 	and.w	r3, r3, #31
 8001e58:	2107      	movs	r1, #7
 8001e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	401a      	ands	r2, r3
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	0d1b      	lsrs	r3, r3, #20
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	431a      	orrs	r2, r3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e76:	bf00      	nop
 8001e78:	371c      	adds	r7, #28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d10a      	bne.n	8001eae <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001eac:	e00a      	b.n	8001ec4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	401a      	ands	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	407f0000 	.word	0x407f0000

08001ed4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6093      	str	r3, [r2, #8]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f44:	d101      	bne.n	8001f4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f94:	d101      	bne.n	8001f9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fbc:	f043 0201 	orr.w	r2, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fe0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fe4:	f043 0202 	orr.w	r2, r3, #2
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <LL_ADC_IsEnabled+0x18>
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <LL_ADC_IsEnabled+0x1a>
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b02      	cmp	r3, #2
 8002030:	d101      	bne.n	8002036 <LL_ADC_IsDisableOngoing+0x18>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <LL_ADC_IsDisableOngoing+0x1a>
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002054:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002058:	f043 0204 	orr.w	r2, r3, #4
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b04      	cmp	r3, #4
 800207e:	d101      	bne.n	8002084 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d101      	bne.n	80020aa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b089      	sub	sp, #36	; 0x24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e1af      	b.n	8002432 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d109      	bne.n	80020f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff f937 	bl	8001354 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff19 	bl	8001f30 <LL_ADC_IsDeepPowerDownEnabled>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d004      	beq.n	800210e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff feff 	bl	8001f0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff ff34 	bl	8001f80 <LL_ADC_IsInternalRegulatorEnabled>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d115      	bne.n	800214a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff ff18 	bl	8001f58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002128:	4b9f      	ldr	r3, [pc, #636]	; (80023a8 <HAL_ADC_Init+0x2f0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	099b      	lsrs	r3, r3, #6
 800212e:	4a9f      	ldr	r2, [pc, #636]	; (80023ac <HAL_ADC_Init+0x2f4>)
 8002130:	fba2 2303 	umull	r2, r3, r2, r3
 8002134:	099b      	lsrs	r3, r3, #6
 8002136:	3301      	adds	r3, #1
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800213c:	e002      	b.n	8002144 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	3b01      	subs	r3, #1
 8002142:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f9      	bne.n	800213e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff16 	bl	8001f80 <LL_ADC_IsInternalRegulatorEnabled>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10d      	bne.n	8002176 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215e:	f043 0210 	orr.w	r2, r3, #16
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216a:	f043 0201 	orr.w	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff ff76 	bl	800206c <LL_ADC_REG_IsConversionOngoing>
 8002180:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	2b00      	cmp	r3, #0
 800218c:	f040 8148 	bne.w	8002420 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	2b00      	cmp	r3, #0
 8002194:	f040 8144 	bne.w	8002420 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80021a0:	f043 0202 	orr.w	r2, r3, #2
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff23 	bl	8001ff8 <LL_ADC_IsEnabled>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d141      	bne.n	800223c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021c0:	d004      	beq.n	80021cc <HAL_ADC_Init+0x114>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a7a      	ldr	r2, [pc, #488]	; (80023b0 <HAL_ADC_Init+0x2f8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d10f      	bne.n	80021ec <HAL_ADC_Init+0x134>
 80021cc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80021d0:	f7ff ff12 	bl	8001ff8 <LL_ADC_IsEnabled>
 80021d4:	4604      	mov	r4, r0
 80021d6:	4876      	ldr	r0, [pc, #472]	; (80023b0 <HAL_ADC_Init+0x2f8>)
 80021d8:	f7ff ff0e 	bl	8001ff8 <LL_ADC_IsEnabled>
 80021dc:	4603      	mov	r3, r0
 80021de:	4323      	orrs	r3, r4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf0c      	ite	eq
 80021e4:	2301      	moveq	r3, #1
 80021e6:	2300      	movne	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	e012      	b.n	8002212 <HAL_ADC_Init+0x15a>
 80021ec:	4871      	ldr	r0, [pc, #452]	; (80023b4 <HAL_ADC_Init+0x2fc>)
 80021ee:	f7ff ff03 	bl	8001ff8 <LL_ADC_IsEnabled>
 80021f2:	4604      	mov	r4, r0
 80021f4:	4870      	ldr	r0, [pc, #448]	; (80023b8 <HAL_ADC_Init+0x300>)
 80021f6:	f7ff feff 	bl	8001ff8 <LL_ADC_IsEnabled>
 80021fa:	4603      	mov	r3, r0
 80021fc:	431c      	orrs	r4, r3
 80021fe:	486f      	ldr	r0, [pc, #444]	; (80023bc <HAL_ADC_Init+0x304>)
 8002200:	f7ff fefa 	bl	8001ff8 <LL_ADC_IsEnabled>
 8002204:	4603      	mov	r3, r0
 8002206:	4323      	orrs	r3, r4
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf0c      	ite	eq
 800220c:	2301      	moveq	r3, #1
 800220e:	2300      	movne	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d012      	beq.n	800223c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800221e:	d004      	beq.n	800222a <HAL_ADC_Init+0x172>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a62      	ldr	r2, [pc, #392]	; (80023b0 <HAL_ADC_Init+0x2f8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d101      	bne.n	800222e <HAL_ADC_Init+0x176>
 800222a:	4a65      	ldr	r2, [pc, #404]	; (80023c0 <HAL_ADC_Init+0x308>)
 800222c:	e000      	b.n	8002230 <HAL_ADC_Init+0x178>
 800222e:	4a65      	ldr	r2, [pc, #404]	; (80023c4 <HAL_ADC_Init+0x30c>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4619      	mov	r1, r3
 8002236:	4610      	mov	r0, r2
 8002238:	f7ff fcd4 	bl	8001be4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	7f5b      	ldrb	r3, [r3, #29]
 8002240:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002246:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800224c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002252:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800225a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002266:	2b01      	cmp	r3, #1
 8002268:	d106      	bne.n	8002278 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226e:	3b01      	subs	r3, #1
 8002270:	045b      	lsls	r3, r3, #17
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227c:	2b00      	cmp	r3, #0
 800227e:	d009      	beq.n	8002294 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002284:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	4b4b      	ldr	r3, [pc, #300]	; (80023c8 <HAL_ADC_Init+0x310>)
 800229c:	4013      	ands	r3, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	69b9      	ldr	r1, [r7, #24]
 80022a4:	430b      	orrs	r3, r1
 80022a6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fed2 	bl	800206c <LL_ADC_REG_IsConversionOngoing>
 80022c8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fedf 	bl	8002092 <LL_ADC_INJ_IsConversionOngoing>
 80022d4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d17f      	bne.n	80023dc <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d17c      	bne.n	80023dc <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022e6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022ee:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022fe:	f023 0302 	bic.w	r3, r3, #2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	69b9      	ldr	r1, [r7, #24]
 8002308:	430b      	orrs	r3, r1
 800230a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d017      	beq.n	8002344 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002322:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800232c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002330:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6911      	ldr	r1, [r2, #16]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	430b      	orrs	r3, r1
 800233e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002342:	e013      	b.n	800236c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691a      	ldr	r2, [r3, #16]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002352:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002364:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002368:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002372:	2b01      	cmp	r3, #1
 8002374:	d12a      	bne.n	80023cc <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002380:	f023 0304 	bic.w	r3, r3, #4
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800238c:	4311      	orrs	r1, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002392:	4311      	orrs	r1, r2
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002398:	430a      	orrs	r2, r1
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0201 	orr.w	r2, r2, #1
 80023a4:	611a      	str	r2, [r3, #16]
 80023a6:	e019      	b.n	80023dc <HAL_ADC_Init+0x324>
 80023a8:	20000000 	.word	0x20000000
 80023ac:	053e2d63 	.word	0x053e2d63
 80023b0:	50000100 	.word	0x50000100
 80023b4:	50000400 	.word	0x50000400
 80023b8:	50000500 	.word	0x50000500
 80023bc:	50000600 	.word	0x50000600
 80023c0:	50000300 	.word	0x50000300
 80023c4:	50000700 	.word	0x50000700
 80023c8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0201 	bic.w	r2, r2, #1
 80023da:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d10c      	bne.n	80023fe <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f023 010f 	bic.w	r1, r3, #15
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	1e5a      	subs	r2, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	631a      	str	r2, [r3, #48]	; 0x30
 80023fc:	e007      	b.n	800240e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 020f 	bic.w	r2, r2, #15
 800240c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002412:	f023 0303 	bic.w	r3, r3, #3
 8002416:	f043 0201 	orr.w	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	65da      	str	r2, [r3, #92]	; 0x5c
 800241e:	e007      	b.n	8002430 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002424:	f043 0210 	orr.w	r2, r3, #16
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002430:	7ffb      	ldrb	r3, [r7, #31]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3724      	adds	r7, #36	; 0x24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd90      	pop	{r4, r7, pc}
 800243a:	bf00      	nop

0800243c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800244c:	d004      	beq.n	8002458 <HAL_ADC_Start+0x1c>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a67      	ldr	r2, [pc, #412]	; (80025f0 <HAL_ADC_Start+0x1b4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d101      	bne.n	800245c <HAL_ADC_Start+0x20>
 8002458:	4b66      	ldr	r3, [pc, #408]	; (80025f4 <HAL_ADC_Start+0x1b8>)
 800245a:	e000      	b.n	800245e <HAL_ADC_Start+0x22>
 800245c:	4b66      	ldr	r3, [pc, #408]	; (80025f8 <HAL_ADC_Start+0x1bc>)
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fd38 	bl	8001ed4 <LL_ADC_GetMultimode>
 8002464:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fdfe 	bl	800206c <LL_ADC_REG_IsConversionOngoing>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 80b4 	bne.w	80025e0 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_ADC_Start+0x4a>
 8002482:	2302      	movs	r3, #2
 8002484:	e0af      	b.n	80025e6 <HAL_ADC_Start+0x1aa>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f001 f854 	bl	800353c <ADC_Enable>
 8002494:	4603      	mov	r3, r0
 8002496:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002498:	7dfb      	ldrb	r3, [r7, #23]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f040 809b 	bne.w	80025d6 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a4d      	ldr	r2, [pc, #308]	; (80025f0 <HAL_ADC_Start+0x1b4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d009      	beq.n	80024d2 <HAL_ADC_Start+0x96>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a4e      	ldr	r2, [pc, #312]	; (80025fc <HAL_ADC_Start+0x1c0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d002      	beq.n	80024ce <HAL_ADC_Start+0x92>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	e003      	b.n	80024d6 <HAL_ADC_Start+0x9a>
 80024ce:	4b4c      	ldr	r3, [pc, #304]	; (8002600 <HAL_ADC_Start+0x1c4>)
 80024d0:	e001      	b.n	80024d6 <HAL_ADC_Start+0x9a>
 80024d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	4293      	cmp	r3, r2
 80024dc:	d002      	beq.n	80024e4 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d105      	bne.n	80024f0 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024fc:	d106      	bne.n	800250c <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002502:	f023 0206 	bic.w	r2, r3, #6
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	661a      	str	r2, [r3, #96]	; 0x60
 800250a:	e002      	b.n	8002512 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	221c      	movs	r2, #28
 8002518:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a32      	ldr	r2, [pc, #200]	; (80025f0 <HAL_ADC_Start+0x1b4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d009      	beq.n	8002540 <HAL_ADC_Start+0x104>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a32      	ldr	r2, [pc, #200]	; (80025fc <HAL_ADC_Start+0x1c0>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d002      	beq.n	800253c <HAL_ADC_Start+0x100>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	e003      	b.n	8002544 <HAL_ADC_Start+0x108>
 800253c:	4b30      	ldr	r3, [pc, #192]	; (8002600 <HAL_ADC_Start+0x1c4>)
 800253e:	e001      	b.n	8002544 <HAL_ADC_Start+0x108>
 8002540:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	4293      	cmp	r3, r2
 800254a:	d008      	beq.n	800255e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d005      	beq.n	800255e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	2b05      	cmp	r3, #5
 8002556:	d002      	beq.n	800255e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	2b09      	cmp	r3, #9
 800255c:	d114      	bne.n	8002588 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d007      	beq.n	800257c <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002570:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002574:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fd5f 	bl	8002044 <LL_ADC_REG_StartConversion>
 8002586:	e02d      	b.n	80025e4 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a15      	ldr	r2, [pc, #84]	; (80025f0 <HAL_ADC_Start+0x1b4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d009      	beq.n	80025b2 <HAL_ADC_Start+0x176>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a16      	ldr	r2, [pc, #88]	; (80025fc <HAL_ADC_Start+0x1c0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d002      	beq.n	80025ae <HAL_ADC_Start+0x172>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	e003      	b.n	80025b6 <HAL_ADC_Start+0x17a>
 80025ae:	4b14      	ldr	r3, [pc, #80]	; (8002600 <HAL_ADC_Start+0x1c4>)
 80025b0:	e001      	b.n	80025b6 <HAL_ADC_Start+0x17a>
 80025b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025b6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00f      	beq.n	80025e4 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80025d4:	e006      	b.n	80025e4 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80025de:	e001      	b.n	80025e4 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025e0:	2302      	movs	r3, #2
 80025e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80025e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	50000100 	.word	0x50000100
 80025f4:	50000300 	.word	0x50000300
 80025f8:	50000700 	.word	0x50000700
 80025fc:	50000500 	.word	0x50000500
 8002600:	50000400 	.word	0x50000400

08002604 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002618:	d004      	beq.n	8002624 <HAL_ADC_Start_DMA+0x20>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a5a      	ldr	r2, [pc, #360]	; (8002788 <HAL_ADC_Start_DMA+0x184>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d101      	bne.n	8002628 <HAL_ADC_Start_DMA+0x24>
 8002624:	4b59      	ldr	r3, [pc, #356]	; (800278c <HAL_ADC_Start_DMA+0x188>)
 8002626:	e000      	b.n	800262a <HAL_ADC_Start_DMA+0x26>
 8002628:	4b59      	ldr	r3, [pc, #356]	; (8002790 <HAL_ADC_Start_DMA+0x18c>)
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fc52 	bl	8001ed4 <LL_ADC_GetMultimode>
 8002630:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff fd18 	bl	800206c <LL_ADC_REG_IsConversionOngoing>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	f040 809b 	bne.w	800277a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_ADC_Start_DMA+0x4e>
 800264e:	2302      	movs	r3, #2
 8002650:	e096      	b.n	8002780 <HAL_ADC_Start_DMA+0x17c>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a4d      	ldr	r2, [pc, #308]	; (8002794 <HAL_ADC_Start_DMA+0x190>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d008      	beq.n	8002676 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	2b05      	cmp	r3, #5
 800266e:	d002      	beq.n	8002676 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	2b09      	cmp	r3, #9
 8002674:	d17a      	bne.n	800276c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 ff60 	bl	800353c <ADC_Enable>
 800267c:	4603      	mov	r3, r0
 800267e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002680:	7dfb      	ldrb	r3, [r7, #23]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d16d      	bne.n	8002762 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800268e:	f023 0301 	bic.w	r3, r3, #1
 8002692:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a3a      	ldr	r2, [pc, #232]	; (8002788 <HAL_ADC_Start_DMA+0x184>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d009      	beq.n	80026b8 <HAL_ADC_Start_DMA+0xb4>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a3b      	ldr	r2, [pc, #236]	; (8002798 <HAL_ADC_Start_DMA+0x194>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d002      	beq.n	80026b4 <HAL_ADC_Start_DMA+0xb0>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	e003      	b.n	80026bc <HAL_ADC_Start_DMA+0xb8>
 80026b4:	4b39      	ldr	r3, [pc, #228]	; (800279c <HAL_ADC_Start_DMA+0x198>)
 80026b6:	e001      	b.n	80026bc <HAL_ADC_Start_DMA+0xb8>
 80026b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d002      	beq.n	80026ca <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d105      	bne.n	80026d6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d006      	beq.n	80026f0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e6:	f023 0206 	bic.w	r2, r3, #6
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	661a      	str	r2, [r3, #96]	; 0x60
 80026ee:	e002      	b.n	80026f6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fa:	4a29      	ldr	r2, [pc, #164]	; (80027a0 <HAL_ADC_Start_DMA+0x19c>)
 80026fc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	4a28      	ldr	r2, [pc, #160]	; (80027a4 <HAL_ADC_Start_DMA+0x1a0>)
 8002704:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270a:	4a27      	ldr	r2, [pc, #156]	; (80027a8 <HAL_ADC_Start_DMA+0x1a4>)
 800270c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	221c      	movs	r2, #28
 8002714:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 0210 	orr.w	r2, r2, #16
 800272c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f042 0201 	orr.w	r2, r2, #1
 800273c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	3340      	adds	r3, #64	; 0x40
 8002748:	4619      	mov	r1, r3
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f001 fbf1 	bl	8003f34 <HAL_DMA_Start_IT>
 8002752:	4603      	mov	r3, r0
 8002754:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fc72 	bl	8002044 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002760:	e00d      	b.n	800277e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800276a:	e008      	b.n	800277e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002778:	e001      	b.n	800277e <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800277a:	2302      	movs	r3, #2
 800277c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800277e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	50000100 	.word	0x50000100
 800278c:	50000300 	.word	0x50000300
 8002790:	50000700 	.word	0x50000700
 8002794:	50000600 	.word	0x50000600
 8002798:	50000500 	.word	0x50000500
 800279c:	50000400 	.word	0x50000400
 80027a0:	080036bf 	.word	0x080036bf
 80027a4:	08003797 	.word	0x08003797
 80027a8:	080037b3 	.word	0x080037b3

080027ac <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08a      	sub	sp, #40	; 0x28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80027b4:	2300      	movs	r3, #0
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027d0:	d004      	beq.n	80027dc <HAL_ADC_IRQHandler+0x30>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a8e      	ldr	r2, [pc, #568]	; (8002a10 <HAL_ADC_IRQHandler+0x264>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d101      	bne.n	80027e0 <HAL_ADC_IRQHandler+0x34>
 80027dc:	4b8d      	ldr	r3, [pc, #564]	; (8002a14 <HAL_ADC_IRQHandler+0x268>)
 80027de:	e000      	b.n	80027e2 <HAL_ADC_IRQHandler+0x36>
 80027e0:	4b8d      	ldr	r3, [pc, #564]	; (8002a18 <HAL_ADC_IRQHandler+0x26c>)
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff fb76 	bl	8001ed4 <LL_ADC_GetMultimode>
 80027e8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d017      	beq.n	8002824 <HAL_ADC_IRQHandler+0x78>
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d012      	beq.n	8002824 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002802:	f003 0310 	and.w	r3, r3, #16
 8002806:	2b00      	cmp	r3, #0
 8002808:	d105      	bne.n	8002816 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f001 f8c2 	bl	80039a0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2202      	movs	r2, #2
 8002822:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b00      	cmp	r3, #0
 800282c:	d004      	beq.n	8002838 <HAL_ADC_IRQHandler+0x8c>
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10b      	bne.n	8002850 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 8094 	beq.w	800296c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 808e 	beq.w	800296c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b00      	cmp	r3, #0
 800285a:	d105      	bne.n	8002868 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002860:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fa8b 	bl	8001d88 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d072      	beq.n	800295e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a64      	ldr	r2, [pc, #400]	; (8002a10 <HAL_ADC_IRQHandler+0x264>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d009      	beq.n	8002896 <HAL_ADC_IRQHandler+0xea>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a65      	ldr	r2, [pc, #404]	; (8002a1c <HAL_ADC_IRQHandler+0x270>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d002      	beq.n	8002892 <HAL_ADC_IRQHandler+0xe6>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	e003      	b.n	800289a <HAL_ADC_IRQHandler+0xee>
 8002892:	4b63      	ldr	r3, [pc, #396]	; (8002a20 <HAL_ADC_IRQHandler+0x274>)
 8002894:	e001      	b.n	800289a <HAL_ADC_IRQHandler+0xee>
 8002896:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	4293      	cmp	r3, r2
 80028a0:	d008      	beq.n	80028b4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2b05      	cmp	r3, #5
 80028ac:	d002      	beq.n	80028b4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b09      	cmp	r3, #9
 80028b2:	d104      	bne.n	80028be <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	623b      	str	r3, [r7, #32]
 80028bc:	e014      	b.n	80028e8 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a53      	ldr	r2, [pc, #332]	; (8002a10 <HAL_ADC_IRQHandler+0x264>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d009      	beq.n	80028dc <HAL_ADC_IRQHandler+0x130>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a53      	ldr	r2, [pc, #332]	; (8002a1c <HAL_ADC_IRQHandler+0x270>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d002      	beq.n	80028d8 <HAL_ADC_IRQHandler+0x12c>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	e003      	b.n	80028e0 <HAL_ADC_IRQHandler+0x134>
 80028d8:	4b51      	ldr	r3, [pc, #324]	; (8002a20 <HAL_ADC_IRQHandler+0x274>)
 80028da:	e001      	b.n	80028e0 <HAL_ADC_IRQHandler+0x134>
 80028dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028e0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d135      	bne.n	800295e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d12e      	bne.n	800295e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fbb1 	bl	800206c <LL_ADC_REG_IsConversionOngoing>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d11a      	bne.n	8002946 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 020c 	bic.w	r2, r2, #12
 800291e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002924:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d112      	bne.n	800295e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293c:	f043 0201 	orr.w	r2, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	65da      	str	r2, [r3, #92]	; 0x5c
 8002944:	e00b      	b.n	800295e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294a:	f043 0210 	orr.w	r2, r3, #16
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002956:	f043 0201 	orr.w	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f984 	bl	8002c6c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	220c      	movs	r2, #12
 800296a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0320 	and.w	r3, r3, #32
 8002972:	2b00      	cmp	r3, #0
 8002974:	d004      	beq.n	8002980 <HAL_ADC_IRQHandler+0x1d4>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f003 0320 	and.w	r3, r3, #32
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10b      	bne.n	8002998 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80b3 	beq.w	8002af2 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 80ad 	beq.w	8002af2 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d105      	bne.n	80029b0 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fa26 	bl	8001e06 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80029ba:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff f9e1 	bl	8001d88 <LL_ADC_REG_IsTriggerSourceSWStart>
 80029c6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a10      	ldr	r2, [pc, #64]	; (8002a10 <HAL_ADC_IRQHandler+0x264>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d009      	beq.n	80029e6 <HAL_ADC_IRQHandler+0x23a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a11      	ldr	r2, [pc, #68]	; (8002a1c <HAL_ADC_IRQHandler+0x270>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d002      	beq.n	80029e2 <HAL_ADC_IRQHandler+0x236>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	e003      	b.n	80029ea <HAL_ADC_IRQHandler+0x23e>
 80029e2:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <HAL_ADC_IRQHandler+0x274>)
 80029e4:	e001      	b.n	80029ea <HAL_ADC_IRQHandler+0x23e>
 80029e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d008      	beq.n	8002a04 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d002      	beq.n	8002a04 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2b07      	cmp	r3, #7
 8002a02:	d10f      	bne.n	8002a24 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	623b      	str	r3, [r7, #32]
 8002a0c:	e01f      	b.n	8002a4e <HAL_ADC_IRQHandler+0x2a2>
 8002a0e:	bf00      	nop
 8002a10:	50000100 	.word	0x50000100
 8002a14:	50000300 	.word	0x50000300
 8002a18:	50000700 	.word	0x50000700
 8002a1c:	50000500 	.word	0x50000500
 8002a20:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a8b      	ldr	r2, [pc, #556]	; (8002c58 <HAL_ADC_IRQHandler+0x4ac>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d009      	beq.n	8002a42 <HAL_ADC_IRQHandler+0x296>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a8a      	ldr	r2, [pc, #552]	; (8002c5c <HAL_ADC_IRQHandler+0x4b0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d002      	beq.n	8002a3e <HAL_ADC_IRQHandler+0x292>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	e003      	b.n	8002a46 <HAL_ADC_IRQHandler+0x29a>
 8002a3e:	4b88      	ldr	r3, [pc, #544]	; (8002c60 <HAL_ADC_IRQHandler+0x4b4>)
 8002a40:	e001      	b.n	8002a46 <HAL_ADC_IRQHandler+0x29a>
 8002a42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a46:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d047      	beq.n	8002ae4 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <HAL_ADC_IRQHandler+0x2c2>
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d03f      	beq.n	8002ae4 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d13a      	bne.n	8002ae4 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a78:	2b40      	cmp	r3, #64	; 0x40
 8002a7a:	d133      	bne.n	8002ae4 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d12e      	bne.n	8002ae4 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fb01 	bl	8002092 <LL_ADC_INJ_IsConversionOngoing>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d11a      	bne.n	8002acc <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002aa4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d112      	bne.n	8002ae4 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac2:	f043 0201 	orr.w	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002aca:	e00b      	b.n	8002ae4 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad0:	f043 0210 	orr.w	r2, r3, #16
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002adc:	f043 0201 	orr.w	r2, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 ff33 	bl	8003950 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2260      	movs	r2, #96	; 0x60
 8002af0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d011      	beq.n	8002b20 <HAL_ADC_IRQHandler+0x374>
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00c      	beq.n	8002b20 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f8be 	bl	8002c94 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2280      	movs	r2, #128	; 0x80
 8002b1e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d012      	beq.n	8002b50 <HAL_ADC_IRQHandler+0x3a4>
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00d      	beq.n	8002b50 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b38:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 ff19 	bl	8003978 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d012      	beq.n	8002b80 <HAL_ADC_IRQHandler+0x3d4>
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00d      	beq.n	8002b80 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b68:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 ff0b 	bl	800398c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b7e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d043      	beq.n	8002c12 <HAL_ADC_IRQHandler+0x466>
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d03e      	beq.n	8002c12 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba0:	e021      	b.n	8002be6 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d015      	beq.n	8002bd4 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bb0:	d004      	beq.n	8002bbc <HAL_ADC_IRQHandler+0x410>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a28      	ldr	r2, [pc, #160]	; (8002c58 <HAL_ADC_IRQHandler+0x4ac>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d101      	bne.n	8002bc0 <HAL_ADC_IRQHandler+0x414>
 8002bbc:	4b29      	ldr	r3, [pc, #164]	; (8002c64 <HAL_ADC_IRQHandler+0x4b8>)
 8002bbe:	e000      	b.n	8002bc2 <HAL_ADC_IRQHandler+0x416>
 8002bc0:	4b29      	ldr	r3, [pc, #164]	; (8002c68 <HAL_ADC_IRQHandler+0x4bc>)
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff f994 	bl	8001ef0 <LL_ADC_GetMultiDMATransfer>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00b      	beq.n	8002be6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd2:	e008      	b.n	8002be6 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002be2:	2301      	movs	r3, #1
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d10e      	bne.n	8002c0a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bfc:	f043 0202 	orr.w	r2, r3, #2
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f84f 	bl	8002ca8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2210      	movs	r2, #16
 8002c10:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d018      	beq.n	8002c4e <HAL_ADC_IRQHandler+0x4a2>
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d013      	beq.n	8002c4e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c36:	f043 0208 	orr.w	r2, r3, #8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c46:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fe8b 	bl	8003964 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002c4e:	bf00      	nop
 8002c50:	3728      	adds	r7, #40	; 0x28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	50000100 	.word	0x50000100
 8002c5c:	50000500 	.word	0x50000500
 8002c60:	50000400 	.word	0x50000400
 8002c64:	50000300 	.word	0x50000300
 8002c68:	50000700 	.word	0x50000700

08002c6c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b0b6      	sub	sp, #216	; 0xd8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d102      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x24>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	f000 bc13 	b.w	8003506 <HAL_ADC_ConfigChannel+0x84a>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff f9bd 	bl	800206c <LL_ADC_REG_IsConversionOngoing>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f040 83f3 	bne.w	80034e0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	6859      	ldr	r1, [r3, #4]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	f7ff f851 	bl	8001dae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff f9ab 	bl	800206c <LL_ADC_REG_IsConversionOngoing>
 8002d16:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff f9b7 	bl	8002092 <LL_ADC_INJ_IsConversionOngoing>
 8002d24:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f040 81d9 	bne.w	80030e4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f040 81d4 	bne.w	80030e4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d44:	d10f      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	4619      	mov	r1, r3
 8002d52:	f7ff f86b 	bl	8001e2c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe ffff 	bl	8001d62 <LL_ADC_SetSamplingTimeCommonConfig>
 8002d64:	e00e      	b.n	8002d84 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	6819      	ldr	r1, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	461a      	mov	r2, r3
 8002d74:	f7ff f85a 	bl	8001e2c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fe ffef 	bl	8001d62 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	695a      	ldr	r2, [r3, #20]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	08db      	lsrs	r3, r3, #3
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d022      	beq.n	8002dec <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6818      	ldr	r0, [r3, #0]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	6919      	ldr	r1, [r3, #16]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002db6:	f7fe ff49 	bl	8001c4c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6818      	ldr	r0, [r3, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	6919      	ldr	r1, [r3, #16]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f7fe ff95 	bl	8001cf6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	6919      	ldr	r1, [r3, #16]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	7f1b      	ldrb	r3, [r3, #28]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d102      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x126>
 8002ddc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002de0:	e000      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x128>
 8002de2:	2300      	movs	r3, #0
 8002de4:	461a      	mov	r2, r3
 8002de6:	f7fe ffa1 	bl	8001d2c <LL_ADC_SetOffsetSaturation>
 8002dea:	e17b      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2100      	movs	r1, #0
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fe ff4e 	bl	8001c94 <LL_ADC_GetOffsetChannel>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10a      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x15c>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2100      	movs	r1, #0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe ff43 	bl	8001c94 <LL_ADC_GetOffsetChannel>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	0e9b      	lsrs	r3, r3, #26
 8002e12:	f003 021f 	and.w	r2, r3, #31
 8002e16:	e01e      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x19a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe ff38 	bl	8001c94 <LL_ADC_GetOffsetChannel>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e2e:	fa93 f3a3 	rbit	r3, r3
 8002e32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002e46:	2320      	movs	r3, #32
 8002e48:	e004      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002e4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e4e:	fab3 f383 	clz	r3, r3
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d105      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x1b2>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	0e9b      	lsrs	r3, r3, #26
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	e018      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x1e4>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e7a:	fa93 f3a3 	rbit	r3, r3
 8002e7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002e82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002e8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002e92:	2320      	movs	r3, #32
 8002e94:	e004      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002e96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e9a:	fab3 f383 	clz	r3, r3
 8002e9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d106      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe ff07 	bl	8001cc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fe feeb 	bl	8001c94 <LL_ADC_GetOffsetChannel>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10a      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x222>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2101      	movs	r1, #1
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fe fee0 	bl	8001c94 <LL_ADC_GetOffsetChannel>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	0e9b      	lsrs	r3, r3, #26
 8002ed8:	f003 021f 	and.w	r2, r3, #31
 8002edc:	e01e      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x260>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe fed5 	bl	8001c94 <LL_ADC_GetOffsetChannel>
 8002eea:	4603      	mov	r3, r0
 8002eec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002efc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002f04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002f0c:	2320      	movs	r3, #32
 8002f0e:	e004      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002f10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d105      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x278>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	0e9b      	lsrs	r3, r3, #26
 8002f2e:	f003 031f 	and.w	r3, r3, #31
 8002f32:	e018      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x2aa>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002f48:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002f50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002f58:	2320      	movs	r3, #32
 8002f5a:	e004      	b.n	8002f66 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002f5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f60:	fab3 f383 	clz	r3, r3
 8002f64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d106      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2101      	movs	r1, #1
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe fea4 	bl	8001cc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2102      	movs	r1, #2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fe fe88 	bl	8001c94 <LL_ADC_GetOffsetChannel>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10a      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x2e8>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2102      	movs	r1, #2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fe fe7d 	bl	8001c94 <LL_ADC_GetOffsetChannel>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	0e9b      	lsrs	r3, r3, #26
 8002f9e:	f003 021f 	and.w	r2, r3, #31
 8002fa2:	e01e      	b.n	8002fe2 <HAL_ADC_ConfigChannel+0x326>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2102      	movs	r1, #2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fe fe72 	bl	8001c94 <LL_ADC_GetOffsetChannel>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002fc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002fca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002fd2:	2320      	movs	r3, #32
 8002fd4:	e004      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002fd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fda:	fab3 f383 	clz	r3, r3
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d105      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x33e>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	0e9b      	lsrs	r3, r3, #26
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	e016      	b.n	8003028 <HAL_ADC_ConfigChannel+0x36c>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003006:	fa93 f3a3 	rbit	r3, r3
 800300a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800300c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800300e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003012:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800301a:	2320      	movs	r3, #32
 800301c:	e004      	b.n	8003028 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800301e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003022:	fab3 f383 	clz	r3, r3
 8003026:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003028:	429a      	cmp	r2, r3
 800302a:	d106      	bne.n	800303a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2200      	movs	r2, #0
 8003032:	2102      	movs	r1, #2
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe fe43 	bl	8001cc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2103      	movs	r1, #3
 8003040:	4618      	mov	r0, r3
 8003042:	f7fe fe27 	bl	8001c94 <LL_ADC_GetOffsetChannel>
 8003046:	4603      	mov	r3, r0
 8003048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x3aa>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2103      	movs	r1, #3
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe fe1c 	bl	8001c94 <LL_ADC_GetOffsetChannel>
 800305c:	4603      	mov	r3, r0
 800305e:	0e9b      	lsrs	r3, r3, #26
 8003060:	f003 021f 	and.w	r2, r3, #31
 8003064:	e017      	b.n	8003096 <HAL_ADC_ConfigChannel+0x3da>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2103      	movs	r1, #3
 800306c:	4618      	mov	r0, r3
 800306e:	f7fe fe11 	bl	8001c94 <LL_ADC_GetOffsetChannel>
 8003072:	4603      	mov	r3, r0
 8003074:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003078:	fa93 f3a3 	rbit	r3, r3
 800307c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800307e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003080:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003082:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003088:	2320      	movs	r3, #32
 800308a:	e003      	b.n	8003094 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800308c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800308e:	fab3 f383 	clz	r3, r3
 8003092:	b2db      	uxtb	r3, r3
 8003094:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d105      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x3f2>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	0e9b      	lsrs	r3, r3, #26
 80030a8:	f003 031f 	and.w	r3, r3, #31
 80030ac:	e011      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x416>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030b6:	fa93 f3a3 	rbit	r3, r3
 80030ba:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80030bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030be:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80030c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80030c6:	2320      	movs	r3, #32
 80030c8:	e003      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80030ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030cc:	fab3 f383 	clz	r3, r3
 80030d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d106      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2200      	movs	r2, #0
 80030dc:	2103      	movs	r1, #3
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe fdee 	bl	8001cc0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fe ff85 	bl	8001ff8 <LL_ADC_IsEnabled>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f040 813d 	bne.w	8003370 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6819      	ldr	r1, [r3, #0]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	461a      	mov	r2, r3
 8003104:	f7fe febe 	bl	8001e84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	4aa2      	ldr	r2, [pc, #648]	; (8003398 <HAL_ADC_ConfigChannel+0x6dc>)
 800310e:	4293      	cmp	r3, r2
 8003110:	f040 812e 	bne.w	8003370 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10b      	bne.n	800313c <HAL_ADC_ConfigChannel+0x480>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	0e9b      	lsrs	r3, r3, #26
 800312a:	3301      	adds	r3, #1
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	2b09      	cmp	r3, #9
 8003132:	bf94      	ite	ls
 8003134:	2301      	movls	r3, #1
 8003136:	2300      	movhi	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	e019      	b.n	8003170 <HAL_ADC_ConfigChannel+0x4b4>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800314a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800314c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800314e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003154:	2320      	movs	r3, #32
 8003156:	e003      	b.n	8003160 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003158:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800315a:	fab3 f383 	clz	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	3301      	adds	r3, #1
 8003162:	f003 031f 	and.w	r3, r3, #31
 8003166:	2b09      	cmp	r3, #9
 8003168:	bf94      	ite	ls
 800316a:	2301      	movls	r3, #1
 800316c:	2300      	movhi	r3, #0
 800316e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003170:	2b00      	cmp	r3, #0
 8003172:	d079      	beq.n	8003268 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800317c:	2b00      	cmp	r3, #0
 800317e:	d107      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x4d4>
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	0e9b      	lsrs	r3, r3, #26
 8003186:	3301      	adds	r3, #1
 8003188:	069b      	lsls	r3, r3, #26
 800318a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800318e:	e015      	b.n	80031bc <HAL_ADC_ConfigChannel+0x500>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800319e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80031a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80031a8:	2320      	movs	r3, #32
 80031aa:	e003      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80031ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	3301      	adds	r3, #1
 80031b6:	069b      	lsls	r3, r3, #26
 80031b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d109      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x520>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	0e9b      	lsrs	r3, r3, #26
 80031ce:	3301      	adds	r3, #1
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	2101      	movs	r1, #1
 80031d6:	fa01 f303 	lsl.w	r3, r1, r3
 80031da:	e017      	b.n	800320c <HAL_ADC_ConfigChannel+0x550>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031e4:	fa93 f3a3 	rbit	r3, r3
 80031e8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80031ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80031ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80031f4:	2320      	movs	r3, #32
 80031f6:	e003      	b.n	8003200 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80031f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031fa:	fab3 f383 	clz	r3, r3
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	3301      	adds	r3, #1
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	2101      	movs	r1, #1
 8003208:	fa01 f303 	lsl.w	r3, r1, r3
 800320c:	ea42 0103 	orr.w	r1, r2, r3
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10a      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x576>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	0e9b      	lsrs	r3, r3, #26
 8003222:	3301      	adds	r3, #1
 8003224:	f003 021f 	and.w	r2, r3, #31
 8003228:	4613      	mov	r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4413      	add	r3, r2
 800322e:	051b      	lsls	r3, r3, #20
 8003230:	e018      	b.n	8003264 <HAL_ADC_ConfigChannel+0x5a8>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323a:	fa93 f3a3 	rbit	r3, r3
 800323e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003242:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800324a:	2320      	movs	r3, #32
 800324c:	e003      	b.n	8003256 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800324e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003250:	fab3 f383 	clz	r3, r3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	3301      	adds	r3, #1
 8003258:	f003 021f 	and.w	r2, r3, #31
 800325c:	4613      	mov	r3, r2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4413      	add	r3, r2
 8003262:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003264:	430b      	orrs	r3, r1
 8003266:	e07e      	b.n	8003366 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003270:	2b00      	cmp	r3, #0
 8003272:	d107      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x5c8>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	0e9b      	lsrs	r3, r3, #26
 800327a:	3301      	adds	r3, #1
 800327c:	069b      	lsls	r3, r3, #26
 800327e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003282:	e015      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x5f4>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003294:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800329c:	2320      	movs	r3, #32
 800329e:	e003      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80032a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a2:	fab3 f383 	clz	r3, r3
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	3301      	adds	r3, #1
 80032aa:	069b      	lsls	r3, r3, #26
 80032ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d109      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x614>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	0e9b      	lsrs	r3, r3, #26
 80032c2:	3301      	adds	r3, #1
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	2101      	movs	r1, #1
 80032ca:	fa01 f303 	lsl.w	r3, r1, r3
 80032ce:	e017      	b.n	8003300 <HAL_ADC_ConfigChannel+0x644>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	fa93 f3a3 	rbit	r3, r3
 80032dc:	61fb      	str	r3, [r7, #28]
  return result;
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80032e8:	2320      	movs	r3, #32
 80032ea:	e003      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	3301      	adds	r3, #1
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	2101      	movs	r1, #1
 80032fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003300:	ea42 0103 	orr.w	r1, r2, r3
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10d      	bne.n	800332c <HAL_ADC_ConfigChannel+0x670>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	0e9b      	lsrs	r3, r3, #26
 8003316:	3301      	adds	r3, #1
 8003318:	f003 021f 	and.w	r2, r3, #31
 800331c:	4613      	mov	r3, r2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	4413      	add	r3, r2
 8003322:	3b1e      	subs	r3, #30
 8003324:	051b      	lsls	r3, r3, #20
 8003326:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800332a:	e01b      	b.n	8003364 <HAL_ADC_ConfigChannel+0x6a8>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	fa93 f3a3 	rbit	r3, r3
 8003338:	613b      	str	r3, [r7, #16]
  return result;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003344:	2320      	movs	r3, #32
 8003346:	e003      	b.n	8003350 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	fab3 f383 	clz	r3, r3
 800334e:	b2db      	uxtb	r3, r3
 8003350:	3301      	adds	r3, #1
 8003352:	f003 021f 	and.w	r2, r3, #31
 8003356:	4613      	mov	r3, r2
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	4413      	add	r3, r2
 800335c:	3b1e      	subs	r3, #30
 800335e:	051b      	lsls	r3, r3, #20
 8003360:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003364:	430b      	orrs	r3, r1
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	6892      	ldr	r2, [r2, #8]
 800336a:	4619      	mov	r1, r3
 800336c:	f7fe fd5e 	bl	8001e2c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4b09      	ldr	r3, [pc, #36]	; (800339c <HAL_ADC_ConfigChannel+0x6e0>)
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80be 	beq.w	80034fa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003386:	d004      	beq.n	8003392 <HAL_ADC_ConfigChannel+0x6d6>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a04      	ldr	r2, [pc, #16]	; (80033a0 <HAL_ADC_ConfigChannel+0x6e4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d10a      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x6ec>
 8003392:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <HAL_ADC_ConfigChannel+0x6e8>)
 8003394:	e009      	b.n	80033aa <HAL_ADC_ConfigChannel+0x6ee>
 8003396:	bf00      	nop
 8003398:	407f0000 	.word	0x407f0000
 800339c:	80080000 	.word	0x80080000
 80033a0:	50000100 	.word	0x50000100
 80033a4:	50000300 	.word	0x50000300
 80033a8:	4b59      	ldr	r3, [pc, #356]	; (8003510 <HAL_ADC_ConfigChannel+0x854>)
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fe fc40 	bl	8001c30 <LL_ADC_GetCommonPathInternalCh>
 80033b0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a56      	ldr	r2, [pc, #344]	; (8003514 <HAL_ADC_ConfigChannel+0x858>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d004      	beq.n	80033c8 <HAL_ADC_ConfigChannel+0x70c>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a55      	ldr	r2, [pc, #340]	; (8003518 <HAL_ADC_ConfigChannel+0x85c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d13a      	bne.n	800343e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d134      	bne.n	800343e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033dc:	d005      	beq.n	80033ea <HAL_ADC_ConfigChannel+0x72e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a4e      	ldr	r2, [pc, #312]	; (800351c <HAL_ADC_ConfigChannel+0x860>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	f040 8085 	bne.w	80034f4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033f2:	d004      	beq.n	80033fe <HAL_ADC_ConfigChannel+0x742>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a49      	ldr	r2, [pc, #292]	; (8003520 <HAL_ADC_ConfigChannel+0x864>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d101      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x746>
 80033fe:	4a49      	ldr	r2, [pc, #292]	; (8003524 <HAL_ADC_ConfigChannel+0x868>)
 8003400:	e000      	b.n	8003404 <HAL_ADC_ConfigChannel+0x748>
 8003402:	4a43      	ldr	r2, [pc, #268]	; (8003510 <HAL_ADC_ConfigChannel+0x854>)
 8003404:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003408:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800340c:	4619      	mov	r1, r3
 800340e:	4610      	mov	r0, r2
 8003410:	f7fe fbfb 	bl	8001c0a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003414:	4b44      	ldr	r3, [pc, #272]	; (8003528 <HAL_ADC_ConfigChannel+0x86c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	099b      	lsrs	r3, r3, #6
 800341a:	4a44      	ldr	r2, [pc, #272]	; (800352c <HAL_ADC_ConfigChannel+0x870>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	099b      	lsrs	r3, r3, #6
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	4613      	mov	r3, r2
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800342e:	e002      	b.n	8003436 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	3b01      	subs	r3, #1
 8003434:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f9      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800343c:	e05a      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a3b      	ldr	r2, [pc, #236]	; (8003530 <HAL_ADC_ConfigChannel+0x874>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d125      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x7d8>
 8003448:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800344c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d11f      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a31      	ldr	r2, [pc, #196]	; (8003520 <HAL_ADC_ConfigChannel+0x864>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d104      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x7ac>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a34      	ldr	r2, [pc, #208]	; (8003534 <HAL_ADC_ConfigChannel+0x878>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d047      	beq.n	80034f8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003470:	d004      	beq.n	800347c <HAL_ADC_ConfigChannel+0x7c0>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a2a      	ldr	r2, [pc, #168]	; (8003520 <HAL_ADC_ConfigChannel+0x864>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d101      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x7c4>
 800347c:	4a29      	ldr	r2, [pc, #164]	; (8003524 <HAL_ADC_ConfigChannel+0x868>)
 800347e:	e000      	b.n	8003482 <HAL_ADC_ConfigChannel+0x7c6>
 8003480:	4a23      	ldr	r2, [pc, #140]	; (8003510 <HAL_ADC_ConfigChannel+0x854>)
 8003482:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800348a:	4619      	mov	r1, r3
 800348c:	4610      	mov	r0, r2
 800348e:	f7fe fbbc 	bl	8001c0a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003492:	e031      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a27      	ldr	r2, [pc, #156]	; (8003538 <HAL_ADC_ConfigChannel+0x87c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d12d      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800349e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d127      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a1c      	ldr	r2, [pc, #112]	; (8003520 <HAL_ADC_ConfigChannel+0x864>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d022      	beq.n	80034fa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034bc:	d004      	beq.n	80034c8 <HAL_ADC_ConfigChannel+0x80c>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a17      	ldr	r2, [pc, #92]	; (8003520 <HAL_ADC_ConfigChannel+0x864>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d101      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x810>
 80034c8:	4a16      	ldr	r2, [pc, #88]	; (8003524 <HAL_ADC_ConfigChannel+0x868>)
 80034ca:	e000      	b.n	80034ce <HAL_ADC_ConfigChannel+0x812>
 80034cc:	4a10      	ldr	r2, [pc, #64]	; (8003510 <HAL_ADC_ConfigChannel+0x854>)
 80034ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034d6:	4619      	mov	r1, r3
 80034d8:	4610      	mov	r0, r2
 80034da:	f7fe fb96 	bl	8001c0a <LL_ADC_SetCommonPathInternalCh>
 80034de:	e00c      	b.n	80034fa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e4:	f043 0220 	orr.w	r2, r3, #32
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80034f2:	e002      	b.n	80034fa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034f4:	bf00      	nop
 80034f6:	e000      	b.n	80034fa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003502:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003506:	4618      	mov	r0, r3
 8003508:	37d8      	adds	r7, #216	; 0xd8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	50000700 	.word	0x50000700
 8003514:	c3210000 	.word	0xc3210000
 8003518:	90c00010 	.word	0x90c00010
 800351c:	50000600 	.word	0x50000600
 8003520:	50000100 	.word	0x50000100
 8003524:	50000300 	.word	0x50000300
 8003528:	20000000 	.word	0x20000000
 800352c:	053e2d63 	.word	0x053e2d63
 8003530:	c7520000 	.word	0xc7520000
 8003534:	50000500 	.word	0x50000500
 8003538:	cb840000 	.word	0xcb840000

0800353c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f7fe fd55 	bl	8001ff8 <LL_ADC_IsEnabled>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d14d      	bne.n	80035f0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	4b28      	ldr	r3, [pc, #160]	; (80035fc <ADC_Enable+0xc0>)
 800355c:	4013      	ands	r3, r2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00d      	beq.n	800357e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003566:	f043 0210 	orr.w	r2, r3, #16
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003572:	f043 0201 	orr.w	r2, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e039      	b.n	80035f2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7fe fd10 	bl	8001fa8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003588:	f7fe fab2 	bl	8001af0 <HAL_GetTick>
 800358c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800358e:	e028      	b.n	80035e2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4618      	mov	r0, r3
 8003596:	f7fe fd2f 	bl	8001ff8 <LL_ADC_IsEnabled>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d104      	bne.n	80035aa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fe fcff 	bl	8001fa8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035aa:	f7fe faa1 	bl	8001af0 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d914      	bls.n	80035e2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d00d      	beq.n	80035e2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ca:	f043 0210 	orr.w	r2, r3, #16
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d6:	f043 0201 	orr.w	r2, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e007      	b.n	80035f2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d1cf      	bne.n	8003590 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	8000003f 	.word	0x8000003f

08003600 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f7fe fd06 	bl	800201e <LL_ADC_IsDisableOngoing>
 8003612:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f7fe fced 	bl	8001ff8 <LL_ADC_IsEnabled>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d047      	beq.n	80036b4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d144      	bne.n	80036b4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 030d 	and.w	r3, r3, #13
 8003634:	2b01      	cmp	r3, #1
 8003636:	d10c      	bne.n	8003652 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f7fe fcc7 	bl	8001fd0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2203      	movs	r2, #3
 8003648:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800364a:	f7fe fa51 	bl	8001af0 <HAL_GetTick>
 800364e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003650:	e029      	b.n	80036a6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003656:	f043 0210 	orr.w	r2, r3, #16
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003662:	f043 0201 	orr.w	r2, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e023      	b.n	80036b6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800366e:	f7fe fa3f 	bl	8001af0 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d914      	bls.n	80036a6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00d      	beq.n	80036a6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368e:	f043 0210 	orr.w	r2, r3, #16
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369a:	f043 0201 	orr.w	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e007      	b.n	80036b6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1dc      	bne.n	800366e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d14b      	bne.n	8003770 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d021      	beq.n	8003736 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fe fb46 	bl	8001d88 <LL_ADC_REG_IsTriggerSourceSWStart>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d032      	beq.n	8003768 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d12b      	bne.n	8003768 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003714:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d11f      	bne.n	8003768 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372c:	f043 0201 	orr.w	r2, r3, #1
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	65da      	str	r2, [r3, #92]	; 0x5c
 8003734:	e018      	b.n	8003768 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d111      	bne.n	8003768 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003748:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d105      	bne.n	8003768 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003760:	f043 0201 	orr.w	r2, r3, #1
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f7ff fa7f 	bl	8002c6c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800376e:	e00e      	b.n	800378e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f7ff fa93 	bl	8002ca8 <HAL_ADC_ErrorCallback>
}
 8003782:	e004      	b.n	800378e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	4798      	blx	r3
}
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f7ff fa6b 	bl	8002c80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037be:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d0:	f043 0204 	orr.w	r2, r3, #4
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f7ff fa65 	bl	8002ca8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037de:	bf00      	nop
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <LL_ADC_IsEnabled>:
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <LL_ADC_IsEnabled+0x18>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <LL_ADC_IsEnabled+0x1a>
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <LL_ADC_StartCalibration>:
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800381e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003828:	4313      	orrs	r3, r2
 800382a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	609a      	str	r2, [r3, #8]
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <LL_ADC_IsCalibrationOnGoing>:
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800384e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003852:	d101      	bne.n	8003858 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <LL_ADC_REG_IsConversionOngoing>:
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b04      	cmp	r3, #4
 8003878:	d101      	bne.n	800387e <LL_ADC_REG_IsConversionOngoing+0x18>
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003896:	2300      	movs	r3, #0
 8003898:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_ADCEx_Calibration_Start+0x1c>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e04d      	b.n	8003944 <HAL_ADCEx_Calibration_Start+0xb8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff fea5 	bl	8003600 <ADC_Disable>
 80038b6:	4603      	mov	r3, r0
 80038b8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d136      	bne.n	800392e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038c8:	f023 0302 	bic.w	r3, r3, #2
 80038cc:	f043 0202 	orr.w	r2, r3, #2
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6839      	ldr	r1, [r7, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff ff96 	bl	800380c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80038e0:	e014      	b.n	800390c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	3301      	adds	r3, #1
 80038e6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	4a18      	ldr	r2, [pc, #96]	; (800394c <HAL_ADCEx_Calibration_Start+0xc0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d90d      	bls.n	800390c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f4:	f023 0312 	bic.w	r3, r3, #18
 80038f8:	f043 0210 	orr.w	r2, r3, #16
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e01b      	b.n	8003944 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff ff94 	bl	800383e <LL_ADC_IsCalibrationOnGoing>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e2      	bne.n	80038e2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003920:	f023 0303 	bic.w	r3, r3, #3
 8003924:	f043 0201 	orr.w	r2, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	65da      	str	r2, [r3, #92]	; 0x5c
 800392c:	e005      	b.n	800393a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003932:	f043 0210 	orr.w	r2, r3, #16
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003942:	7bfb      	ldrb	r3, [r7, #15]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	0004de01 	.word	0x0004de01

08003950 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80039b4:	b590      	push	{r4, r7, lr}
 80039b6:	b0a1      	sub	sp, #132	; 0x84
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e0e7      	b.n	8003ba2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80039da:	2300      	movs	r3, #0
 80039dc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80039de:	2300      	movs	r3, #0
 80039e0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039ea:	d102      	bne.n	80039f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80039ec:	4b6f      	ldr	r3, [pc, #444]	; (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039ee:	60bb      	str	r3, [r7, #8]
 80039f0:	e009      	b.n	8003a06 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a6e      	ldr	r2, [pc, #440]	; (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d102      	bne.n	8003a02 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80039fc:	4b6d      	ldr	r3, [pc, #436]	; (8003bb4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80039fe:	60bb      	str	r3, [r7, #8]
 8003a00:	e001      	b.n	8003a06 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10b      	bne.n	8003a24 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a10:	f043 0220 	orr.w	r2, r3, #32
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0be      	b.n	8003ba2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff ff1d 	bl	8003866 <LL_ADC_REG_IsConversionOngoing>
 8003a2c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff ff17 	bl	8003866 <LL_ADC_REG_IsConversionOngoing>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f040 80a0 	bne.w	8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003a40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f040 809c 	bne.w	8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a50:	d004      	beq.n	8003a5c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a55      	ldr	r2, [pc, #340]	; (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d101      	bne.n	8003a60 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003a5c:	4b56      	ldr	r3, [pc, #344]	; (8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003a5e:	e000      	b.n	8003a62 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003a60:	4b56      	ldr	r3, [pc, #344]	; (8003bbc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003a62:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d04b      	beq.n	8003b04 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	6859      	ldr	r1, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a7e:	035b      	lsls	r3, r3, #13
 8003a80:	430b      	orrs	r3, r1
 8003a82:	431a      	orrs	r2, r3
 8003a84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a86:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a90:	d004      	beq.n	8003a9c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a45      	ldr	r2, [pc, #276]	; (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d10f      	bne.n	8003abc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003a9c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003aa0:	f7ff fea1 	bl	80037e6 <LL_ADC_IsEnabled>
 8003aa4:	4604      	mov	r4, r0
 8003aa6:	4841      	ldr	r0, [pc, #260]	; (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003aa8:	f7ff fe9d 	bl	80037e6 <LL_ADC_IsEnabled>
 8003aac:	4603      	mov	r3, r0
 8003aae:	4323      	orrs	r3, r4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2301      	moveq	r3, #1
 8003ab6:	2300      	movne	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	e012      	b.n	8003ae2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003abc:	483c      	ldr	r0, [pc, #240]	; (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003abe:	f7ff fe92 	bl	80037e6 <LL_ADC_IsEnabled>
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	483b      	ldr	r0, [pc, #236]	; (8003bb4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003ac6:	f7ff fe8e 	bl	80037e6 <LL_ADC_IsEnabled>
 8003aca:	4603      	mov	r3, r0
 8003acc:	431c      	orrs	r4, r3
 8003ace:	483c      	ldr	r0, [pc, #240]	; (8003bc0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003ad0:	f7ff fe89 	bl	80037e6 <LL_ADC_IsEnabled>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	4323      	orrs	r3, r4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	bf0c      	ite	eq
 8003adc:	2301      	moveq	r3, #1
 8003ade:	2300      	movne	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d056      	beq.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ae6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003aee:	f023 030f 	bic.w	r3, r3, #15
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	6811      	ldr	r1, [r2, #0]
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	6892      	ldr	r2, [r2, #8]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	431a      	orrs	r2, r3
 8003afe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b00:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b02:	e047      	b.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b0e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b18:	d004      	beq.n	8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a23      	ldr	r2, [pc, #140]	; (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d10f      	bne.n	8003b44 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003b24:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003b28:	f7ff fe5d 	bl	80037e6 <LL_ADC_IsEnabled>
 8003b2c:	4604      	mov	r4, r0
 8003b2e:	481f      	ldr	r0, [pc, #124]	; (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b30:	f7ff fe59 	bl	80037e6 <LL_ADC_IsEnabled>
 8003b34:	4603      	mov	r3, r0
 8003b36:	4323      	orrs	r3, r4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	bf0c      	ite	eq
 8003b3c:	2301      	moveq	r3, #1
 8003b3e:	2300      	movne	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	e012      	b.n	8003b6a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003b44:	481a      	ldr	r0, [pc, #104]	; (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b46:	f7ff fe4e 	bl	80037e6 <LL_ADC_IsEnabled>
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	4819      	ldr	r0, [pc, #100]	; (8003bb4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b4e:	f7ff fe4a 	bl	80037e6 <LL_ADC_IsEnabled>
 8003b52:	4603      	mov	r3, r0
 8003b54:	431c      	orrs	r4, r3
 8003b56:	481a      	ldr	r0, [pc, #104]	; (8003bc0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003b58:	f7ff fe45 	bl	80037e6 <LL_ADC_IsEnabled>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	4323      	orrs	r3, r4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	bf0c      	ite	eq
 8003b64:	2301      	moveq	r3, #1
 8003b66:	2300      	movne	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d012      	beq.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b76:	f023 030f 	bic.w	r3, r3, #15
 8003b7a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b7c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b7e:	e009      	b.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b84:	f043 0220 	orr.w	r2, r3, #32
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003b92:	e000      	b.n	8003b96 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b94:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b9e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3784      	adds	r7, #132	; 0x84
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd90      	pop	{r4, r7, pc}
 8003baa:	bf00      	nop
 8003bac:	50000100 	.word	0x50000100
 8003bb0:	50000400 	.word	0x50000400
 8003bb4:	50000500 	.word	0x50000500
 8003bb8:	50000300 	.word	0x50000300
 8003bbc:	50000700 	.word	0x50000700
 8003bc0:	50000600 	.word	0x50000600

08003bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003be0:	4013      	ands	r3, r2
 8003be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bf6:	4a04      	ldr	r2, [pc, #16]	; (8003c08 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	60d3      	str	r3, [r2, #12]
}
 8003bfc:	bf00      	nop
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	e000ed00 	.word	0xe000ed00

08003c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c10:	4b04      	ldr	r3, [pc, #16]	; (8003c24 <__NVIC_GetPriorityGrouping+0x18>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	0a1b      	lsrs	r3, r3, #8
 8003c16:	f003 0307 	and.w	r3, r3, #7
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	e000ed00 	.word	0xe000ed00

08003c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	db0b      	blt.n	8003c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	f003 021f 	and.w	r2, r3, #31
 8003c40:	4907      	ldr	r1, [pc, #28]	; (8003c60 <__NVIC_EnableIRQ+0x38>)
 8003c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	2001      	movs	r0, #1
 8003c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	e000e100 	.word	0xe000e100

08003c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	6039      	str	r1, [r7, #0]
 8003c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	db0a      	blt.n	8003c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	490c      	ldr	r1, [pc, #48]	; (8003cb0 <__NVIC_SetPriority+0x4c>)
 8003c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c82:	0112      	lsls	r2, r2, #4
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	440b      	add	r3, r1
 8003c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c8c:	e00a      	b.n	8003ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	4908      	ldr	r1, [pc, #32]	; (8003cb4 <__NVIC_SetPriority+0x50>)
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	3b04      	subs	r3, #4
 8003c9c:	0112      	lsls	r2, r2, #4
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	761a      	strb	r2, [r3, #24]
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	e000e100 	.word	0xe000e100
 8003cb4:	e000ed00 	.word	0xe000ed00

08003cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b089      	sub	sp, #36	; 0x24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f1c3 0307 	rsb	r3, r3, #7
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	bf28      	it	cs
 8003cd6:	2304      	movcs	r3, #4
 8003cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	2b06      	cmp	r3, #6
 8003ce0:	d902      	bls.n	8003ce8 <NVIC_EncodePriority+0x30>
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	3b03      	subs	r3, #3
 8003ce6:	e000      	b.n	8003cea <NVIC_EncodePriority+0x32>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cec:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43da      	mvns	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d00:	f04f 31ff 	mov.w	r1, #4294967295
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0a:	43d9      	mvns	r1, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d10:	4313      	orrs	r3, r2
         );
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3724      	adds	r7, #36	; 0x24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
	...

08003d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d30:	d301      	bcc.n	8003d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d32:	2301      	movs	r3, #1
 8003d34:	e00f      	b.n	8003d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d36:	4a0a      	ldr	r2, [pc, #40]	; (8003d60 <SysTick_Config+0x40>)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d3e:	210f      	movs	r1, #15
 8003d40:	f04f 30ff 	mov.w	r0, #4294967295
 8003d44:	f7ff ff8e 	bl	8003c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <SysTick_Config+0x40>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d4e:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <SysTick_Config+0x40>)
 8003d50:	2207      	movs	r2, #7
 8003d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	e000e010 	.word	0xe000e010

08003d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7ff ff29 	bl	8003bc4 <__NVIC_SetPriorityGrouping>
}
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b086      	sub	sp, #24
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	4603      	mov	r3, r0
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]
 8003d86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d88:	f7ff ff40 	bl	8003c0c <__NVIC_GetPriorityGrouping>
 8003d8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	6978      	ldr	r0, [r7, #20]
 8003d94:	f7ff ff90 	bl	8003cb8 <NVIC_EncodePriority>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d9e:	4611      	mov	r1, r2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff ff5f 	bl	8003c64 <__NVIC_SetPriority>
}
 8003da6:	bf00      	nop
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	4603      	mov	r3, r0
 8003db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff ff33 	bl	8003c28 <__NVIC_EnableIRQ>
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff ffa4 	bl	8003d20 <SysTick_Config>
 8003dd8:	4603      	mov	r3, r0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e08d      	b.n	8003f12 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4b47      	ldr	r3, [pc, #284]	; (8003f1c <HAL_DMA_Init+0x138>)
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d80f      	bhi.n	8003e22 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	461a      	mov	r2, r3
 8003e08:	4b45      	ldr	r3, [pc, #276]	; (8003f20 <HAL_DMA_Init+0x13c>)
 8003e0a:	4413      	add	r3, r2
 8003e0c:	4a45      	ldr	r2, [pc, #276]	; (8003f24 <HAL_DMA_Init+0x140>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	091b      	lsrs	r3, r3, #4
 8003e14:	009a      	lsls	r2, r3, #2
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a42      	ldr	r2, [pc, #264]	; (8003f28 <HAL_DMA_Init+0x144>)
 8003e1e:	641a      	str	r2, [r3, #64]	; 0x40
 8003e20:	e00e      	b.n	8003e40 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	461a      	mov	r2, r3
 8003e28:	4b40      	ldr	r3, [pc, #256]	; (8003f2c <HAL_DMA_Init+0x148>)
 8003e2a:	4413      	add	r3, r2
 8003e2c:	4a3d      	ldr	r2, [pc, #244]	; (8003f24 <HAL_DMA_Init+0x140>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	091b      	lsrs	r3, r3, #4
 8003e34:	009a      	lsls	r2, r3, #2
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a3c      	ldr	r2, [pc, #240]	; (8003f30 <HAL_DMA_Init+0x14c>)
 8003e3e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f9b6 	bl	8004204 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ea0:	d102      	bne.n	8003ea8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ebc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d010      	beq.n	8003ee8 <HAL_DMA_Init+0x104>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d80c      	bhi.n	8003ee8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f9d6 	bl	8004280 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	e008      	b.n	8003efa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40020407 	.word	0x40020407
 8003f20:	bffdfff8 	.word	0xbffdfff8
 8003f24:	cccccccd 	.word	0xcccccccd
 8003f28:	40020000 	.word	0x40020000
 8003f2c:	bffdfbf8 	.word	0xbffdfbf8
 8003f30:	40020400 	.word	0x40020400

08003f34 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_DMA_Start_IT+0x20>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e066      	b.n	8004022 <HAL_DMA_Start_IT+0xee>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d155      	bne.n	8004014 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0201 	bic.w	r2, r2, #1
 8003f84:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	68b9      	ldr	r1, [r7, #8]
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 f8fb 	bl	8004188 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d008      	beq.n	8003fac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f042 020e 	orr.w	r2, r2, #14
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e00f      	b.n	8003fcc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0204 	bic.w	r2, r2, #4
 8003fba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 020a 	orr.w	r2, r2, #10
 8003fca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d007      	beq.n	8003fea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fe8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d007      	beq.n	8004002 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004000:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0201 	orr.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e005      	b.n	8004020 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800401c:	2302      	movs	r3, #2
 800401e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004020:	7dfb      	ldrb	r3, [r7, #23]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b084      	sub	sp, #16
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004046:	f003 031f 	and.w	r3, r3, #31
 800404a:	2204      	movs	r2, #4
 800404c:	409a      	lsls	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4013      	ands	r3, r2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d026      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x7a>
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d021      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b00      	cmp	r3, #0
 800406c:	d107      	bne.n	800407e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0204 	bic.w	r2, r2, #4
 800407c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004082:	f003 021f 	and.w	r2, r3, #31
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	2104      	movs	r1, #4
 800408c:	fa01 f202 	lsl.w	r2, r1, r2
 8004090:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	2b00      	cmp	r3, #0
 8004098:	d071      	beq.n	800417e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80040a2:	e06c      	b.n	800417e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a8:	f003 031f 	and.w	r3, r3, #31
 80040ac:	2202      	movs	r2, #2
 80040ae:	409a      	lsls	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d02e      	beq.n	8004116 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d029      	beq.n	8004116 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0320 	and.w	r3, r3, #32
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10b      	bne.n	80040e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 020a 	bic.w	r2, r2, #10
 80040de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ec:	f003 021f 	and.w	r2, r3, #31
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	2102      	movs	r1, #2
 80040f6:	fa01 f202 	lsl.w	r2, r1, r2
 80040fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	2b00      	cmp	r3, #0
 800410a:	d038      	beq.n	800417e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004114:	e033      	b.n	800417e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411a:	f003 031f 	and.w	r3, r3, #31
 800411e:	2208      	movs	r2, #8
 8004120:	409a      	lsls	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4013      	ands	r3, r2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d02a      	beq.n	8004180 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f003 0308 	and.w	r3, r3, #8
 8004130:	2b00      	cmp	r3, #0
 8004132:	d025      	beq.n	8004180 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 020e 	bic.w	r2, r2, #14
 8004142:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004148:	f003 021f 	and.w	r2, r3, #31
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	2101      	movs	r1, #1
 8004152:	fa01 f202 	lsl.w	r2, r1, r2
 8004156:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004172:	2b00      	cmp	r3, #0
 8004174:	d004      	beq.n	8004180 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800417e:	bf00      	nop
 8004180:	bf00      	nop
}
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800419e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d004      	beq.n	80041b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	f003 021f 	and.w	r2, r3, #31
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	2101      	movs	r1, #1
 80041c0:	fa01 f202 	lsl.w	r2, r1, r2
 80041c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2b10      	cmp	r3, #16
 80041d4:	d108      	bne.n	80041e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80041e6:	e007      	b.n	80041f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	60da      	str	r2, [r3, #12]
}
 80041f8:	bf00      	nop
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	461a      	mov	r2, r3
 8004212:	4b16      	ldr	r3, [pc, #88]	; (800426c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004214:	429a      	cmp	r2, r3
 8004216:	d802      	bhi.n	800421e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004218:	4b15      	ldr	r3, [pc, #84]	; (8004270 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	e001      	b.n	8004222 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800421e:	4b15      	ldr	r3, [pc, #84]	; (8004274 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004220:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	b2db      	uxtb	r3, r3
 800422c:	3b08      	subs	r3, #8
 800422e:	4a12      	ldr	r2, [pc, #72]	; (8004278 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004230:	fba2 2303 	umull	r2, r3, r2, r3
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423c:	089b      	lsrs	r3, r3, #2
 800423e:	009a      	lsls	r2, r3, #2
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4413      	add	r3, r2
 8004244:	461a      	mov	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a0b      	ldr	r2, [pc, #44]	; (800427c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800424e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	2201      	movs	r2, #1
 8004258:	409a      	lsls	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40020407 	.word	0x40020407
 8004270:	40020800 	.word	0x40020800
 8004274:	40020820 	.word	0x40020820
 8004278:	cccccccd 	.word	0xcccccccd
 800427c:	40020880 	.word	0x40020880

08004280 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004294:	4413      	add	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	461a      	mov	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a08      	ldr	r2, [pc, #32]	; (80042c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80042a2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	f003 031f 	and.w	r3, r3, #31
 80042ac:	2201      	movs	r2, #1
 80042ae:	409a      	lsls	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80042b4:	bf00      	nop
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	1000823f 	.word	0x1000823f
 80042c4:	40020940 	.word	0x40020940

080042c8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e147      	b.n	800456a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fd f942 	bl	8001578 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699a      	ldr	r2, [r3, #24]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0210 	bic.w	r2, r2, #16
 8004302:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004304:	f7fd fbf4 	bl	8001af0 <HAL_GetTick>
 8004308:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800430a:	e012      	b.n	8004332 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800430c:	f7fd fbf0 	bl	8001af0 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b0a      	cmp	r3, #10
 8004318:	d90b      	bls.n	8004332 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800431e:	f043 0201 	orr.w	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2203      	movs	r2, #3
 800432a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e11b      	b.n	800456a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b08      	cmp	r3, #8
 800433e:	d0e5      	beq.n	800430c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004350:	f7fd fbce 	bl	8001af0 <HAL_GetTick>
 8004354:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004356:	e012      	b.n	800437e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004358:	f7fd fbca 	bl	8001af0 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b0a      	cmp	r3, #10
 8004364:	d90b      	bls.n	800437e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800436a:	f043 0201 	orr.w	r2, r3, #1
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2203      	movs	r2, #3
 8004376:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e0f5      	b.n	800456a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0e5      	beq.n	8004358 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699a      	ldr	r2, [r3, #24]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0202 	orr.w	r2, r2, #2
 800439a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a74      	ldr	r2, [pc, #464]	; (8004574 <HAL_FDCAN_Init+0x2ac>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d103      	bne.n	80043ae <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80043a6:	4a74      	ldr	r2, [pc, #464]	; (8004578 <HAL_FDCAN_Init+0x2b0>)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	7c1b      	ldrb	r3, [r3, #16]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d108      	bne.n	80043c8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	699a      	ldr	r2, [r3, #24]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043c4:	619a      	str	r2, [r3, #24]
 80043c6:	e007      	b.n	80043d8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699a      	ldr	r2, [r3, #24]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043d6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	7c5b      	ldrb	r3, [r3, #17]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d108      	bne.n	80043f2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043ee:	619a      	str	r2, [r3, #24]
 80043f0:	e007      	b.n	8004402 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699a      	ldr	r2, [r3, #24]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004400:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	7c9b      	ldrb	r3, [r3, #18]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d108      	bne.n	800441c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699a      	ldr	r2, [r3, #24]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004418:	619a      	str	r2, [r3, #24]
 800441a:	e007      	b.n	800442c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800442a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699a      	ldr	r2, [r3, #24]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004450:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0210 	bic.w	r2, r2, #16
 8004460:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d108      	bne.n	800447c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699a      	ldr	r2, [r3, #24]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 0204 	orr.w	r2, r2, #4
 8004478:	619a      	str	r2, [r3, #24]
 800447a:	e02c      	b.n	80044d6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d028      	beq.n	80044d6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d01c      	beq.n	80044c6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699a      	ldr	r2, [r3, #24]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800449a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0210 	orr.w	r2, r2, #16
 80044aa:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	2b03      	cmp	r3, #3
 80044b2:	d110      	bne.n	80044d6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699a      	ldr	r2, [r3, #24]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0220 	orr.w	r2, r2, #32
 80044c2:	619a      	str	r2, [r3, #24]
 80044c4:	e007      	b.n	80044d6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	699a      	ldr	r2, [r3, #24]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 0220 	orr.w	r2, r2, #32
 80044d4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	3b01      	subs	r3, #1
 80044dc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80044e6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80044ee:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80044fe:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004500:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800450a:	d115      	bne.n	8004538 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004510:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004516:	3b01      	subs	r3, #1
 8004518:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800451a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	3b01      	subs	r3, #1
 8004522:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004524:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	3b01      	subs	r3, #1
 800452e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004534:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004536:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f814 	bl	800457c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40006400 	.word	0x40006400
 8004578:	40006500 	.word	0x40006500

0800457c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004584:	4b30      	ldr	r3, [pc, #192]	; (8004648 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8004586:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a2f      	ldr	r2, [pc, #188]	; (800464c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d103      	bne.n	800459a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004598:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a2c      	ldr	r2, [pc, #176]	; (8004650 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d103      	bne.n	80045ac <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80045aa:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ba:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c2:	041a      	lsls	r2, r3, #16
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045e0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	061a      	lsls	r2, r3, #24
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	e005      	b.n	800462e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	3304      	adds	r3, #4
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	429a      	cmp	r2, r3
 8004638:	d3f3      	bcc.n	8004622 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800463a:	bf00      	nop
 800463c:	bf00      	nop
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	4000a400 	.word	0x4000a400
 800464c:	40006800 	.word	0x40006800
 8004650:	40006c00 	.word	0x40006c00

08004654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004654:	b480      	push	{r7}
 8004656:	b087      	sub	sp, #28
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800465e:	2300      	movs	r3, #0
 8004660:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004662:	e15a      	b.n	800491a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	2101      	movs	r1, #1
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	fa01 f303 	lsl.w	r3, r1, r3
 8004670:	4013      	ands	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 814c 	beq.w	8004914 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f003 0303 	and.w	r3, r3, #3
 8004684:	2b01      	cmp	r3, #1
 8004686:	d005      	beq.n	8004694 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004690:	2b02      	cmp	r3, #2
 8004692:	d130      	bne.n	80046f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	2203      	movs	r2, #3
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	43db      	mvns	r3, r3
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	4013      	ands	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046ca:	2201      	movs	r2, #1
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	fa02 f303 	lsl.w	r3, r2, r3
 80046d2:	43db      	mvns	r3, r3
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4013      	ands	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	091b      	lsrs	r3, r3, #4
 80046e0:	f003 0201 	and.w	r2, r3, #1
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	2b03      	cmp	r3, #3
 8004700:	d017      	beq.n	8004732 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	2203      	movs	r2, #3
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	43db      	mvns	r3, r3
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4013      	ands	r3, r2
 8004718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	689a      	ldr	r2, [r3, #8]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	4313      	orrs	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d123      	bne.n	8004786 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	08da      	lsrs	r2, r3, #3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	3208      	adds	r2, #8
 8004746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800474a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	220f      	movs	r2, #15
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	43db      	mvns	r3, r3
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4013      	ands	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	fa02 f303 	lsl.w	r3, r2, r3
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	08da      	lsrs	r2, r3, #3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3208      	adds	r2, #8
 8004780:	6939      	ldr	r1, [r7, #16]
 8004782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	2203      	movs	r2, #3
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	43db      	mvns	r3, r3
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4013      	ands	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f003 0203 	and.w	r2, r3, #3
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 80a6 	beq.w	8004914 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047c8:	4b5b      	ldr	r3, [pc, #364]	; (8004938 <HAL_GPIO_Init+0x2e4>)
 80047ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047cc:	4a5a      	ldr	r2, [pc, #360]	; (8004938 <HAL_GPIO_Init+0x2e4>)
 80047ce:	f043 0301 	orr.w	r3, r3, #1
 80047d2:	6613      	str	r3, [r2, #96]	; 0x60
 80047d4:	4b58      	ldr	r3, [pc, #352]	; (8004938 <HAL_GPIO_Init+0x2e4>)
 80047d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047e0:	4a56      	ldr	r2, [pc, #344]	; (800493c <HAL_GPIO_Init+0x2e8>)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	089b      	lsrs	r3, r3, #2
 80047e6:	3302      	adds	r3, #2
 80047e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f003 0303 	and.w	r3, r3, #3
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	220f      	movs	r2, #15
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	43db      	mvns	r3, r3
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4013      	ands	r3, r2
 8004802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800480a:	d01f      	beq.n	800484c <HAL_GPIO_Init+0x1f8>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a4c      	ldr	r2, [pc, #304]	; (8004940 <HAL_GPIO_Init+0x2ec>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d019      	beq.n	8004848 <HAL_GPIO_Init+0x1f4>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a4b      	ldr	r2, [pc, #300]	; (8004944 <HAL_GPIO_Init+0x2f0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d013      	beq.n	8004844 <HAL_GPIO_Init+0x1f0>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a4a      	ldr	r2, [pc, #296]	; (8004948 <HAL_GPIO_Init+0x2f4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00d      	beq.n	8004840 <HAL_GPIO_Init+0x1ec>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a49      	ldr	r2, [pc, #292]	; (800494c <HAL_GPIO_Init+0x2f8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d007      	beq.n	800483c <HAL_GPIO_Init+0x1e8>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a48      	ldr	r2, [pc, #288]	; (8004950 <HAL_GPIO_Init+0x2fc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d101      	bne.n	8004838 <HAL_GPIO_Init+0x1e4>
 8004834:	2305      	movs	r3, #5
 8004836:	e00a      	b.n	800484e <HAL_GPIO_Init+0x1fa>
 8004838:	2306      	movs	r3, #6
 800483a:	e008      	b.n	800484e <HAL_GPIO_Init+0x1fa>
 800483c:	2304      	movs	r3, #4
 800483e:	e006      	b.n	800484e <HAL_GPIO_Init+0x1fa>
 8004840:	2303      	movs	r3, #3
 8004842:	e004      	b.n	800484e <HAL_GPIO_Init+0x1fa>
 8004844:	2302      	movs	r3, #2
 8004846:	e002      	b.n	800484e <HAL_GPIO_Init+0x1fa>
 8004848:	2301      	movs	r3, #1
 800484a:	e000      	b.n	800484e <HAL_GPIO_Init+0x1fa>
 800484c:	2300      	movs	r3, #0
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	f002 0203 	and.w	r2, r2, #3
 8004854:	0092      	lsls	r2, r2, #2
 8004856:	4093      	lsls	r3, r2
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800485e:	4937      	ldr	r1, [pc, #220]	; (800493c <HAL_GPIO_Init+0x2e8>)
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	089b      	lsrs	r3, r3, #2
 8004864:	3302      	adds	r3, #2
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800486c:	4b39      	ldr	r3, [pc, #228]	; (8004954 <HAL_GPIO_Init+0x300>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	43db      	mvns	r3, r3
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	4013      	ands	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4313      	orrs	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004890:	4a30      	ldr	r2, [pc, #192]	; (8004954 <HAL_GPIO_Init+0x300>)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004896:	4b2f      	ldr	r3, [pc, #188]	; (8004954 <HAL_GPIO_Init+0x300>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	43db      	mvns	r3, r3
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4013      	ands	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048ba:	4a26      	ldr	r2, [pc, #152]	; (8004954 <HAL_GPIO_Init+0x300>)
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80048c0:	4b24      	ldr	r3, [pc, #144]	; (8004954 <HAL_GPIO_Init+0x300>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	43db      	mvns	r3, r3
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	4013      	ands	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80048e4:	4a1b      	ldr	r2, [pc, #108]	; (8004954 <HAL_GPIO_Init+0x300>)
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80048ea:	4b1a      	ldr	r3, [pc, #104]	; (8004954 <HAL_GPIO_Init+0x300>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	43db      	mvns	r3, r3
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4013      	ands	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800490e:	4a11      	ldr	r2, [pc, #68]	; (8004954 <HAL_GPIO_Init+0x300>)
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	3301      	adds	r3, #1
 8004918:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	fa22 f303 	lsr.w	r3, r2, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	f47f ae9d 	bne.w	8004664 <HAL_GPIO_Init+0x10>
  }
}
 800492a:	bf00      	nop
 800492c:	bf00      	nop
 800492e:	371c      	adds	r7, #28
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	40021000 	.word	0x40021000
 800493c:	40010000 	.word	0x40010000
 8004940:	48000400 	.word	0x48000400
 8004944:	48000800 	.word	0x48000800
 8004948:	48000c00 	.word	0x48000c00
 800494c:	48001000 	.word	0x48001000
 8004950:	48001400 	.word	0x48001400
 8004954:	40010400 	.word	0x40010400

08004958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	807b      	strh	r3, [r7, #2]
 8004964:	4613      	mov	r3, r2
 8004966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004968:	787b      	ldrb	r3, [r7, #1]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800496e:	887a      	ldrh	r2, [r7, #2]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004974:	e002      	b.n	800497c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004976:	887a      	ldrh	r2, [r7, #2]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d141      	bne.n	8004a1a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004996:	4b4b      	ldr	r3, [pc, #300]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800499e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a2:	d131      	bne.n	8004a08 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049a4:	4b47      	ldr	r3, [pc, #284]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049aa:	4a46      	ldr	r2, [pc, #280]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049b4:	4b43      	ldr	r3, [pc, #268]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049bc:	4a41      	ldr	r2, [pc, #260]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049c4:	4b40      	ldr	r3, [pc, #256]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2232      	movs	r2, #50	; 0x32
 80049ca:	fb02 f303 	mul.w	r3, r2, r3
 80049ce:	4a3f      	ldr	r2, [pc, #252]	; (8004acc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80049d0:	fba2 2303 	umull	r2, r3, r2, r3
 80049d4:	0c9b      	lsrs	r3, r3, #18
 80049d6:	3301      	adds	r3, #1
 80049d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049da:	e002      	b.n	80049e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3b01      	subs	r3, #1
 80049e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049e2:	4b38      	ldr	r3, [pc, #224]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ee:	d102      	bne.n	80049f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1f2      	bne.n	80049dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049f6:	4b33      	ldr	r3, [pc, #204]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a02:	d158      	bne.n	8004ab6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e057      	b.n	8004ab8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a08:	4b2e      	ldr	r3, [pc, #184]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a0e:	4a2d      	ldr	r2, [pc, #180]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004a18:	e04d      	b.n	8004ab6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a20:	d141      	bne.n	8004aa6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a22:	4b28      	ldr	r3, [pc, #160]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2e:	d131      	bne.n	8004a94 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a30:	4b24      	ldr	r3, [pc, #144]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a36:	4a23      	ldr	r2, [pc, #140]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a40:	4b20      	ldr	r3, [pc, #128]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a48:	4a1e      	ldr	r2, [pc, #120]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a50:	4b1d      	ldr	r3, [pc, #116]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2232      	movs	r2, #50	; 0x32
 8004a56:	fb02 f303 	mul.w	r3, r2, r3
 8004a5a:	4a1c      	ldr	r2, [pc, #112]	; (8004acc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a60:	0c9b      	lsrs	r3, r3, #18
 8004a62:	3301      	adds	r3, #1
 8004a64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a66:	e002      	b.n	8004a6e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a6e:	4b15      	ldr	r3, [pc, #84]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a7a:	d102      	bne.n	8004a82 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1f2      	bne.n	8004a68 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a82:	4b10      	ldr	r3, [pc, #64]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8e:	d112      	bne.n	8004ab6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e011      	b.n	8004ab8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a94:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a9a:	4a0a      	ldr	r2, [pc, #40]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004aa4:	e007      	b.n	8004ab6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004aa6:	4b07      	ldr	r3, [pc, #28]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004aae:	4a05      	ldr	r2, [pc, #20]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ab0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ab4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	40007000 	.word	0x40007000
 8004ac8:	20000000 	.word	0x20000000
 8004acc:	431bde83 	.word	0x431bde83

08004ad0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004ad4:	4b05      	ldr	r3, [pc, #20]	; (8004aec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	4a04      	ldr	r2, [pc, #16]	; (8004aec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ade:	6093      	str	r3, [r2, #8]
}
 8004ae0:	bf00      	nop
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40007000 	.word	0x40007000

08004af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e306      	b.n	8005110 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d075      	beq.n	8004bfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b0e:	4b97      	ldr	r3, [pc, #604]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b18:	4b94      	ldr	r3, [pc, #592]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f003 0303 	and.w	r3, r3, #3
 8004b20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b0c      	cmp	r3, #12
 8004b26:	d102      	bne.n	8004b2e <HAL_RCC_OscConfig+0x3e>
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d002      	beq.n	8004b34 <HAL_RCC_OscConfig+0x44>
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d10b      	bne.n	8004b4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b34:	4b8d      	ldr	r3, [pc, #564]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d05b      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x108>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d157      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e2e1      	b.n	8005110 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b54:	d106      	bne.n	8004b64 <HAL_RCC_OscConfig+0x74>
 8004b56:	4b85      	ldr	r3, [pc, #532]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a84      	ldr	r2, [pc, #528]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	e01d      	b.n	8004ba0 <HAL_RCC_OscConfig+0xb0>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b6c:	d10c      	bne.n	8004b88 <HAL_RCC_OscConfig+0x98>
 8004b6e:	4b7f      	ldr	r3, [pc, #508]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a7e      	ldr	r2, [pc, #504]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	4b7c      	ldr	r3, [pc, #496]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a7b      	ldr	r2, [pc, #492]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	e00b      	b.n	8004ba0 <HAL_RCC_OscConfig+0xb0>
 8004b88:	4b78      	ldr	r3, [pc, #480]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a77      	ldr	r2, [pc, #476]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	4b75      	ldr	r3, [pc, #468]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a74      	ldr	r2, [pc, #464]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d013      	beq.n	8004bd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba8:	f7fc ffa2 	bl	8001af0 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb0:	f7fc ff9e 	bl	8001af0 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b64      	cmp	r3, #100	; 0x64
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e2a6      	b.n	8005110 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bc2:	4b6a      	ldr	r3, [pc, #424]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0f0      	beq.n	8004bb0 <HAL_RCC_OscConfig+0xc0>
 8004bce:	e014      	b.n	8004bfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd0:	f7fc ff8e 	bl	8001af0 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bd8:	f7fc ff8a 	bl	8001af0 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b64      	cmp	r3, #100	; 0x64
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e292      	b.n	8005110 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bea:	4b60      	ldr	r3, [pc, #384]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f0      	bne.n	8004bd8 <HAL_RCC_OscConfig+0xe8>
 8004bf6:	e000      	b.n	8004bfa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d075      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c06:	4b59      	ldr	r3, [pc, #356]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 030c 	and.w	r3, r3, #12
 8004c0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c10:	4b56      	ldr	r3, [pc, #344]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f003 0303 	and.w	r3, r3, #3
 8004c18:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	2b0c      	cmp	r3, #12
 8004c1e:	d102      	bne.n	8004c26 <HAL_RCC_OscConfig+0x136>
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d002      	beq.n	8004c2c <HAL_RCC_OscConfig+0x13c>
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d11f      	bne.n	8004c6c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c2c:	4b4f      	ldr	r3, [pc, #316]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d005      	beq.n	8004c44 <HAL_RCC_OscConfig+0x154>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e265      	b.n	8005110 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c44:	4b49      	ldr	r3, [pc, #292]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	061b      	lsls	r3, r3, #24
 8004c52:	4946      	ldr	r1, [pc, #280]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c58:	4b45      	ldr	r3, [pc, #276]	; (8004d70 <HAL_RCC_OscConfig+0x280>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fc fefb 	bl	8001a58 <HAL_InitTick>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d043      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e251      	b.n	8005110 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d023      	beq.n	8004cbc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c74:	4b3d      	ldr	r3, [pc, #244]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a3c      	ldr	r2, [pc, #240]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c80:	f7fc ff36 	bl	8001af0 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c88:	f7fc ff32 	bl	8001af0 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e23a      	b.n	8005110 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c9a:	4b34      	ldr	r3, [pc, #208]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0f0      	beq.n	8004c88 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca6:	4b31      	ldr	r3, [pc, #196]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	061b      	lsls	r3, r3, #24
 8004cb4:	492d      	ldr	r1, [pc, #180]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	604b      	str	r3, [r1, #4]
 8004cba:	e01a      	b.n	8004cf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cbc:	4b2b      	ldr	r3, [pc, #172]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a2a      	ldr	r2, [pc, #168]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004cc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc8:	f7fc ff12 	bl	8001af0 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd0:	f7fc ff0e 	bl	8001af0 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e216      	b.n	8005110 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ce2:	4b22      	ldr	r3, [pc, #136]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f0      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x1e0>
 8004cee:	e000      	b.n	8004cf2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cf0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0308 	and.w	r3, r3, #8
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d041      	beq.n	8004d82 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d01c      	beq.n	8004d40 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d06:	4b19      	ldr	r3, [pc, #100]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d0c:	4a17      	ldr	r2, [pc, #92]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004d0e:	f043 0301 	orr.w	r3, r3, #1
 8004d12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d16:	f7fc feeb 	bl	8001af0 <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d1c:	e008      	b.n	8004d30 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d1e:	f7fc fee7 	bl	8001af0 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e1ef      	b.n	8005110 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d30:	4b0e      	ldr	r3, [pc, #56]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0ef      	beq.n	8004d1e <HAL_RCC_OscConfig+0x22e>
 8004d3e:	e020      	b.n	8004d82 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d40:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d46:	4a09      	ldr	r2, [pc, #36]	; (8004d6c <HAL_RCC_OscConfig+0x27c>)
 8004d48:	f023 0301 	bic.w	r3, r3, #1
 8004d4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d50:	f7fc fece 	bl	8001af0 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d56:	e00d      	b.n	8004d74 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d58:	f7fc feca 	bl	8001af0 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d906      	bls.n	8004d74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e1d2      	b.n	8005110 <HAL_RCC_OscConfig+0x620>
 8004d6a:	bf00      	nop
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d74:	4b8c      	ldr	r3, [pc, #560]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1ea      	bne.n	8004d58 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 80a6 	beq.w	8004edc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d90:	2300      	movs	r3, #0
 8004d92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d94:	4b84      	ldr	r3, [pc, #528]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <HAL_RCC_OscConfig+0x2b4>
 8004da0:	2301      	movs	r3, #1
 8004da2:	e000      	b.n	8004da6 <HAL_RCC_OscConfig+0x2b6>
 8004da4:	2300      	movs	r3, #0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00d      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004daa:	4b7f      	ldr	r3, [pc, #508]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dae:	4a7e      	ldr	r2, [pc, #504]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db4:	6593      	str	r3, [r2, #88]	; 0x58
 8004db6:	4b7c      	ldr	r3, [pc, #496]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dc6:	4b79      	ldr	r3, [pc, #484]	; (8004fac <HAL_RCC_OscConfig+0x4bc>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d118      	bne.n	8004e04 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dd2:	4b76      	ldr	r3, [pc, #472]	; (8004fac <HAL_RCC_OscConfig+0x4bc>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a75      	ldr	r2, [pc, #468]	; (8004fac <HAL_RCC_OscConfig+0x4bc>)
 8004dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dde:	f7fc fe87 	bl	8001af0 <HAL_GetTick>
 8004de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004de6:	f7fc fe83 	bl	8001af0 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e18b      	b.n	8005110 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004df8:	4b6c      	ldr	r3, [pc, #432]	; (8004fac <HAL_RCC_OscConfig+0x4bc>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0f0      	beq.n	8004de6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d108      	bne.n	8004e1e <HAL_RCC_OscConfig+0x32e>
 8004e0c:	4b66      	ldr	r3, [pc, #408]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e12:	4a65      	ldr	r2, [pc, #404]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004e14:	f043 0301 	orr.w	r3, r3, #1
 8004e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e1c:	e024      	b.n	8004e68 <HAL_RCC_OscConfig+0x378>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	2b05      	cmp	r3, #5
 8004e24:	d110      	bne.n	8004e48 <HAL_RCC_OscConfig+0x358>
 8004e26:	4b60      	ldr	r3, [pc, #384]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2c:	4a5e      	ldr	r2, [pc, #376]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004e2e:	f043 0304 	orr.w	r3, r3, #4
 8004e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e36:	4b5c      	ldr	r3, [pc, #368]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3c:	4a5a      	ldr	r2, [pc, #360]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004e3e:	f043 0301 	orr.w	r3, r3, #1
 8004e42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e46:	e00f      	b.n	8004e68 <HAL_RCC_OscConfig+0x378>
 8004e48:	4b57      	ldr	r3, [pc, #348]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4e:	4a56      	ldr	r2, [pc, #344]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004e50:	f023 0301 	bic.w	r3, r3, #1
 8004e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e58:	4b53      	ldr	r3, [pc, #332]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5e:	4a52      	ldr	r2, [pc, #328]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004e60:	f023 0304 	bic.w	r3, r3, #4
 8004e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d016      	beq.n	8004e9e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e70:	f7fc fe3e 	bl	8001af0 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e76:	e00a      	b.n	8004e8e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e78:	f7fc fe3a 	bl	8001af0 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e140      	b.n	8005110 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e8e:	4b46      	ldr	r3, [pc, #280]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0ed      	beq.n	8004e78 <HAL_RCC_OscConfig+0x388>
 8004e9c:	e015      	b.n	8004eca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e9e:	f7fc fe27 	bl	8001af0 <HAL_GetTick>
 8004ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ea4:	e00a      	b.n	8004ebc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ea6:	f7fc fe23 	bl	8001af0 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e129      	b.n	8005110 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ebc:	4b3a      	ldr	r3, [pc, #232]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1ed      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004eca:	7ffb      	ldrb	r3, [r7, #31]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d105      	bne.n	8004edc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ed0:	4b35      	ldr	r3, [pc, #212]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed4:	4a34      	ldr	r2, [pc, #208]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004ed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eda:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0320 	and.w	r3, r3, #32
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d03c      	beq.n	8004f62 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d01c      	beq.n	8004f2a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ef0:	4b2d      	ldr	r3, [pc, #180]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ef6:	4a2c      	ldr	r2, [pc, #176]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004ef8:	f043 0301 	orr.w	r3, r3, #1
 8004efc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f00:	f7fc fdf6 	bl	8001af0 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f08:	f7fc fdf2 	bl	8001af0 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e0fa      	b.n	8005110 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f1a:	4b23      	ldr	r3, [pc, #140]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004f1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0ef      	beq.n	8004f08 <HAL_RCC_OscConfig+0x418>
 8004f28:	e01b      	b.n	8004f62 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f2a:	4b1f      	ldr	r3, [pc, #124]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f30:	4a1d      	ldr	r2, [pc, #116]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004f32:	f023 0301 	bic.w	r3, r3, #1
 8004f36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f3a:	f7fc fdd9 	bl	8001af0 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f42:	f7fc fdd5 	bl	8001af0 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e0dd      	b.n	8005110 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f54:	4b14      	ldr	r3, [pc, #80]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1ef      	bne.n	8004f42 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 80d1 	beq.w	800510e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f6c:	4b0e      	ldr	r3, [pc, #56]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 030c 	and.w	r3, r3, #12
 8004f74:	2b0c      	cmp	r3, #12
 8004f76:	f000 808b 	beq.w	8005090 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d15e      	bne.n	8005040 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f82:	4b09      	ldr	r3, [pc, #36]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a08      	ldr	r2, [pc, #32]	; (8004fa8 <HAL_RCC_OscConfig+0x4b8>)
 8004f88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8e:	f7fc fdaf 	bl	8001af0 <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f94:	e00c      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f96:	f7fc fdab 	bl	8001af0 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d905      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e0b3      	b.n	8005110 <HAL_RCC_OscConfig+0x620>
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fb0:	4b59      	ldr	r3, [pc, #356]	; (8005118 <HAL_RCC_OscConfig+0x628>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1ec      	bne.n	8004f96 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fbc:	4b56      	ldr	r3, [pc, #344]	; (8005118 <HAL_RCC_OscConfig+0x628>)
 8004fbe:	68da      	ldr	r2, [r3, #12]
 8004fc0:	4b56      	ldr	r3, [pc, #344]	; (800511c <HAL_RCC_OscConfig+0x62c>)
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6a11      	ldr	r1, [r2, #32]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fcc:	3a01      	subs	r2, #1
 8004fce:	0112      	lsls	r2, r2, #4
 8004fd0:	4311      	orrs	r1, r2
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004fd6:	0212      	lsls	r2, r2, #8
 8004fd8:	4311      	orrs	r1, r2
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004fde:	0852      	lsrs	r2, r2, #1
 8004fe0:	3a01      	subs	r2, #1
 8004fe2:	0552      	lsls	r2, r2, #21
 8004fe4:	4311      	orrs	r1, r2
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fea:	0852      	lsrs	r2, r2, #1
 8004fec:	3a01      	subs	r2, #1
 8004fee:	0652      	lsls	r2, r2, #25
 8004ff0:	4311      	orrs	r1, r2
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ff6:	06d2      	lsls	r2, r2, #27
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	4947      	ldr	r1, [pc, #284]	; (8005118 <HAL_RCC_OscConfig+0x628>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005000:	4b45      	ldr	r3, [pc, #276]	; (8005118 <HAL_RCC_OscConfig+0x628>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a44      	ldr	r2, [pc, #272]	; (8005118 <HAL_RCC_OscConfig+0x628>)
 8005006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800500a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800500c:	4b42      	ldr	r3, [pc, #264]	; (8005118 <HAL_RCC_OscConfig+0x628>)
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	4a41      	ldr	r2, [pc, #260]	; (8005118 <HAL_RCC_OscConfig+0x628>)
 8005012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005016:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005018:	f7fc fd6a 	bl	8001af0 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005020:	f7fc fd66 	bl	8001af0 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e06e      	b.n	8005110 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005032:	4b39      	ldr	r3, [pc, #228]	; (8005118 <HAL_RCC_OscConfig+0x628>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f0      	beq.n	8005020 <HAL_RCC_OscConfig+0x530>
 800503e:	e066      	b.n	800510e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005040:	4b35      	ldr	r3, [pc, #212]	; (8005118 <HAL_RCC_OscConfig+0x628>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a34      	ldr	r2, [pc, #208]	; (8005118 <HAL_RCC_OscConfig+0x628>)
 8005046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800504a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800504c:	4b32      	ldr	r3, [pc, #200]	; (8005118 <HAL_RCC_OscConfig+0x628>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	4a31      	ldr	r2, [pc, #196]	; (8005118 <HAL_RCC_OscConfig+0x628>)
 8005052:	f023 0303 	bic.w	r3, r3, #3
 8005056:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005058:	4b2f      	ldr	r3, [pc, #188]	; (8005118 <HAL_RCC_OscConfig+0x628>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	4a2e      	ldr	r2, [pc, #184]	; (8005118 <HAL_RCC_OscConfig+0x628>)
 800505e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005066:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005068:	f7fc fd42 	bl	8001af0 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005070:	f7fc fd3e 	bl	8001af0 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e046      	b.n	8005110 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005082:	4b25      	ldr	r3, [pc, #148]	; (8005118 <HAL_RCC_OscConfig+0x628>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f0      	bne.n	8005070 <HAL_RCC_OscConfig+0x580>
 800508e:	e03e      	b.n	800510e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e039      	b.n	8005110 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800509c:	4b1e      	ldr	r3, [pc, #120]	; (8005118 <HAL_RCC_OscConfig+0x628>)
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f003 0203 	and.w	r2, r3, #3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d12c      	bne.n	800510a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	3b01      	subs	r3, #1
 80050bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050be:	429a      	cmp	r2, r3
 80050c0:	d123      	bne.n	800510a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d11b      	bne.n	800510a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80050de:	429a      	cmp	r2, r3
 80050e0:	d113      	bne.n	800510a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ec:	085b      	lsrs	r3, r3, #1
 80050ee:	3b01      	subs	r3, #1
 80050f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d109      	bne.n	800510a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005100:	085b      	lsrs	r3, r3, #1
 8005102:	3b01      	subs	r3, #1
 8005104:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005106:	429a      	cmp	r2, r3
 8005108:	d001      	beq.n	800510e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3720      	adds	r7, #32
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40021000 	.word	0x40021000
 800511c:	019f800c 	.word	0x019f800c

08005120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800512a:	2300      	movs	r3, #0
 800512c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e11e      	b.n	8005376 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005138:	4b91      	ldr	r3, [pc, #580]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 030f 	and.w	r3, r3, #15
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d910      	bls.n	8005168 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005146:	4b8e      	ldr	r3, [pc, #568]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f023 020f 	bic.w	r2, r3, #15
 800514e:	498c      	ldr	r1, [pc, #560]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	4313      	orrs	r3, r2
 8005154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005156:	4b8a      	ldr	r3, [pc, #552]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 030f 	and.w	r3, r3, #15
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d001      	beq.n	8005168 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e106      	b.n	8005376 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d073      	beq.n	800525c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2b03      	cmp	r3, #3
 800517a:	d129      	bne.n	80051d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800517c:	4b81      	ldr	r3, [pc, #516]	; (8005384 <HAL_RCC_ClockConfig+0x264>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e0f4      	b.n	8005376 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800518c:	f000 f966 	bl	800545c <RCC_GetSysClockFreqFromPLLSource>
 8005190:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	4a7c      	ldr	r2, [pc, #496]	; (8005388 <HAL_RCC_ClockConfig+0x268>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d93f      	bls.n	800521a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800519a:	4b7a      	ldr	r3, [pc, #488]	; (8005384 <HAL_RCC_ClockConfig+0x264>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d009      	beq.n	80051ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d033      	beq.n	800521a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d12f      	bne.n	800521a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051ba:	4b72      	ldr	r3, [pc, #456]	; (8005384 <HAL_RCC_ClockConfig+0x264>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051c2:	4a70      	ldr	r2, [pc, #448]	; (8005384 <HAL_RCC_ClockConfig+0x264>)
 80051c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80051ca:	2380      	movs	r3, #128	; 0x80
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	e024      	b.n	800521a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d107      	bne.n	80051e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051d8:	4b6a      	ldr	r3, [pc, #424]	; (8005384 <HAL_RCC_ClockConfig+0x264>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d109      	bne.n	80051f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e0c6      	b.n	8005376 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051e8:	4b66      	ldr	r3, [pc, #408]	; (8005384 <HAL_RCC_ClockConfig+0x264>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e0be      	b.n	8005376 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80051f8:	f000 f8ce 	bl	8005398 <HAL_RCC_GetSysClockFreq>
 80051fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	4a61      	ldr	r2, [pc, #388]	; (8005388 <HAL_RCC_ClockConfig+0x268>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d909      	bls.n	800521a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005206:	4b5f      	ldr	r3, [pc, #380]	; (8005384 <HAL_RCC_ClockConfig+0x264>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800520e:	4a5d      	ldr	r2, [pc, #372]	; (8005384 <HAL_RCC_ClockConfig+0x264>)
 8005210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005214:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005216:	2380      	movs	r3, #128	; 0x80
 8005218:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800521a:	4b5a      	ldr	r3, [pc, #360]	; (8005384 <HAL_RCC_ClockConfig+0x264>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f023 0203 	bic.w	r2, r3, #3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	4957      	ldr	r1, [pc, #348]	; (8005384 <HAL_RCC_ClockConfig+0x264>)
 8005228:	4313      	orrs	r3, r2
 800522a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800522c:	f7fc fc60 	bl	8001af0 <HAL_GetTick>
 8005230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005232:	e00a      	b.n	800524a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005234:	f7fc fc5c 	bl	8001af0 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005242:	4293      	cmp	r3, r2
 8005244:	d901      	bls.n	800524a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e095      	b.n	8005376 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800524a:	4b4e      	ldr	r3, [pc, #312]	; (8005384 <HAL_RCC_ClockConfig+0x264>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 020c 	and.w	r2, r3, #12
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	429a      	cmp	r2, r3
 800525a:	d1eb      	bne.n	8005234 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d023      	beq.n	80052b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	d005      	beq.n	8005280 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005274:	4b43      	ldr	r3, [pc, #268]	; (8005384 <HAL_RCC_ClockConfig+0x264>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	4a42      	ldr	r2, [pc, #264]	; (8005384 <HAL_RCC_ClockConfig+0x264>)
 800527a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800527e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d007      	beq.n	800529c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800528c:	4b3d      	ldr	r3, [pc, #244]	; (8005384 <HAL_RCC_ClockConfig+0x264>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005294:	4a3b      	ldr	r2, [pc, #236]	; (8005384 <HAL_RCC_ClockConfig+0x264>)
 8005296:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800529a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800529c:	4b39      	ldr	r3, [pc, #228]	; (8005384 <HAL_RCC_ClockConfig+0x264>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	4936      	ldr	r1, [pc, #216]	; (8005384 <HAL_RCC_ClockConfig+0x264>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	608b      	str	r3, [r1, #8]
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2b80      	cmp	r3, #128	; 0x80
 80052b4:	d105      	bne.n	80052c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80052b6:	4b33      	ldr	r3, [pc, #204]	; (8005384 <HAL_RCC_ClockConfig+0x264>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	4a32      	ldr	r2, [pc, #200]	; (8005384 <HAL_RCC_ClockConfig+0x264>)
 80052bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052c2:	4b2f      	ldr	r3, [pc, #188]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d21d      	bcs.n	800530c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052d0:	4b2b      	ldr	r3, [pc, #172]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f023 020f 	bic.w	r2, r3, #15
 80052d8:	4929      	ldr	r1, [pc, #164]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	4313      	orrs	r3, r2
 80052de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80052e0:	f7fc fc06 	bl	8001af0 <HAL_GetTick>
 80052e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e6:	e00a      	b.n	80052fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052e8:	f7fc fc02 	bl	8001af0 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e03b      	b.n	8005376 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052fe:	4b20      	ldr	r3, [pc, #128]	; (8005380 <HAL_RCC_ClockConfig+0x260>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d1ed      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d008      	beq.n	800532a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005318:	4b1a      	ldr	r3, [pc, #104]	; (8005384 <HAL_RCC_ClockConfig+0x264>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	4917      	ldr	r1, [pc, #92]	; (8005384 <HAL_RCC_ClockConfig+0x264>)
 8005326:	4313      	orrs	r3, r2
 8005328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0308 	and.w	r3, r3, #8
 8005332:	2b00      	cmp	r3, #0
 8005334:	d009      	beq.n	800534a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005336:	4b13      	ldr	r3, [pc, #76]	; (8005384 <HAL_RCC_ClockConfig+0x264>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	490f      	ldr	r1, [pc, #60]	; (8005384 <HAL_RCC_ClockConfig+0x264>)
 8005346:	4313      	orrs	r3, r2
 8005348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800534a:	f000 f825 	bl	8005398 <HAL_RCC_GetSysClockFreq>
 800534e:	4602      	mov	r2, r0
 8005350:	4b0c      	ldr	r3, [pc, #48]	; (8005384 <HAL_RCC_ClockConfig+0x264>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	091b      	lsrs	r3, r3, #4
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	490c      	ldr	r1, [pc, #48]	; (800538c <HAL_RCC_ClockConfig+0x26c>)
 800535c:	5ccb      	ldrb	r3, [r1, r3]
 800535e:	f003 031f 	and.w	r3, r3, #31
 8005362:	fa22 f303 	lsr.w	r3, r2, r3
 8005366:	4a0a      	ldr	r2, [pc, #40]	; (8005390 <HAL_RCC_ClockConfig+0x270>)
 8005368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800536a:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <HAL_RCC_ClockConfig+0x274>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f7fc fb72 	bl	8001a58 <HAL_InitTick>
 8005374:	4603      	mov	r3, r0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	40022000 	.word	0x40022000
 8005384:	40021000 	.word	0x40021000
 8005388:	04c4b400 	.word	0x04c4b400
 800538c:	08008eb0 	.word	0x08008eb0
 8005390:	20000000 	.word	0x20000000
 8005394:	20000004 	.word	0x20000004

08005398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800539e:	4b2c      	ldr	r3, [pc, #176]	; (8005450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 030c 	and.w	r3, r3, #12
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d102      	bne.n	80053b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053aa:	4b2a      	ldr	r3, [pc, #168]	; (8005454 <HAL_RCC_GetSysClockFreq+0xbc>)
 80053ac:	613b      	str	r3, [r7, #16]
 80053ae:	e047      	b.n	8005440 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80053b0:	4b27      	ldr	r3, [pc, #156]	; (8005450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 030c 	and.w	r3, r3, #12
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d102      	bne.n	80053c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053bc:	4b26      	ldr	r3, [pc, #152]	; (8005458 <HAL_RCC_GetSysClockFreq+0xc0>)
 80053be:	613b      	str	r3, [r7, #16]
 80053c0:	e03e      	b.n	8005440 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80053c2:	4b23      	ldr	r3, [pc, #140]	; (8005450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 030c 	and.w	r3, r3, #12
 80053ca:	2b0c      	cmp	r3, #12
 80053cc:	d136      	bne.n	800543c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053ce:	4b20      	ldr	r3, [pc, #128]	; (8005450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053d8:	4b1d      	ldr	r3, [pc, #116]	; (8005450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	091b      	lsrs	r3, r3, #4
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	3301      	adds	r3, #1
 80053e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2b03      	cmp	r3, #3
 80053ea:	d10c      	bne.n	8005406 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053ec:	4a1a      	ldr	r2, [pc, #104]	; (8005458 <HAL_RCC_GetSysClockFreq+0xc0>)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f4:	4a16      	ldr	r2, [pc, #88]	; (8005450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053f6:	68d2      	ldr	r2, [r2, #12]
 80053f8:	0a12      	lsrs	r2, r2, #8
 80053fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053fe:	fb02 f303 	mul.w	r3, r2, r3
 8005402:	617b      	str	r3, [r7, #20]
      break;
 8005404:	e00c      	b.n	8005420 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005406:	4a13      	ldr	r2, [pc, #76]	; (8005454 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	fbb2 f3f3 	udiv	r3, r2, r3
 800540e:	4a10      	ldr	r2, [pc, #64]	; (8005450 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005410:	68d2      	ldr	r2, [r2, #12]
 8005412:	0a12      	lsrs	r2, r2, #8
 8005414:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005418:	fb02 f303 	mul.w	r3, r2, r3
 800541c:	617b      	str	r3, [r7, #20]
      break;
 800541e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005420:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	0e5b      	lsrs	r3, r3, #25
 8005426:	f003 0303 	and.w	r3, r3, #3
 800542a:	3301      	adds	r3, #1
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	fbb2 f3f3 	udiv	r3, r2, r3
 8005438:	613b      	str	r3, [r7, #16]
 800543a:	e001      	b.n	8005440 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005440:	693b      	ldr	r3, [r7, #16]
}
 8005442:	4618      	mov	r0, r3
 8005444:	371c      	adds	r7, #28
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40021000 	.word	0x40021000
 8005454:	00f42400 	.word	0x00f42400
 8005458:	016e3600 	.word	0x016e3600

0800545c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005462:	4b1e      	ldr	r3, [pc, #120]	; (80054dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800546c:	4b1b      	ldr	r3, [pc, #108]	; (80054dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	091b      	lsrs	r3, r3, #4
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	3301      	adds	r3, #1
 8005478:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	2b03      	cmp	r3, #3
 800547e:	d10c      	bne.n	800549a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005480:	4a17      	ldr	r2, [pc, #92]	; (80054e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	fbb2 f3f3 	udiv	r3, r2, r3
 8005488:	4a14      	ldr	r2, [pc, #80]	; (80054dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800548a:	68d2      	ldr	r2, [r2, #12]
 800548c:	0a12      	lsrs	r2, r2, #8
 800548e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005492:	fb02 f303 	mul.w	r3, r2, r3
 8005496:	617b      	str	r3, [r7, #20]
    break;
 8005498:	e00c      	b.n	80054b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800549a:	4a12      	ldr	r2, [pc, #72]	; (80054e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a2:	4a0e      	ldr	r2, [pc, #56]	; (80054dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054a4:	68d2      	ldr	r2, [r2, #12]
 80054a6:	0a12      	lsrs	r2, r2, #8
 80054a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80054ac:	fb02 f303 	mul.w	r3, r2, r3
 80054b0:	617b      	str	r3, [r7, #20]
    break;
 80054b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054b4:	4b09      	ldr	r3, [pc, #36]	; (80054dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	0e5b      	lsrs	r3, r3, #25
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	3301      	adds	r3, #1
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80054ce:	687b      	ldr	r3, [r7, #4]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	371c      	adds	r7, #28
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	40021000 	.word	0x40021000
 80054e0:	016e3600 	.word	0x016e3600
 80054e4:	00f42400 	.word	0x00f42400

080054e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054f0:	2300      	movs	r3, #0
 80054f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054f4:	2300      	movs	r3, #0
 80054f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 8098 	beq.w	8005636 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005506:	2300      	movs	r3, #0
 8005508:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800550a:	4b43      	ldr	r3, [pc, #268]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800550c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800550e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10d      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005516:	4b40      	ldr	r3, [pc, #256]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551a:	4a3f      	ldr	r2, [pc, #252]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800551c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005520:	6593      	str	r3, [r2, #88]	; 0x58
 8005522:	4b3d      	ldr	r3, [pc, #244]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800552a:	60bb      	str	r3, [r7, #8]
 800552c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800552e:	2301      	movs	r3, #1
 8005530:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005532:	4b3a      	ldr	r3, [pc, #232]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a39      	ldr	r2, [pc, #228]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800553e:	f7fc fad7 	bl	8001af0 <HAL_GetTick>
 8005542:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005544:	e009      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005546:	f7fc fad3 	bl	8001af0 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d902      	bls.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	74fb      	strb	r3, [r7, #19]
        break;
 8005558:	e005      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800555a:	4b30      	ldr	r3, [pc, #192]	; (800561c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0ef      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005566:	7cfb      	ldrb	r3, [r7, #19]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d159      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800556c:	4b2a      	ldr	r3, [pc, #168]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005576:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d01e      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	429a      	cmp	r2, r3
 8005586:	d019      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005588:	4b23      	ldr	r3, [pc, #140]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800558a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005592:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005594:	4b20      	ldr	r3, [pc, #128]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559a:	4a1f      	ldr	r2, [pc, #124]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800559c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055a4:	4b1c      	ldr	r3, [pc, #112]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055aa:	4a1b      	ldr	r2, [pc, #108]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055b4:	4a18      	ldr	r2, [pc, #96]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d016      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c6:	f7fc fa93 	bl	8001af0 <HAL_GetTick>
 80055ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055cc:	e00b      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ce:	f7fc fa8f 	bl	8001af0 <HAL_GetTick>
 80055d2:	4602      	mov	r2, r0
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055dc:	4293      	cmp	r3, r2
 80055de:	d902      	bls.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	74fb      	strb	r3, [r7, #19]
            break;
 80055e4:	e006      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055e6:	4b0c      	ldr	r3, [pc, #48]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d0ec      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80055f4:	7cfb      	ldrb	r3, [r7, #19]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10b      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055fa:	4b07      	ldr	r3, [pc, #28]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005600:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005608:	4903      	ldr	r1, [pc, #12]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005610:	e008      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005612:	7cfb      	ldrb	r3, [r7, #19]
 8005614:	74bb      	strb	r3, [r7, #18]
 8005616:	e005      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005618:	40021000 	.word	0x40021000
 800561c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005620:	7cfb      	ldrb	r3, [r7, #19]
 8005622:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005624:	7c7b      	ldrb	r3, [r7, #17]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d105      	bne.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800562a:	4ba7      	ldr	r3, [pc, #668]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800562c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562e:	4aa6      	ldr	r2, [pc, #664]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005634:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00a      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005642:	4ba1      	ldr	r3, [pc, #644]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005648:	f023 0203 	bic.w	r2, r3, #3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	499d      	ldr	r1, [pc, #628]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005652:	4313      	orrs	r3, r2
 8005654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00a      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005664:	4b98      	ldr	r3, [pc, #608]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566a:	f023 020c 	bic.w	r2, r3, #12
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	4995      	ldr	r1, [pc, #596]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005674:	4313      	orrs	r3, r2
 8005676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0304 	and.w	r3, r3, #4
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005686:	4b90      	ldr	r3, [pc, #576]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	498c      	ldr	r1, [pc, #560]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0308 	and.w	r3, r3, #8
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00a      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056a8:	4b87      	ldr	r3, [pc, #540]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	4984      	ldr	r1, [pc, #528]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0310 	and.w	r3, r3, #16
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056ca:	4b7f      	ldr	r3, [pc, #508]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	497b      	ldr	r1, [pc, #492]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0320 	and.w	r3, r3, #32
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00a      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056ec:	4b76      	ldr	r3, [pc, #472]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	4973      	ldr	r1, [pc, #460]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800570e:	4b6e      	ldr	r3, [pc, #440]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005714:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	496a      	ldr	r1, [pc, #424]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800571e:	4313      	orrs	r3, r2
 8005720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00a      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005730:	4b65      	ldr	r3, [pc, #404]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005736:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	4962      	ldr	r1, [pc, #392]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005740:	4313      	orrs	r3, r2
 8005742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00a      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005752:	4b5d      	ldr	r3, [pc, #372]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005758:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	4959      	ldr	r1, [pc, #356]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005762:	4313      	orrs	r3, r2
 8005764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00a      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005774:	4b54      	ldr	r3, [pc, #336]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005776:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800577a:	f023 0203 	bic.w	r2, r3, #3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005782:	4951      	ldr	r1, [pc, #324]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005784:	4313      	orrs	r3, r2
 8005786:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00a      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005796:	4b4c      	ldr	r3, [pc, #304]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	4948      	ldr	r1, [pc, #288]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d015      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057b8:	4b43      	ldr	r3, [pc, #268]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c6:	4940      	ldr	r1, [pc, #256]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057d6:	d105      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057d8:	4b3b      	ldr	r3, [pc, #236]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	4a3a      	ldr	r2, [pc, #232]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d015      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80057f0:	4b35      	ldr	r3, [pc, #212]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057fe:	4932      	ldr	r1, [pc, #200]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005800:	4313      	orrs	r3, r2
 8005802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800580e:	d105      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005810:	4b2d      	ldr	r3, [pc, #180]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	4a2c      	ldr	r2, [pc, #176]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800581a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d015      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005828:	4b27      	ldr	r3, [pc, #156]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800582a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005836:	4924      	ldr	r1, [pc, #144]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005838:	4313      	orrs	r3, r2
 800583a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005842:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005846:	d105      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005848:	4b1f      	ldr	r3, [pc, #124]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	4a1e      	ldr	r2, [pc, #120]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800584e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005852:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d015      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005860:	4b19      	ldr	r3, [pc, #100]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005866:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586e:	4916      	ldr	r1, [pc, #88]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005870:	4313      	orrs	r3, r2
 8005872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800587e:	d105      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005880:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	4a10      	ldr	r2, [pc, #64]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005886:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800588a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d019      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005898:	4b0b      	ldr	r3, [pc, #44]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800589a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	4908      	ldr	r1, [pc, #32]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058b6:	d109      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058b8:	4b03      	ldr	r3, [pc, #12]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	4a02      	ldr	r2, [pc, #8]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058c2:	60d3      	str	r3, [r2, #12]
 80058c4:	e002      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80058c6:	bf00      	nop
 80058c8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d015      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80058d8:	4b29      	ldr	r3, [pc, #164]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e6:	4926      	ldr	r1, [pc, #152]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058f6:	d105      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80058f8:	4b21      	ldr	r3, [pc, #132]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	4a20      	ldr	r2, [pc, #128]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005902:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d015      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005910:	4b1b      	ldr	r3, [pc, #108]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005916:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800591e:	4918      	ldr	r1, [pc, #96]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005920:	4313      	orrs	r3, r2
 8005922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800592a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592e:	d105      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005930:	4b13      	ldr	r3, [pc, #76]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	4a12      	ldr	r2, [pc, #72]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800593a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d015      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005948:	4b0d      	ldr	r3, [pc, #52]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800594a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800594e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005956:	490a      	ldr	r1, [pc, #40]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005958:	4313      	orrs	r3, r2
 800595a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005962:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005966:	d105      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005968:	4b05      	ldr	r3, [pc, #20]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	4a04      	ldr	r2, [pc, #16]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800596e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005972:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005974:	7cbb      	ldrb	r3, [r7, #18]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	40021000 	.word	0x40021000

08005984 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d066      	beq.n	8005a64 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fb fe96 	bl	80016dc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	22ca      	movs	r2, #202	; 0xca
 80059be:	625a      	str	r2, [r3, #36]	; 0x24
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2253      	movs	r2, #83	; 0x53
 80059c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f99a 	bl	8005d02 <RTC_EnterInitMode>
 80059ce:	4603      	mov	r3, r0
 80059d0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d13a      	bne.n	8005a4e <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	6812      	ldr	r2, [r2, #0]
 80059e2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80059e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ea:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6999      	ldr	r1, [r3, #24]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	431a      	orrs	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68d9      	ldr	r1, [r3, #12]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	041a      	lsls	r2, r3, #16
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f9a6 	bl	8005d6e <RTC_ExitInitMode>
 8005a22:	4603      	mov	r3, r0
 8005a24:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005a26:	7bfb      	ldrb	r3, [r7, #15]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d110      	bne.n	8005a4e <HAL_RTC_Init+0xca>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1a      	ldr	r2, [r3, #32]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	431a      	orrs	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	619a      	str	r2, [r3, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	22ff      	movs	r2, #255	; 0xff
 8005a54:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d103      	bne.n	8005a64 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a6e:	b590      	push	{r4, r7, lr}
 8005a70:	b087      	sub	sp, #28
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_RTC_SetTime+0x1a>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e08b      	b.n	8005ba0 <HAL_RTC_SetTime+0x132>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	22ca      	movs	r2, #202	; 0xca
 8005a9e:	625a      	str	r2, [r3, #36]	; 0x24
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2253      	movs	r2, #83	; 0x53
 8005aa6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 f92a 	bl	8005d02 <RTC_EnterInitMode>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005ab2:	7cfb      	ldrb	r3, [r7, #19]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d163      	bne.n	8005b80 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d126      	bne.n	8005b0c <HAL_RTC_SetTime+0x9e>
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d102      	bne.n	8005ad2 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 f98c 	bl	8005df4 <RTC_ByteToBcd2>
 8005adc:	4603      	mov	r3, r0
 8005ade:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	785b      	ldrb	r3, [r3, #1]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 f985 	bl	8005df4 <RTC_ByteToBcd2>
 8005aea:	4603      	mov	r3, r0
 8005aec:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005aee:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	789b      	ldrb	r3, [r3, #2]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 f97d 	bl	8005df4 <RTC_ByteToBcd2>
 8005afa:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005afc:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	78db      	ldrb	r3, [r3, #3]
 8005b04:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b06:	4313      	orrs	r3, r2
 8005b08:	617b      	str	r3, [r7, #20]
 8005b0a:	e018      	b.n	8005b3e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d102      	bne.n	8005b20 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	785b      	ldrb	r3, [r3, #1]
 8005b2a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b2c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b32:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	78db      	ldrb	r3, [r3, #3]
 8005b38:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(hrtc->Instance->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005b48:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005b4c:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BKP);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	699a      	ldr	r2, [r3, #24]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b5c:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(hrtc->Instance->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6999      	ldr	r1, [r3, #24]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	68da      	ldr	r2, [r3, #12]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 f8f9 	bl	8005d6e <RTC_ExitInitMode>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	22ff      	movs	r2, #255	; 0xff
 8005b86:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005b88:	7cfb      	ldrb	r3, [r7, #19]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d103      	bne.n	8005b96 <HAL_RTC_SetTime+0x128>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
    __HAL_UNLOCK(hrtc);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005b9e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	371c      	adds	r7, #28
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd90      	pop	{r4, r7, pc}

08005ba8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ba8:	b590      	push	{r4, r7, lr}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_RTC_SetDate+0x1a>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e075      	b.n	8005cae <HAL_RTC_SetDate+0x106>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10e      	bne.n	8005bf6 <HAL_RTC_SetDate+0x4e>
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	785b      	ldrb	r3, [r3, #1]
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d008      	beq.n	8005bf6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	785b      	ldrb	r3, [r3, #1]
 8005be8:	f023 0310 	bic.w	r3, r3, #16
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	330a      	adds	r3, #10
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d11c      	bne.n	8005c36 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	78db      	ldrb	r3, [r3, #3]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 f8f7 	bl	8005df4 <RTC_ByteToBcd2>
 8005c06:	4603      	mov	r3, r0
 8005c08:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	785b      	ldrb	r3, [r3, #1]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 f8f0 	bl	8005df4 <RTC_ByteToBcd2>
 8005c14:	4603      	mov	r3, r0
 8005c16:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005c18:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	789b      	ldrb	r3, [r3, #2]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 f8e8 	bl	8005df4 <RTC_ByteToBcd2>
 8005c24:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c26:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	e00e      	b.n	8005c54 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	78db      	ldrb	r3, [r3, #3]
 8005c3a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	785b      	ldrb	r3, [r3, #1]
 8005c40:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005c42:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005c48:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005c50:	4313      	orrs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	22ca      	movs	r2, #202	; 0xca
 8005c5a:	625a      	str	r2, [r3, #36]	; 0x24
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2253      	movs	r2, #83	; 0x53
 8005c62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 f84c 	bl	8005d02 <RTC_EnterInitMode>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005c6e:	7cfb      	ldrb	r3, [r7, #19]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10c      	bne.n	8005c8e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    WRITE_REG(hrtc->Instance->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c82:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 f872 	bl	8005d6e <RTC_ExitInitMode>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	22ff      	movs	r2, #255	; 0xff
 8005c94:	625a      	str	r2, [r3, #36]	; 0x24
 
  if (status == HAL_OK)
 8005c96:	7cfb      	ldrb	r3, [r7, #19]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d103      	bne.n	8005ca4 <HAL_RTC_SetDate+0xfc>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005cac:	7cfb      	ldrb	r3, [r7, #19]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	371c      	adds	r7, #28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd90      	pop	{r4, r7, pc}

08005cb6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b084      	sub	sp, #16
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0220 	bic.w	r2, r2, #32
 8005ccc:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005cce:	f7fb ff0f 	bl	8001af0 <HAL_GetTick>
 8005cd2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8005cd4:	e009      	b.n	8005cea <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005cd6:	f7fb ff0b 	bl	8001af0 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ce4:	d901      	bls.n	8005cea <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e007      	b.n	8005cfa <HAL_RTC_WaitForSynchro+0x44>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f003 0320 	and.w	r3, r3, #32
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d0ee      	beq.n	8005cd6 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b084      	sub	sp, #16
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d123      	bne.n	8005d64 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d2a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005d2c:	f7fb fee0 	bl	8001af0 <HAL_GetTick>
 8005d30:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005d32:	e00d      	b.n	8005d50 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005d34:	f7fb fedc 	bl	8001af0 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d42:	d905      	bls.n	8005d50 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2203      	movs	r2, #3
 8005d4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d102      	bne.n	8005d64 <RTC_EnterInitMode+0x62>
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
 8005d60:	2b03      	cmp	r3, #3
 8005d62:	d1e7      	bne.n	8005d34 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b084      	sub	sp, #16
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68da      	ldr	r2, [r3, #12]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d88:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	f003 0320 	and.w	r3, r3, #32
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10c      	bne.n	8005db2 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f7ff ff8c 	bl	8005cb6 <HAL_RTC_WaitForSynchro>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d022      	beq.n	8005dea <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2203      	movs	r2, #3
 8005da8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	73fb      	strb	r3, [r7, #15]
 8005db0:	e01b      	b.n	8005dea <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	699a      	ldr	r2, [r3, #24]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0220 	bic.w	r2, r2, #32
 8005dc0:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7ff ff77 	bl	8005cb6 <HAL_RTC_WaitForSynchro>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d005      	beq.n	8005dda <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2203      	movs	r2, #3
 8005dd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	699a      	ldr	r2, [r3, #24]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f042 0220 	orr.w	r2, r2, #32
 8005de8:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8005e06:	e005      	b.n	8005e14 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8005e0e:	7afb      	ldrb	r3, [r7, #11]
 8005e10:	3b0a      	subs	r3, #10
 8005e12:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8005e14:	7afb      	ldrb	r3, [r7, #11]
 8005e16:	2b09      	cmp	r3, #9
 8005e18:	d8f6      	bhi.n	8005e08 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	011b      	lsls	r3, r3, #4
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	7afb      	ldrb	r3, [r7, #11]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	b2db      	uxtb	r3, r3
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e09d      	b.n	8005f82 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d108      	bne.n	8005e60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e56:	d009      	beq.n	8005e6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	61da      	str	r2, [r3, #28]
 8005e5e:	e005      	b.n	8005e6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d106      	bne.n	8005e8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7fb fc64 	bl	8001754 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ea2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005eac:	d902      	bls.n	8005eb4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	e002      	b.n	8005eba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005eb8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005ec2:	d007      	beq.n	8005ed4 <HAL_SPI_Init+0xa0>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ecc:	d002      	beq.n	8005ed4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f16:	ea42 0103 	orr.w	r1, r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	0c1b      	lsrs	r3, r3, #16
 8005f30:	f003 0204 	and.w	r2, r3, #4
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	f003 0310 	and.w	r3, r3, #16
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f42:	f003 0308 	and.w	r3, r3, #8
 8005f46:	431a      	orrs	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005f50:	ea42 0103 	orr.w	r1, r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69da      	ldr	r2, [r3, #28]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b088      	sub	sp, #32
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	603b      	str	r3, [r7, #0]
 8005f96:	4613      	mov	r3, r2
 8005f98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d101      	bne.n	8005fac <HAL_SPI_Transmit+0x22>
 8005fa8:	2302      	movs	r3, #2
 8005faa:	e158      	b.n	800625e <HAL_SPI_Transmit+0x2d4>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fb4:	f7fb fd9c 	bl	8001af0 <HAL_GetTick>
 8005fb8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005fba:	88fb      	ldrh	r3, [r7, #6]
 8005fbc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d002      	beq.n	8005fd0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005fca:	2302      	movs	r3, #2
 8005fcc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fce:	e13d      	b.n	800624c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d002      	beq.n	8005fdc <HAL_SPI_Transmit+0x52>
 8005fd6:	88fb      	ldrh	r3, [r7, #6]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d102      	bne.n	8005fe2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fe0:	e134      	b.n	800624c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2203      	movs	r2, #3
 8005fe6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	88fa      	ldrh	r2, [r7, #6]
 8005ffa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	88fa      	ldrh	r2, [r7, #6]
 8006000:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800602c:	d10f      	bne.n	800604e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800603c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800604c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006058:	2b40      	cmp	r3, #64	; 0x40
 800605a:	d007      	beq.n	800606c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800606a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006074:	d94b      	bls.n	800610e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d002      	beq.n	8006084 <HAL_SPI_Transmit+0xfa>
 800607e:	8afb      	ldrh	r3, [r7, #22]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d13e      	bne.n	8006102 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006088:	881a      	ldrh	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006094:	1c9a      	adds	r2, r3, #2
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800609e:	b29b      	uxth	r3, r3
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060a8:	e02b      	b.n	8006102 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d112      	bne.n	80060de <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060bc:	881a      	ldrh	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c8:	1c9a      	adds	r2, r3, #2
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	3b01      	subs	r3, #1
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060dc:	e011      	b.n	8006102 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060de:	f7fb fd07 	bl	8001af0 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d803      	bhi.n	80060f6 <HAL_SPI_Transmit+0x16c>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f4:	d102      	bne.n	80060fc <HAL_SPI_Transmit+0x172>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d102      	bne.n	8006102 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006100:	e0a4      	b.n	800624c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006106:	b29b      	uxth	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1ce      	bne.n	80060aa <HAL_SPI_Transmit+0x120>
 800610c:	e07c      	b.n	8006208 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d002      	beq.n	800611c <HAL_SPI_Transmit+0x192>
 8006116:	8afb      	ldrh	r3, [r7, #22]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d170      	bne.n	80061fe <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006120:	b29b      	uxth	r3, r3
 8006122:	2b01      	cmp	r3, #1
 8006124:	d912      	bls.n	800614c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612a:	881a      	ldrh	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006136:	1c9a      	adds	r2, r3, #2
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006140:	b29b      	uxth	r3, r3
 8006142:	3b02      	subs	r3, #2
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	87da      	strh	r2, [r3, #62]	; 0x3e
 800614a:	e058      	b.n	80061fe <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	330c      	adds	r3, #12
 8006156:	7812      	ldrb	r2, [r2, #0]
 8006158:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006168:	b29b      	uxth	r3, r3
 800616a:	3b01      	subs	r3, #1
 800616c:	b29a      	uxth	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006172:	e044      	b.n	80061fe <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b02      	cmp	r3, #2
 8006180:	d12b      	bne.n	80061da <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006186:	b29b      	uxth	r3, r3
 8006188:	2b01      	cmp	r3, #1
 800618a:	d912      	bls.n	80061b2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006190:	881a      	ldrh	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619c:	1c9a      	adds	r2, r3, #2
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	3b02      	subs	r3, #2
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061b0:	e025      	b.n	80061fe <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	330c      	adds	r3, #12
 80061bc:	7812      	ldrb	r2, [r2, #0]
 80061be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061d8:	e011      	b.n	80061fe <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061da:	f7fb fc89 	bl	8001af0 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d803      	bhi.n	80061f2 <HAL_SPI_Transmit+0x268>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f0:	d102      	bne.n	80061f8 <HAL_SPI_Transmit+0x26e>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d102      	bne.n	80061fe <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061fc:	e026      	b.n	800624c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006202:	b29b      	uxth	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1b5      	bne.n	8006174 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	6839      	ldr	r1, [r7, #0]
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f000 fce3 	bl	8006bd8 <SPI_EndRxTxTransaction>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2220      	movs	r2, #32
 800621c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10a      	bne.n	800623c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006226:	2300      	movs	r3, #0
 8006228:	613b      	str	r3, [r7, #16]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	613b      	str	r3, [r7, #16]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	613b      	str	r3, [r7, #16]
 800623a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	77fb      	strb	r3, [r7, #31]
 8006248:	e000      	b.n	800624c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800624a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800625c:	7ffb      	ldrb	r3, [r7, #31]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3720      	adds	r7, #32
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b088      	sub	sp, #32
 800626a:	af02      	add	r7, sp, #8
 800626c:	60f8      	str	r0, [r7, #12]
 800626e:	60b9      	str	r1, [r7, #8]
 8006270:	603b      	str	r3, [r7, #0]
 8006272:	4613      	mov	r3, r2
 8006274:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006282:	d112      	bne.n	80062aa <HAL_SPI_Receive+0x44>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10e      	bne.n	80062aa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2204      	movs	r2, #4
 8006290:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006294:	88fa      	ldrh	r2, [r7, #6]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	4613      	mov	r3, r2
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 f910 	bl	80064c6 <HAL_SPI_TransmitReceive>
 80062a6:	4603      	mov	r3, r0
 80062a8:	e109      	b.n	80064be <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d101      	bne.n	80062b8 <HAL_SPI_Receive+0x52>
 80062b4:	2302      	movs	r3, #2
 80062b6:	e102      	b.n	80064be <HAL_SPI_Receive+0x258>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062c0:	f7fb fc16 	bl	8001af0 <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d002      	beq.n	80062d8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80062d2:	2302      	movs	r3, #2
 80062d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062d6:	e0e9      	b.n	80064ac <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d002      	beq.n	80062e4 <HAL_SPI_Receive+0x7e>
 80062de:	88fb      	ldrh	r3, [r7, #6]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d102      	bne.n	80062ea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062e8:	e0e0      	b.n	80064ac <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2204      	movs	r2, #4
 80062ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	88fa      	ldrh	r2, [r7, #6]
 8006302:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	88fa      	ldrh	r2, [r7, #6]
 800630a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006334:	d908      	bls.n	8006348 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006344:	605a      	str	r2, [r3, #4]
 8006346:	e007      	b.n	8006358 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006356:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006360:	d10f      	bne.n	8006382 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006370:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006380:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638c:	2b40      	cmp	r3, #64	; 0x40
 800638e:	d007      	beq.n	80063a0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800639e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063a8:	d867      	bhi.n	800647a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80063aa:	e030      	b.n	800640e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d117      	bne.n	80063ea <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f103 020c 	add.w	r2, r3, #12
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c6:	7812      	ldrb	r2, [r2, #0]
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063dc:	b29b      	uxth	r3, r3
 80063de:	3b01      	subs	r3, #1
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80063e8:	e011      	b.n	800640e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063ea:	f7fb fb81 	bl	8001af0 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	683a      	ldr	r2, [r7, #0]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d803      	bhi.n	8006402 <HAL_SPI_Receive+0x19c>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006400:	d102      	bne.n	8006408 <HAL_SPI_Receive+0x1a2>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d102      	bne.n	800640e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800640c:	e04e      	b.n	80064ac <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1c8      	bne.n	80063ac <HAL_SPI_Receive+0x146>
 800641a:	e034      	b.n	8006486 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b01      	cmp	r3, #1
 8006428:	d115      	bne.n	8006456 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68da      	ldr	r2, [r3, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006434:	b292      	uxth	r2, r2
 8006436:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643c:	1c9a      	adds	r2, r3, #2
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006448:	b29b      	uxth	r3, r3
 800644a:	3b01      	subs	r3, #1
 800644c:	b29a      	uxth	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006454:	e011      	b.n	800647a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006456:	f7fb fb4b 	bl	8001af0 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	429a      	cmp	r2, r3
 8006464:	d803      	bhi.n	800646e <HAL_SPI_Receive+0x208>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646c:	d102      	bne.n	8006474 <HAL_SPI_Receive+0x20e>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d102      	bne.n	800647a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006478:	e018      	b.n	80064ac <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006480:	b29b      	uxth	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1ca      	bne.n	800641c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 fb4c 	bl	8006b28 <SPI_EndRxTransaction>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d002      	beq.n	800649c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2220      	movs	r2, #32
 800649a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d002      	beq.n	80064aa <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	75fb      	strb	r3, [r7, #23]
 80064a8:	e000      	b.n	80064ac <HAL_SPI_Receive+0x246>
  }

error :
 80064aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80064bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3718      	adds	r7, #24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b08a      	sub	sp, #40	; 0x28
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	60f8      	str	r0, [r7, #12]
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
 80064d2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064d4:	2301      	movs	r3, #1
 80064d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80064d8:	2300      	movs	r3, #0
 80064da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d101      	bne.n	80064ec <HAL_SPI_TransmitReceive+0x26>
 80064e8:	2302      	movs	r3, #2
 80064ea:	e1fb      	b.n	80068e4 <HAL_SPI_TransmitReceive+0x41e>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064f4:	f7fb fafc 	bl	8001af0 <HAL_GetTick>
 80064f8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006500:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006508:	887b      	ldrh	r3, [r7, #2]
 800650a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800650c:	887b      	ldrh	r3, [r7, #2]
 800650e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006510:	7efb      	ldrb	r3, [r7, #27]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d00e      	beq.n	8006534 <HAL_SPI_TransmitReceive+0x6e>
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800651c:	d106      	bne.n	800652c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d102      	bne.n	800652c <HAL_SPI_TransmitReceive+0x66>
 8006526:	7efb      	ldrb	r3, [r7, #27]
 8006528:	2b04      	cmp	r3, #4
 800652a:	d003      	beq.n	8006534 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800652c:	2302      	movs	r3, #2
 800652e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006532:	e1cd      	b.n	80068d0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d005      	beq.n	8006546 <HAL_SPI_TransmitReceive+0x80>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <HAL_SPI_TransmitReceive+0x80>
 8006540:	887b      	ldrh	r3, [r7, #2]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d103      	bne.n	800654e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800654c:	e1c0      	b.n	80068d0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b04      	cmp	r3, #4
 8006558:	d003      	beq.n	8006562 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2205      	movs	r2, #5
 800655e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	887a      	ldrh	r2, [r7, #2]
 8006572:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	887a      	ldrh	r2, [r7, #2]
 800657a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	887a      	ldrh	r2, [r7, #2]
 8006588:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	887a      	ldrh	r2, [r7, #2]
 800658e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065a4:	d802      	bhi.n	80065ac <HAL_SPI_TransmitReceive+0xe6>
 80065a6:	8a3b      	ldrh	r3, [r7, #16]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d908      	bls.n	80065be <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685a      	ldr	r2, [r3, #4]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065ba:	605a      	str	r2, [r3, #4]
 80065bc:	e007      	b.n	80065ce <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065cc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d8:	2b40      	cmp	r3, #64	; 0x40
 80065da:	d007      	beq.n	80065ec <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065f4:	d97c      	bls.n	80066f0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <HAL_SPI_TransmitReceive+0x13e>
 80065fe:	8a7b      	ldrh	r3, [r7, #18]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d169      	bne.n	80066d8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006608:	881a      	ldrh	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006614:	1c9a      	adds	r2, r3, #2
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800661e:	b29b      	uxth	r3, r3
 8006620:	3b01      	subs	r3, #1
 8006622:	b29a      	uxth	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006628:	e056      	b.n	80066d8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	2b02      	cmp	r3, #2
 8006636:	d11b      	bne.n	8006670 <HAL_SPI_TransmitReceive+0x1aa>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800663c:	b29b      	uxth	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d016      	beq.n	8006670 <HAL_SPI_TransmitReceive+0x1aa>
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	2b01      	cmp	r3, #1
 8006646:	d113      	bne.n	8006670 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664c:	881a      	ldrh	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006658:	1c9a      	adds	r2, r3, #2
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006662:	b29b      	uxth	r3, r3
 8006664:	3b01      	subs	r3, #1
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b01      	cmp	r3, #1
 800667c:	d11c      	bne.n	80066b8 <HAL_SPI_TransmitReceive+0x1f2>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006684:	b29b      	uxth	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d016      	beq.n	80066b8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68da      	ldr	r2, [r3, #12]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006694:	b292      	uxth	r2, r2
 8006696:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669c:	1c9a      	adds	r2, r3, #2
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	3b01      	subs	r3, #1
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066b4:	2301      	movs	r3, #1
 80066b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80066b8:	f7fb fa1a 	bl	8001af0 <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d807      	bhi.n	80066d8 <HAL_SPI_TransmitReceive+0x212>
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ce:	d003      	beq.n	80066d8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80066d6:	e0fb      	b.n	80068d0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066dc:	b29b      	uxth	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1a3      	bne.n	800662a <HAL_SPI_TransmitReceive+0x164>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d19d      	bne.n	800662a <HAL_SPI_TransmitReceive+0x164>
 80066ee:	e0df      	b.n	80068b0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <HAL_SPI_TransmitReceive+0x23a>
 80066f8:	8a7b      	ldrh	r3, [r7, #18]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	f040 80cb 	bne.w	8006896 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006704:	b29b      	uxth	r3, r3
 8006706:	2b01      	cmp	r3, #1
 8006708:	d912      	bls.n	8006730 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670e:	881a      	ldrh	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671a:	1c9a      	adds	r2, r3, #2
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006724:	b29b      	uxth	r3, r3
 8006726:	3b02      	subs	r3, #2
 8006728:	b29a      	uxth	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800672e:	e0b2      	b.n	8006896 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	330c      	adds	r3, #12
 800673a:	7812      	ldrb	r2, [r2, #0]
 800673c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800674c:	b29b      	uxth	r3, r3
 800674e:	3b01      	subs	r3, #1
 8006750:	b29a      	uxth	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006756:	e09e      	b.n	8006896 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b02      	cmp	r3, #2
 8006764:	d134      	bne.n	80067d0 <HAL_SPI_TransmitReceive+0x30a>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800676a:	b29b      	uxth	r3, r3
 800676c:	2b00      	cmp	r3, #0
 800676e:	d02f      	beq.n	80067d0 <HAL_SPI_TransmitReceive+0x30a>
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	2b01      	cmp	r3, #1
 8006774:	d12c      	bne.n	80067d0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800677a:	b29b      	uxth	r3, r3
 800677c:	2b01      	cmp	r3, #1
 800677e:	d912      	bls.n	80067a6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006784:	881a      	ldrh	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006790:	1c9a      	adds	r2, r3, #2
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800679a:	b29b      	uxth	r3, r3
 800679c:	3b02      	subs	r3, #2
 800679e:	b29a      	uxth	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067a4:	e012      	b.n	80067cc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	330c      	adds	r3, #12
 80067b0:	7812      	ldrb	r2, [r2, #0]
 80067b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	3b01      	subs	r3, #1
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d148      	bne.n	8006870 <HAL_SPI_TransmitReceive+0x3aa>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d042      	beq.n	8006870 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d923      	bls.n	800683e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68da      	ldr	r2, [r3, #12]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006800:	b292      	uxth	r2, r2
 8006802:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006808:	1c9a      	adds	r2, r3, #2
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006814:	b29b      	uxth	r3, r3
 8006816:	3b02      	subs	r3, #2
 8006818:	b29a      	uxth	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006826:	b29b      	uxth	r3, r3
 8006828:	2b01      	cmp	r3, #1
 800682a:	d81f      	bhi.n	800686c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800683a:	605a      	str	r2, [r3, #4]
 800683c:	e016      	b.n	800686c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f103 020c 	add.w	r2, r3, #12
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	7812      	ldrb	r2, [r2, #0]
 800684c:	b2d2      	uxtb	r2, r2
 800684e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006854:	1c5a      	adds	r2, r3, #1
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006860:	b29b      	uxth	r3, r3
 8006862:	3b01      	subs	r3, #1
 8006864:	b29a      	uxth	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800686c:	2301      	movs	r3, #1
 800686e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006870:	f7fb f93e 	bl	8001af0 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800687c:	429a      	cmp	r2, r3
 800687e:	d803      	bhi.n	8006888 <HAL_SPI_TransmitReceive+0x3c2>
 8006880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006886:	d102      	bne.n	800688e <HAL_SPI_TransmitReceive+0x3c8>
 8006888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688a:	2b00      	cmp	r3, #0
 800688c:	d103      	bne.n	8006896 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006894:	e01c      	b.n	80068d0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800689a:	b29b      	uxth	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	f47f af5b 	bne.w	8006758 <HAL_SPI_TransmitReceive+0x292>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f47f af54 	bne.w	8006758 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068b0:	69fa      	ldr	r2, [r7, #28]
 80068b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f000 f98f 	bl	8006bd8 <SPI_EndRxTxTransaction>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d006      	beq.n	80068ce <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2220      	movs	r2, #32
 80068ca:	661a      	str	r2, [r3, #96]	; 0x60
 80068cc:	e000      	b.n	80068d0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80068ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80068e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3728      	adds	r7, #40	; 0x28
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b088      	sub	sp, #32
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	603b      	str	r3, [r7, #0]
 80068f8:	4613      	mov	r3, r2
 80068fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068fc:	f7fb f8f8 	bl	8001af0 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006904:	1a9b      	subs	r3, r3, r2
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	4413      	add	r3, r2
 800690a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800690c:	f7fb f8f0 	bl	8001af0 <HAL_GetTick>
 8006910:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006912:	4b39      	ldr	r3, [pc, #228]	; (80069f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	015b      	lsls	r3, r3, #5
 8006918:	0d1b      	lsrs	r3, r3, #20
 800691a:	69fa      	ldr	r2, [r7, #28]
 800691c:	fb02 f303 	mul.w	r3, r2, r3
 8006920:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006922:	e054      	b.n	80069ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692a:	d050      	beq.n	80069ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800692c:	f7fb f8e0 	bl	8001af0 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	69fa      	ldr	r2, [r7, #28]
 8006938:	429a      	cmp	r2, r3
 800693a:	d902      	bls.n	8006942 <SPI_WaitFlagStateUntilTimeout+0x56>
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d13d      	bne.n	80069be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006950:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800695a:	d111      	bne.n	8006980 <SPI_WaitFlagStateUntilTimeout+0x94>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006964:	d004      	beq.n	8006970 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800696e:	d107      	bne.n	8006980 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800697e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006988:	d10f      	bne.n	80069aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e017      	b.n	80069ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	4013      	ands	r3, r2
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	429a      	cmp	r2, r3
 80069dc:	bf0c      	ite	eq
 80069de:	2301      	moveq	r3, #1
 80069e0:	2300      	movne	r3, #0
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	461a      	mov	r2, r3
 80069e6:	79fb      	ldrb	r3, [r7, #7]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d19b      	bne.n	8006924 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3720      	adds	r7, #32
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	20000000 	.word	0x20000000

080069fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08a      	sub	sp, #40	; 0x28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
 8006a08:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006a0e:	f7fb f86f 	bl	8001af0 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a16:	1a9b      	subs	r3, r3, r2
 8006a18:	683a      	ldr	r2, [r7, #0]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006a1e:	f7fb f867 	bl	8001af0 <HAL_GetTick>
 8006a22:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	330c      	adds	r3, #12
 8006a2a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006a2c:	4b3d      	ldr	r3, [pc, #244]	; (8006b24 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	4613      	mov	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	00da      	lsls	r2, r3, #3
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	0d1b      	lsrs	r3, r3, #20
 8006a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a3e:	fb02 f303 	mul.w	r3, r2, r3
 8006a42:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006a44:	e060      	b.n	8006b08 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006a4c:	d107      	bne.n	8006a5e <SPI_WaitFifoStateUntilTimeout+0x62>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d104      	bne.n	8006a5e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006a5c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a64:	d050      	beq.n	8006b08 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a66:	f7fb f843 	bl	8001af0 <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d902      	bls.n	8006a7c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d13d      	bne.n	8006af8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a94:	d111      	bne.n	8006aba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a9e:	d004      	beq.n	8006aaa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aa8:	d107      	bne.n	8006aba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ab8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ac2:	d10f      	bne.n	8006ae4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ae2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e010      	b.n	8006b1a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d101      	bne.n	8006b02 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	3b01      	subs	r3, #1
 8006b06:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689a      	ldr	r2, [r3, #8]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	4013      	ands	r3, r2
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d196      	bne.n	8006a46 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3728      	adds	r7, #40	; 0x28
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	20000000 	.word	0x20000000

08006b28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af02      	add	r7, sp, #8
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b3c:	d111      	bne.n	8006b62 <SPI_EndRxTransaction+0x3a>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b46:	d004      	beq.n	8006b52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b50:	d107      	bne.n	8006b62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b60:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	2180      	movs	r1, #128	; 0x80
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f7ff febd 	bl	80068ec <SPI_WaitFlagStateUntilTimeout>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d007      	beq.n	8006b88 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b7c:	f043 0220 	orr.w	r2, r3, #32
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e023      	b.n	8006bd0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b90:	d11d      	bne.n	8006bce <SPI_EndRxTransaction+0xa6>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b9a:	d004      	beq.n	8006ba6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ba4:	d113      	bne.n	8006bce <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f7ff ff22 	bl	80069fc <SPI_WaitFifoStateUntilTimeout>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d007      	beq.n	8006bce <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bc2:	f043 0220 	orr.w	r2, r3, #32
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e000      	b.n	8006bd0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af02      	add	r7, sp, #8
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f7ff ff03 	bl	80069fc <SPI_WaitFifoStateUntilTimeout>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d007      	beq.n	8006c0c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c00:	f043 0220 	orr.w	r2, r3, #32
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e027      	b.n	8006c5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2200      	movs	r2, #0
 8006c14:	2180      	movs	r1, #128	; 0x80
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f7ff fe68 	bl	80068ec <SPI_WaitFlagStateUntilTimeout>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d007      	beq.n	8006c32 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c26:	f043 0220 	orr.w	r2, r3, #32
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e014      	b.n	8006c5c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f7ff fedc 	bl	80069fc <SPI_WaitFifoStateUntilTimeout>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d007      	beq.n	8006c5a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c4e:	f043 0220 	orr.w	r2, r3, #32
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e000      	b.n	8006c5c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e049      	b.n	8006d0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d106      	bne.n	8006c90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7fa fda6 	bl	80017dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	f001 f952 	bl	8007f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b082      	sub	sp, #8
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d101      	bne.n	8006d24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e049      	b.n	8006db8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d106      	bne.n	8006d3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f841 	bl	8006dc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2202      	movs	r2, #2
 8006d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	4619      	mov	r1, r3
 8006d50:	4610      	mov	r0, r2
 8006d52:	f001 f8fb 	bl	8007f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d109      	bne.n	8006df8 <HAL_TIM_PWM_Start+0x24>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	bf14      	ite	ne
 8006df0:	2301      	movne	r3, #1
 8006df2:	2300      	moveq	r3, #0
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	e03c      	b.n	8006e72 <HAL_TIM_PWM_Start+0x9e>
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	2b04      	cmp	r3, #4
 8006dfc:	d109      	bne.n	8006e12 <HAL_TIM_PWM_Start+0x3e>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	bf14      	ite	ne
 8006e0a:	2301      	movne	r3, #1
 8006e0c:	2300      	moveq	r3, #0
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	e02f      	b.n	8006e72 <HAL_TIM_PWM_Start+0x9e>
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d109      	bne.n	8006e2c <HAL_TIM_PWM_Start+0x58>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	bf14      	ite	ne
 8006e24:	2301      	movne	r3, #1
 8006e26:	2300      	moveq	r3, #0
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	e022      	b.n	8006e72 <HAL_TIM_PWM_Start+0x9e>
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	2b0c      	cmp	r3, #12
 8006e30:	d109      	bne.n	8006e46 <HAL_TIM_PWM_Start+0x72>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	bf14      	ite	ne
 8006e3e:	2301      	movne	r3, #1
 8006e40:	2300      	moveq	r3, #0
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	e015      	b.n	8006e72 <HAL_TIM_PWM_Start+0x9e>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b10      	cmp	r3, #16
 8006e4a:	d109      	bne.n	8006e60 <HAL_TIM_PWM_Start+0x8c>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	bf14      	ite	ne
 8006e58:	2301      	movne	r3, #1
 8006e5a:	2300      	moveq	r3, #0
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	e008      	b.n	8006e72 <HAL_TIM_PWM_Start+0x9e>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	bf14      	ite	ne
 8006e6c:	2301      	movne	r3, #1
 8006e6e:	2300      	moveq	r3, #0
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e0a6      	b.n	8006fc8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d104      	bne.n	8006e8a <HAL_TIM_PWM_Start+0xb6>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2202      	movs	r2, #2
 8006e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e88:	e023      	b.n	8006ed2 <HAL_TIM_PWM_Start+0xfe>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b04      	cmp	r3, #4
 8006e8e:	d104      	bne.n	8006e9a <HAL_TIM_PWM_Start+0xc6>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e98:	e01b      	b.n	8006ed2 <HAL_TIM_PWM_Start+0xfe>
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2b08      	cmp	r3, #8
 8006e9e:	d104      	bne.n	8006eaa <HAL_TIM_PWM_Start+0xd6>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ea8:	e013      	b.n	8006ed2 <HAL_TIM_PWM_Start+0xfe>
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b0c      	cmp	r3, #12
 8006eae:	d104      	bne.n	8006eba <HAL_TIM_PWM_Start+0xe6>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006eb8:	e00b      	b.n	8006ed2 <HAL_TIM_PWM_Start+0xfe>
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2b10      	cmp	r3, #16
 8006ebe:	d104      	bne.n	8006eca <HAL_TIM_PWM_Start+0xf6>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ec8:	e003      	b.n	8006ed2 <HAL_TIM_PWM_Start+0xfe>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2202      	movs	r2, #2
 8006ece:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f001 feae 	bl	8008c3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a3a      	ldr	r2, [pc, #232]	; (8006fd0 <HAL_TIM_PWM_Start+0x1fc>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d018      	beq.n	8006f1c <HAL_TIM_PWM_Start+0x148>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a39      	ldr	r2, [pc, #228]	; (8006fd4 <HAL_TIM_PWM_Start+0x200>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d013      	beq.n	8006f1c <HAL_TIM_PWM_Start+0x148>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a37      	ldr	r2, [pc, #220]	; (8006fd8 <HAL_TIM_PWM_Start+0x204>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d00e      	beq.n	8006f1c <HAL_TIM_PWM_Start+0x148>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a36      	ldr	r2, [pc, #216]	; (8006fdc <HAL_TIM_PWM_Start+0x208>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d009      	beq.n	8006f1c <HAL_TIM_PWM_Start+0x148>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a34      	ldr	r2, [pc, #208]	; (8006fe0 <HAL_TIM_PWM_Start+0x20c>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d004      	beq.n	8006f1c <HAL_TIM_PWM_Start+0x148>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a33      	ldr	r2, [pc, #204]	; (8006fe4 <HAL_TIM_PWM_Start+0x210>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d101      	bne.n	8006f20 <HAL_TIM_PWM_Start+0x14c>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e000      	b.n	8006f22 <HAL_TIM_PWM_Start+0x14e>
 8006f20:	2300      	movs	r3, #0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d007      	beq.n	8006f36 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a25      	ldr	r2, [pc, #148]	; (8006fd0 <HAL_TIM_PWM_Start+0x1fc>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d022      	beq.n	8006f86 <HAL_TIM_PWM_Start+0x1b2>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f48:	d01d      	beq.n	8006f86 <HAL_TIM_PWM_Start+0x1b2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a26      	ldr	r2, [pc, #152]	; (8006fe8 <HAL_TIM_PWM_Start+0x214>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d018      	beq.n	8006f86 <HAL_TIM_PWM_Start+0x1b2>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a24      	ldr	r2, [pc, #144]	; (8006fec <HAL_TIM_PWM_Start+0x218>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d013      	beq.n	8006f86 <HAL_TIM_PWM_Start+0x1b2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a23      	ldr	r2, [pc, #140]	; (8006ff0 <HAL_TIM_PWM_Start+0x21c>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d00e      	beq.n	8006f86 <HAL_TIM_PWM_Start+0x1b2>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a19      	ldr	r2, [pc, #100]	; (8006fd4 <HAL_TIM_PWM_Start+0x200>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d009      	beq.n	8006f86 <HAL_TIM_PWM_Start+0x1b2>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a18      	ldr	r2, [pc, #96]	; (8006fd8 <HAL_TIM_PWM_Start+0x204>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d004      	beq.n	8006f86 <HAL_TIM_PWM_Start+0x1b2>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a18      	ldr	r2, [pc, #96]	; (8006fe4 <HAL_TIM_PWM_Start+0x210>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d115      	bne.n	8006fb2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689a      	ldr	r2, [r3, #8]
 8006f8c:	4b19      	ldr	r3, [pc, #100]	; (8006ff4 <HAL_TIM_PWM_Start+0x220>)
 8006f8e:	4013      	ands	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2b06      	cmp	r3, #6
 8006f96:	d015      	beq.n	8006fc4 <HAL_TIM_PWM_Start+0x1f0>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f9e:	d011      	beq.n	8006fc4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f042 0201 	orr.w	r2, r2, #1
 8006fae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fb0:	e008      	b.n	8006fc4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f042 0201 	orr.w	r2, r2, #1
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	e000      	b.n	8006fc6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	40012c00 	.word	0x40012c00
 8006fd4:	40013400 	.word	0x40013400
 8006fd8:	40014000 	.word	0x40014000
 8006fdc:	40014400 	.word	0x40014400
 8006fe0:	40014800 	.word	0x40014800
 8006fe4:	40015000 	.word	0x40015000
 8006fe8:	40000400 	.word	0x40000400
 8006fec:	40000800 	.word	0x40000800
 8006ff0:	40000c00 	.word	0x40000c00
 8006ff4:	00010007 	.word	0x00010007

08006ff8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e049      	b.n	800709e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d106      	bne.n	8007024 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f841 	bl	80070a6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2202      	movs	r2, #2
 8007028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	3304      	adds	r3, #4
 8007034:	4619      	mov	r1, r3
 8007036:	4610      	mov	r0, r2
 8007038:	f000 ff88 	bl	8007f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b083      	sub	sp, #12
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80070ae:	bf00      	nop
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
	...

080070bc <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d104      	bne.n	80070d6 <HAL_TIM_IC_Start+0x1a>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	e023      	b.n	800711e <HAL_TIM_IC_Start+0x62>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d104      	bne.n	80070e6 <HAL_TIM_IC_Start+0x2a>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	e01b      	b.n	800711e <HAL_TIM_IC_Start+0x62>
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	2b08      	cmp	r3, #8
 80070ea:	d104      	bne.n	80070f6 <HAL_TIM_IC_Start+0x3a>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	e013      	b.n	800711e <HAL_TIM_IC_Start+0x62>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2b0c      	cmp	r3, #12
 80070fa:	d104      	bne.n	8007106 <HAL_TIM_IC_Start+0x4a>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007102:	b2db      	uxtb	r3, r3
 8007104:	e00b      	b.n	800711e <HAL_TIM_IC_Start+0x62>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b10      	cmp	r3, #16
 800710a:	d104      	bne.n	8007116 <HAL_TIM_IC_Start+0x5a>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007112:	b2db      	uxtb	r3, r3
 8007114:	e003      	b.n	800711e <HAL_TIM_IC_Start+0x62>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800711c:	b2db      	uxtb	r3, r3
 800711e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d104      	bne.n	8007130 <HAL_TIM_IC_Start+0x74>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800712c:	b2db      	uxtb	r3, r3
 800712e:	e013      	b.n	8007158 <HAL_TIM_IC_Start+0x9c>
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	2b04      	cmp	r3, #4
 8007134:	d104      	bne.n	8007140 <HAL_TIM_IC_Start+0x84>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800713c:	b2db      	uxtb	r3, r3
 800713e:	e00b      	b.n	8007158 <HAL_TIM_IC_Start+0x9c>
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	2b08      	cmp	r3, #8
 8007144:	d104      	bne.n	8007150 <HAL_TIM_IC_Start+0x94>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800714c:	b2db      	uxtb	r3, r3
 800714e:	e003      	b.n	8007158 <HAL_TIM_IC_Start+0x9c>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007156:	b2db      	uxtb	r3, r3
 8007158:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800715a:	7bfb      	ldrb	r3, [r7, #15]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d102      	bne.n	8007166 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007160:	7bbb      	ldrb	r3, [r7, #14]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d001      	beq.n	800716a <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e097      	b.n	800729a <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d104      	bne.n	800717a <HAL_TIM_IC_Start+0xbe>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2202      	movs	r2, #2
 8007174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007178:	e023      	b.n	80071c2 <HAL_TIM_IC_Start+0x106>
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2b04      	cmp	r3, #4
 800717e:	d104      	bne.n	800718a <HAL_TIM_IC_Start+0xce>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2202      	movs	r2, #2
 8007184:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007188:	e01b      	b.n	80071c2 <HAL_TIM_IC_Start+0x106>
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2b08      	cmp	r3, #8
 800718e:	d104      	bne.n	800719a <HAL_TIM_IC_Start+0xde>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007198:	e013      	b.n	80071c2 <HAL_TIM_IC_Start+0x106>
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2b0c      	cmp	r3, #12
 800719e:	d104      	bne.n	80071aa <HAL_TIM_IC_Start+0xee>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071a8:	e00b      	b.n	80071c2 <HAL_TIM_IC_Start+0x106>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b10      	cmp	r3, #16
 80071ae:	d104      	bne.n	80071ba <HAL_TIM_IC_Start+0xfe>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2202      	movs	r2, #2
 80071b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071b8:	e003      	b.n	80071c2 <HAL_TIM_IC_Start+0x106>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2202      	movs	r2, #2
 80071be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d104      	bne.n	80071d2 <HAL_TIM_IC_Start+0x116>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071d0:	e013      	b.n	80071fa <HAL_TIM_IC_Start+0x13e>
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b04      	cmp	r3, #4
 80071d6:	d104      	bne.n	80071e2 <HAL_TIM_IC_Start+0x126>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2202      	movs	r2, #2
 80071dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071e0:	e00b      	b.n	80071fa <HAL_TIM_IC_Start+0x13e>
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2b08      	cmp	r3, #8
 80071e6:	d104      	bne.n	80071f2 <HAL_TIM_IC_Start+0x136>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2202      	movs	r2, #2
 80071ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071f0:	e003      	b.n	80071fa <HAL_TIM_IC_Start+0x13e>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2202      	movs	r2, #2
 80071f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2201      	movs	r2, #1
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	4618      	mov	r0, r3
 8007204:	f001 fd1a 	bl	8008c3c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a25      	ldr	r2, [pc, #148]	; (80072a4 <HAL_TIM_IC_Start+0x1e8>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d022      	beq.n	8007258 <HAL_TIM_IC_Start+0x19c>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800721a:	d01d      	beq.n	8007258 <HAL_TIM_IC_Start+0x19c>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a21      	ldr	r2, [pc, #132]	; (80072a8 <HAL_TIM_IC_Start+0x1ec>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d018      	beq.n	8007258 <HAL_TIM_IC_Start+0x19c>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a20      	ldr	r2, [pc, #128]	; (80072ac <HAL_TIM_IC_Start+0x1f0>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d013      	beq.n	8007258 <HAL_TIM_IC_Start+0x19c>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a1e      	ldr	r2, [pc, #120]	; (80072b0 <HAL_TIM_IC_Start+0x1f4>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d00e      	beq.n	8007258 <HAL_TIM_IC_Start+0x19c>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a1d      	ldr	r2, [pc, #116]	; (80072b4 <HAL_TIM_IC_Start+0x1f8>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d009      	beq.n	8007258 <HAL_TIM_IC_Start+0x19c>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a1b      	ldr	r2, [pc, #108]	; (80072b8 <HAL_TIM_IC_Start+0x1fc>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d004      	beq.n	8007258 <HAL_TIM_IC_Start+0x19c>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a1a      	ldr	r2, [pc, #104]	; (80072bc <HAL_TIM_IC_Start+0x200>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d115      	bne.n	8007284 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689a      	ldr	r2, [r3, #8]
 800725e:	4b18      	ldr	r3, [pc, #96]	; (80072c0 <HAL_TIM_IC_Start+0x204>)
 8007260:	4013      	ands	r3, r2
 8007262:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	2b06      	cmp	r3, #6
 8007268:	d015      	beq.n	8007296 <HAL_TIM_IC_Start+0x1da>
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007270:	d011      	beq.n	8007296 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f042 0201 	orr.w	r2, r2, #1
 8007280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007282:	e008      	b.n	8007296 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f042 0201 	orr.w	r2, r2, #1
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	e000      	b.n	8007298 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007296:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	40012c00 	.word	0x40012c00
 80072a8:	40000400 	.word	0x40000400
 80072ac:	40000800 	.word	0x40000800
 80072b0:	40000c00 	.word	0x40000c00
 80072b4:	40013400 	.word	0x40013400
 80072b8:	40014000 	.word	0x40014000
 80072bc:	40015000 	.word	0x40015000
 80072c0:	00010007 	.word	0x00010007

080072c4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072ce:	2300      	movs	r3, #0
 80072d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d104      	bne.n	80072e2 <HAL_TIM_IC_Start_IT+0x1e>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	e023      	b.n	800732a <HAL_TIM_IC_Start_IT+0x66>
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b04      	cmp	r3, #4
 80072e6:	d104      	bne.n	80072f2 <HAL_TIM_IC_Start_IT+0x2e>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	e01b      	b.n	800732a <HAL_TIM_IC_Start_IT+0x66>
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d104      	bne.n	8007302 <HAL_TIM_IC_Start_IT+0x3e>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	e013      	b.n	800732a <HAL_TIM_IC_Start_IT+0x66>
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	2b0c      	cmp	r3, #12
 8007306:	d104      	bne.n	8007312 <HAL_TIM_IC_Start_IT+0x4e>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800730e:	b2db      	uxtb	r3, r3
 8007310:	e00b      	b.n	800732a <HAL_TIM_IC_Start_IT+0x66>
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2b10      	cmp	r3, #16
 8007316:	d104      	bne.n	8007322 <HAL_TIM_IC_Start_IT+0x5e>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800731e:	b2db      	uxtb	r3, r3
 8007320:	e003      	b.n	800732a <HAL_TIM_IC_Start_IT+0x66>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007328:	b2db      	uxtb	r3, r3
 800732a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d104      	bne.n	800733c <HAL_TIM_IC_Start_IT+0x78>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007338:	b2db      	uxtb	r3, r3
 800733a:	e013      	b.n	8007364 <HAL_TIM_IC_Start_IT+0xa0>
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	2b04      	cmp	r3, #4
 8007340:	d104      	bne.n	800734c <HAL_TIM_IC_Start_IT+0x88>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007348:	b2db      	uxtb	r3, r3
 800734a:	e00b      	b.n	8007364 <HAL_TIM_IC_Start_IT+0xa0>
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	2b08      	cmp	r3, #8
 8007350:	d104      	bne.n	800735c <HAL_TIM_IC_Start_IT+0x98>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007358:	b2db      	uxtb	r3, r3
 800735a:	e003      	b.n	8007364 <HAL_TIM_IC_Start_IT+0xa0>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007362:	b2db      	uxtb	r3, r3
 8007364:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007366:	7bbb      	ldrb	r3, [r7, #14]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d102      	bne.n	8007372 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800736c:	7b7b      	ldrb	r3, [r7, #13]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d001      	beq.n	8007376 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e0e2      	b.n	800753c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d104      	bne.n	8007386 <HAL_TIM_IC_Start_IT+0xc2>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007384:	e023      	b.n	80073ce <HAL_TIM_IC_Start_IT+0x10a>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2b04      	cmp	r3, #4
 800738a:	d104      	bne.n	8007396 <HAL_TIM_IC_Start_IT+0xd2>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2202      	movs	r2, #2
 8007390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007394:	e01b      	b.n	80073ce <HAL_TIM_IC_Start_IT+0x10a>
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2b08      	cmp	r3, #8
 800739a:	d104      	bne.n	80073a6 <HAL_TIM_IC_Start_IT+0xe2>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2202      	movs	r2, #2
 80073a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073a4:	e013      	b.n	80073ce <HAL_TIM_IC_Start_IT+0x10a>
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b0c      	cmp	r3, #12
 80073aa:	d104      	bne.n	80073b6 <HAL_TIM_IC_Start_IT+0xf2>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2202      	movs	r2, #2
 80073b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073b4:	e00b      	b.n	80073ce <HAL_TIM_IC_Start_IT+0x10a>
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b10      	cmp	r3, #16
 80073ba:	d104      	bne.n	80073c6 <HAL_TIM_IC_Start_IT+0x102>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073c4:	e003      	b.n	80073ce <HAL_TIM_IC_Start_IT+0x10a>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2202      	movs	r2, #2
 80073ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d104      	bne.n	80073de <HAL_TIM_IC_Start_IT+0x11a>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2202      	movs	r2, #2
 80073d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073dc:	e013      	b.n	8007406 <HAL_TIM_IC_Start_IT+0x142>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	2b04      	cmp	r3, #4
 80073e2:	d104      	bne.n	80073ee <HAL_TIM_IC_Start_IT+0x12a>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2202      	movs	r2, #2
 80073e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073ec:	e00b      	b.n	8007406 <HAL_TIM_IC_Start_IT+0x142>
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2b08      	cmp	r3, #8
 80073f2:	d104      	bne.n	80073fe <HAL_TIM_IC_Start_IT+0x13a>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2202      	movs	r2, #2
 80073f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80073fc:	e003      	b.n	8007406 <HAL_TIM_IC_Start_IT+0x142>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2202      	movs	r2, #2
 8007402:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2b0c      	cmp	r3, #12
 800740a:	d841      	bhi.n	8007490 <HAL_TIM_IC_Start_IT+0x1cc>
 800740c:	a201      	add	r2, pc, #4	; (adr r2, 8007414 <HAL_TIM_IC_Start_IT+0x150>)
 800740e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007412:	bf00      	nop
 8007414:	08007449 	.word	0x08007449
 8007418:	08007491 	.word	0x08007491
 800741c:	08007491 	.word	0x08007491
 8007420:	08007491 	.word	0x08007491
 8007424:	0800745b 	.word	0x0800745b
 8007428:	08007491 	.word	0x08007491
 800742c:	08007491 	.word	0x08007491
 8007430:	08007491 	.word	0x08007491
 8007434:	0800746d 	.word	0x0800746d
 8007438:	08007491 	.word	0x08007491
 800743c:	08007491 	.word	0x08007491
 8007440:	08007491 	.word	0x08007491
 8007444:	0800747f 	.word	0x0800747f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68da      	ldr	r2, [r3, #12]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f042 0202 	orr.w	r2, r2, #2
 8007456:	60da      	str	r2, [r3, #12]
      break;
 8007458:	e01d      	b.n	8007496 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68da      	ldr	r2, [r3, #12]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f042 0204 	orr.w	r2, r2, #4
 8007468:	60da      	str	r2, [r3, #12]
      break;
 800746a:	e014      	b.n	8007496 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68da      	ldr	r2, [r3, #12]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f042 0208 	orr.w	r2, r2, #8
 800747a:	60da      	str	r2, [r3, #12]
      break;
 800747c:	e00b      	b.n	8007496 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68da      	ldr	r2, [r3, #12]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f042 0210 	orr.w	r2, r2, #16
 800748c:	60da      	str	r2, [r3, #12]
      break;
 800748e:	e002      	b.n	8007496 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	73fb      	strb	r3, [r7, #15]
      break;
 8007494:	bf00      	nop
  }

  if (status == HAL_OK)
 8007496:	7bfb      	ldrb	r3, [r7, #15]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d14e      	bne.n	800753a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2201      	movs	r2, #1
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f001 fbc9 	bl	8008c3c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a25      	ldr	r2, [pc, #148]	; (8007544 <HAL_TIM_IC_Start_IT+0x280>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d022      	beq.n	80074fa <HAL_TIM_IC_Start_IT+0x236>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074bc:	d01d      	beq.n	80074fa <HAL_TIM_IC_Start_IT+0x236>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a21      	ldr	r2, [pc, #132]	; (8007548 <HAL_TIM_IC_Start_IT+0x284>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d018      	beq.n	80074fa <HAL_TIM_IC_Start_IT+0x236>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a1f      	ldr	r2, [pc, #124]	; (800754c <HAL_TIM_IC_Start_IT+0x288>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d013      	beq.n	80074fa <HAL_TIM_IC_Start_IT+0x236>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a1e      	ldr	r2, [pc, #120]	; (8007550 <HAL_TIM_IC_Start_IT+0x28c>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d00e      	beq.n	80074fa <HAL_TIM_IC_Start_IT+0x236>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a1c      	ldr	r2, [pc, #112]	; (8007554 <HAL_TIM_IC_Start_IT+0x290>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d009      	beq.n	80074fa <HAL_TIM_IC_Start_IT+0x236>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a1b      	ldr	r2, [pc, #108]	; (8007558 <HAL_TIM_IC_Start_IT+0x294>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d004      	beq.n	80074fa <HAL_TIM_IC_Start_IT+0x236>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a19      	ldr	r2, [pc, #100]	; (800755c <HAL_TIM_IC_Start_IT+0x298>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d115      	bne.n	8007526 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689a      	ldr	r2, [r3, #8]
 8007500:	4b17      	ldr	r3, [pc, #92]	; (8007560 <HAL_TIM_IC_Start_IT+0x29c>)
 8007502:	4013      	ands	r3, r2
 8007504:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	2b06      	cmp	r3, #6
 800750a:	d015      	beq.n	8007538 <HAL_TIM_IC_Start_IT+0x274>
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007512:	d011      	beq.n	8007538 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f042 0201 	orr.w	r2, r2, #1
 8007522:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007524:	e008      	b.n	8007538 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f042 0201 	orr.w	r2, r2, #1
 8007534:	601a      	str	r2, [r3, #0]
 8007536:	e000      	b.n	800753a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007538:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800753a:	7bfb      	ldrb	r3, [r7, #15]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	40012c00 	.word	0x40012c00
 8007548:	40000400 	.word	0x40000400
 800754c:	40000800 	.word	0x40000800
 8007550:	40000c00 	.word	0x40000c00
 8007554:	40013400 	.word	0x40013400
 8007558:	40014000 	.word	0x40014000
 800755c:	40015000 	.word	0x40015000
 8007560:	00010007 	.word	0x00010007

08007564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	f003 0302 	and.w	r3, r3, #2
 8007576:	2b02      	cmp	r3, #2
 8007578:	d122      	bne.n	80075c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	f003 0302 	and.w	r3, r3, #2
 8007584:	2b02      	cmp	r3, #2
 8007586:	d11b      	bne.n	80075c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f06f 0202 	mvn.w	r2, #2
 8007590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	f003 0303 	and.w	r3, r3, #3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7f9 f9b0 	bl	800090c <HAL_TIM_IC_CaptureCallback>
 80075ac:	e005      	b.n	80075ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 fcae 	bl	8007f10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fcb5 	bl	8007f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	f003 0304 	and.w	r3, r3, #4
 80075ca:	2b04      	cmp	r3, #4
 80075cc:	d122      	bne.n	8007614 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	f003 0304 	and.w	r3, r3, #4
 80075d8:	2b04      	cmp	r3, #4
 80075da:	d11b      	bne.n	8007614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f06f 0204 	mvn.w	r2, #4
 80075e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2202      	movs	r2, #2
 80075ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d003      	beq.n	8007602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7f9 f986 	bl	800090c <HAL_TIM_IC_CaptureCallback>
 8007600:	e005      	b.n	800760e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fc84 	bl	8007f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fc8b 	bl	8007f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	f003 0308 	and.w	r3, r3, #8
 800761e:	2b08      	cmp	r3, #8
 8007620:	d122      	bne.n	8007668 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	f003 0308 	and.w	r3, r3, #8
 800762c:	2b08      	cmp	r3, #8
 800762e:	d11b      	bne.n	8007668 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f06f 0208 	mvn.w	r2, #8
 8007638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2204      	movs	r2, #4
 800763e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	f003 0303 	and.w	r3, r3, #3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d003      	beq.n	8007656 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7f9 f95c 	bl	800090c <HAL_TIM_IC_CaptureCallback>
 8007654:	e005      	b.n	8007662 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fc5a 	bl	8007f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fc61 	bl	8007f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	f003 0310 	and.w	r3, r3, #16
 8007672:	2b10      	cmp	r3, #16
 8007674:	d122      	bne.n	80076bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	f003 0310 	and.w	r3, r3, #16
 8007680:	2b10      	cmp	r3, #16
 8007682:	d11b      	bne.n	80076bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f06f 0210 	mvn.w	r2, #16
 800768c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2208      	movs	r2, #8
 8007692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d003      	beq.n	80076aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7f9 f932 	bl	800090c <HAL_TIM_IC_CaptureCallback>
 80076a8:	e005      	b.n	80076b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fc30 	bl	8007f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fc37 	bl	8007f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d10e      	bne.n	80076e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f003 0301 	and.w	r3, r3, #1
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d107      	bne.n	80076e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f06f 0201 	mvn.w	r2, #1
 80076e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fc0a 	bl	8007efc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076f2:	2b80      	cmp	r3, #128	; 0x80
 80076f4:	d10e      	bne.n	8007714 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007700:	2b80      	cmp	r3, #128	; 0x80
 8007702:	d107      	bne.n	8007714 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800770c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f001 fb5a 	bl	8008dc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800771e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007722:	d10e      	bne.n	8007742 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800772e:	2b80      	cmp	r3, #128	; 0x80
 8007730:	d107      	bne.n	8007742 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800773a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f001 fb4d 	bl	8008ddc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774c:	2b40      	cmp	r3, #64	; 0x40
 800774e:	d10e      	bne.n	800776e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775a:	2b40      	cmp	r3, #64	; 0x40
 800775c:	d107      	bne.n	800776e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fbe5 	bl	8007f38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	f003 0320 	and.w	r3, r3, #32
 8007778:	2b20      	cmp	r3, #32
 800777a:	d10e      	bne.n	800779a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	f003 0320 	and.w	r3, r3, #32
 8007786:	2b20      	cmp	r3, #32
 8007788:	d107      	bne.n	800779a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f06f 0220 	mvn.w	r2, #32
 8007792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f001 fb0d 	bl	8008db4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077a8:	d10f      	bne.n	80077ca <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077b8:	d107      	bne.n	80077ca <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80077c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f001 fb13 	bl	8008df0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077d8:	d10f      	bne.n	80077fa <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077e8:	d107      	bne.n	80077fa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80077f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f001 fb05 	bl	8008e04 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007808:	d10f      	bne.n	800782a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007818:	d107      	bne.n	800782a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f001 faf7 	bl	8008e18 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007834:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007838:	d10f      	bne.n	800785a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007844:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007848:	d107      	bne.n	800785a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f001 fae9 	bl	8008e2c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800785a:	bf00      	nop
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b086      	sub	sp, #24
 8007866:	af00      	add	r7, sp, #0
 8007868:	60f8      	str	r0, [r7, #12]
 800786a:	60b9      	str	r1, [r7, #8]
 800786c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007878:	2b01      	cmp	r3, #1
 800787a:	d101      	bne.n	8007880 <HAL_TIM_IC_ConfigChannel+0x1e>
 800787c:	2302      	movs	r3, #2
 800787e:	e088      	b.n	8007992 <HAL_TIM_IC_ConfigChannel+0x130>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d11b      	bne.n	80078c6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6818      	ldr	r0, [r3, #0]
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	6819      	ldr	r1, [r3, #0]
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	f001 f807 	bl	80088b0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	699a      	ldr	r2, [r3, #24]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 020c 	bic.w	r2, r2, #12
 80078b0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6999      	ldr	r1, [r3, #24]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	689a      	ldr	r2, [r3, #8]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	430a      	orrs	r2, r1
 80078c2:	619a      	str	r2, [r3, #24]
 80078c4:	e060      	b.n	8007988 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b04      	cmp	r3, #4
 80078ca:	d11c      	bne.n	8007906 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6818      	ldr	r0, [r3, #0]
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	6819      	ldr	r1, [r3, #0]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	f001 f88b 	bl	80089f6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	699a      	ldr	r2, [r3, #24]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80078ee:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6999      	ldr	r1, [r3, #24]
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	021a      	lsls	r2, r3, #8
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	430a      	orrs	r2, r1
 8007902:	619a      	str	r2, [r3, #24]
 8007904:	e040      	b.n	8007988 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2b08      	cmp	r3, #8
 800790a:	d11b      	bne.n	8007944 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6818      	ldr	r0, [r3, #0]
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	6819      	ldr	r1, [r3, #0]
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	f001 f8d8 	bl	8008ad0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	69da      	ldr	r2, [r3, #28]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f022 020c 	bic.w	r2, r2, #12
 800792e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	69d9      	ldr	r1, [r3, #28]
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	689a      	ldr	r2, [r3, #8]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	61da      	str	r2, [r3, #28]
 8007942:	e021      	b.n	8007988 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b0c      	cmp	r3, #12
 8007948:	d11c      	bne.n	8007984 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6818      	ldr	r0, [r3, #0]
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	6819      	ldr	r1, [r3, #0]
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	f001 f8f5 	bl	8008b48 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	69da      	ldr	r2, [r3, #28]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800796c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	69d9      	ldr	r1, [r3, #28]
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	021a      	lsls	r2, r3, #8
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	61da      	str	r2, [r3, #28]
 8007982:	e001      	b.n	8007988 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007990:	7dfb      	ldrb	r3, [r7, #23]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3718      	adds	r7, #24
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
	...

0800799c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d101      	bne.n	80079ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80079b6:	2302      	movs	r3, #2
 80079b8:	e0ff      	b.n	8007bba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b14      	cmp	r3, #20
 80079c6:	f200 80f0 	bhi.w	8007baa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80079ca:	a201      	add	r2, pc, #4	; (adr r2, 80079d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80079cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d0:	08007a25 	.word	0x08007a25
 80079d4:	08007bab 	.word	0x08007bab
 80079d8:	08007bab 	.word	0x08007bab
 80079dc:	08007bab 	.word	0x08007bab
 80079e0:	08007a65 	.word	0x08007a65
 80079e4:	08007bab 	.word	0x08007bab
 80079e8:	08007bab 	.word	0x08007bab
 80079ec:	08007bab 	.word	0x08007bab
 80079f0:	08007aa7 	.word	0x08007aa7
 80079f4:	08007bab 	.word	0x08007bab
 80079f8:	08007bab 	.word	0x08007bab
 80079fc:	08007bab 	.word	0x08007bab
 8007a00:	08007ae7 	.word	0x08007ae7
 8007a04:	08007bab 	.word	0x08007bab
 8007a08:	08007bab 	.word	0x08007bab
 8007a0c:	08007bab 	.word	0x08007bab
 8007a10:	08007b29 	.word	0x08007b29
 8007a14:	08007bab 	.word	0x08007bab
 8007a18:	08007bab 	.word	0x08007bab
 8007a1c:	08007bab 	.word	0x08007bab
 8007a20:	08007b69 	.word	0x08007b69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68b9      	ldr	r1, [r7, #8]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 fb36 	bl	800809c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	699a      	ldr	r2, [r3, #24]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f042 0208 	orr.w	r2, r2, #8
 8007a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	699a      	ldr	r2, [r3, #24]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f022 0204 	bic.w	r2, r2, #4
 8007a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6999      	ldr	r1, [r3, #24]
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	691a      	ldr	r2, [r3, #16]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	619a      	str	r2, [r3, #24]
      break;
 8007a62:	e0a5      	b.n	8007bb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68b9      	ldr	r1, [r7, #8]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 fbb0 	bl	80081d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	699a      	ldr	r2, [r3, #24]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	699a      	ldr	r2, [r3, #24]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6999      	ldr	r1, [r3, #24]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	021a      	lsls	r2, r3, #8
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	619a      	str	r2, [r3, #24]
      break;
 8007aa4:	e084      	b.n	8007bb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68b9      	ldr	r1, [r7, #8]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f000 fc23 	bl	80082f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	69da      	ldr	r2, [r3, #28]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f042 0208 	orr.w	r2, r2, #8
 8007ac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	69da      	ldr	r2, [r3, #28]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f022 0204 	bic.w	r2, r2, #4
 8007ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	69d9      	ldr	r1, [r3, #28]
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	691a      	ldr	r2, [r3, #16]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	61da      	str	r2, [r3, #28]
      break;
 8007ae4:	e064      	b.n	8007bb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68b9      	ldr	r1, [r7, #8]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 fc95 	bl	800841c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	69da      	ldr	r2, [r3, #28]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	69da      	ldr	r2, [r3, #28]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	69d9      	ldr	r1, [r3, #28]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	021a      	lsls	r2, r3, #8
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	430a      	orrs	r2, r1
 8007b24:	61da      	str	r2, [r3, #28]
      break;
 8007b26:	e043      	b.n	8007bb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68b9      	ldr	r1, [r7, #8]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 fd08 	bl	8008544 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f042 0208 	orr.w	r2, r2, #8
 8007b42:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 0204 	bic.w	r2, r2, #4
 8007b52:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	691a      	ldr	r2, [r3, #16]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007b66:	e023      	b.n	8007bb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68b9      	ldr	r1, [r7, #8]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 fd52 	bl	8008618 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b82:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b92:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	021a      	lsls	r2, r3, #8
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	430a      	orrs	r2, r1
 8007ba6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007ba8:	e002      	b.n	8007bb0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	75fb      	strb	r3, [r7, #23]
      break;
 8007bae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3718      	adds	r7, #24
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop

08007bc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d101      	bne.n	8007be0 <HAL_TIM_ConfigClockSource+0x1c>
 8007bdc:	2302      	movs	r3, #2
 8007bde:	e0f6      	b.n	8007dce <HAL_TIM_ConfigClockSource+0x20a>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2202      	movs	r2, #2
 8007bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007bfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007c02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a6f      	ldr	r2, [pc, #444]	; (8007dd8 <HAL_TIM_ConfigClockSource+0x214>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	f000 80c1 	beq.w	8007da2 <HAL_TIM_ConfigClockSource+0x1de>
 8007c20:	4a6d      	ldr	r2, [pc, #436]	; (8007dd8 <HAL_TIM_ConfigClockSource+0x214>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	f200 80c6 	bhi.w	8007db4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c28:	4a6c      	ldr	r2, [pc, #432]	; (8007ddc <HAL_TIM_ConfigClockSource+0x218>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	f000 80b9 	beq.w	8007da2 <HAL_TIM_ConfigClockSource+0x1de>
 8007c30:	4a6a      	ldr	r2, [pc, #424]	; (8007ddc <HAL_TIM_ConfigClockSource+0x218>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	f200 80be 	bhi.w	8007db4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c38:	4a69      	ldr	r2, [pc, #420]	; (8007de0 <HAL_TIM_ConfigClockSource+0x21c>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	f000 80b1 	beq.w	8007da2 <HAL_TIM_ConfigClockSource+0x1de>
 8007c40:	4a67      	ldr	r2, [pc, #412]	; (8007de0 <HAL_TIM_ConfigClockSource+0x21c>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	f200 80b6 	bhi.w	8007db4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c48:	4a66      	ldr	r2, [pc, #408]	; (8007de4 <HAL_TIM_ConfigClockSource+0x220>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	f000 80a9 	beq.w	8007da2 <HAL_TIM_ConfigClockSource+0x1de>
 8007c50:	4a64      	ldr	r2, [pc, #400]	; (8007de4 <HAL_TIM_ConfigClockSource+0x220>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	f200 80ae 	bhi.w	8007db4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c58:	4a63      	ldr	r2, [pc, #396]	; (8007de8 <HAL_TIM_ConfigClockSource+0x224>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	f000 80a1 	beq.w	8007da2 <HAL_TIM_ConfigClockSource+0x1de>
 8007c60:	4a61      	ldr	r2, [pc, #388]	; (8007de8 <HAL_TIM_ConfigClockSource+0x224>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	f200 80a6 	bhi.w	8007db4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c68:	4a60      	ldr	r2, [pc, #384]	; (8007dec <HAL_TIM_ConfigClockSource+0x228>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	f000 8099 	beq.w	8007da2 <HAL_TIM_ConfigClockSource+0x1de>
 8007c70:	4a5e      	ldr	r2, [pc, #376]	; (8007dec <HAL_TIM_ConfigClockSource+0x228>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	f200 809e 	bhi.w	8007db4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c78:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007c7c:	f000 8091 	beq.w	8007da2 <HAL_TIM_ConfigClockSource+0x1de>
 8007c80:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007c84:	f200 8096 	bhi.w	8007db4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c8c:	f000 8089 	beq.w	8007da2 <HAL_TIM_ConfigClockSource+0x1de>
 8007c90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c94:	f200 808e 	bhi.w	8007db4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c9c:	d03e      	beq.n	8007d1c <HAL_TIM_ConfigClockSource+0x158>
 8007c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ca2:	f200 8087 	bhi.w	8007db4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007caa:	f000 8086 	beq.w	8007dba <HAL_TIM_ConfigClockSource+0x1f6>
 8007cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cb2:	d87f      	bhi.n	8007db4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007cb4:	2b70      	cmp	r3, #112	; 0x70
 8007cb6:	d01a      	beq.n	8007cee <HAL_TIM_ConfigClockSource+0x12a>
 8007cb8:	2b70      	cmp	r3, #112	; 0x70
 8007cba:	d87b      	bhi.n	8007db4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007cbc:	2b60      	cmp	r3, #96	; 0x60
 8007cbe:	d050      	beq.n	8007d62 <HAL_TIM_ConfigClockSource+0x19e>
 8007cc0:	2b60      	cmp	r3, #96	; 0x60
 8007cc2:	d877      	bhi.n	8007db4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007cc4:	2b50      	cmp	r3, #80	; 0x50
 8007cc6:	d03c      	beq.n	8007d42 <HAL_TIM_ConfigClockSource+0x17e>
 8007cc8:	2b50      	cmp	r3, #80	; 0x50
 8007cca:	d873      	bhi.n	8007db4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ccc:	2b40      	cmp	r3, #64	; 0x40
 8007cce:	d058      	beq.n	8007d82 <HAL_TIM_ConfigClockSource+0x1be>
 8007cd0:	2b40      	cmp	r3, #64	; 0x40
 8007cd2:	d86f      	bhi.n	8007db4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007cd4:	2b30      	cmp	r3, #48	; 0x30
 8007cd6:	d064      	beq.n	8007da2 <HAL_TIM_ConfigClockSource+0x1de>
 8007cd8:	2b30      	cmp	r3, #48	; 0x30
 8007cda:	d86b      	bhi.n	8007db4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007cdc:	2b20      	cmp	r3, #32
 8007cde:	d060      	beq.n	8007da2 <HAL_TIM_ConfigClockSource+0x1de>
 8007ce0:	2b20      	cmp	r3, #32
 8007ce2:	d867      	bhi.n	8007db4 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d05c      	beq.n	8007da2 <HAL_TIM_ConfigClockSource+0x1de>
 8007ce8:	2b10      	cmp	r3, #16
 8007cea:	d05a      	beq.n	8007da2 <HAL_TIM_ConfigClockSource+0x1de>
 8007cec:	e062      	b.n	8007db4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6818      	ldr	r0, [r3, #0]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	6899      	ldr	r1, [r3, #8]
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	685a      	ldr	r2, [r3, #4]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	f000 ff7d 	bl	8008bfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	609a      	str	r2, [r3, #8]
      break;
 8007d1a:	e04f      	b.n	8007dbc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6818      	ldr	r0, [r3, #0]
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	6899      	ldr	r1, [r3, #8]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	f000 ff66 	bl	8008bfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689a      	ldr	r2, [r3, #8]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d3e:	609a      	str	r2, [r3, #8]
      break;
 8007d40:	e03c      	b.n	8007dbc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6818      	ldr	r0, [r3, #0]
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	6859      	ldr	r1, [r3, #4]
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	f000 fe22 	bl	8008998 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2150      	movs	r1, #80	; 0x50
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 ff31 	bl	8008bc2 <TIM_ITRx_SetConfig>
      break;
 8007d60:	e02c      	b.n	8007dbc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6818      	ldr	r0, [r3, #0]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	6859      	ldr	r1, [r3, #4]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	f000 fe7e 	bl	8008a70 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2160      	movs	r1, #96	; 0x60
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 ff21 	bl	8008bc2 <TIM_ITRx_SetConfig>
      break;
 8007d80:	e01c      	b.n	8007dbc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6818      	ldr	r0, [r3, #0]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	6859      	ldr	r1, [r3, #4]
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	f000 fe02 	bl	8008998 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2140      	movs	r1, #64	; 0x40
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 ff11 	bl	8008bc2 <TIM_ITRx_SetConfig>
      break;
 8007da0:	e00c      	b.n	8007dbc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4619      	mov	r1, r3
 8007dac:	4610      	mov	r0, r2
 8007dae:	f000 ff08 	bl	8008bc2 <TIM_ITRx_SetConfig>
      break;
 8007db2:	e003      	b.n	8007dbc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	73fb      	strb	r3, [r7, #15]
      break;
 8007db8:	e000      	b.n	8007dbc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007dba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	00100070 	.word	0x00100070
 8007ddc:	00100060 	.word	0x00100060
 8007de0:	00100050 	.word	0x00100050
 8007de4:	00100040 	.word	0x00100040
 8007de8:	00100030 	.word	0x00100030
 8007dec:	00100020 	.word	0x00100020

08007df0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d101      	bne.n	8007e08 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007e04:	2302      	movs	r3, #2
 8007e06:	e031      	b.n	8007e6c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2202      	movs	r2, #2
 8007e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007e18:	6839      	ldr	r1, [r7, #0]
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fc68 	bl	80086f0 <TIM_SlaveTimer_SetConfig>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d009      	beq.n	8007e3a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e018      	b.n	8007e6c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68da      	ldr	r2, [r3, #12]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e48:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68da      	ldr	r2, [r3, #12]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007e58:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	2b0c      	cmp	r3, #12
 8007e86:	d831      	bhi.n	8007eec <HAL_TIM_ReadCapturedValue+0x78>
 8007e88:	a201      	add	r2, pc, #4	; (adr r2, 8007e90 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8e:	bf00      	nop
 8007e90:	08007ec5 	.word	0x08007ec5
 8007e94:	08007eed 	.word	0x08007eed
 8007e98:	08007eed 	.word	0x08007eed
 8007e9c:	08007eed 	.word	0x08007eed
 8007ea0:	08007ecf 	.word	0x08007ecf
 8007ea4:	08007eed 	.word	0x08007eed
 8007ea8:	08007eed 	.word	0x08007eed
 8007eac:	08007eed 	.word	0x08007eed
 8007eb0:	08007ed9 	.word	0x08007ed9
 8007eb4:	08007eed 	.word	0x08007eed
 8007eb8:	08007eed 	.word	0x08007eed
 8007ebc:	08007eed 	.word	0x08007eed
 8007ec0:	08007ee3 	.word	0x08007ee3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eca:	60fb      	str	r3, [r7, #12]

      break;
 8007ecc:	e00f      	b.n	8007eee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed4:	60fb      	str	r3, [r7, #12]

      break;
 8007ed6:	e00a      	b.n	8007eee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ede:	60fb      	str	r3, [r7, #12]

      break;
 8007ee0:	e005      	b.n	8007eee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee8:	60fb      	str	r3, [r7, #12]

      break;
 8007eea:	e000      	b.n	8007eee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007eec:	bf00      	nop
  }

  return tmpreg;
 8007eee:	68fb      	ldr	r3, [r7, #12]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a46      	ldr	r2, [pc, #280]	; (8008078 <TIM_Base_SetConfig+0x12c>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d017      	beq.n	8007f94 <TIM_Base_SetConfig+0x48>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f6a:	d013      	beq.n	8007f94 <TIM_Base_SetConfig+0x48>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a43      	ldr	r2, [pc, #268]	; (800807c <TIM_Base_SetConfig+0x130>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d00f      	beq.n	8007f94 <TIM_Base_SetConfig+0x48>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a42      	ldr	r2, [pc, #264]	; (8008080 <TIM_Base_SetConfig+0x134>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d00b      	beq.n	8007f94 <TIM_Base_SetConfig+0x48>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a41      	ldr	r2, [pc, #260]	; (8008084 <TIM_Base_SetConfig+0x138>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d007      	beq.n	8007f94 <TIM_Base_SetConfig+0x48>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a40      	ldr	r2, [pc, #256]	; (8008088 <TIM_Base_SetConfig+0x13c>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d003      	beq.n	8007f94 <TIM_Base_SetConfig+0x48>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a3f      	ldr	r2, [pc, #252]	; (800808c <TIM_Base_SetConfig+0x140>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d108      	bne.n	8007fa6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a33      	ldr	r2, [pc, #204]	; (8008078 <TIM_Base_SetConfig+0x12c>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d023      	beq.n	8007ff6 <TIM_Base_SetConfig+0xaa>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb4:	d01f      	beq.n	8007ff6 <TIM_Base_SetConfig+0xaa>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a30      	ldr	r2, [pc, #192]	; (800807c <TIM_Base_SetConfig+0x130>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d01b      	beq.n	8007ff6 <TIM_Base_SetConfig+0xaa>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a2f      	ldr	r2, [pc, #188]	; (8008080 <TIM_Base_SetConfig+0x134>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d017      	beq.n	8007ff6 <TIM_Base_SetConfig+0xaa>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a2e      	ldr	r2, [pc, #184]	; (8008084 <TIM_Base_SetConfig+0x138>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d013      	beq.n	8007ff6 <TIM_Base_SetConfig+0xaa>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a2d      	ldr	r2, [pc, #180]	; (8008088 <TIM_Base_SetConfig+0x13c>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d00f      	beq.n	8007ff6 <TIM_Base_SetConfig+0xaa>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a2d      	ldr	r2, [pc, #180]	; (8008090 <TIM_Base_SetConfig+0x144>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d00b      	beq.n	8007ff6 <TIM_Base_SetConfig+0xaa>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a2c      	ldr	r2, [pc, #176]	; (8008094 <TIM_Base_SetConfig+0x148>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d007      	beq.n	8007ff6 <TIM_Base_SetConfig+0xaa>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a2b      	ldr	r2, [pc, #172]	; (8008098 <TIM_Base_SetConfig+0x14c>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d003      	beq.n	8007ff6 <TIM_Base_SetConfig+0xaa>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a26      	ldr	r2, [pc, #152]	; (800808c <TIM_Base_SetConfig+0x140>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d108      	bne.n	8008008 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	4313      	orrs	r3, r2
 8008006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	4313      	orrs	r3, r2
 8008014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	689a      	ldr	r2, [r3, #8]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a12      	ldr	r2, [pc, #72]	; (8008078 <TIM_Base_SetConfig+0x12c>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d013      	beq.n	800805c <TIM_Base_SetConfig+0x110>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a14      	ldr	r2, [pc, #80]	; (8008088 <TIM_Base_SetConfig+0x13c>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d00f      	beq.n	800805c <TIM_Base_SetConfig+0x110>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a14      	ldr	r2, [pc, #80]	; (8008090 <TIM_Base_SetConfig+0x144>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d00b      	beq.n	800805c <TIM_Base_SetConfig+0x110>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a13      	ldr	r2, [pc, #76]	; (8008094 <TIM_Base_SetConfig+0x148>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d007      	beq.n	800805c <TIM_Base_SetConfig+0x110>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a12      	ldr	r2, [pc, #72]	; (8008098 <TIM_Base_SetConfig+0x14c>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d003      	beq.n	800805c <TIM_Base_SetConfig+0x110>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a0d      	ldr	r2, [pc, #52]	; (800808c <TIM_Base_SetConfig+0x140>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d103      	bne.n	8008064 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	691a      	ldr	r2, [r3, #16]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	615a      	str	r2, [r3, #20]
}
 800806a:	bf00      	nop
 800806c:	3714      	adds	r7, #20
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	40012c00 	.word	0x40012c00
 800807c:	40000400 	.word	0x40000400
 8008080:	40000800 	.word	0x40000800
 8008084:	40000c00 	.word	0x40000c00
 8008088:	40013400 	.word	0x40013400
 800808c:	40015000 	.word	0x40015000
 8008090:	40014000 	.word	0x40014000
 8008094:	40014400 	.word	0x40014400
 8008098:	40014800 	.word	0x40014800

0800809c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800809c:	b480      	push	{r7}
 800809e:	b087      	sub	sp, #28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	f023 0201 	bic.w	r2, r3, #1
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	699b      	ldr	r3, [r3, #24]
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f023 0303 	bic.w	r3, r3, #3
 80080d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	4313      	orrs	r3, r2
 80080e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f023 0302 	bic.w	r3, r3, #2
 80080e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	697a      	ldr	r2, [r7, #20]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a30      	ldr	r2, [pc, #192]	; (80081b8 <TIM_OC1_SetConfig+0x11c>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d013      	beq.n	8008124 <TIM_OC1_SetConfig+0x88>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a2f      	ldr	r2, [pc, #188]	; (80081bc <TIM_OC1_SetConfig+0x120>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d00f      	beq.n	8008124 <TIM_OC1_SetConfig+0x88>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a2e      	ldr	r2, [pc, #184]	; (80081c0 <TIM_OC1_SetConfig+0x124>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d00b      	beq.n	8008124 <TIM_OC1_SetConfig+0x88>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a2d      	ldr	r2, [pc, #180]	; (80081c4 <TIM_OC1_SetConfig+0x128>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d007      	beq.n	8008124 <TIM_OC1_SetConfig+0x88>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a2c      	ldr	r2, [pc, #176]	; (80081c8 <TIM_OC1_SetConfig+0x12c>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d003      	beq.n	8008124 <TIM_OC1_SetConfig+0x88>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a2b      	ldr	r2, [pc, #172]	; (80081cc <TIM_OC1_SetConfig+0x130>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d10c      	bne.n	800813e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	f023 0308 	bic.w	r3, r3, #8
 800812a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	4313      	orrs	r3, r2
 8008134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	f023 0304 	bic.w	r3, r3, #4
 800813c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a1d      	ldr	r2, [pc, #116]	; (80081b8 <TIM_OC1_SetConfig+0x11c>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d013      	beq.n	800816e <TIM_OC1_SetConfig+0xd2>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a1c      	ldr	r2, [pc, #112]	; (80081bc <TIM_OC1_SetConfig+0x120>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d00f      	beq.n	800816e <TIM_OC1_SetConfig+0xd2>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a1b      	ldr	r2, [pc, #108]	; (80081c0 <TIM_OC1_SetConfig+0x124>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d00b      	beq.n	800816e <TIM_OC1_SetConfig+0xd2>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a1a      	ldr	r2, [pc, #104]	; (80081c4 <TIM_OC1_SetConfig+0x128>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d007      	beq.n	800816e <TIM_OC1_SetConfig+0xd2>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a19      	ldr	r2, [pc, #100]	; (80081c8 <TIM_OC1_SetConfig+0x12c>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d003      	beq.n	800816e <TIM_OC1_SetConfig+0xd2>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a18      	ldr	r2, [pc, #96]	; (80081cc <TIM_OC1_SetConfig+0x130>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d111      	bne.n	8008192 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800817c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	4313      	orrs	r3, r2
 8008186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	4313      	orrs	r3, r2
 8008190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	685a      	ldr	r2, [r3, #4]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	621a      	str	r2, [r3, #32]
}
 80081ac:	bf00      	nop
 80081ae:	371c      	adds	r7, #28
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	40012c00 	.word	0x40012c00
 80081bc:	40013400 	.word	0x40013400
 80081c0:	40014000 	.word	0x40014000
 80081c4:	40014400 	.word	0x40014400
 80081c8:	40014800 	.word	0x40014800
 80081cc:	40015000 	.word	0x40015000

080081d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b087      	sub	sp, #28
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	f023 0210 	bic.w	r2, r3, #16
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800820a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	021b      	lsls	r3, r3, #8
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	4313      	orrs	r3, r2
 8008216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	f023 0320 	bic.w	r3, r3, #32
 800821e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	011b      	lsls	r3, r3, #4
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	4313      	orrs	r3, r2
 800822a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a2c      	ldr	r2, [pc, #176]	; (80082e0 <TIM_OC2_SetConfig+0x110>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d007      	beq.n	8008244 <TIM_OC2_SetConfig+0x74>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a2b      	ldr	r2, [pc, #172]	; (80082e4 <TIM_OC2_SetConfig+0x114>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d003      	beq.n	8008244 <TIM_OC2_SetConfig+0x74>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a2a      	ldr	r2, [pc, #168]	; (80082e8 <TIM_OC2_SetConfig+0x118>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d10d      	bne.n	8008260 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800824a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	011b      	lsls	r3, r3, #4
 8008252:	697a      	ldr	r2, [r7, #20]
 8008254:	4313      	orrs	r3, r2
 8008256:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800825e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a1f      	ldr	r2, [pc, #124]	; (80082e0 <TIM_OC2_SetConfig+0x110>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d013      	beq.n	8008290 <TIM_OC2_SetConfig+0xc0>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a1e      	ldr	r2, [pc, #120]	; (80082e4 <TIM_OC2_SetConfig+0x114>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d00f      	beq.n	8008290 <TIM_OC2_SetConfig+0xc0>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a1e      	ldr	r2, [pc, #120]	; (80082ec <TIM_OC2_SetConfig+0x11c>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d00b      	beq.n	8008290 <TIM_OC2_SetConfig+0xc0>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a1d      	ldr	r2, [pc, #116]	; (80082f0 <TIM_OC2_SetConfig+0x120>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d007      	beq.n	8008290 <TIM_OC2_SetConfig+0xc0>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a1c      	ldr	r2, [pc, #112]	; (80082f4 <TIM_OC2_SetConfig+0x124>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d003      	beq.n	8008290 <TIM_OC2_SetConfig+0xc0>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a17      	ldr	r2, [pc, #92]	; (80082e8 <TIM_OC2_SetConfig+0x118>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d113      	bne.n	80082b8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008296:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800829e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	695b      	ldr	r3, [r3, #20]
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	693a      	ldr	r2, [r7, #16]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	685a      	ldr	r2, [r3, #4]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	621a      	str	r2, [r3, #32]
}
 80082d2:	bf00      	nop
 80082d4:	371c      	adds	r7, #28
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	40012c00 	.word	0x40012c00
 80082e4:	40013400 	.word	0x40013400
 80082e8:	40015000 	.word	0x40015000
 80082ec:	40014000 	.word	0x40014000
 80082f0:	40014400 	.word	0x40014400
 80082f4:	40014800 	.word	0x40014800

080082f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	69db      	ldr	r3, [r3, #28]
 800831e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800832a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f023 0303 	bic.w	r3, r3, #3
 8008332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	4313      	orrs	r3, r2
 800833c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	021b      	lsls	r3, r3, #8
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	4313      	orrs	r3, r2
 8008350:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a2b      	ldr	r2, [pc, #172]	; (8008404 <TIM_OC3_SetConfig+0x10c>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d007      	beq.n	800836a <TIM_OC3_SetConfig+0x72>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a2a      	ldr	r2, [pc, #168]	; (8008408 <TIM_OC3_SetConfig+0x110>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d003      	beq.n	800836a <TIM_OC3_SetConfig+0x72>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a29      	ldr	r2, [pc, #164]	; (800840c <TIM_OC3_SetConfig+0x114>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d10d      	bne.n	8008386 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008370:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	021b      	lsls	r3, r3, #8
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	4313      	orrs	r3, r2
 800837c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a1e      	ldr	r2, [pc, #120]	; (8008404 <TIM_OC3_SetConfig+0x10c>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d013      	beq.n	80083b6 <TIM_OC3_SetConfig+0xbe>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a1d      	ldr	r2, [pc, #116]	; (8008408 <TIM_OC3_SetConfig+0x110>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d00f      	beq.n	80083b6 <TIM_OC3_SetConfig+0xbe>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a1d      	ldr	r2, [pc, #116]	; (8008410 <TIM_OC3_SetConfig+0x118>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d00b      	beq.n	80083b6 <TIM_OC3_SetConfig+0xbe>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a1c      	ldr	r2, [pc, #112]	; (8008414 <TIM_OC3_SetConfig+0x11c>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d007      	beq.n	80083b6 <TIM_OC3_SetConfig+0xbe>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a1b      	ldr	r2, [pc, #108]	; (8008418 <TIM_OC3_SetConfig+0x120>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d003      	beq.n	80083b6 <TIM_OC3_SetConfig+0xbe>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a16      	ldr	r2, [pc, #88]	; (800840c <TIM_OC3_SetConfig+0x114>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d113      	bne.n	80083de <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	011b      	lsls	r3, r3, #4
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	011b      	lsls	r3, r3, #4
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	4313      	orrs	r3, r2
 80083dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	685a      	ldr	r2, [r3, #4]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	621a      	str	r2, [r3, #32]
}
 80083f8:	bf00      	nop
 80083fa:	371c      	adds	r7, #28
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr
 8008404:	40012c00 	.word	0x40012c00
 8008408:	40013400 	.word	0x40013400
 800840c:	40015000 	.word	0x40015000
 8008410:	40014000 	.word	0x40014000
 8008414:	40014400 	.word	0x40014400
 8008418:	40014800 	.word	0x40014800

0800841c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	69db      	ldr	r3, [r3, #28]
 8008442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800844a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800844e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	021b      	lsls	r3, r3, #8
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	4313      	orrs	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800846a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	031b      	lsls	r3, r3, #12
 8008472:	697a      	ldr	r2, [r7, #20]
 8008474:	4313      	orrs	r3, r2
 8008476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a2c      	ldr	r2, [pc, #176]	; (800852c <TIM_OC4_SetConfig+0x110>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d007      	beq.n	8008490 <TIM_OC4_SetConfig+0x74>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a2b      	ldr	r2, [pc, #172]	; (8008530 <TIM_OC4_SetConfig+0x114>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d003      	beq.n	8008490 <TIM_OC4_SetConfig+0x74>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a2a      	ldr	r2, [pc, #168]	; (8008534 <TIM_OC4_SetConfig+0x118>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d10d      	bne.n	80084ac <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	031b      	lsls	r3, r3, #12
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a1f      	ldr	r2, [pc, #124]	; (800852c <TIM_OC4_SetConfig+0x110>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d013      	beq.n	80084dc <TIM_OC4_SetConfig+0xc0>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a1e      	ldr	r2, [pc, #120]	; (8008530 <TIM_OC4_SetConfig+0x114>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d00f      	beq.n	80084dc <TIM_OC4_SetConfig+0xc0>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a1e      	ldr	r2, [pc, #120]	; (8008538 <TIM_OC4_SetConfig+0x11c>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d00b      	beq.n	80084dc <TIM_OC4_SetConfig+0xc0>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a1d      	ldr	r2, [pc, #116]	; (800853c <TIM_OC4_SetConfig+0x120>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d007      	beq.n	80084dc <TIM_OC4_SetConfig+0xc0>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a1c      	ldr	r2, [pc, #112]	; (8008540 <TIM_OC4_SetConfig+0x124>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d003      	beq.n	80084dc <TIM_OC4_SetConfig+0xc0>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a17      	ldr	r2, [pc, #92]	; (8008534 <TIM_OC4_SetConfig+0x118>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d113      	bne.n	8008504 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084e2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084ea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	695b      	ldr	r3, [r3, #20]
 80084f0:	019b      	lsls	r3, r3, #6
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	699b      	ldr	r3, [r3, #24]
 80084fc:	019b      	lsls	r3, r3, #6
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	4313      	orrs	r3, r2
 8008502:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	693a      	ldr	r2, [r7, #16]
 8008508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	685a      	ldr	r2, [r3, #4]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	621a      	str	r2, [r3, #32]
}
 800851e:	bf00      	nop
 8008520:	371c      	adds	r7, #28
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	40012c00 	.word	0x40012c00
 8008530:	40013400 	.word	0x40013400
 8008534:	40015000 	.word	0x40015000
 8008538:	40014000 	.word	0x40014000
 800853c:	40014400 	.word	0x40014400
 8008540:	40014800 	.word	0x40014800

08008544 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008544:	b480      	push	{r7}
 8008546:	b087      	sub	sp, #28
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a1b      	ldr	r3, [r3, #32]
 8008552:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a1b      	ldr	r3, [r3, #32]
 800855e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800856a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	4313      	orrs	r3, r2
 8008580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008588:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	041b      	lsls	r3, r3, #16
 8008590:	693a      	ldr	r2, [r7, #16]
 8008592:	4313      	orrs	r3, r2
 8008594:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a19      	ldr	r2, [pc, #100]	; (8008600 <TIM_OC5_SetConfig+0xbc>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d013      	beq.n	80085c6 <TIM_OC5_SetConfig+0x82>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a18      	ldr	r2, [pc, #96]	; (8008604 <TIM_OC5_SetConfig+0xc0>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d00f      	beq.n	80085c6 <TIM_OC5_SetConfig+0x82>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a17      	ldr	r2, [pc, #92]	; (8008608 <TIM_OC5_SetConfig+0xc4>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d00b      	beq.n	80085c6 <TIM_OC5_SetConfig+0x82>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a16      	ldr	r2, [pc, #88]	; (800860c <TIM_OC5_SetConfig+0xc8>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d007      	beq.n	80085c6 <TIM_OC5_SetConfig+0x82>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a15      	ldr	r2, [pc, #84]	; (8008610 <TIM_OC5_SetConfig+0xcc>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d003      	beq.n	80085c6 <TIM_OC5_SetConfig+0x82>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a14      	ldr	r2, [pc, #80]	; (8008614 <TIM_OC5_SetConfig+0xd0>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d109      	bne.n	80085da <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	021b      	lsls	r3, r3, #8
 80085d4:	697a      	ldr	r2, [r7, #20]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	685a      	ldr	r2, [r3, #4]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	693a      	ldr	r2, [r7, #16]
 80085f2:	621a      	str	r2, [r3, #32]
}
 80085f4:	bf00      	nop
 80085f6:	371c      	adds	r7, #28
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	40012c00 	.word	0x40012c00
 8008604:	40013400 	.word	0x40013400
 8008608:	40014000 	.word	0x40014000
 800860c:	40014400 	.word	0x40014400
 8008610:	40014800 	.word	0x40014800
 8008614:	40015000 	.word	0x40015000

08008618 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800863e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800864a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	021b      	lsls	r3, r3, #8
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	4313      	orrs	r3, r2
 8008656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800865e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	051b      	lsls	r3, r3, #20
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	4313      	orrs	r3, r2
 800866a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a1a      	ldr	r2, [pc, #104]	; (80086d8 <TIM_OC6_SetConfig+0xc0>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d013      	beq.n	800869c <TIM_OC6_SetConfig+0x84>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a19      	ldr	r2, [pc, #100]	; (80086dc <TIM_OC6_SetConfig+0xc4>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d00f      	beq.n	800869c <TIM_OC6_SetConfig+0x84>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a18      	ldr	r2, [pc, #96]	; (80086e0 <TIM_OC6_SetConfig+0xc8>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d00b      	beq.n	800869c <TIM_OC6_SetConfig+0x84>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a17      	ldr	r2, [pc, #92]	; (80086e4 <TIM_OC6_SetConfig+0xcc>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d007      	beq.n	800869c <TIM_OC6_SetConfig+0x84>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a16      	ldr	r2, [pc, #88]	; (80086e8 <TIM_OC6_SetConfig+0xd0>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d003      	beq.n	800869c <TIM_OC6_SetConfig+0x84>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a15      	ldr	r2, [pc, #84]	; (80086ec <TIM_OC6_SetConfig+0xd4>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d109      	bne.n	80086b0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	695b      	ldr	r3, [r3, #20]
 80086a8:	029b      	lsls	r3, r3, #10
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	697a      	ldr	r2, [r7, #20]
 80086b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	685a      	ldr	r2, [r3, #4]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	621a      	str	r2, [r3, #32]
}
 80086ca:	bf00      	nop
 80086cc:	371c      	adds	r7, #28
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	40012c00 	.word	0x40012c00
 80086dc:	40013400 	.word	0x40013400
 80086e0:	40014000 	.word	0x40014000
 80086e4:	40014400 	.word	0x40014400
 80086e8:	40014800 	.word	0x40014800
 80086ec:	40015000 	.word	0x40015000

080086f0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b086      	sub	sp, #24
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800870c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008710:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	693a      	ldr	r2, [r7, #16]
 8008718:	4313      	orrs	r3, r2
 800871a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008722:	f023 0307 	bic.w	r3, r3, #7
 8008726:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	4313      	orrs	r3, r2
 8008730:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	693a      	ldr	r2, [r7, #16]
 8008738:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	4a56      	ldr	r2, [pc, #344]	; (8008898 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8008740:	4293      	cmp	r3, r2
 8008742:	f000 80a2 	beq.w	800888a <TIM_SlaveTimer_SetConfig+0x19a>
 8008746:	4a54      	ldr	r2, [pc, #336]	; (8008898 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8008748:	4293      	cmp	r3, r2
 800874a:	f200 809b 	bhi.w	8008884 <TIM_SlaveTimer_SetConfig+0x194>
 800874e:	4a53      	ldr	r2, [pc, #332]	; (800889c <TIM_SlaveTimer_SetConfig+0x1ac>)
 8008750:	4293      	cmp	r3, r2
 8008752:	f000 809a 	beq.w	800888a <TIM_SlaveTimer_SetConfig+0x19a>
 8008756:	4a51      	ldr	r2, [pc, #324]	; (800889c <TIM_SlaveTimer_SetConfig+0x1ac>)
 8008758:	4293      	cmp	r3, r2
 800875a:	f200 8093 	bhi.w	8008884 <TIM_SlaveTimer_SetConfig+0x194>
 800875e:	4a50      	ldr	r2, [pc, #320]	; (80088a0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8008760:	4293      	cmp	r3, r2
 8008762:	f000 8092 	beq.w	800888a <TIM_SlaveTimer_SetConfig+0x19a>
 8008766:	4a4e      	ldr	r2, [pc, #312]	; (80088a0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8008768:	4293      	cmp	r3, r2
 800876a:	f200 808b 	bhi.w	8008884 <TIM_SlaveTimer_SetConfig+0x194>
 800876e:	4a4d      	ldr	r2, [pc, #308]	; (80088a4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8008770:	4293      	cmp	r3, r2
 8008772:	f000 808a 	beq.w	800888a <TIM_SlaveTimer_SetConfig+0x19a>
 8008776:	4a4b      	ldr	r2, [pc, #300]	; (80088a4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8008778:	4293      	cmp	r3, r2
 800877a:	f200 8083 	bhi.w	8008884 <TIM_SlaveTimer_SetConfig+0x194>
 800877e:	4a4a      	ldr	r2, [pc, #296]	; (80088a8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8008780:	4293      	cmp	r3, r2
 8008782:	f000 8082 	beq.w	800888a <TIM_SlaveTimer_SetConfig+0x19a>
 8008786:	4a48      	ldr	r2, [pc, #288]	; (80088a8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d87b      	bhi.n	8008884 <TIM_SlaveTimer_SetConfig+0x194>
 800878c:	4a47      	ldr	r2, [pc, #284]	; (80088ac <TIM_SlaveTimer_SetConfig+0x1bc>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d07b      	beq.n	800888a <TIM_SlaveTimer_SetConfig+0x19a>
 8008792:	4a46      	ldr	r2, [pc, #280]	; (80088ac <TIM_SlaveTimer_SetConfig+0x1bc>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d875      	bhi.n	8008884 <TIM_SlaveTimer_SetConfig+0x194>
 8008798:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800879c:	d075      	beq.n	800888a <TIM_SlaveTimer_SetConfig+0x19a>
 800879e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80087a2:	d86f      	bhi.n	8008884 <TIM_SlaveTimer_SetConfig+0x194>
 80087a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087a8:	d06f      	beq.n	800888a <TIM_SlaveTimer_SetConfig+0x19a>
 80087aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087ae:	d869      	bhi.n	8008884 <TIM_SlaveTimer_SetConfig+0x194>
 80087b0:	2b70      	cmp	r3, #112	; 0x70
 80087b2:	d01a      	beq.n	80087ea <TIM_SlaveTimer_SetConfig+0xfa>
 80087b4:	2b70      	cmp	r3, #112	; 0x70
 80087b6:	d865      	bhi.n	8008884 <TIM_SlaveTimer_SetConfig+0x194>
 80087b8:	2b60      	cmp	r3, #96	; 0x60
 80087ba:	d059      	beq.n	8008870 <TIM_SlaveTimer_SetConfig+0x180>
 80087bc:	2b60      	cmp	r3, #96	; 0x60
 80087be:	d861      	bhi.n	8008884 <TIM_SlaveTimer_SetConfig+0x194>
 80087c0:	2b50      	cmp	r3, #80	; 0x50
 80087c2:	d04b      	beq.n	800885c <TIM_SlaveTimer_SetConfig+0x16c>
 80087c4:	2b50      	cmp	r3, #80	; 0x50
 80087c6:	d85d      	bhi.n	8008884 <TIM_SlaveTimer_SetConfig+0x194>
 80087c8:	2b40      	cmp	r3, #64	; 0x40
 80087ca:	d019      	beq.n	8008800 <TIM_SlaveTimer_SetConfig+0x110>
 80087cc:	2b40      	cmp	r3, #64	; 0x40
 80087ce:	d859      	bhi.n	8008884 <TIM_SlaveTimer_SetConfig+0x194>
 80087d0:	2b30      	cmp	r3, #48	; 0x30
 80087d2:	d05a      	beq.n	800888a <TIM_SlaveTimer_SetConfig+0x19a>
 80087d4:	2b30      	cmp	r3, #48	; 0x30
 80087d6:	d855      	bhi.n	8008884 <TIM_SlaveTimer_SetConfig+0x194>
 80087d8:	2b20      	cmp	r3, #32
 80087da:	d056      	beq.n	800888a <TIM_SlaveTimer_SetConfig+0x19a>
 80087dc:	2b20      	cmp	r3, #32
 80087de:	d851      	bhi.n	8008884 <TIM_SlaveTimer_SetConfig+0x194>
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d052      	beq.n	800888a <TIM_SlaveTimer_SetConfig+0x19a>
 80087e4:	2b10      	cmp	r3, #16
 80087e6:	d050      	beq.n	800888a <TIM_SlaveTimer_SetConfig+0x19a>
 80087e8:	e04c      	b.n	8008884 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6818      	ldr	r0, [r3, #0]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	68d9      	ldr	r1, [r3, #12]
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	689a      	ldr	r2, [r3, #8]
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	f000 f9ff 	bl	8008bfc <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80087fe:	e045      	b.n	800888c <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b05      	cmp	r3, #5
 8008806:	d004      	beq.n	8008812 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800880c:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8008810:	d101      	bne.n	8008816 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e03b      	b.n	800888e <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	6a1b      	ldr	r3, [r3, #32]
 800881c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6a1a      	ldr	r2, [r3, #32]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f022 0201 	bic.w	r2, r2, #1
 800882c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800883c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	011b      	lsls	r3, r3, #4
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	4313      	orrs	r3, r2
 8008848:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	621a      	str	r2, [r3, #32]
      break;
 800885a:	e017      	b.n	800888c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6818      	ldr	r0, [r3, #0]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	6899      	ldr	r1, [r3, #8]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	461a      	mov	r2, r3
 800886a:	f000 f895 	bl	8008998 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800886e:	e00d      	b.n	800888c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6818      	ldr	r0, [r3, #0]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	6899      	ldr	r1, [r3, #8]
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	461a      	mov	r2, r3
 800887e:	f000 f8f7 	bl	8008a70 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008882:	e003      	b.n	800888c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	75fb      	strb	r3, [r7, #23]
      break;
 8008888:	e000      	b.n	800888c <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 800888a:	bf00      	nop
  }

  return status;
 800888c:	7dfb      	ldrb	r3, [r7, #23]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3718      	adds	r7, #24
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	00100070 	.word	0x00100070
 800889c:	00100060 	.word	0x00100060
 80088a0:	00100050 	.word	0x00100050
 80088a4:	00100040 	.word	0x00100040
 80088a8:	00100030 	.word	0x00100030
 80088ac:	00100020 	.word	0x00100020

080088b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b087      	sub	sp, #28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
 80088bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	f023 0201 	bic.w	r2, r3, #1
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6a1b      	ldr	r3, [r3, #32]
 80088d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	4a28      	ldr	r2, [pc, #160]	; (800897c <TIM_TI1_SetConfig+0xcc>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d01b      	beq.n	8008916 <TIM_TI1_SetConfig+0x66>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088e4:	d017      	beq.n	8008916 <TIM_TI1_SetConfig+0x66>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	4a25      	ldr	r2, [pc, #148]	; (8008980 <TIM_TI1_SetConfig+0xd0>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d013      	beq.n	8008916 <TIM_TI1_SetConfig+0x66>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	4a24      	ldr	r2, [pc, #144]	; (8008984 <TIM_TI1_SetConfig+0xd4>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d00f      	beq.n	8008916 <TIM_TI1_SetConfig+0x66>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	4a23      	ldr	r2, [pc, #140]	; (8008988 <TIM_TI1_SetConfig+0xd8>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d00b      	beq.n	8008916 <TIM_TI1_SetConfig+0x66>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	4a22      	ldr	r2, [pc, #136]	; (800898c <TIM_TI1_SetConfig+0xdc>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d007      	beq.n	8008916 <TIM_TI1_SetConfig+0x66>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	4a21      	ldr	r2, [pc, #132]	; (8008990 <TIM_TI1_SetConfig+0xe0>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d003      	beq.n	8008916 <TIM_TI1_SetConfig+0x66>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	4a20      	ldr	r2, [pc, #128]	; (8008994 <TIM_TI1_SetConfig+0xe4>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d101      	bne.n	800891a <TIM_TI1_SetConfig+0x6a>
 8008916:	2301      	movs	r3, #1
 8008918:	e000      	b.n	800891c <TIM_TI1_SetConfig+0x6c>
 800891a:	2300      	movs	r3, #0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d008      	beq.n	8008932 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	f023 0303 	bic.w	r3, r3, #3
 8008926:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4313      	orrs	r3, r2
 800892e:	617b      	str	r3, [r7, #20]
 8008930:	e003      	b.n	800893a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f043 0301 	orr.w	r3, r3, #1
 8008938:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008940:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	011b      	lsls	r3, r3, #4
 8008946:	b2db      	uxtb	r3, r3
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	4313      	orrs	r3, r2
 800894c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	f023 030a 	bic.w	r3, r3, #10
 8008954:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	f003 030a 	and.w	r3, r3, #10
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	4313      	orrs	r3, r2
 8008960:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	697a      	ldr	r2, [r7, #20]
 8008966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	693a      	ldr	r2, [r7, #16]
 800896c:	621a      	str	r2, [r3, #32]
}
 800896e:	bf00      	nop
 8008970:	371c      	adds	r7, #28
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	40012c00 	.word	0x40012c00
 8008980:	40000400 	.word	0x40000400
 8008984:	40000800 	.word	0x40000800
 8008988:	40000c00 	.word	0x40000c00
 800898c:	40013400 	.word	0x40013400
 8008990:	40014000 	.word	0x40014000
 8008994:	40015000 	.word	0x40015000

08008998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008998:	b480      	push	{r7}
 800899a:	b087      	sub	sp, #28
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6a1b      	ldr	r3, [r3, #32]
 80089a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6a1b      	ldr	r3, [r3, #32]
 80089ae:	f023 0201 	bic.w	r2, r3, #1
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	011b      	lsls	r3, r3, #4
 80089c8:	693a      	ldr	r2, [r7, #16]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	f023 030a 	bic.w	r3, r3, #10
 80089d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	4313      	orrs	r3, r2
 80089dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	621a      	str	r2, [r3, #32]
}
 80089ea:	bf00      	nop
 80089ec:	371c      	adds	r7, #28
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b087      	sub	sp, #28
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	60f8      	str	r0, [r7, #12]
 80089fe:	60b9      	str	r1, [r7, #8]
 8008a00:	607a      	str	r2, [r7, #4]
 8008a02:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6a1b      	ldr	r3, [r3, #32]
 8008a08:	f023 0210 	bic.w	r2, r3, #16
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	699b      	ldr	r3, [r3, #24]
 8008a14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6a1b      	ldr	r3, [r3, #32]
 8008a1a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	021b      	lsls	r3, r3, #8
 8008a28:	697a      	ldr	r2, [r7, #20]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	031b      	lsls	r3, r3, #12
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	697a      	ldr	r2, [r7, #20]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a48:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	011b      	lsls	r3, r3, #4
 8008a4e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008a52:	693a      	ldr	r2, [r7, #16]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	621a      	str	r2, [r3, #32]
}
 8008a64:	bf00      	nop
 8008a66:	371c      	adds	r7, #28
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b087      	sub	sp, #28
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6a1b      	ldr	r3, [r3, #32]
 8008a80:	f023 0210 	bic.w	r2, r3, #16
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6a1b      	ldr	r3, [r3, #32]
 8008a92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	031b      	lsls	r3, r3, #12
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008aac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	011b      	lsls	r3, r3, #4
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	697a      	ldr	r2, [r7, #20]
 8008abc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	621a      	str	r2, [r3, #32]
}
 8008ac4:	bf00      	nop
 8008ac6:	371c      	adds	r7, #28
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b087      	sub	sp, #28
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	607a      	str	r2, [r7, #4]
 8008adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6a1b      	ldr	r3, [r3, #32]
 8008ae2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	69db      	ldr	r3, [r3, #28]
 8008aee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6a1b      	ldr	r3, [r3, #32]
 8008af4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	f023 0303 	bic.w	r3, r3, #3
 8008afc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b0c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	011b      	lsls	r3, r3, #4
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008b20:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	021b      	lsls	r3, r3, #8
 8008b26:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008b2a:	693a      	ldr	r2, [r7, #16]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	621a      	str	r2, [r3, #32]
}
 8008b3c:	bf00      	nop
 8008b3e:	371c      	adds	r7, #28
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b087      	sub	sp, #28
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
 8008b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6a1b      	ldr	r3, [r3, #32]
 8008b5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	69db      	ldr	r3, [r3, #28]
 8008b66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6a1b      	ldr	r3, [r3, #32]
 8008b6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	021b      	lsls	r3, r3, #8
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b86:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	031b      	lsls	r3, r3, #12
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008b9a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	031b      	lsls	r3, r3, #12
 8008ba0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	693a      	ldr	r2, [r7, #16]
 8008bb4:	621a      	str	r2, [r3, #32]
}
 8008bb6:	bf00      	nop
 8008bb8:	371c      	adds	r7, #28
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b085      	sub	sp, #20
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008bde:	683a      	ldr	r2, [r7, #0]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	f043 0307 	orr.w	r3, r3, #7
 8008be8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	609a      	str	r2, [r3, #8]
}
 8008bf0:	bf00      	nop
 8008bf2:	3714      	adds	r7, #20
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b087      	sub	sp, #28
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
 8008c08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	021a      	lsls	r2, r3, #8
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	431a      	orrs	r2, r3
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	697a      	ldr	r2, [r7, #20]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	609a      	str	r2, [r3, #8]
}
 8008c30:	bf00      	nop
 8008c32:	371c      	adds	r7, #28
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b087      	sub	sp, #28
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	f003 031f 	and.w	r3, r3, #31
 8008c4e:	2201      	movs	r2, #1
 8008c50:	fa02 f303 	lsl.w	r3, r2, r3
 8008c54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6a1a      	ldr	r2, [r3, #32]
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	43db      	mvns	r3, r3
 8008c5e:	401a      	ands	r2, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6a1a      	ldr	r2, [r3, #32]
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	f003 031f 	and.w	r3, r3, #31
 8008c6e:	6879      	ldr	r1, [r7, #4]
 8008c70:	fa01 f303 	lsl.w	r3, r1, r3
 8008c74:	431a      	orrs	r2, r3
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	621a      	str	r2, [r3, #32]
}
 8008c7a:	bf00      	nop
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
	...

08008c88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d101      	bne.n	8008ca0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	e074      	b.n	8008d8a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2202      	movs	r2, #2
 8008cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a34      	ldr	r2, [pc, #208]	; (8008d98 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d009      	beq.n	8008cde <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a33      	ldr	r2, [pc, #204]	; (8008d9c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d004      	beq.n	8008cde <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a31      	ldr	r2, [pc, #196]	; (8008da0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d108      	bne.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008ce4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	4313      	orrs	r3, r2
 8008cee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a21      	ldr	r2, [pc, #132]	; (8008d98 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d022      	beq.n	8008d5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d20:	d01d      	beq.n	8008d5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a1f      	ldr	r2, [pc, #124]	; (8008da4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d018      	beq.n	8008d5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a1d      	ldr	r2, [pc, #116]	; (8008da8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d013      	beq.n	8008d5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a1c      	ldr	r2, [pc, #112]	; (8008dac <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d00e      	beq.n	8008d5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a15      	ldr	r2, [pc, #84]	; (8008d9c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d009      	beq.n	8008d5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a18      	ldr	r2, [pc, #96]	; (8008db0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d004      	beq.n	8008d5e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a11      	ldr	r2, [pc, #68]	; (8008da0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d10c      	bne.n	8008d78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	68ba      	ldr	r2, [r7, #8]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	40012c00 	.word	0x40012c00
 8008d9c:	40013400 	.word	0x40013400
 8008da0:	40015000 	.word	0x40015000
 8008da4:	40000400 	.word	0x40000400
 8008da8:	40000800 	.word	0x40000800
 8008dac:	40000c00 	.word	0x40000c00
 8008db0:	40014000 	.word	0x40014000

08008db4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008df8:	bf00      	nop
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008e34:	bf00      	nop
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <__libc_init_array>:
 8008e40:	b570      	push	{r4, r5, r6, lr}
 8008e42:	4d0d      	ldr	r5, [pc, #52]	; (8008e78 <__libc_init_array+0x38>)
 8008e44:	4c0d      	ldr	r4, [pc, #52]	; (8008e7c <__libc_init_array+0x3c>)
 8008e46:	1b64      	subs	r4, r4, r5
 8008e48:	10a4      	asrs	r4, r4, #2
 8008e4a:	2600      	movs	r6, #0
 8008e4c:	42a6      	cmp	r6, r4
 8008e4e:	d109      	bne.n	8008e64 <__libc_init_array+0x24>
 8008e50:	4d0b      	ldr	r5, [pc, #44]	; (8008e80 <__libc_init_array+0x40>)
 8008e52:	4c0c      	ldr	r4, [pc, #48]	; (8008e84 <__libc_init_array+0x44>)
 8008e54:	f000 f820 	bl	8008e98 <_init>
 8008e58:	1b64      	subs	r4, r4, r5
 8008e5a:	10a4      	asrs	r4, r4, #2
 8008e5c:	2600      	movs	r6, #0
 8008e5e:	42a6      	cmp	r6, r4
 8008e60:	d105      	bne.n	8008e6e <__libc_init_array+0x2e>
 8008e62:	bd70      	pop	{r4, r5, r6, pc}
 8008e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e68:	4798      	blx	r3
 8008e6a:	3601      	adds	r6, #1
 8008e6c:	e7ee      	b.n	8008e4c <__libc_init_array+0xc>
 8008e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e72:	4798      	blx	r3
 8008e74:	3601      	adds	r6, #1
 8008e76:	e7f2      	b.n	8008e5e <__libc_init_array+0x1e>
 8008e78:	08008ec0 	.word	0x08008ec0
 8008e7c:	08008ec0 	.word	0x08008ec0
 8008e80:	08008ec0 	.word	0x08008ec0
 8008e84:	08008ec4 	.word	0x08008ec4

08008e88 <memset>:
 8008e88:	4402      	add	r2, r0
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d100      	bne.n	8008e92 <memset+0xa>
 8008e90:	4770      	bx	lr
 8008e92:	f803 1b01 	strb.w	r1, [r3], #1
 8008e96:	e7f9      	b.n	8008e8c <memset+0x4>

08008e98 <_init>:
 8008e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9a:	bf00      	nop
 8008e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e9e:	bc08      	pop	{r3}
 8008ea0:	469e      	mov	lr, r3
 8008ea2:	4770      	bx	lr

08008ea4 <_fini>:
 8008ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea6:	bf00      	nop
 8008ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eaa:	bc08      	pop	{r3}
 8008eac:	469e      	mov	lr, r3
 8008eae:	4770      	bx	lr
