
AMS-Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a838  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800aa10  0800aa10  0001aa10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa34  0800aa34  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa34  0800aa34  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa34  0800aa34  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa34  0800aa34  0001aa34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa38  0800aa38  0001aa38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800aa3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e10  20000070  0800aaac  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e80  0800aaac  00020e80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019df9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e2f  00000000  00000000  00039e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c0  00000000  00000000  0003ccc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016d0  00000000  00000000  0003e488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f0e  00000000  00000000  0003fb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018560  00000000  00000000  00069a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011b626  00000000  00000000  00081fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019d5ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ad8  00000000  00000000  0019d63c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a9f8 	.word	0x0800a9f8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	0800a9f8 	.word	0x0800a9f8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2lz>:
 8000bd0:	b538      	push	{r3, r4, r5, lr}
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	460d      	mov	r5, r1
 8000bda:	f7ff ff4b 	bl	8000a74 <__aeabi_dcmplt>
 8000bde:	b928      	cbnz	r0, 8000bec <__aeabi_d2lz+0x1c>
 8000be0:	4620      	mov	r0, r4
 8000be2:	4629      	mov	r1, r5
 8000be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000be8:	f000 b80a 	b.w	8000c00 <__aeabi_d2ulz>
 8000bec:	4620      	mov	r0, r4
 8000bee:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000bf2:	f000 f805 	bl	8000c00 <__aeabi_d2ulz>
 8000bf6:	4240      	negs	r0, r0
 8000bf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bfc:	bd38      	pop	{r3, r4, r5, pc}
 8000bfe:	bf00      	nop

08000c00 <__aeabi_d2ulz>:
 8000c00:	b5d0      	push	{r4, r6, r7, lr}
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <__aeabi_d2ulz+0x34>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	4606      	mov	r6, r0
 8000c08:	460f      	mov	r7, r1
 8000c0a:	f7ff fcc1 	bl	8000590 <__aeabi_dmul>
 8000c0e:	f7ff ff6f 	bl	8000af0 <__aeabi_d2uiz>
 8000c12:	4604      	mov	r4, r0
 8000c14:	f7ff fc42 	bl	800049c <__aeabi_ui2d>
 8000c18:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <__aeabi_d2ulz+0x38>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f7ff fcb8 	bl	8000590 <__aeabi_dmul>
 8000c20:	4602      	mov	r2, r0
 8000c22:	460b      	mov	r3, r1
 8000c24:	4630      	mov	r0, r6
 8000c26:	4639      	mov	r1, r7
 8000c28:	f7ff fafa 	bl	8000220 <__aeabi_dsub>
 8000c2c:	f7ff ff60 	bl	8000af0 <__aeabi_d2uiz>
 8000c30:	4621      	mov	r1, r4
 8000c32:	bdd0      	pop	{r4, r6, r7, pc}
 8000c34:	3df00000 	.word	0x3df00000
 8000c38:	41f00000 	.word	0x41f00000

08000c3c <init_PEC15_Table>:

int16_t pec15Table[256];
const int16_t CRC15_POLY = 0x4599;

void init_PEC15_Table(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
    int16_t remainder;

    for (int i = 0; i < 256; i++)
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	e026      	b.n	8000c96 <init_PEC15_Table+0x5a>
    {
        remainder = i << 7;
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	01db      	lsls	r3, r3, #7
 8000c4c:	81fb      	strh	r3, [r7, #14]
        for (int bit = 8; bit > 0; --bit)
 8000c4e:	2308      	movs	r3, #8
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	e015      	b.n	8000c80 <init_PEC15_Table+0x44>
        {
            if (remainder & 0x4000)
 8000c54:	89fb      	ldrh	r3, [r7, #14]
 8000c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d009      	beq.n	8000c72 <init_PEC15_Table+0x36>
            {
                remainder = ((remainder << 1));
 8000c5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	81fb      	strh	r3, [r7, #14]
                remainder = (remainder ^ CRC15_POLY);
 8000c66:	f244 5299 	movw	r2, #17817	; 0x4599
 8000c6a:	89fb      	ldrh	r3, [r7, #14]
 8000c6c:	4053      	eors	r3, r2
 8000c6e:	81fb      	strh	r3, [r7, #14]
 8000c70:	e003      	b.n	8000c7a <init_PEC15_Table+0x3e>
            }
            else
            {
                remainder = ((remainder << 1));
 8000c72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	81fb      	strh	r3, [r7, #14]
        for (int bit = 8; bit > 0; --bit)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	dce6      	bgt.n	8000c54 <init_PEC15_Table+0x18>
            }
        }
        pec15Table[i] = remainder & 0xFFFF;
 8000c86:	4909      	ldr	r1, [pc, #36]	; (8000cac <init_PEC15_Table+0x70>)
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	89fa      	ldrh	r2, [r7, #14]
 8000c8c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int i = 0; i < 256; i++)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	3301      	adds	r3, #1
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	2bff      	cmp	r3, #255	; 0xff
 8000c9a:	ddd5      	ble.n	8000c48 <init_PEC15_Table+0xc>
    }
}
 8000c9c:	bf00      	nop
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	2000008c 	.word	0x2000008c

08000cb0 <pec15>:


uint16_t pec15(uint8_t *data, int len)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b087      	sub	sp, #28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
    int16_t remainder, address;

    remainder = 16; // PEC seed
 8000cba:	2310      	movs	r3, #16
 8000cbc:	82fb      	strh	r3, [r7, #22]

    for (int i = 0; i < len; i++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	e01a      	b.n	8000cfa <pec15+0x4a>
    {
        address = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 8000cc4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cc8:	11db      	asrs	r3, r3, #7
 8000cca:	b21a      	sxth	r2, r3
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	440b      	add	r3, r1
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	4053      	eors	r3, r2
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	81fb      	strh	r3, [r7, #14]
        remainder = (remainder << 8) ^ pec15Table[address];
 8000cde:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	b21a      	sxth	r2, r3
 8000ce6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cea:	490a      	ldr	r1, [pc, #40]	; (8000d14 <pec15+0x64>)
 8000cec:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000cf0:	4053      	eors	r3, r2
 8000cf2:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < len; i++)
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	dbe0      	blt.n	8000cc4 <pec15+0x14>
    }
    return (remainder * 2); // The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 8000d02:	8afb      	ldrh	r3, [r7, #22]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	b29b      	uxth	r3, r3
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	371c      	adds	r7, #28
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	2000008c 	.word	0x2000008c

08000d18 <init_LTC6811>:


void init_LTC6811(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
    init_PEC15_Table();
 8000d1c:	f7ff ff8e 	bl	8000c3c <init_PEC15_Table>
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <update_config>:


void update_config(ltc6811_config *config)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    uint8_t cfgr[6] = {0};
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	2300      	movs	r3, #0
 8000d32:	81bb      	strh	r3, [r7, #12]

    cfgr[0] = config->gpio_pulldowns << 3;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	00db      	lsls	r3, r3, #3
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	723b      	strb	r3, [r7, #8]
    cfgr[0] |= config->refon << 2;
 8000d3e:	7a3b      	ldrb	r3, [r7, #8]
 8000d40:	b25a      	sxtb	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	785b      	ldrb	r3, [r3, #1]
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	b25b      	sxtb	r3, r3
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	b25b      	sxtb	r3, r3
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	723b      	strb	r3, [r7, #8]
    cfgr[0] |= config->adcopt;
 8000d52:	7a3b      	ldrb	r3, [r7, #8]
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	7892      	ldrb	r2, [r2, #2]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	723b      	strb	r3, [r7, #8]

    cfgr[1] = config->vuv;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	889b      	ldrh	r3, [r3, #4]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	727b      	strb	r3, [r7, #9]

    cfgr[2] = config->vuv >> 8;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	889b      	ldrh	r3, [r3, #4]
 8000d6a:	0a1b      	lsrs	r3, r3, #8
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	72bb      	strb	r3, [r7, #10]
    cfgr[2] |= config->vov << 4;
 8000d72:	7abb      	ldrb	r3, [r7, #10]
 8000d74:	b25a      	sxtb	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	88db      	ldrh	r3, [r3, #6]
 8000d7a:	011b      	lsls	r3, r3, #4
 8000d7c:	b25b      	sxtb	r3, r3
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	b25b      	sxtb	r3, r3
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	72bb      	strb	r3, [r7, #10]

    cfgr[3] = config->vov >> 4;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	88db      	ldrh	r3, [r3, #6]
 8000d8a:	091b      	lsrs	r3, r3, #4
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	72fb      	strb	r3, [r7, #11]

    cfgr[4] = config -> dcc;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	895b      	ldrh	r3, [r3, #10]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	733b      	strb	r3, [r7, #12]

    cfgr[5] = config->dcto << 4;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7a1b      	ldrb	r3, [r3, #8]
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	737b      	strb	r3, [r7, #13]
    cfgr[5] |= config -> dcc >> 4;
 8000da4:	7b7a      	ldrb	r2, [r7, #13]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	895b      	ldrh	r3, [r3, #10]
 8000daa:	091b      	lsrs	r3, r3, #4
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	4313      	orrs	r3, r2
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	737b      	strb	r3, [r7, #13]



    wake_sleep();
 8000db6:	f000 f80a 	bl	8000dce <wake_sleep>

    broadcast_write(WRCFGA, cfgr);
 8000dba:	f107 0308 	add.w	r3, r7, #8
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f000 f879 	bl	8000eb8 <broadcast_write>
}
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <wake_sleep>:

////NEED TO CHANGE TO HAL
void wake_sleep()
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ddc:	f005 fd28 	bl	8006830 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000de0:	2001      	movs	r0, #1
 8000de2:	f002 f927 	bl	8003034 <HAL_Delay>

    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000de6:	2201      	movs	r2, #1
 8000de8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df0:	f005 fd1e 	bl	8006830 <HAL_GPIO_WritePin>

    HAL_Delay(1);
 8000df4:	2001      	movs	r0, #1
 8000df6:	f002 f91d 	bl	8003034 <HAL_Delay>
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <wake_standby>:


void wake_standby()
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0c:	f005 fd10 	bl	8006830 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000e10:	2001      	movs	r0, #1
 8000e12:	f002 f90f 	bl	8003034 <HAL_Delay>

    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e20:	f005 fd06 	bl	8006830 <HAL_GPIO_WritePin>

    HAL_Delay(1);
 8000e24:	2001      	movs	r0, #1
 8000e26:	f002 f905 	bl	8003034 <HAL_Delay>
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <broadcast_command>:


void broadcast_command(uint16_t command_code)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	80fb      	strh	r3, [r7, #6]
    uint8_t CMD[2];

    // see Table 36 (Broadcast Command Format) in LTC6811 datasheet
    CMD[0] = 0;                  // CMD0 bits 3 thru 7  = 0
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	733b      	strb	r3, [r7, #12]
    CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 8000e3e:	7b3a      	ldrb	r2, [r7, #12]
 8000e40:	88fb      	ldrh	r3, [r7, #6]
 8000e42:	0a1b      	lsrs	r3, r3, #8
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	733b      	strb	r3, [r7, #12]
    CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	737b      	strb	r3, [r7, #13]

    uint16_t crc = pec15(CMD, 2); // CRC for CMD
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	2102      	movs	r1, #2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff28 	bl	8000cb0 <pec15>
 8000e60:	4603      	mov	r3, r0
 8000e62:	81fb      	strh	r3, [r7, #14]

    uint8_t tx_msg[4];

    // Send 2-byte CMD and 2-byte PEC15.

    tx_msg[0] = CMD[0];
 8000e64:	7b3b      	ldrb	r3, [r7, #12]
 8000e66:	723b      	strb	r3, [r7, #8]
    tx_msg[1] = CMD[1];
 8000e68:	7b7b      	ldrb	r3, [r7, #13]
 8000e6a:	727b      	strb	r3, [r7, #9]
    tx_msg[2] = crc >> 8;
 8000e6c:	89fb      	ldrh	r3, [r7, #14]
 8000e6e:	0a1b      	lsrs	r3, r3, #8
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	72bb      	strb	r3, [r7, #10]
    tx_msg[3] = crc;
 8000e76:	89fb      	ldrh	r3, [r7, #14]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	72fb      	strb	r3, [r7, #11]




#ifdef ALWAYS_STANDBY_WAKE
    wake_standby();
 8000e7c:	f7ff ffbf 	bl	8000dfe <wake_standby>
#endif
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8a:	f005 fcd1 	bl	8006830 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, tx_msg, 4, 1000);
 8000e8e:	f107 0108 	add.w	r1, r7, #8
 8000e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e96:	2204      	movs	r2, #4
 8000e98:	4806      	ldr	r0, [pc, #24]	; (8000eb4 <broadcast_command+0x84>)
 8000e9a:	f006 ffe2 	bl	8007e62 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea8:	f005 fcc2 	bl	8006830 <HAL_GPIO_WritePin>
}
 8000eac:	bf00      	nop
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000514 	.word	0x20000514

08000eb8 <broadcast_write>:


void broadcast_write(uint16_t command_code, uint8_t *tx_reg)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	80fb      	strh	r3, [r7, #6]
    uint8_t CMD[2];

    // see Table 36 (Broadcast Command Format) in LTC6811 datasheet
    CMD[0] = 0;                  // CMD0 bits 3 thru 7  = 0
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	753b      	strb	r3, [r7, #20]
    CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 8000ec8:	7d3a      	ldrb	r2, [r7, #20]
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	0a1b      	lsrs	r3, r3, #8
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	753b      	strb	r3, [r7, #20]
    CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	757b      	strb	r3, [r7, #21]

    uint16_t crc = pec15(CMD, 2); // CRC for CMD
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	2102      	movs	r1, #2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fee3 	bl	8000cb0 <pec15>
 8000eea:	4603      	mov	r3, r0
 8000eec:	82fb      	strh	r3, [r7, #22]

    uint8_t tx_msg[12];

    // Send 2-byte CMD and 2-byte PEC15, then 6-byte register and 2-byte PEC15. No shift bytes.

    tx_msg[0] = CMD[0];
 8000eee:	7d3b      	ldrb	r3, [r7, #20]
 8000ef0:	723b      	strb	r3, [r7, #8]
    tx_msg[1] = CMD[1];
 8000ef2:	7d7b      	ldrb	r3, [r7, #21]
 8000ef4:	727b      	strb	r3, [r7, #9]
    tx_msg[2] = crc >> 8;
 8000ef6:	8afb      	ldrh	r3, [r7, #22]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	72bb      	strb	r3, [r7, #10]
    tx_msg[3] = crc;
 8000f00:	8afb      	ldrh	r3, [r7, #22]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	72fb      	strb	r3, [r7, #11]

    crc = pec15(tx_reg, 6); // CRC for register value
 8000f06:	2106      	movs	r1, #6
 8000f08:	6838      	ldr	r0, [r7, #0]
 8000f0a:	f7ff fed1 	bl	8000cb0 <pec15>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	82fb      	strh	r3, [r7, #22]

    tx_msg[4] = tx_reg[0];
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	733b      	strb	r3, [r7, #12]
    tx_msg[5] = tx_reg[1];
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	785b      	ldrb	r3, [r3, #1]
 8000f1c:	737b      	strb	r3, [r7, #13]
    tx_msg[6] = tx_reg[2];
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	789b      	ldrb	r3, [r3, #2]
 8000f22:	73bb      	strb	r3, [r7, #14]
    tx_msg[7] = tx_reg[3];
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	78db      	ldrb	r3, [r3, #3]
 8000f28:	73fb      	strb	r3, [r7, #15]
    tx_msg[8] = tx_reg[4];
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	791b      	ldrb	r3, [r3, #4]
 8000f2e:	743b      	strb	r3, [r7, #16]
    tx_msg[9] = tx_reg[5];
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	795b      	ldrb	r3, [r3, #5]
 8000f34:	747b      	strb	r3, [r7, #17]
    tx_msg[10] = crc >> 8;
 8000f36:	8afb      	ldrh	r3, [r7, #22]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	74bb      	strb	r3, [r7, #18]
    tx_msg[11] = crc;
 8000f40:	8afb      	ldrh	r3, [r7, #22]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	74fb      	strb	r3, [r7, #19]




#ifdef ALWAYS_STANDBY_WAKE
    wake_standby();
 8000f46:	f7ff ff5a 	bl	8000dfe <wake_standby>
#endif
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f54:	f005 fc6c 	bl	8006830 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, tx_msg, 12, 1000);
 8000f58:	f107 0108 	add.w	r1, r7, #8
 8000f5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f60:	220c      	movs	r2, #12
 8000f62:	4807      	ldr	r0, [pc, #28]	; (8000f80 <broadcast_write+0xc8>)
 8000f64:	f006 ff7d 	bl	8007e62 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f72:	f005 fc5d 	bl	8006830 <HAL_GPIO_WritePin>
}
 8000f76:	bf00      	nop
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000514 	.word	0x20000514

08000f84 <address_read>:
}



void address_read(uint8_t address, uint16_t command_code, uint8_t *rx_reg)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	603a      	str	r2, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	460b      	mov	r3, r1
 8000f92:	80bb      	strh	r3, [r7, #4]
    uint8_t CMD[2];

    // see Table 37 (Address Command Format) in LTC6811 datasheet
    CMD[0] = 0x80;               // CMD0 bit 7          = 1
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	773b      	strb	r3, [r7, #28]
    CMD[0] |= address << 3;      // CMD0 bits 3 thu 6   = address
 8000f98:	7f3b      	ldrb	r3, [r7, #28]
 8000f9a:	b25a      	sxtb	r2, r3
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	773b      	strb	r3, [r7, #28]
    CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 8000faa:	7f3a      	ldrb	r2, [r7, #28]
 8000fac:	88bb      	ldrh	r3, [r7, #4]
 8000fae:	0a1b      	lsrs	r3, r3, #8
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	773b      	strb	r3, [r7, #28]
    CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 8000fba:	88bb      	ldrh	r3, [r7, #4]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	777b      	strb	r3, [r7, #29]

    uint16_t crc = pec15(CMD, 2);
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fe72 	bl	8000cb0 <pec15>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	847b      	strh	r3, [r7, #34]	; 0x22

    uint8_t tx_msg[12];

    // Send 2-byte CMD and PEC15, then read 6-byte register and 2-byte PEC15

    tx_msg[0] = CMD[0];
 8000fd0:	7f3b      	ldrb	r3, [r7, #28]
 8000fd2:	743b      	strb	r3, [r7, #16]
    tx_msg[1] = CMD[1];
 8000fd4:	7f7b      	ldrb	r3, [r7, #29]
 8000fd6:	747b      	strb	r3, [r7, #17]
    tx_msg[2] = crc >> 8;
 8000fd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000fda:	0a1b      	lsrs	r3, r3, #8
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	74bb      	strb	r3, [r7, #18]
    tx_msg[3] = crc;
 8000fe2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	74fb      	strb	r3, [r7, #19]
    tx_msg[4] = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	753b      	strb	r3, [r7, #20]
    tx_msg[5] = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	757b      	strb	r3, [r7, #21]
    tx_msg[6] = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	75bb      	strb	r3, [r7, #22]
    tx_msg[7] = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	75fb      	strb	r3, [r7, #23]
    tx_msg[8] = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	763b      	strb	r3, [r7, #24]
    tx_msg[9] = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	767b      	strb	r3, [r7, #25]
    tx_msg[10] = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	76bb      	strb	r3, [r7, #26]
    tx_msg[11] = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	76fb      	strb	r3, [r7, #27]

    uint8_t rx_msg[8] = {0};
 8001008:	2300      	movs	r3, #0
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]

	#ifdef ALWAYS_STANDBY_WAKE
		wake_standby();
 8001010:	f7ff fef5 	bl	8000dfe <wake_standby>
	#endif
	HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800101a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101e:	f005 fc07 	bl	8006830 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, tx_msg, 4, 1000);
 8001022:	f107 0110 	add.w	r1, r7, #16
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	2204      	movs	r2, #4
 800102c:	481d      	ldr	r0, [pc, #116]	; (80010a4 <address_read+0x120>)
 800102e:	f006 ff18 	bl	8007e62 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, rx_msg, 8, 1000);
 8001032:	f107 0108 	add.w	r1, r7, #8
 8001036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103a:	2208      	movs	r2, #8
 800103c:	4819      	ldr	r0, [pc, #100]	; (80010a4 <address_read+0x120>)
 800103e:	f007 f87e 	bl	800813e <HAL_SPI_Receive>
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104c:	f005 fbf0 	bl	8006830 <HAL_GPIO_WritePin>
        crc = pec15(rx_msg, 6); // calculate PEC15 for received message (first 6 bytes)
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	2106      	movs	r1, #6
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fe2a 	bl	8000cb0 <pec15>
 800105c:	4603      	mov	r3, r0
 800105e:	847b      	strh	r3, [r7, #34]	; 0x22

        uint16_t rx_crc = (rx_msg[6] << 8) + rx_msg[7]; // received PEC15
 8001060:	7bbb      	ldrb	r3, [r7, #14]
 8001062:	b29b      	uxth	r3, r3
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b29a      	uxth	r2, r3
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	b29b      	uxth	r3, r3
 800106c:	4413      	add	r3, r2
 800106e:	843b      	strh	r3, [r7, #32]

        if (crc == rx_crc)
 8001070:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001072:	8c3b      	ldrh	r3, [r7, #32]
 8001074:	429a      	cmp	r2, r3
 8001076:	d111      	bne.n	800109c <address_read+0x118>
        {
            for (int i = 0; i < 6; i++)
 8001078:	2300      	movs	r3, #0
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
 800107c:	e00b      	b.n	8001096 <address_read+0x112>
            {
                rx_reg[i] = rx_msg[i];
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	4413      	add	r3, r2
 8001084:	f107 0108 	add.w	r1, r7, #8
 8001088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800108a:	440a      	add	r2, r1
 800108c:	7812      	ldrb	r2, [r2, #0]
 800108e:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 6; i++)
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	3301      	adds	r3, #1
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
 8001096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001098:	2b05      	cmp	r3, #5
 800109a:	ddf0      	ble.n	800107e <address_read+0xfa>
            }
        }
}
 800109c:	bf00      	nop
 800109e:	3728      	adds	r7, #40	; 0x28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000514 	.word	0x20000514

080010a8 <extract_voltage_reg>:



void extract_voltage_reg(uint8_t *voltage_reg, float *voltages)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	e036      	b.n	8001126 <extract_voltage_reg+0x7e>
    {
        if (voltage_reg[i * 2] == 0xFF && voltage_reg[(i * 2) + 1] == 0xFF)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	461a      	mov	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2bff      	cmp	r3, #255	; 0xff
 80010c6:	d10e      	bne.n	80010e6 <extract_voltage_reg+0x3e>
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	3301      	adds	r3, #1
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2bff      	cmp	r3, #255	; 0xff
 80010d6:	d106      	bne.n	80010e6 <extract_voltage_reg+0x3e>
        {
#ifdef NAN
            voltages[i] = NAN;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a16      	ldr	r2, [pc, #88]	; (800113c <extract_voltage_reg+0x94>)
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	e01c      	b.n	8001120 <extract_voltage_reg+0x78>
#endif
        }
        else
        {
            voltages[i] = (float)(voltage_reg[i * 2] + (voltage_reg[(i * 2) + 1] << 8)) * 0.0001f;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	461a      	mov	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4413      	add	r3, r2
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	4619      	mov	r1, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	3301      	adds	r3, #1
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	440b      	add	r3, r1
 8001104:	ee07 3a90 	vmov	s15, r3
 8001108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	4413      	add	r3, r2
 8001114:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001140 <extract_voltage_reg+0x98>
 8001118:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3301      	adds	r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2b02      	cmp	r3, #2
 800112a:	ddc5      	ble.n	80010b8 <extract_voltage_reg+0x10>
        }
    }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	7fc00000 	.word	0x7fc00000
 8001140:	38d1b717 	.word	0x38d1b717

08001144 <extract_all_voltages>:


void extract_all_voltages(ltc6811 *ltc6811, float *cell_voltage, int slave_num)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b094      	sub	sp, #80	; 0x50
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]


    int cell = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	64fb      	str	r3, [r7, #76]	; 0x4c

    for (int slave = 0; slave < slave_num; slave++)
 8001154:	2300      	movs	r3, #0
 8001156:	64bb      	str	r3, [r7, #72]	; 0x48
 8001158:	e066      	b.n	8001228 <extract_all_voltages+0xe4>
    {
        int i_max = ltc6811[slave].cell_count;
 800115a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	461a      	mov	r2, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4413      	add	r3, r2
 800116a:	785b      	ldrb	r3, [r3, #1]
 800116c:	643b      	str	r3, [r7, #64]	; 0x40

        float reg_voltages[12];

        extract_voltage_reg(ltc6811[slave].cva_reg, &reg_voltages[0]);
 800116e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	461a      	mov	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4413      	add	r3, r2
 800117e:	3302      	adds	r3, #2
 8001180:	f107 0210 	add.w	r2, r7, #16
 8001184:	4611      	mov	r1, r2
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ff8e 	bl	80010a8 <extract_voltage_reg>
        extract_voltage_reg(ltc6811[slave].cvb_reg, &reg_voltages[3]);
 800118c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800118e:	4613      	mov	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	461a      	mov	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4413      	add	r3, r2
 800119c:	f103 0208 	add.w	r2, r3, #8
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	330c      	adds	r3, #12
 80011a6:	4619      	mov	r1, r3
 80011a8:	4610      	mov	r0, r2
 80011aa:	f7ff ff7d 	bl	80010a8 <extract_voltage_reg>
        extract_voltage_reg(ltc6811[slave].cvc_reg, &reg_voltages[6]);
 80011ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80011b0:	4613      	mov	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	461a      	mov	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4413      	add	r3, r2
 80011be:	f103 020e 	add.w	r2, r3, #14
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	3318      	adds	r3, #24
 80011c8:	4619      	mov	r1, r3
 80011ca:	4610      	mov	r0, r2
 80011cc:	f7ff ff6c 	bl	80010a8 <extract_voltage_reg>
        extract_voltage_reg(ltc6811[slave].cvd_reg, &reg_voltages[9]);
 80011d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80011d2:	4613      	mov	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	f103 0214 	add.w	r2, r3, #20
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	3324      	adds	r3, #36	; 0x24
 80011ea:	4619      	mov	r1, r3
 80011ec:	4610      	mov	r0, r2
 80011ee:	f7ff ff5b 	bl	80010a8 <extract_voltage_reg>

        for (int i = 0; i < i_max; i++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	647b      	str	r3, [r7, #68]	; 0x44
 80011f6:	e010      	b.n	800121a <extract_all_voltages+0xd6>
        {
            cell_voltage[cell] = reg_voltages[i];
 80011f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	4413      	add	r3, r2
 8001200:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001202:	0092      	lsls	r2, r2, #2
 8001204:	3250      	adds	r2, #80	; 0x50
 8001206:	443a      	add	r2, r7
 8001208:	3a40      	subs	r2, #64	; 0x40
 800120a:	6812      	ldr	r2, [r2, #0]
 800120c:	601a      	str	r2, [r3, #0]
            cell++;
 800120e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001210:	3301      	adds	r3, #1
 8001212:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < i_max; i++)
 8001214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001216:	3301      	adds	r3, #1
 8001218:	647b      	str	r3, [r7, #68]	; 0x44
 800121a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800121c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800121e:	429a      	cmp	r2, r3
 8001220:	dbea      	blt.n	80011f8 <extract_all_voltages+0xb4>
    for (int slave = 0; slave < slave_num; slave++)
 8001222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001224:	3301      	adds	r3, #1
 8001226:	64bb      	str	r3, [r7, #72]	; 0x48
 8001228:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	429a      	cmp	r2, r3
 800122e:	db94      	blt.n	800115a <extract_all_voltages+0x16>
        }
    }
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	3750      	adds	r7, #80	; 0x50
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <read_all_voltages>:


void read_all_voltages(ltc6811 *ltc6811, int slave_num)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b084      	sub	sp, #16
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	6039      	str	r1, [r7, #0]
	wake_sleep();
 8001244:	f7ff fdc3 	bl	8000dce <wake_sleep>

    for (int slave = 0; slave < slave_num; slave++)
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	e05a      	b.n	8001304 <read_all_voltages+0xca>
    {
        address_read(ltc6811[slave].address, RDCVA, ltc6811[slave].cva_reg);
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	461a      	mov	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	7818      	ldrb	r0, [r3, #0]
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	4613      	mov	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	461a      	mov	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4413      	add	r3, r2
 8001270:	3302      	adds	r3, #2
 8001272:	461a      	mov	r2, r3
 8001274:	2104      	movs	r1, #4
 8001276:	f7ff fe85 	bl	8000f84 <address_read>
        address_read(ltc6811[slave].address, RDCVB, ltc6811[slave].cvb_reg);
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	461a      	mov	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	7818      	ldrb	r0, [r3, #0]
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	461a      	mov	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4413      	add	r3, r2
 800129c:	3308      	adds	r3, #8
 800129e:	461a      	mov	r2, r3
 80012a0:	2106      	movs	r1, #6
 80012a2:	f7ff fe6f 	bl	8000f84 <address_read>
        address_read(ltc6811[slave].address, RDCVC, ltc6811[slave].cvc_reg);
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	461a      	mov	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	7818      	ldrb	r0, [r3, #0]
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	4613      	mov	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	461a      	mov	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4413      	add	r3, r2
 80012c8:	330e      	adds	r3, #14
 80012ca:	461a      	mov	r2, r3
 80012cc:	2108      	movs	r1, #8
 80012ce:	f7ff fe59 	bl	8000f84 <address_read>
        address_read(ltc6811[slave].address, RDCVD, ltc6811[slave].cvd_reg);
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	4613      	mov	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	461a      	mov	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	7818      	ldrb	r0, [r3, #0]
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	461a      	mov	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4413      	add	r3, r2
 80012f4:	3314      	adds	r3, #20
 80012f6:	461a      	mov	r2, r3
 80012f8:	210a      	movs	r1, #10
 80012fa:	f7ff fe43 	bl	8000f84 <address_read>
    for (int slave = 0; slave < slave_num; slave++)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	3301      	adds	r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	dba0      	blt.n	800124e <read_all_voltages+0x14>
    }
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <generate_i2c>:

void generate_i2c(uint8_t * comm_reg, uint8_t *comm_data, uint8_t len)
// comm_data is an array with maximum 3 bytes to be written to COMM register
// len is number of bytes to be written (how many are in comm_data)

{
 8001316:	b480      	push	{r7}
 8001318:	b085      	sub	sp, #20
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	4613      	mov	r3, r2
 8001322:	71fb      	strb	r3, [r7, #7]

	switch (len) {
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d002      	beq.n	8001330 <generate_i2c+0x1a>
 800132a:	2b03      	cmp	r3, #3
 800132c:	d02f      	beq.n	800138e <generate_i2c+0x78>
	    comm_reg[5] = ((comm_data[2] << 4) & 0b1111) | 0b00001001; //mask with lower half data byte and master ack bits

		//how to send stop bits (does it automatically if using all 5 bytes?)
	    break;
    }
}
 800132e:	e05d      	b.n	80013ec <generate_i2c+0xd6>
        comm_reg[0] = ((comm_data[0] >> 4) & 0b00001111) | 0b01100000; //mask with upper half data bit and start bits
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	091b      	lsrs	r3, r3, #4
 8001336:	b2db      	uxtb	r3, r3
 8001338:	b25b      	sxtb	r3, r3
 800133a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800133e:	b25b      	sxtb	r3, r3
 8001340:	b2da      	uxtb	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	701a      	strb	r2, [r3, #0]
	    comm_reg[1] = (comm_data[0] << 4) & 0b11110000; //mask with lower half data byte and master ack bits
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	011a      	lsls	r2, r3, #4
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	3301      	adds	r3, #1
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	701a      	strb	r2, [r3, #0]
	    comm_reg[2] = (comm_data[1] >> 4) & 0b00001111; //mask with upper half data bit and blank bits
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	3301      	adds	r3, #1
 8001358:	781a      	ldrb	r2, [r3, #0]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3302      	adds	r3, #2
 800135e:	0912      	lsrs	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	701a      	strb	r2, [r3, #0]
	    comm_reg[3] = ((comm_data[1] << 4) & 0b11110000) | 0b00001001; //mask with lower half data byte and master ack bits
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	3301      	adds	r3, #1
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	011b      	lsls	r3, r3, #4
 800136c:	b25b      	sxtb	r3, r3
 800136e:	f043 0309 	orr.w	r3, r3, #9
 8001372:	b25a      	sxtb	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3303      	adds	r3, #3
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	701a      	strb	r2, [r3, #0]
	    comm_reg[4] = 0x00;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3304      	adds	r3, #4
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
	    comm_reg[5] = 0x00;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	3305      	adds	r3, #5
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
	    break;
 800138c:	e02e      	b.n	80013ec <generate_i2c+0xd6>
	    comm_reg[0] = ((comm_data[0] >> 4) & 0b00001111) | 0b01100000; //mask with upper half data bit and start bits
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	b2db      	uxtb	r3, r3
 8001396:	b25b      	sxtb	r3, r3
 8001398:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800139c:	b25b      	sxtb	r3, r3
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	701a      	strb	r2, [r3, #0]
	    comm_reg[1] = (comm_data[0] << 4) & 0b11110000; //mask with lower half data byte and master ack bits
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	011a      	lsls	r2, r3, #4
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	3301      	adds	r3, #1
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	701a      	strb	r2, [r3, #0]
	    comm_reg[2] = (comm_data[1] >> 4) & 0b00001111; //mask with upper half data bit and blank bits
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	3301      	adds	r3, #1
 80013b6:	781a      	ldrb	r2, [r3, #0]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	3302      	adds	r3, #2
 80013bc:	0912      	lsrs	r2, r2, #4
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	701a      	strb	r2, [r3, #0]
	    comm_reg[3] = (comm_data[1] << 4) & 0b11110000; //mask with lower half data byte and master ack bits
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	3301      	adds	r3, #1
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	011a      	lsls	r2, r3, #4
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	3303      	adds	r3, #3
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	701a      	strb	r2, [r3, #0]
	    comm_reg[4] = (comm_data[2] >> 4) & 0b00001111; //mask with upper half data bit and blank bits
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	3302      	adds	r3, #2
 80013d6:	781a      	ldrb	r2, [r3, #0]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3304      	adds	r3, #4
 80013dc:	0912      	lsrs	r2, r2, #4
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	701a      	strb	r2, [r3, #0]
	    comm_reg[5] = ((comm_data[2] << 4) & 0b1111) | 0b00001001; //mask with lower half data byte and master ack bits
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3305      	adds	r3, #5
 80013e6:	2209      	movs	r2, #9
 80013e8:	701a      	strb	r2, [r3, #0]
	    break;
 80013ea:	bf00      	nop
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <send_comm>:


void send_comm(uint8_t *i2c_message, uint8_t len, int mux_num) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	460b      	mov	r3, r1
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	72fb      	strb	r3, [r7, #11]

    uint8_t comm_reg[6];

    generate_i2c(comm_reg, i2c_message, len);
 8001406:	7afa      	ldrb	r2, [r7, #11]
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	68f9      	ldr	r1, [r7, #12]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff81 	bl	8001316 <generate_i2c>

    if (mux_num)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d004      	beq.n	8001424 <send_comm+0x2c>
    {
    	comm_reg[1] |= 0b00100000;
 800141a:	7c7b      	ldrb	r3, [r7, #17]
 800141c:	f043 0320 	orr.w	r3, r3, #32
 8001420:	b2db      	uxtb	r3, r3
 8001422:	747b      	strb	r3, [r7, #17]
    }


    wake_sleep();
 8001424:	f7ff fcd3 	bl	8000dce <wake_sleep>

    broadcast_write(WRCOMM, comm_reg);
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	4619      	mov	r1, r3
 800142e:	f240 7021 	movw	r0, #1825	; 0x721
 8001432:	f7ff fd41 	bl	8000eb8 <broadcast_write>

    broadcast_command_stcomm(STCOMM);
 8001436:	f240 7023 	movw	r0, #1827	; 0x723
 800143a:	f000 f805 	bl	8001448 <broadcast_command_stcomm>


}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <broadcast_command_stcomm>:


void broadcast_command_stcomm(uint16_t command_code)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	80fb      	strh	r3, [r7, #6]
uint8_t CMD[2];

// see Table 36 (Broadcast Command Format) in LTC6811 datasheet
CMD[0] = 0;                  // CMD0 bits 3 thru 7  = 0
 8001452:	2300      	movs	r3, #0
 8001454:	773b      	strb	r3, [r7, #28]
CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 8001456:	7f3a      	ldrb	r2, [r7, #28]
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	b29b      	uxth	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	b2db      	uxtb	r3, r3
 8001464:	773b      	strb	r3, [r7, #28]
CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	777b      	strb	r3, [r7, #29]

uint16_t crc = pec15(CMD, 2); // CRC for CMD
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	2102      	movs	r1, #2
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fc1c 	bl	8000cb0 <pec15>
 8001478:	4603      	mov	r3, r0
 800147a:	83fb      	strh	r3, [r7, #30]





uint8_t tx_msg[13] = {CMD[0], CMD[1], crc >> 8, crc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800147c:	7f3b      	ldrb	r3, [r7, #28]
 800147e:	733b      	strb	r3, [r7, #12]
 8001480:	7f7b      	ldrb	r3, [r7, #29]
 8001482:	737b      	strb	r3, [r7, #13]
 8001484:	8bfb      	ldrh	r3, [r7, #30]
 8001486:	0a1b      	lsrs	r3, r3, #8
 8001488:	b29b      	uxth	r3, r3
 800148a:	b2db      	uxtb	r3, r3
 800148c:	73bb      	strb	r3, [r7, #14]
 800148e:	8bfb      	ldrh	r3, [r7, #30]
 8001490:	b2db      	uxtb	r3, r3
 8001492:	73fb      	strb	r3, [r7, #15]
 8001494:	2300      	movs	r3, #0
 8001496:	743b      	strb	r3, [r7, #16]
 8001498:	2300      	movs	r3, #0
 800149a:	747b      	strb	r3, [r7, #17]
 800149c:	2300      	movs	r3, #0
 800149e:	74bb      	strb	r3, [r7, #18]
 80014a0:	2300      	movs	r3, #0
 80014a2:	74fb      	strb	r3, [r7, #19]
 80014a4:	2300      	movs	r3, #0
 80014a6:	753b      	strb	r3, [r7, #20]
 80014a8:	2300      	movs	r3, #0
 80014aa:	757b      	strb	r3, [r7, #21]
 80014ac:	2300      	movs	r3, #0
 80014ae:	75bb      	strb	r3, [r7, #22]
 80014b0:	2300      	movs	r3, #0
 80014b2:	75fb      	strb	r3, [r7, #23]
 80014b4:	2300      	movs	r3, #0
 80014b6:	763b      	strb	r3, [r7, #24]



#ifdef ALWAYS_STANDBY_WAKE
wake_standby();
 80014b8:	f7ff fca1 	bl	8000dfe <wake_standby>
#endif

HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c6:	f005 f9b3 	bl	8006830 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi3, tx_msg, 13, 1000);
 80014ca:	f107 010c 	add.w	r1, r7, #12
 80014ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d2:	220d      	movs	r2, #13
 80014d4:	4806      	ldr	r0, [pc, #24]	; (80014f0 <broadcast_command_stcomm+0xa8>)
 80014d6:	f006 fcc4 	bl	8007e62 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 80014da:	2201      	movs	r2, #1
 80014dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e4:	f005 f9a4 	bl	8006830 <HAL_GPIO_WritePin>
}
 80014e8:	bf00      	nop
 80014ea:	3720      	adds	r7, #32
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000514 	.word	0x20000514
 80014f4:	00000000 	.word	0x00000000

080014f8 <calc_temp>:


double calc_temp(double adc_voltage) {
 80014f8:	b5b0      	push	{r4, r5, r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	ed87 0b00 	vstr	d0, [r7]
	//stole this shit from arduino forum!!!
  double steinhart;
  double resistance = 10000 * adc_voltage / (3 - adc_voltage);
 8001502:	a333      	add	r3, pc, #204	; (adr r3, 80015d0 <calc_temp+0xd8>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800150c:	f7ff f840 	bl	8000590 <__aeabi_dmul>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4614      	mov	r4, r2
 8001516:	461d      	mov	r5, r3
 8001518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800151c:	f04f 0000 	mov.w	r0, #0
 8001520:	4933      	ldr	r1, [pc, #204]	; (80015f0 <calc_temp+0xf8>)
 8001522:	f7fe fe7d 	bl	8000220 <__aeabi_dsub>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4620      	mov	r0, r4
 800152c:	4629      	mov	r1, r5
 800152e:	f7ff f959 	bl	80007e4 <__aeabi_ddiv>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	e9c7 2304 	strd	r2, r3, [r7, #16]
  steinhart = resistance / 10000;     // (R/Ro)
 800153a:	a325      	add	r3, pc, #148	; (adr r3, 80015d0 <calc_temp+0xd8>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001544:	f7ff f94e 	bl	80007e4 <__aeabi_ddiv>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  steinhart = log(steinhart);                  // ln(R/Ro)
 8001550:	ed97 0b02 	vldr	d0, [r7, #8]
 8001554:	f009 f84c 	bl	800a5f0 <log>
 8001558:	ed87 0b02 	vstr	d0, [r7, #8]
  steinhart /= 3950;                   // 1/B * ln(R/Ro)
 800155c:	a31e      	add	r3, pc, #120	; (adr r3, 80015d8 <calc_temp+0xe0>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001566:	f7ff f93d 	bl	80007e4 <__aeabi_ddiv>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  steinhart += 1.0 / (25 + 273.15); // + (1/To)
 8001572:	a31b      	add	r3, pc, #108	; (adr r3, 80015e0 <calc_temp+0xe8>)
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800157c:	f7fe fe52 	bl	8000224 <__adddf3>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	e9c7 2302 	strd	r2, r3, [r7, #8]
  steinhart = 1.0 / steinhart;                 // Invert
 8001588:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800158c:	f04f 0000 	mov.w	r0, #0
 8001590:	4918      	ldr	r1, [pc, #96]	; (80015f4 <calc_temp+0xfc>)
 8001592:	f7ff f927 	bl	80007e4 <__aeabi_ddiv>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  steinhart -= 273.15;
 800159e:	a312      	add	r3, pc, #72	; (adr r3, 80015e8 <calc_temp+0xf0>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015a8:	f7fe fe3a 	bl	8000220 <__aeabi_dsub>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	e9c7 2302 	strd	r2, r3, [r7, #8]

  return steinhart;
 80015b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015b8:	ec43 2b17 	vmov	d7, r2, r3
}
 80015bc:	eeb0 0a47 	vmov.f32	s0, s14
 80015c0:	eef0 0a67 	vmov.f32	s1, s15
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bdb0      	pop	{r4, r5, r7, pc}
 80015ca:	bf00      	nop
 80015cc:	f3af 8000 	nop.w
 80015d0:	00000000 	.word	0x00000000
 80015d4:	40c38800 	.word	0x40c38800
 80015d8:	00000000 	.word	0x00000000
 80015dc:	40aedc00 	.word	0x40aedc00
 80015e0:	dcb5db83 	.word	0xdcb5db83
 80015e4:	3f6b79e1 	.word	0x3f6b79e1
 80015e8:	66666666 	.word	0x66666666
 80015ec:	40711266 	.word	0x40711266
 80015f0:	40080000 	.word	0x40080000
 80015f4:	3ff00000 	.word	0x3ff00000

080015f8 <read_all_temps>:
	return 40; //no thermistors working lol
}


int read_all_temps(ltc6811 *ltc6811_arr, float *thermistor_temps, uint8_t mux_channels, int slave_num)
{
 80015f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015fa:	b099      	sub	sp, #100	; 0x64
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	4613      	mov	r3, r2
 8001606:	71fb      	strb	r3, [r7, #7]
	double thermistor_voltage;
	int thermistor_num = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	65fb      	str	r3, [r7, #92]	; 0x5c
	int overtemp_limit = 200;
 800160c:	23c8      	movs	r3, #200	; 0xc8
 800160e:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t mux_off[2] = {0b10010000, 0b00000000};
 8001610:	2390      	movs	r3, #144	; 0x90
 8001612:	87bb      	strh	r3, [r7, #60]	; 0x3c
	uint8_t fucked_thermistors = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	//FOR EACH SLAVE
	  wake_sleep();
 800161a:	f7ff fbd8 	bl	8000dce <wake_sleep>
	  broadcast_command(ADAX(MD_27k_14k, CHG_GPIO_3)); //measure gpio 3 (non mux'd thermistor)
 800161e:	f240 40e3 	movw	r0, #1251	; 0x4e3
 8001622:	f7ff fc05 	bl	8000e30 <broadcast_command>

	  broadcast_command(ADAX(MD_27k_14k, CHG_GPIO_2)); //measure gpio 2 (non mux'd thermistor)
 8001626:	f240 40e2 	movw	r0, #1250	; 0x4e2
 800162a:	f7ff fc01 	bl	8000e30 <broadcast_command>

	  for (int slave = 0; slave < slave_num; slave++) //loop through and read every slave AUXA register to see temps
 800162e:	2300      	movs	r3, #0
 8001630:	65bb      	str	r3, [r7, #88]	; 0x58
 8001632:	e126      	b.n	8001882 <read_all_temps+0x28a>
	  {


		  ltc6811 selected_slave = ltc6811_arr[slave]; //increment over all slaves
 8001634:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	461a      	mov	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	461c      	mov	r4, r3
 8001646:	f107 0610 	add.w	r6, r7, #16
 800164a:	f104 0c20 	add.w	ip, r4, #32
 800164e:	4635      	mov	r5, r6
 8001650:	4623      	mov	r3, r4
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	6859      	ldr	r1, [r3, #4]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800165c:	3410      	adds	r4, #16
 800165e:	3610      	adds	r6, #16
 8001660:	4564      	cmp	r4, ip
 8001662:	d1f4      	bne.n	800164e <read_all_temps+0x56>
 8001664:	4633      	mov	r3, r6
 8001666:	4622      	mov	r2, r4
 8001668:	6810      	ldr	r0, [r2, #0]
 800166a:	6851      	ldr	r1, [r2, #4]
 800166c:	c303      	stmia	r3!, {r0, r1}

		  wake_sleep();
 800166e:	f7ff fbae 	bl	8000dce <wake_sleep>
		  //READ GPIO 3
		  address_read(selected_slave.address, RDAUXA, selected_slave.auxa_reg);
 8001672:	7c38      	ldrb	r0, [r7, #16]
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	331a      	adds	r3, #26
 800167a:	461a      	mov	r2, r3
 800167c:	210c      	movs	r1, #12
 800167e:	f7ff fc81 	bl	8000f84 <address_read>

		  thermistor_voltage = ((selected_slave.auxa_reg[5] << 8) | selected_slave.auxa_reg[4]) * 0.0001;
 8001682:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800168c:	4313      	orrs	r3, r2
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe ff14 	bl	80004bc <__aeabi_i2d>
 8001694:	a380      	add	r3, pc, #512	; (adr r3, 8001898 <read_all_temps+0x2a0>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7fe ff79 	bl	8000590 <__aeabi_dmul>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		  if (slave == 3)
 80016a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016a8:	2b03      	cmp	r3, #3
 80016aa:	d106      	bne.n	80016ba <read_all_temps+0xc2>
		  {
			  thermistor_temps[thermistor_num] = 22;
 80016ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	4413      	add	r3, r2
 80016b4:	4a7a      	ldr	r2, [pc, #488]	; (80018a0 <read_all_temps+0x2a8>)
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e00d      	b.n	80016d6 <read_all_temps+0xde>
		  }
		  else
		  {
		  thermistor_temps[thermistor_num] = calc_temp(thermistor_voltage); //convert voltage to temperature in degrees celcius
 80016ba:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80016be:	f7ff ff1b 	bl	80014f8 <calc_temp>
 80016c2:	ec51 0b10 	vmov	r0, r1, d0
 80016c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	18d4      	adds	r4, r2, r3
 80016ce:	f7ff fa2f 	bl	8000b30 <__aeabi_d2f>
 80016d2:	4603      	mov	r3, r0
 80016d4:	6023      	str	r3, [r4, #0]
		  }
		  if (thermistor_temps[thermistor_num] > overtemp_limit) //if overtemp, trigger shutdown
 80016d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	4413      	add	r3, r2
 80016de:	ed93 7a00 	vldr	s14, [r3]
 80016e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016e4:	ee07 3a90 	vmov	s15, r3
 80016e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f4:	dd01      	ble.n	80016fa <read_all_temps+0x102>
		  {
			  return 1; //ADD SDC
 80016f6:	2301      	movs	r3, #1
 80016f8:	e0c9      	b.n	800188e <read_all_temps+0x296>
//			  }
//		  }



		  thermistor_num++;
 80016fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016fc:	3301      	adds	r3, #1
 80016fe:	65fb      	str	r3, [r7, #92]	; 0x5c


		 for (int mux = 0; mux < 2; mux++) //loop through both muxes on a slave
 8001700:	2300      	movs	r3, #0
 8001702:	657b      	str	r3, [r7, #84]	; 0x54
 8001704:	e070      	b.n	80017e8 <read_all_temps+0x1f0>
			 {

			  	 uint8_t i2c_data[2] = {0b10010000, 0b00001000};	//bits 4 - 7 are address bits for the mux IC, bits 11 - 15 are the address bits for the mux channel, start with channel 0
 8001706:	f44f 6309 	mov.w	r3, #2192	; 0x890
 800170a:	873b      	strh	r3, [r7, #56]	; 0x38
				  wake_sleep();
 800170c:	f7ff fb5f 	bl	8000dce <wake_sleep>
				 for (int mux_channel = 0;  mux_channel < mux_channels; mux_channel++)
 8001710:	2300      	movs	r3, #0
 8001712:	653b      	str	r3, [r7, #80]	; 0x50
 8001714:	e05a      	b.n	80017cc <read_all_temps+0x1d4>
				 	 {

					 send_comm(i2c_data, 2, mux); //generate commands to access each mux channel
 8001716:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800171a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800171c:	2102      	movs	r1, #2
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fe6a 	bl	80013f8 <send_comm>

					 broadcast_command(ADAX(MD_27k_14k, CHG_GPIO_1)); //measure gpio 1 (mux output)
 8001724:	f240 40e1 	movw	r0, #1249	; 0x4e1
 8001728:	f7ff fb82 	bl	8000e30 <broadcast_command>


					 address_read(selected_slave.address, RDAUXA, selected_slave.auxa_reg); //read auxa_reg where adc value was stored
 800172c:	7c38      	ldrb	r0, [r7, #16]
 800172e:	f107 0310 	add.w	r3, r7, #16
 8001732:	331a      	adds	r3, #26
 8001734:	461a      	mov	r2, r3
 8001736:	210c      	movs	r1, #12
 8001738:	f7ff fc24 	bl	8000f84 <address_read>


					 thermistor_voltage = ((selected_slave.auxa_reg[1] << 8) | selected_slave.auxa_reg[0]) * 0.0001;
 800173c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001746:	4313      	orrs	r3, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe feb7 	bl	80004bc <__aeabi_i2d>
 800174e:	a352      	add	r3, pc, #328	; (adr r3, 8001898 <read_all_temps+0x2a0>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7fe ff1c 	bl	8000590 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

					  if (slave == 3)
 8001760:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001762:	2b03      	cmp	r3, #3
 8001764:	d106      	bne.n	8001774 <read_all_temps+0x17c>
					  {
						  thermistor_temps[thermistor_num] = 22;
 8001766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	4413      	add	r3, r2
 800176e:	4a4c      	ldr	r2, [pc, #304]	; (80018a0 <read_all_temps+0x2a8>)
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	e00d      	b.n	8001790 <read_all_temps+0x198>
					  }
					  else
					  {
					  thermistor_temps[thermistor_num] = calc_temp(thermistor_voltage); //convert voltage to temperature in degrees celcius
 8001774:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8001778:	f7ff febe 	bl	80014f8 <calc_temp>
 800177c:	ec51 0b10 	vmov	r0, r1, d0
 8001780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	18d4      	adds	r4, r2, r3
 8001788:	f7ff f9d2 	bl	8000b30 <__aeabi_d2f>
 800178c:	4603      	mov	r3, r0
 800178e:	6023      	str	r3, [r4, #0]
					  }


					 if(thermistor_temps[thermistor_num] > overtemp_limit) //if overtemp, trigger shutdown
 8001790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	4413      	add	r3, r2
 8001798:	ed93 7a00 	vldr	s14, [r3]
 800179c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800179e:	ee07 3a90 	vmov	s15, r3
 80017a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ae:	dd01      	ble.n	80017b4 <read_all_temps+0x1bc>
					 	 {
						  return 1; //AMS_OK fault
 80017b0:	2301      	movs	r3, #1
			  return 1; //ADD SDC
 80017b2:	e06c      	b.n	800188e <read_all_temps+0x296>
					 	 }

					  thermistor_num++;
 80017b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017b6:	3301      	adds	r3, #1
 80017b8:	65fb      	str	r3, [r7, #92]	; 0x5c

					  i2c_data[1]++;
 80017ba:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80017be:	3301      	adds	r3, #1
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				 for (int mux_channel = 0;  mux_channel < mux_channels; mux_channel++)
 80017c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017c8:	3301      	adds	r3, #1
 80017ca:	653b      	str	r3, [r7, #80]	; 0x50
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80017d0:	429a      	cmp	r2, r3
 80017d2:	dba0      	blt.n	8001716 <read_all_temps+0x11e>

				 	 }
				  send_comm(mux_off, 2, mux);
 80017d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80017da:	2102      	movs	r1, #2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fe0b 	bl	80013f8 <send_comm>
		 for (int mux = 0; mux < 2; mux++) //loop through both muxes on a slave
 80017e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017e4:	3301      	adds	r3, #1
 80017e6:	657b      	str	r3, [r7, #84]	; 0x54
 80017e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	dd8b      	ble.n	8001706 <read_all_temps+0x10e>

			 }


		  address_read(selected_slave.address, RDAUXA, selected_slave.auxa_reg);
 80017ee:	7c38      	ldrb	r0, [r7, #16]
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	331a      	adds	r3, #26
 80017f6:	461a      	mov	r2, r3
 80017f8:	210c      	movs	r1, #12
 80017fa:	f7ff fbc3 	bl	8000f84 <address_read>

		  thermistor_voltage = ((selected_slave.auxa_reg[3] << 8) | selected_slave.auxa_reg[2]) * 0.0001;
 80017fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001808:	4313      	orrs	r3, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fe56 	bl	80004bc <__aeabi_i2d>
 8001810:	a321      	add	r3, pc, #132	; (adr r3, 8001898 <read_all_temps+0x2a0>)
 8001812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001816:	f7fe febb 	bl	8000590 <__aeabi_dmul>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

		  if (slave == 3)
 8001822:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001824:	2b03      	cmp	r3, #3
 8001826:	d106      	bne.n	8001836 <read_all_temps+0x23e>
		  {
			  thermistor_temps[thermistor_num] = 22;
 8001828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	4413      	add	r3, r2
 8001830:	4a1b      	ldr	r2, [pc, #108]	; (80018a0 <read_all_temps+0x2a8>)
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	e00d      	b.n	8001852 <read_all_temps+0x25a>
		  }
		  else
		  {
		  thermistor_temps[thermistor_num] = calc_temp(thermistor_voltage); //convert voltage to temperature in degrees celcius
 8001836:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 800183a:	f7ff fe5d 	bl	80014f8 <calc_temp>
 800183e:	ec51 0b10 	vmov	r0, r1, d0
 8001842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	18d4      	adds	r4, r2, r3
 800184a:	f7ff f971 	bl	8000b30 <__aeabi_d2f>
 800184e:	4603      	mov	r3, r0
 8001850:	6023      	str	r3, [r4, #0]
		  }

		  if(thermistor_temps[thermistor_num] > overtemp_limit) //if overtemp, trigger shutdown
 8001852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	4413      	add	r3, r2
 800185a:	ed93 7a00 	vldr	s14, [r3]
 800185e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001860:	ee07 3a90 	vmov	s15, r3
 8001864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001870:	dd01      	ble.n	8001876 <read_all_temps+0x27e>
		  {
			  return 1; //ADD SDC
 8001872:	2301      	movs	r3, #1
 8001874:	e00b      	b.n	800188e <read_all_temps+0x296>
		  }

		  thermistor_num++;
 8001876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001878:	3301      	adds	r3, #1
 800187a:	65fb      	str	r3, [r7, #92]	; 0x5c
	  for (int slave = 0; slave < slave_num; slave++) //loop through and read every slave AUXA register to see temps
 800187c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800187e:	3301      	adds	r3, #1
 8001880:	65bb      	str	r3, [r7, #88]	; 0x58
 8001882:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	f6ff aed4 	blt.w	8001634 <read_all_temps+0x3c>
	  }




	  return 0;
 800188c:	2300      	movs	r3, #0




}
 800188e:	4618      	mov	r0, r3
 8001890:	3764      	adds	r7, #100	; 0x64
 8001892:	46bd      	mov	sp, r7
 8001894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001896:	bf00      	nop
 8001898:	eb1c432d 	.word	0xeb1c432d
 800189c:	3f1a36e2 	.word	0x3f1a36e2
 80018a0:	41b00000 	.word	0x41b00000

080018a4 <send_can1>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//FIGURE OUT WHICH BUS IS LOGGING AND WHICH IS COMMANDS
void send_can1(uint16_t ID, uint32_t DLC, uint8_t *Tx_Data)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08e      	sub	sp, #56	; 0x38
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	81fb      	strh	r3, [r7, #14]
FDCAN_TxHeaderTypeDef   TxHeader;

TxHeader.Identifier = ID;
 80018b2:	89fb      	ldrh	r3, [r7, #14]
 80018b4:	617b      	str	r3, [r7, #20]
TxHeader.IdType = FDCAN_STANDARD_ID;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
TxHeader.DataLength = DLC;
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	623b      	str	r3, [r7, #32]
TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62bb      	str	r3, [r7, #40]	; 0x28
TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80018ca:	2300      	movs	r3, #0
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80018ce:	2300      	movs	r3, #0
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
TxHeader.MessageMarker = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34


HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, Tx_Data);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	4619      	mov	r1, r3
 80018de:	4803      	ldr	r0, [pc, #12]	; (80018ec <send_can1+0x48>)
 80018e0:	f004 f995 	bl	8005c0e <HAL_FDCAN_AddMessageToTxFifoQ>
}
 80018e4:	bf00      	nop
 80018e6:	3738      	adds	r7, #56	; 0x38
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000424 	.word	0x20000424

080018f0 <current_sense_voltage_to_current>:



//take voltage from current sensor and calculate current
int64_t current_sense_voltage_to_current (double current_sense_voltage)
{
 80018f0:	b5b0      	push	{r4, r5, r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	ed87 0b00 	vstr	d0, [r7]
return (current_sense_voltage - CURRENT_SENSE_OFFSET) / CURRENT_SENSE_RATIO * -1;  //multiplied by -1 because current sensor is backwards
 80018fa:	a312      	add	r3, pc, #72	; (adr r3, 8001944 <current_sense_voltage_to_current+0x54>)
 80018fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001900:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001904:	f7fe fc8c 	bl	8000220 <__aeabi_dsub>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <current_sense_voltage_to_current+0x50>)
 8001916:	f7fe ff65 	bl	80007e4 <__aeabi_ddiv>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4614      	mov	r4, r2
 8001920:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001924:	4620      	mov	r0, r4
 8001926:	4629      	mov	r1, r5
 8001928:	f7ff f952 	bl	8000bd0 <__aeabi_d2lz>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
}
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bdb0      	pop	{r4, r5, r7, pc}
 800193a:	bf00      	nop
 800193c:	f3af 8000 	nop.w
 8001940:	40290000 	.word	0x40290000
 8001944:	00000000 	.word	0x00000000
 8001948:	40a38800 	.word	0x40a38800

0800194c <reset_SOC>:


//once battery is charged, reset SOC value
//use lookup table / formula to measure pack voltage and estimate SOC
void reset_SOC()
{
 800194c:	b5b0      	push	{r4, r5, r7, lr}
 800194e:	af00      	add	r7, sp, #0
last_SOC_update_ms = HAL_GetTick();
 8001950:	f001 fb64 	bl	800301c <HAL_GetTick>
 8001954:	4603      	mov	r3, r0
 8001956:	2200      	movs	r2, #0
 8001958:	461c      	mov	r4, r3
 800195a:	4615      	mov	r5, r2
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <reset_SOC+0x28>)
 800195e:	e9c3 4500 	strd	r4, r5, [r3]
SOC = 100;
 8001962:	4905      	ldr	r1, [pc, #20]	; (8001978 <reset_SOC+0x2c>)
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <reset_SOC+0x30>)
 800196a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800196e:	bf00      	nop
 8001970:	bdb0      	pop	{r4, r5, r7, pc}
 8001972:	bf00      	nop
 8001974:	20000618 	.word	0x20000618
 8001978:	20000610 	.word	0x20000610
 800197c:	40590000 	.word	0x40590000

08001980 <update_SOC>:


//take current and time since last caulcations to update SOC
//NEED TO UPDATE TO HAL
void update_SOC ()
{
 8001980:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0

//double current_sense_voltage = vcu_adc_read_millivolts(&hadc1, ADC_CHANNEL_4);
current_sense_voltage = (adc_val[0] * 2900 / 4096) + 54;
 8001988:	4b39      	ldr	r3, [pc, #228]	; (8001a70 <update_SOC+0xf0>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	f640 3354 	movw	r3, #2900	; 0xb54
 8001992:	fb02 f303 	mul.w	r3, r2, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	da01      	bge.n	800199e <update_SOC+0x1e>
 800199a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800199e:	131b      	asrs	r3, r3, #12
 80019a0:	3336      	adds	r3, #54	; 0x36
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fd8a 	bl	80004bc <__aeabi_i2d>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4931      	ldr	r1, [pc, #196]	; (8001a74 <update_SOC+0xf4>)
 80019ae:	e9c1 2300 	strd	r2, r3, [r1]
current = current_sense_voltage_to_current(current_sense_voltage);
 80019b2:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <update_SOC+0xf4>)
 80019b4:	ed93 7b00 	vldr	d7, [r3]
 80019b8:	eeb0 0a47 	vmov.f32	s0, s14
 80019bc:	eef0 0a67 	vmov.f32	s1, s15
 80019c0:	f7ff ff96 	bl	80018f0 <current_sense_voltage_to_current>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	f7fe fdb2 	bl	8000534 <__aeabi_l2d>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4928      	ldr	r1, [pc, #160]	; (8001a78 <update_SOC+0xf8>)
 80019d6:	e9c1 2300 	strd	r2, r3, [r1]

uint64_t current_ms = HAL_GetTick();
 80019da:	f001 fb1f 	bl	800301c <HAL_GetTick>
 80019de:	4603      	mov	r3, r0
 80019e0:	2200      	movs	r2, #0
 80019e2:	4698      	mov	r8, r3
 80019e4:	4691      	mov	r9, r2
 80019e6:	e9c7 8900 	strd	r8, r9, [r7]

time_since_last_update = current_ms - last_SOC_update_ms;
 80019ea:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <update_SOC+0xfc>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019f4:	1a84      	subs	r4, r0, r2
 80019f6:	eb61 0503 	sbc.w	r5, r1, r3
 80019fa:	4622      	mov	r2, r4
 80019fc:	462b      	mov	r3, r5
 80019fe:	4920      	ldr	r1, [pc, #128]	; (8001a80 <update_SOC+0x100>)
 8001a00:	e9c1 2300 	strd	r2, r3, [r1]

last_SOC_update_ms = current_ms;
 8001a04:	491d      	ldr	r1, [pc, #116]	; (8001a7c <update_SOC+0xfc>)
 8001a06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a0a:	e9c1 2300 	strd	r2, r3, [r1]

SOC -= current * time_since_last_update / SOC_CONSTANT;
 8001a0e:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <update_SOC+0x104>)
 8001a10:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a14:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <update_SOC+0x100>)
 8001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f7fe fd89 	bl	8000534 <__aeabi_l2d>
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <update_SOC+0xf8>)
 8001a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a28:	f7fe fdb2 	bl	8000590 <__aeabi_dmul>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <update_SOC+0x108>)
 8001a3a:	f7fe fed3 	bl	80007e4 <__aeabi_ddiv>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <update_SOC+0x10c>)
 8001a4c:	f7fe fda0 	bl	8000590 <__aeabi_dmul>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4620      	mov	r0, r4
 8001a56:	4629      	mov	r1, r5
 8001a58:	f7fe fbe2 	bl	8000220 <__aeabi_dsub>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4908      	ldr	r1, [pc, #32]	; (8001a84 <update_SOC+0x104>)
 8001a62:	e9c1 2300 	strd	r2, r3, [r1]

}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a70:	20000620 	.word	0x20000620
 8001a74:	20000628 	.word	0x20000628
 8001a78:	20000630 	.word	0x20000630
 8001a7c:	20000618 	.word	0x20000618
 8001a80:	20000638 	.word	0x20000638
 8001a84:	20000610 	.word	0x20000610
 8001a88:	40240000 	.word	0x40240000
 8001a8c:	40590000 	.word	0x40590000

08001a90 <update_moving_average>:

void update_moving_average(float *current_avg, float new_sample)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	ed87 0a00 	vstr	s0, [r7]

	*current_avg = ((MOVING_AVERAGE_SAMPLES - 1) * *current_avg + new_sample) / MOVING_AVERAGE_SAMPLES;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	edd3 7a00 	vldr	s15, [r3]
 8001aa2:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001aa6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001aaa:	edd7 7a00 	vldr	s15, [r7]
 8001aae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ab2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001ab6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	edc3 7a00 	vstr	s15, [r3]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <set_moving_average>:
	}
	return 0;
}

void set_moving_average(float *cell_voltage_ma, float *cell_voltage)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
	for (int cell = 0; cell < NUM_OF_CELLS; cell++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	e00c      	b.n	8001af6 <set_moving_average+0x2a>
	{
		cell_voltage_ma[cell] = cell_voltage[cell];
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	441a      	add	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	440b      	add	r3, r1
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	601a      	str	r2, [r3, #0]
	for (int cell = 0; cell < NUM_OF_CELLS; cell++)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	3301      	adds	r3, #1
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2b72      	cmp	r3, #114	; 0x72
 8001afa:	ddef      	ble.n	8001adc <set_moving_average+0x10>
	}
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <calc_voltage_from_adc>:
	  TIM2->CCR4 = (100 - percent);
}


float calc_voltage_from_adc(int adc_val)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b084      	sub	sp, #16
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
	double val_mv = adc_val * 2900 / 4096;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f640 3254 	movw	r2, #2900	; 0xb54
 8001b18:	fb02 f303 	mul.w	r3, r2, r3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	da01      	bge.n	8001b24 <calc_voltage_from_adc+0x1a>
 8001b20:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001b24:	131b      	asrs	r3, r3, #12
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fcc8 	bl	80004bc <__aeabi_i2d>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return val_mv;
 8001b34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b38:	f7fe fffa 	bl	8000b30 <__aeabi_d2f>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	ee07 3a90 	vmov	s15, r3
}
 8001b42:	eeb0 0a67 	vmov.f32	s0, s15
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	0000      	movs	r0, r0
	...

08001b50 <check_voltages>:
	update_config(config);
}


int check_voltages(float *cell_voltage, int num_cells)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
	for (int cell = 0; cell < num_cells; cell++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	e021      	b.n	8001ba4 <check_voltages+0x54>
	{
		if (cell_voltage[cell] > CELL_OVERVOLTAGE || cell_voltage[cell] < CELL_UNDERVOLTAGE)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	4413      	add	r3, r2
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fcb8 	bl	80004e0 <__aeabi_f2d>
 8001b70:	a311      	add	r3, pc, #68	; (adr r3, 8001bb8 <check_voltages+0x68>)
 8001b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b76:	f7fe ff9b 	bl	8000ab0 <__aeabi_dcmpgt>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10c      	bne.n	8001b9a <check_voltages+0x4a>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	4413      	add	r3, r2
 8001b88:	edd3 7a00 	vldr	s15, [r3]
 8001b8c:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8001b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b98:	d501      	bpl.n	8001b9e <check_voltages+0x4e>
		{
			return 1;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e007      	b.n	8001bae <check_voltages+0x5e>
	for (int cell = 0; cell < num_cells; cell++)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	dbd9      	blt.n	8001b60 <check_voltages+0x10>
		}

	}
	return 0;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	cccccccd 	.word	0xcccccccd
 8001bbc:	4010cccc 	.word	0x4010cccc

08001bc0 <HAL_FDCAN_RxFifo0Callback>:


// FDCAN1 Callback
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d014      	beq.n	8001bfe <HAL_FDCAN_RxFifo0Callback+0x3e>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader1, RxData1) != HAL_OK)
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <HAL_FDCAN_RxFifo0Callback+0x48>)
 8001bd6:	4a0d      	ldr	r2, [pc, #52]	; (8001c0c <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8001bd8:	2140      	movs	r1, #64	; 0x40
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f004 f85c 	bl	8005c98 <HAL_FDCAN_GetRxMessage>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 8001be6:	f000 fdf5 	bl	80027d4 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001bea:	2200      	movs	r2, #0
 8001bec:	2101      	movs	r1, #1
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f004 f92c 	bl	8005e4c <HAL_FDCAN_ActivateNotification>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 8001bfa:	f000 fdeb 	bl	80027d4 <Error_Handler>
    }
  }
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000e68 	.word	0x20000e68
 8001c0c:	20000e40 	.word	0x20000e40

08001c10 <check_empty_voltages>:

int check_empty_voltages()
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
	  for (int cell = 0; cell < NUM_OF_CELLS; cell++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	e00f      	b.n	8001c3c <check_empty_voltages+0x2c>
	  {
		  if (cell_voltage[cell] == 0)
 8001c1c:	4a0c      	ldr	r2, [pc, #48]	; (8001c50 <check_empty_voltages+0x40>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	edd3 7a00 	vldr	s15, [r3]
 8001c28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c30:	d101      	bne.n	8001c36 <check_empty_voltages+0x26>
		  {
			  return 1;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e006      	b.n	8001c44 <check_empty_voltages+0x34>
	  for (int cell = 0; cell < NUM_OF_CELLS; cell++)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b72      	cmp	r3, #114	; 0x72
 8001c40:	ddec      	ble.n	8001c1c <check_empty_voltages+0xc>
		  }
	  }
		  return 0;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	20000640 	.word	0x20000640
 8001c54:	00000000 	.word	0x00000000

08001c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	b090      	sub	sp, #64	; 0x40
 8001c5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c5e:	f001 f978 	bl	8002f52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c62:	f000 f999 	bl	8001f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c66:	f000 fd4d 	bl	8002704 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c6a:	f000 fd19 	bl	80026a0 <MX_DMA_Init>
  MX_RTC_Init();
 8001c6e:	f000 fb5d 	bl	800232c <MX_RTC_Init>
  MX_FDCAN1_Init();
 8001c72:	f000 facd 	bl	8002210 <MX_FDCAN1_Init>
  MX_SPI3_Init();
 8001c76:	f000 fbbb 	bl	80023f0 <MX_SPI3_Init>
  MX_ADC1_Init();
 8001c7a:	f000 f9db 	bl	8002034 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001c7e:	f000 fa51 	bl	8002124 <MX_ADC2_Init>
  MX_TIM2_Init();
 8001c82:	f000 fbf3 	bl	800246c <MX_TIM2_Init>
  MX_TIM15_Init();
 8001c86:	f000 fc67 	bl	8002558 <MX_TIM15_Init>
  MX_FDCAN2_Init();
 8001c8a:	f000 fb07 	bl	800229c <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */


  HAL_Delay(100); // 100ms should allow all relevant power circuitry to stabilize
 8001c8e:	2064      	movs	r0, #100	; 0x64
 8001c90:	f001 f9d0 	bl	8003034 <HAL_Delay>

  //start ADCs
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001c94:	217f      	movs	r1, #127	; 0x7f
 8001c96:	48b2      	ldr	r0, [pc, #712]	; (8001f60 <main+0x308>)
 8001c98:	f003 f88e 	bl	8004db8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, 1);
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	49b1      	ldr	r1, [pc, #708]	; (8001f64 <main+0x30c>)
 8001ca0:	48af      	ldr	r0, [pc, #700]	; (8001f60 <main+0x308>)
 8001ca2:	f001 ff45 	bl	8003b30 <HAL_ADC_Start_DMA>
  HAL_ADC_Start(&hadc1);
 8001ca6:	48ae      	ldr	r0, [pc, #696]	; (8001f60 <main+0x308>)
 8001ca8:	f001 fe5e 	bl	8003968 <HAL_ADC_Start>

  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001cac:	217f      	movs	r1, #127	; 0x7f
 8001cae:	48ae      	ldr	r0, [pc, #696]	; (8001f68 <main+0x310>)
 8001cb0:	f003 f882 	bl	8004db8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_val2, 2);
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	49ad      	ldr	r1, [pc, #692]	; (8001f6c <main+0x314>)
 8001cb8:	48ab      	ldr	r0, [pc, #684]	; (8001f68 <main+0x310>)
 8001cba:	f001 ff39 	bl	8003b30 <HAL_ADC_Start_DMA>
  HAL_ADC_Start(&hadc2);
 8001cbe:	48aa      	ldr	r0, [pc, #680]	; (8001f68 <main+0x310>)
 8001cc0:	f001 fe52 	bl	8003968 <HAL_ADC_Start>
  //HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_2);   // main channel
  //HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_1);   // indirect channel

  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);

  HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	2301      	movs	r3, #1
 8001cca:	2202      	movs	r2, #2
 8001ccc:	2102      	movs	r1, #2
 8001cce:	48a8      	ldr	r0, [pc, #672]	; (8001f70 <main+0x318>)
 8001cd0:	f003 ff44 	bl	8005b5c <HAL_FDCAN_ConfigGlobalFilter>

  FDCAN_FilterTypeDef sFilterConfig1;

  sFilterConfig1.IdType = FDCAN_STANDARD_ID;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	613b      	str	r3, [r7, #16]
  sFilterConfig1.FilterIndex = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
  sFilterConfig1.FilterType = FDCAN_FILTER_RANGE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61bb      	str	r3, [r7, #24]
  sFilterConfig1.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	61fb      	str	r3, [r7, #28]
  sFilterConfig1.FilterID1 = 0x500;
 8001ce4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001ce8:	623b      	str	r3, [r7, #32]
  sFilterConfig1.FilterID2 = 0x500;
 8001cea:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24



  HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig1);
 8001cf0:	f107 0310 	add.w	r3, r7, #16
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	489e      	ldr	r0, [pc, #632]	; (8001f70 <main+0x318>)
 8001cf8:	f003 fed6 	bl	8005aa8 <HAL_FDCAN_ConfigFilter>


  HAL_FDCAN_Start(&hfdcan1);
 8001cfc:	489c      	ldr	r0, [pc, #624]	; (8001f70 <main+0x318>)
 8001cfe:	f003 ff5e 	bl	8005bbe <HAL_FDCAN_Start>
  //HAL_FDCAN_Start(&hfdcan2);

  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2101      	movs	r1, #1
 8001d06:	489a      	ldr	r0, [pc, #616]	; (8001f70 <main+0x318>)
 8001d08:	f004 f8a0 	bl	8005e4c <HAL_FDCAN_ActivateNotification>


  //reset_SOC();

  init_LTC6811();
 8001d0c:	f7ff f804 	bl	8000d18 <init_LTC6811>

  wake_sleep(); // wake LTC6811 from sleep
 8001d10:	f7ff f85d 	bl	8000dce <wake_sleep>

  // Configuration for all LTC6811s
  struct ltc6811_config ltc6811_config;
  ltc6811_config.gpio_pulldowns = GPIO1_NO_PULLDOWN | GPIO2_NO_PULLDOWN | GPIO3_NO_PULLDOWN | GPIO4_NO_PULLDOWN | GPIO5_NO_PULLDOWN;
 8001d14:	231f      	movs	r3, #31
 8001d16:	713b      	strb	r3, [r7, #4]
  ltc6811_config.refon = REFON_STAY_POWERED;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	717b      	strb	r3, [r7, #5]
  ltc6811_config.adcopt = ADCOPT_MODE_0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	71bb      	strb	r3, [r7, #6]
  ltc6811_config.vuv = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	813b      	strh	r3, [r7, #8]
  ltc6811_config.vov = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	817b      	strh	r3, [r7, #10]
  ltc6811_config.dcc = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	81fb      	strh	r3, [r7, #14]
  ltc6811_config.dcto = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	733b      	strb	r3, [r7, #12]
  update_config(&ltc6811_config);
 8001d30:	1d3b      	adds	r3, r7, #4
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe fff6 	bl	8000d24 <update_config>


  // configure LTC6811 structs to match real life setup
  for (int i = 0; i < NUM_OF_SLAVES; i++)
 8001d38:	2300      	movs	r3, #0
 8001d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d3c:	e01f      	b.n	8001d7e <main+0x126>
  {
      ltc6811_arr[i].address = i;
 8001d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d40:	b2d8      	uxtb	r0, r3
 8001d42:	498c      	ldr	r1, [pc, #560]	; (8001f74 <main+0x31c>)
 8001d44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	440b      	add	r3, r1
 8001d50:	4602      	mov	r2, r0
 8001d52:	701a      	strb	r2, [r3, #0]
      ltc6811_arr[i].cell_count = (i % 2 == 0) ? EVEN_SLAVE_CELLS : ODD_SLAVE_CELLS;
 8001d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <main+0x10a>
 8001d5e:	200c      	movs	r0, #12
 8001d60:	e000      	b.n	8001d64 <main+0x10c>
 8001d62:	200b      	movs	r0, #11
 8001d64:	4983      	ldr	r1, [pc, #524]	; (8001f74 <main+0x31c>)
 8001d66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	440b      	add	r3, r1
 8001d72:	3301      	adds	r3, #1
 8001d74:	4602      	mov	r2, r0
 8001d76:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < NUM_OF_SLAVES; i++)
 8001d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d80:	2b09      	cmp	r3, #9
 8001d82:	dddc      	ble.n	8001d3e <main+0xe6>
  }
  while(check_empty_voltages())
 8001d84:	e00f      	b.n	8001da6 <main+0x14e>
  {


  broadcast_command(ADCV(MD_27k_14k, DCP_NOT_PERMITTED, CH_ALL));
 8001d86:	f44f 7038 	mov.w	r0, #736	; 0x2e0
 8001d8a:	f7ff f851 	bl	8000e30 <broadcast_command>


  HAL_Delay(1); // reading all cell voltages @ "27kHz" should take 1ms
 8001d8e:	2001      	movs	r0, #1
 8001d90:	f001 f950 	bl	8003034 <HAL_Delay>

  // read cell voltage registers from all slaves on the bus
  read_all_voltages(ltc6811_arr, NUM_OF_SLAVES);
 8001d94:	210a      	movs	r1, #10
 8001d96:	4877      	ldr	r0, [pc, #476]	; (8001f74 <main+0x31c>)
 8001d98:	f7ff fa4f 	bl	800123a <read_all_voltages>

  // calculate actual voltage values
  extract_all_voltages(ltc6811_arr, cell_voltage, NUM_OF_SLAVES);
 8001d9c:	220a      	movs	r2, #10
 8001d9e:	4976      	ldr	r1, [pc, #472]	; (8001f78 <main+0x320>)
 8001da0:	4874      	ldr	r0, [pc, #464]	; (8001f74 <main+0x31c>)
 8001da2:	f7ff f9cf 	bl	8001144 <extract_all_voltages>
  while(check_empty_voltages())
 8001da6:	f7ff ff33 	bl	8001c10 <check_empty_voltages>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1ea      	bne.n	8001d86 <main+0x12e>

  }


  reset_SOC();
 8001db0:	f7ff fdcc 	bl	800194c <reset_SOC>
  set_moving_average(cell_voltage_ma, cell_voltage); //set moving average to prevent errors during startup
 8001db4:	4970      	ldr	r1, [pc, #448]	; (8001f78 <main+0x320>)
 8001db6:	4871      	ldr	r0, [pc, #452]	; (8001f7c <main+0x324>)
 8001db8:	f7ff fe88 	bl	8001acc <set_moving_average>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);	//set AMS_OK
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	2104      	movs	r1, #4
 8001dc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc4:	f004 fd34 	bl	8006830 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      wake_sleep(); // wake LTC6811 from sleep
 8001dc8:	f7ff f801 	bl	8000dce <wake_sleep>
      // send command to read cell voltages
      broadcast_command(ADCV(MD_27k_14k, DCP_NOT_PERMITTED, CH_ALL));
 8001dcc:	f44f 7038 	mov.w	r0, #736	; 0x2e0
 8001dd0:	f7ff f82e 	bl	8000e30 <broadcast_command>


      HAL_Delay(1); // reading all cell voltages @ "27kHz" should take 1ms
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f001 f92d 	bl	8003034 <HAL_Delay>

      // read cell voltage registers from all slaves on the bus
      read_all_voltages(ltc6811_arr, NUM_OF_SLAVES);
 8001dda:	210a      	movs	r1, #10
 8001ddc:	4865      	ldr	r0, [pc, #404]	; (8001f74 <main+0x31c>)
 8001dde:	f7ff fa2c 	bl	800123a <read_all_voltages>

      // calculate actual voltage values
      extract_all_voltages(ltc6811_arr, cell_voltage, NUM_OF_SLAVES);
 8001de2:	220a      	movs	r2, #10
 8001de4:	4964      	ldr	r1, [pc, #400]	; (8001f78 <main+0x320>)
 8001de6:	4863      	ldr	r0, [pc, #396]	; (8001f74 <main+0x31c>)
 8001de8:	f7ff f9ac 	bl	8001144 <extract_all_voltages>

      if (check_voltages(cell_voltage, NUM_OF_CELLS))
 8001dec:	2173      	movs	r1, #115	; 0x73
 8001dee:	4862      	ldr	r0, [pc, #392]	; (8001f78 <main+0x320>)
 8001df0:	f7ff feae 	bl	8001b50 <check_voltages>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <main+0x1a8>
      {
    	  AMS_OK = 1;
 8001dfa:	4b61      	ldr	r3, [pc, #388]	; (8001f80 <main+0x328>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
      }



      float sum_voltage = 0;
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	633b      	str	r3, [r7, #48]	; 0x30
      for(int i = 0; i < NUM_OF_CELLS; i++)
 8001e06:	2300      	movs	r3, #0
 8001e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e0a:	e01d      	b.n	8001e48 <main+0x1f0>
      {
      update_moving_average(&cell_voltage_ma[i], cell_voltage[i]);
 8001e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4a5a      	ldr	r2, [pc, #360]	; (8001f7c <main+0x324>)
 8001e12:	441a      	add	r2, r3
 8001e14:	4958      	ldr	r1, [pc, #352]	; (8001f78 <main+0x320>)
 8001e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	edd3 7a00 	vldr	s15, [r3]
 8001e20:	eeb0 0a67 	vmov.f32	s0, s15
 8001e24:	4610      	mov	r0, r2
 8001e26:	f7ff fe33 	bl	8001a90 <update_moving_average>
      sum_voltage += cell_voltage_ma[i];
 8001e2a:	4a54      	ldr	r2, [pc, #336]	; (8001f7c <main+0x324>)
 8001e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	edd3 7a00 	vldr	s15, [r3]
 8001e36:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e3e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      for(int i = 0; i < NUM_OF_CELLS; i++)
 8001e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e44:	3301      	adds	r3, #1
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4a:	2b72      	cmp	r3, #114	; 0x72
 8001e4c:	ddde      	ble.n	8001e0c <main+0x1b4>
//    	  //fuse_pop = 1;
//      }
//      }


	  if(read_all_temps(ltc6811_arr, thermistor_temps, NUM_OF_MUX_CHANNELS, NUM_OF_SLAVES)) //0 = no fault, 1 = fault
 8001e4e:	230a      	movs	r3, #10
 8001e50:	2208      	movs	r2, #8
 8001e52:	494c      	ldr	r1, [pc, #304]	; (8001f84 <main+0x32c>)
 8001e54:	4847      	ldr	r0, [pc, #284]	; (8001f74 <main+0x31c>)
 8001e56:	f7ff fbcf 	bl	80015f8 <read_all_temps>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <main+0x20e>
	  {
		  AMS_OK = 1; //AMS FAULT
 8001e60:	4b47      	ldr	r3, [pc, #284]	; (8001f80 <main+0x328>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
	  }

	  if(AMS_OK)
 8001e66:	4b46      	ldr	r3, [pc, #280]	; (8001f80 <main+0x328>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d005      	beq.n	8001e7a <main+0x222>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2104      	movs	r1, #4
 8001e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e76:	f004 fcdb 	bl	8006830 <HAL_GPIO_WritePin>
	  }
//	  else
//	  {
//		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
//	  }
	  max_temp = thermistor_temps[0];
 8001e7a:	4b42      	ldr	r3, [pc, #264]	; (8001f84 <main+0x32c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a42      	ldr	r2, [pc, #264]	; (8001f88 <main+0x330>)
 8001e80:	6013      	str	r3, [r2, #0]
	  for(int thermistor = 0; thermistor < NUM_OF_THERMISTORS; thermistor++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e86:	e017      	b.n	8001eb8 <main+0x260>
	  {
		  if (thermistor_temps[thermistor] > max_temp)
 8001e88:	4a3e      	ldr	r2, [pc, #248]	; (8001f84 <main+0x32c>)
 8001e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	ed93 7a00 	vldr	s14, [r3]
 8001e94:	4b3c      	ldr	r3, [pc, #240]	; (8001f88 <main+0x330>)
 8001e96:	edd3 7a00 	vldr	s15, [r3]
 8001e9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea2:	dd06      	ble.n	8001eb2 <main+0x25a>
		  {
			  max_temp = thermistor_temps[thermistor];
 8001ea4:	4a37      	ldr	r2, [pc, #220]	; (8001f84 <main+0x32c>)
 8001ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a36      	ldr	r2, [pc, #216]	; (8001f88 <main+0x330>)
 8001eb0:	6013      	str	r3, [r2, #0]
	  for(int thermistor = 0; thermistor < NUM_OF_THERMISTORS; thermistor++)
 8001eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eba:	2bb3      	cmp	r3, #179	; 0xb3
 8001ebc:	dde4      	ble.n	8001e88 <main+0x230>



	  //adc_val2[0] is PA4 is ACCU, [1] is PA5 is TS

	  if (calc_voltage_from_adc(adc_val2[1]) >= (calc_voltage_from_adc(adc_val2[0]) * 0.95) && calc_voltage_from_adc(adc_val2[1]) > 2000)
 8001ebe:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <main+0x314>)
 8001ec0:	885b      	ldrh	r3, [r3, #2]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fe21 	bl	8001b0a <calc_voltage_from_adc>
 8001ec8:	ee10 3a10 	vmov	r3, s0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb07 	bl	80004e0 <__aeabi_f2d>
 8001ed2:	4604      	mov	r4, r0
 8001ed4:	460d      	mov	r5, r1
 8001ed6:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <main+0x314>)
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fe15 	bl	8001b0a <calc_voltage_from_adc>
 8001ee0:	ee10 3a10 	vmov	r3, s0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe fafb 	bl	80004e0 <__aeabi_f2d>
 8001eea:	a31b      	add	r3, pc, #108	; (adr r3, 8001f58 <main+0x300>)
 8001eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef0:	f7fe fb4e 	bl	8000590 <__aeabi_dmul>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4620      	mov	r0, r4
 8001efa:	4629      	mov	r1, r5
 8001efc:	f7fe fdce 	bl	8000a9c <__aeabi_dcmpge>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d011      	beq.n	8001f2a <main+0x2d2>
 8001f06:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <main+0x314>)
 8001f08:	885b      	ldrh	r3, [r3, #2]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fdfd 	bl	8001b0a <calc_voltage_from_adc>
 8001f10:	eef0 7a40 	vmov.f32	s15, s0
 8001f14:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001f8c <main+0x334>
 8001f18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f20:	dd03      	ble.n	8001f2a <main+0x2d2>
	  {
		  TS_active[0] = 0xFF; //TS is active
 8001f22:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <main+0x338>)
 8001f24:	22ff      	movs	r2, #255	; 0xff
 8001f26:	701a      	strb	r2, [r3, #0]
 8001f28:	e002      	b.n	8001f30 <main+0x2d8>
	  }
	  else
	  {
		  TS_active[0] = 0x00; //TS is not active
 8001f2a:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <main+0x338>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
	  }


	  if (TS_active[0] != prev_TS_active)
 8001f30:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <main+0x338>)
 8001f32:	781a      	ldrb	r2, [r3, #0]
 8001f34:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <main+0x33c>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d009      	beq.n	8001f50 <main+0x2f8>
	  {
		  send_can1(0x90, FDCAN_DLC_BYTES_1, TS_active); //TS is active signal for the TCU RTD
 8001f3c:	4a14      	ldr	r2, [pc, #80]	; (8001f90 <main+0x338>)
 8001f3e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001f42:	2090      	movs	r0, #144	; 0x90
 8001f44:	f7ff fcae 	bl	80018a4 <send_can1>
		  prev_TS_active = TS_active[0];
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <main+0x338>)
 8001f4a:	781a      	ldrb	r2, [r3, #0]
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <main+0x33c>)
 8001f4e:	701a      	strb	r2, [r3, #0]

//	  uint8_t Tx_Data2[12] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};
//	  send_can2(10, FDCAN_DLC_BYTES_12, Tx_Data2);


	  update_SOC();
 8001f50:	f7ff fd16 	bl	8001980 <update_SOC>
  {
 8001f54:	e738      	b.n	8001dc8 <main+0x170>
 8001f56:	bf00      	nop
 8001f58:	66666666 	.word	0x66666666
 8001f5c:	3fee6666 	.word	0x3fee6666
 8001f60:	2000028c 	.word	0x2000028c
 8001f64:	20000620 	.word	0x20000620
 8001f68:	200002f8 	.word	0x200002f8
 8001f6c:	20000624 	.word	0x20000624
 8001f70:	20000424 	.word	0x20000424
 8001f74:	200009d8 	.word	0x200009d8
 8001f78:	20000640 	.word	0x20000640
 8001f7c:	2000080c 	.word	0x2000080c
 8001f80:	20000e38 	.word	0x20000e38
 8001f84:	20000b68 	.word	0x20000b68
 8001f88:	20000e3c 	.word	0x20000e3c
 8001f8c:	44fa0000 	.word	0x44fa0000
 8001f90:	20000e70 	.word	0x20000e70
 8001f94:	20000e71 	.word	0x20000e71

08001f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b094      	sub	sp, #80	; 0x50
 8001f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f9e:	f107 0318 	add.w	r3, r7, #24
 8001fa2:	2238      	movs	r2, #56	; 0x38
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f008 fb18 	bl	800a5dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
 8001fb8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fba:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001fbe:	f004 fc4f 	bl	8006860 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001fc2:	230a      	movs	r3, #10
 8001fc4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fcc:	2340      	movs	r3, #64	; 0x40
 8001fce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001fe0:	230a      	movs	r3, #10
 8001fe2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fec:	2302      	movs	r3, #2
 8001fee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ff0:	f107 0318 	add.w	r3, r7, #24
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f004 fce7 	bl	80069c8 <HAL_RCC_OscConfig>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8002000:	f000 fbe8 	bl	80027d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002004:	230f      	movs	r3, #15
 8002006:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002008:	2303      	movs	r3, #3
 800200a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002010:	2300      	movs	r3, #0
 8002012:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002018:	1d3b      	adds	r3, r7, #4
 800201a:	2102      	movs	r1, #2
 800201c:	4618      	mov	r0, r3
 800201e:	f004 ffeb 	bl	8006ff8 <HAL_RCC_ClockConfig>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002028:	f000 fbd4 	bl	80027d4 <Error_Handler>
  }
}
 800202c:	bf00      	nop
 800202e:	3750      	adds	r7, #80	; 0x50
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08c      	sub	sp, #48	; 0x30
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800203a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	605a      	str	r2, [r3, #4]
 8002044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	2220      	movs	r2, #32
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f008 fac5 	bl	800a5dc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002052:	4b32      	ldr	r3, [pc, #200]	; (800211c <MX_ADC1_Init+0xe8>)
 8002054:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002058:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800205a:	4b30      	ldr	r3, [pc, #192]	; (800211c <MX_ADC1_Init+0xe8>)
 800205c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002060:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002062:	4b2e      	ldr	r3, [pc, #184]	; (800211c <MX_ADC1_Init+0xe8>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002068:	4b2c      	ldr	r3, [pc, #176]	; (800211c <MX_ADC1_Init+0xe8>)
 800206a:	2200      	movs	r2, #0
 800206c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800206e:	4b2b      	ldr	r3, [pc, #172]	; (800211c <MX_ADC1_Init+0xe8>)
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002074:	4b29      	ldr	r3, [pc, #164]	; (800211c <MX_ADC1_Init+0xe8>)
 8002076:	2200      	movs	r2, #0
 8002078:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800207a:	4b28      	ldr	r3, [pc, #160]	; (800211c <MX_ADC1_Init+0xe8>)
 800207c:	2204      	movs	r2, #4
 800207e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002080:	4b26      	ldr	r3, [pc, #152]	; (800211c <MX_ADC1_Init+0xe8>)
 8002082:	2200      	movs	r2, #0
 8002084:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002086:	4b25      	ldr	r3, [pc, #148]	; (800211c <MX_ADC1_Init+0xe8>)
 8002088:	2201      	movs	r2, #1
 800208a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800208c:	4b23      	ldr	r3, [pc, #140]	; (800211c <MX_ADC1_Init+0xe8>)
 800208e:	2201      	movs	r2, #1
 8002090:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002092:	4b22      	ldr	r3, [pc, #136]	; (800211c <MX_ADC1_Init+0xe8>)
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800209a:	4b20      	ldr	r3, [pc, #128]	; (800211c <MX_ADC1_Init+0xe8>)
 800209c:	2200      	movs	r2, #0
 800209e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020a0:	4b1e      	ldr	r3, [pc, #120]	; (800211c <MX_ADC1_Init+0xe8>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80020a6:	4b1d      	ldr	r3, [pc, #116]	; (800211c <MX_ADC1_Init+0xe8>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80020ae:	4b1b      	ldr	r3, [pc, #108]	; (800211c <MX_ADC1_Init+0xe8>)
 80020b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80020b6:	4b19      	ldr	r3, [pc, #100]	; (800211c <MX_ADC1_Init+0xe8>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020be:	4817      	ldr	r0, [pc, #92]	; (800211c <MX_ADC1_Init+0xe8>)
 80020c0:	f001 fa90 	bl	80035e4 <HAL_ADC_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80020ca:	f000 fb83 	bl	80027d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80020ce:	2300      	movs	r3, #0
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80020d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d6:	4619      	mov	r1, r3
 80020d8:	4810      	ldr	r0, [pc, #64]	; (800211c <MX_ADC1_Init+0xe8>)
 80020da:	f002 ff01 	bl	8004ee0 <HAL_ADCEx_MultiModeConfigChannel>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80020e4:	f000 fb76 	bl	80027d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80020e8:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <MX_ADC1_Init+0xec>)
 80020ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020ec:	2306      	movs	r3, #6
 80020ee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80020f0:	2307      	movs	r3, #7
 80020f2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80020f4:	237f      	movs	r3, #127	; 0x7f
 80020f6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80020f8:	2304      	movs	r3, #4
 80020fa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	4619      	mov	r1, r3
 8002104:	4805      	ldr	r0, [pc, #20]	; (800211c <MX_ADC1_Init+0xe8>)
 8002106:	f002 f86f 	bl	80041e8 <HAL_ADC_ConfigChannel>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8002110:	f000 fb60 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002114:	bf00      	nop
 8002116:	3730      	adds	r7, #48	; 0x30
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	2000028c 	.word	0x2000028c
 8002120:	10c00010 	.word	0x10c00010

08002124 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800212a:	463b      	mov	r3, r7
 800212c:	2220      	movs	r2, #32
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f008 fa53 	bl	800a5dc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002136:	4b32      	ldr	r3, [pc, #200]	; (8002200 <MX_ADC2_Init+0xdc>)
 8002138:	4a32      	ldr	r2, [pc, #200]	; (8002204 <MX_ADC2_Init+0xe0>)
 800213a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800213c:	4b30      	ldr	r3, [pc, #192]	; (8002200 <MX_ADC2_Init+0xdc>)
 800213e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002142:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002144:	4b2e      	ldr	r3, [pc, #184]	; (8002200 <MX_ADC2_Init+0xdc>)
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800214a:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <MX_ADC2_Init+0xdc>)
 800214c:	2200      	movs	r2, #0
 800214e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8002150:	4b2b      	ldr	r3, [pc, #172]	; (8002200 <MX_ADC2_Init+0xdc>)
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002156:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <MX_ADC2_Init+0xdc>)
 8002158:	2201      	movs	r2, #1
 800215a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800215c:	4b28      	ldr	r3, [pc, #160]	; (8002200 <MX_ADC2_Init+0xdc>)
 800215e:	2208      	movs	r2, #8
 8002160:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002162:	4b27      	ldr	r3, [pc, #156]	; (8002200 <MX_ADC2_Init+0xdc>)
 8002164:	2200      	movs	r2, #0
 8002166:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002168:	4b25      	ldr	r3, [pc, #148]	; (8002200 <MX_ADC2_Init+0xdc>)
 800216a:	2201      	movs	r2, #1
 800216c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 800216e:	4b24      	ldr	r3, [pc, #144]	; (8002200 <MX_ADC2_Init+0xdc>)
 8002170:	2202      	movs	r2, #2
 8002172:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002174:	4b22      	ldr	r3, [pc, #136]	; (8002200 <MX_ADC2_Init+0xdc>)
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800217c:	4b20      	ldr	r3, [pc, #128]	; (8002200 <MX_ADC2_Init+0xdc>)
 800217e:	2200      	movs	r2, #0
 8002180:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002182:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <MX_ADC2_Init+0xdc>)
 8002184:	2200      	movs	r2, #0
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002188:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <MX_ADC2_Init+0xdc>)
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002190:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <MX_ADC2_Init+0xdc>)
 8002192:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002196:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <MX_ADC2_Init+0xdc>)
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80021a0:	4817      	ldr	r0, [pc, #92]	; (8002200 <MX_ADC2_Init+0xdc>)
 80021a2:	f001 fa1f 	bl	80035e4 <HAL_ADC_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 80021ac:	f000 fb12 	bl	80027d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80021b0:	4b15      	ldr	r3, [pc, #84]	; (8002208 <MX_ADC2_Init+0xe4>)
 80021b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021b4:	2306      	movs	r3, #6
 80021b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80021b8:	2307      	movs	r3, #7
 80021ba:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80021bc:	237f      	movs	r3, #127	; 0x7f
 80021be:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80021c0:	2304      	movs	r3, #4
 80021c2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80021c8:	463b      	mov	r3, r7
 80021ca:	4619      	mov	r1, r3
 80021cc:	480c      	ldr	r0, [pc, #48]	; (8002200 <MX_ADC2_Init+0xdc>)
 80021ce:	f002 f80b 	bl	80041e8 <HAL_ADC_ConfigChannel>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 80021d8:	f000 fafc 	bl	80027d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <MX_ADC2_Init+0xe8>)
 80021de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80021e0:	230c      	movs	r3, #12
 80021e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80021e4:	463b      	mov	r3, r7
 80021e6:	4619      	mov	r1, r3
 80021e8:	4805      	ldr	r0, [pc, #20]	; (8002200 <MX_ADC2_Init+0xdc>)
 80021ea:	f001 fffd 	bl	80041e8 <HAL_ADC_ConfigChannel>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 80021f4:	f000 faee 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80021f8:	bf00      	nop
 80021fa:	3720      	adds	r7, #32
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	200002f8 	.word	0x200002f8
 8002204:	50000100 	.word	0x50000100
 8002208:	47520000 	.word	0x47520000
 800220c:	36902000 	.word	0x36902000

08002210 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002214:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <MX_FDCAN1_Init+0x84>)
 8002216:	4a20      	ldr	r2, [pc, #128]	; (8002298 <MX_FDCAN1_Init+0x88>)
 8002218:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <MX_FDCAN1_Init+0x84>)
 800221c:	2200      	movs	r2, #0
 800221e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002220:	4b1c      	ldr	r3, [pc, #112]	; (8002294 <MX_FDCAN1_Init+0x84>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002226:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <MX_FDCAN1_Init+0x84>)
 8002228:	2200      	movs	r2, #0
 800222a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800222c:	4b19      	ldr	r3, [pc, #100]	; (8002294 <MX_FDCAN1_Init+0x84>)
 800222e:	2201      	movs	r2, #1
 8002230:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002232:	4b18      	ldr	r3, [pc, #96]	; (8002294 <MX_FDCAN1_Init+0x84>)
 8002234:	2200      	movs	r2, #0
 8002236:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002238:	4b16      	ldr	r3, [pc, #88]	; (8002294 <MX_FDCAN1_Init+0x84>)
 800223a:	2200      	movs	r2, #0
 800223c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <MX_FDCAN1_Init+0x84>)
 8002240:	220a      	movs	r2, #10
 8002242:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 4;
 8002244:	4b13      	ldr	r3, [pc, #76]	; (8002294 <MX_FDCAN1_Init+0x84>)
 8002246:	2204      	movs	r2, #4
 8002248:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <MX_FDCAN1_Init+0x84>)
 800224c:	220b      	movs	r2, #11
 800224e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8002250:	4b10      	ldr	r3, [pc, #64]	; (8002294 <MX_FDCAN1_Init+0x84>)
 8002252:	2204      	movs	r2, #4
 8002254:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 10;
 8002256:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <MX_FDCAN1_Init+0x84>)
 8002258:	220a      	movs	r2, #10
 800225a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 800225c:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <MX_FDCAN1_Init+0x84>)
 800225e:	2204      	movs	r2, #4
 8002260:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 11;
 8002262:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <MX_FDCAN1_Init+0x84>)
 8002264:	220b      	movs	r2, #11
 8002266:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <MX_FDCAN1_Init+0x84>)
 800226a:	2204      	movs	r2, #4
 800226c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <MX_FDCAN1_Init+0x84>)
 8002270:	2201      	movs	r2, #1
 8002272:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002274:	4b07      	ldr	r3, [pc, #28]	; (8002294 <MX_FDCAN1_Init+0x84>)
 8002276:	2200      	movs	r2, #0
 8002278:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800227a:	4b06      	ldr	r3, [pc, #24]	; (8002294 <MX_FDCAN1_Init+0x84>)
 800227c:	2200      	movs	r2, #0
 800227e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002280:	4804      	ldr	r0, [pc, #16]	; (8002294 <MX_FDCAN1_Init+0x84>)
 8002282:	f003 fab7 	bl	80057f4 <HAL_FDCAN_Init>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800228c:	f000 faa2 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000424 	.word	0x20000424
 8002298:	40006400 	.word	0x40006400

0800229c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80022a0:	4b20      	ldr	r3, [pc, #128]	; (8002324 <MX_FDCAN2_Init+0x88>)
 80022a2:	4a21      	ldr	r2, [pc, #132]	; (8002328 <MX_FDCAN2_Init+0x8c>)
 80022a4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80022a6:	4b1f      	ldr	r3, [pc, #124]	; (8002324 <MX_FDCAN2_Init+0x88>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80022ac:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <MX_FDCAN2_Init+0x88>)
 80022ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022b2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80022b4:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <MX_FDCAN2_Init+0x88>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80022ba:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <MX_FDCAN2_Init+0x88>)
 80022bc:	2200      	movs	r2, #0
 80022be:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80022c0:	4b18      	ldr	r3, [pc, #96]	; (8002324 <MX_FDCAN2_Init+0x88>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80022c6:	4b17      	ldr	r3, [pc, #92]	; (8002324 <MX_FDCAN2_Init+0x88>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80022cc:	4b15      	ldr	r3, [pc, #84]	; (8002324 <MX_FDCAN2_Init+0x88>)
 80022ce:	2210      	movs	r2, #16
 80022d0:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <MX_FDCAN2_Init+0x88>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <MX_FDCAN2_Init+0x88>)
 80022da:	2202      	movs	r2, #2
 80022dc:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <MX_FDCAN2_Init+0x88>)
 80022e0:	2202      	movs	r2, #2
 80022e2:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <MX_FDCAN2_Init+0x88>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <MX_FDCAN2_Init+0x88>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <MX_FDCAN2_Init+0x88>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <MX_FDCAN2_Init+0x88>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <MX_FDCAN2_Init+0x88>)
 80022fe:	2200      	movs	r2, #0
 8002300:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <MX_FDCAN2_Init+0x88>)
 8002304:	2200      	movs	r2, #0
 8002306:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <MX_FDCAN2_Init+0x88>)
 800230a:	2200      	movs	r2, #0
 800230c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800230e:	4805      	ldr	r0, [pc, #20]	; (8002324 <MX_FDCAN2_Init+0x88>)
 8002310:	f003 fa70 	bl	80057f4 <HAL_FDCAN_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_FDCAN2_Init+0x82>
  {
    Error_Handler();
 800231a:	f000 fa5b 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000488 	.word	0x20000488
 8002328:	40006800 	.word	0x40006800

0800232c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002340:	2300      	movs	r3, #0
 8002342:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002344:	4b28      	ldr	r3, [pc, #160]	; (80023e8 <MX_RTC_Init+0xbc>)
 8002346:	4a29      	ldr	r2, [pc, #164]	; (80023ec <MX_RTC_Init+0xc0>)
 8002348:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800234a:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <MX_RTC_Init+0xbc>)
 800234c:	2200      	movs	r2, #0
 800234e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002350:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <MX_RTC_Init+0xbc>)
 8002352:	227f      	movs	r2, #127	; 0x7f
 8002354:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002356:	4b24      	ldr	r3, [pc, #144]	; (80023e8 <MX_RTC_Init+0xbc>)
 8002358:	22ff      	movs	r2, #255	; 0xff
 800235a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800235c:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <MX_RTC_Init+0xbc>)
 800235e:	2200      	movs	r2, #0
 8002360:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002362:	4b21      	ldr	r3, [pc, #132]	; (80023e8 <MX_RTC_Init+0xbc>)
 8002364:	2200      	movs	r2, #0
 8002366:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002368:	4b1f      	ldr	r3, [pc, #124]	; (80023e8 <MX_RTC_Init+0xbc>)
 800236a:	2200      	movs	r2, #0
 800236c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800236e:	4b1e      	ldr	r3, [pc, #120]	; (80023e8 <MX_RTC_Init+0xbc>)
 8002370:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002374:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002376:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <MX_RTC_Init+0xbc>)
 8002378:	2200      	movs	r2, #0
 800237a:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800237c:	481a      	ldr	r0, [pc, #104]	; (80023e8 <MX_RTC_Init+0xbc>)
 800237e:	f005 fa6d 	bl	800785c <HAL_RTC_Init>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002388:	f000 fa24 	bl	80027d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800238c:	2300      	movs	r3, #0
 800238e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002390:	2300      	movs	r3, #0
 8002392:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002394:	2300      	movs	r3, #0
 8002396:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8002398:	2300      	movs	r3, #0
 800239a:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800239c:	2300      	movs	r3, #0
 800239e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	2201      	movs	r2, #1
 80023a8:	4619      	mov	r1, r3
 80023aa:	480f      	ldr	r0, [pc, #60]	; (80023e8 <MX_RTC_Init+0xbc>)
 80023ac:	f005 facb 	bl	8007946 <HAL_RTC_SetTime>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_RTC_Init+0x8e>
  {
    Error_Handler();
 80023b6:	f000 fa0d 	bl	80027d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80023ba:	2301      	movs	r3, #1
 80023bc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80023be:	2301      	movs	r3, #1
 80023c0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80023c2:	2301      	movs	r3, #1
 80023c4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80023ca:	463b      	mov	r3, r7
 80023cc:	2201      	movs	r2, #1
 80023ce:	4619      	mov	r1, r3
 80023d0:	4805      	ldr	r0, [pc, #20]	; (80023e8 <MX_RTC_Init+0xbc>)
 80023d2:	f005 fb55 	bl	8007a80 <HAL_RTC_SetDate>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 80023dc:	f000 f9fa 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80023e0:	bf00      	nop
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	200004ec 	.word	0x200004ec
 80023ec:	40002800 	.word	0x40002800

080023f0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <MX_SPI3_Init+0x74>)
 80023f6:	4a1c      	ldr	r2, [pc, #112]	; (8002468 <MX_SPI3_Init+0x78>)
 80023f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80023fa:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <MX_SPI3_Init+0x74>)
 80023fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002400:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002402:	4b18      	ldr	r3, [pc, #96]	; (8002464 <MX_SPI3_Init+0x74>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002408:	4b16      	ldr	r3, [pc, #88]	; (8002464 <MX_SPI3_Init+0x74>)
 800240a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800240e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002410:	4b14      	ldr	r3, [pc, #80]	; (8002464 <MX_SPI3_Init+0x74>)
 8002412:	2200      	movs	r2, #0
 8002414:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002416:	4b13      	ldr	r3, [pc, #76]	; (8002464 <MX_SPI3_Init+0x74>)
 8002418:	2200      	movs	r2, #0
 800241a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <MX_SPI3_Init+0x74>)
 800241e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002422:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <MX_SPI3_Init+0x74>)
 8002426:	2238      	movs	r2, #56	; 0x38
 8002428:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800242a:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <MX_SPI3_Init+0x74>)
 800242c:	2200      	movs	r2, #0
 800242e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002430:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <MX_SPI3_Init+0x74>)
 8002432:	2200      	movs	r2, #0
 8002434:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002436:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <MX_SPI3_Init+0x74>)
 8002438:	2200      	movs	r2, #0
 800243a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <MX_SPI3_Init+0x74>)
 800243e:	2207      	movs	r2, #7
 8002440:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <MX_SPI3_Init+0x74>)
 8002444:	2200      	movs	r2, #0
 8002446:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <MX_SPI3_Init+0x74>)
 800244a:	2208      	movs	r2, #8
 800244c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800244e:	4805      	ldr	r0, [pc, #20]	; (8002464 <MX_SPI3_Init+0x74>)
 8002450:	f005 fc5c 	bl	8007d0c <HAL_SPI_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800245a:	f000 f9bb 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000514 	.word	0x20000514
 8002468:	40003c00 	.word	0x40003c00

0800246c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08e      	sub	sp, #56	; 0x38
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002472:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002480:	f107 031c 	add.w	r3, r7, #28
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800248c:	463b      	mov	r3, r7
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	609a      	str	r2, [r3, #8]
 8002496:	60da      	str	r2, [r3, #12]
 8002498:	611a      	str	r2, [r3, #16]
 800249a:	615a      	str	r2, [r3, #20]
 800249c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800249e:	4b2d      	ldr	r3, [pc, #180]	; (8002554 <MX_TIM2_Init+0xe8>)
 80024a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 80024a6:	4b2b      	ldr	r3, [pc, #172]	; (8002554 <MX_TIM2_Init+0xe8>)
 80024a8:	2277      	movs	r2, #119	; 0x77
 80024aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ac:	4b29      	ldr	r3, [pc, #164]	; (8002554 <MX_TIM2_Init+0xe8>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80024b2:	4b28      	ldr	r3, [pc, #160]	; (8002554 <MX_TIM2_Init+0xe8>)
 80024b4:	2263      	movs	r2, #99	; 0x63
 80024b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b8:	4b26      	ldr	r3, [pc, #152]	; (8002554 <MX_TIM2_Init+0xe8>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024be:	4b25      	ldr	r3, [pc, #148]	; (8002554 <MX_TIM2_Init+0xe8>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024c4:	4823      	ldr	r0, [pc, #140]	; (8002554 <MX_TIM2_Init+0xe8>)
 80024c6:	f006 fb39 	bl	8008b3c <HAL_TIM_Base_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80024d0:	f000 f980 	bl	80027d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024de:	4619      	mov	r1, r3
 80024e0:	481c      	ldr	r0, [pc, #112]	; (8002554 <MX_TIM2_Init+0xe8>)
 80024e2:	f006 ff73 	bl	80093cc <HAL_TIM_ConfigClockSource>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80024ec:	f000 f972 	bl	80027d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80024f0:	4818      	ldr	r0, [pc, #96]	; (8002554 <MX_TIM2_Init+0xe8>)
 80024f2:	f006 fb7a 	bl	8008bea <HAL_TIM_PWM_Init>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80024fc:	f000 f96a 	bl	80027d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002500:	2300      	movs	r3, #0
 8002502:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002504:	2300      	movs	r3, #0
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002508:	f107 031c 	add.w	r3, r7, #28
 800250c:	4619      	mov	r1, r3
 800250e:	4811      	ldr	r0, [pc, #68]	; (8002554 <MX_TIM2_Init+0xe8>)
 8002510:	f007 ff5e 	bl	800a3d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800251a:	f000 f95b 	bl	80027d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800251e:	2360      	movs	r3, #96	; 0x60
 8002520:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002526:	2300      	movs	r3, #0
 8002528:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800252e:	463b      	mov	r3, r7
 8002530:	220c      	movs	r2, #12
 8002532:	4619      	mov	r1, r3
 8002534:	4807      	ldr	r0, [pc, #28]	; (8002554 <MX_TIM2_Init+0xe8>)
 8002536:	f006 fe35 	bl	80091a4 <HAL_TIM_PWM_ConfigChannel>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002540:	f000 f948 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002544:	4803      	ldr	r0, [pc, #12]	; (8002554 <MX_TIM2_Init+0xe8>)
 8002546:	f000 fc29 	bl	8002d9c <HAL_TIM_MspPostInit>

}
 800254a:	bf00      	nop
 800254c:	3738      	adds	r7, #56	; 0x38
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000578 	.word	0x20000578

08002558 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b090      	sub	sp, #64	; 0x40
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800255e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800256c:	f107 031c 	add.w	r3, r7, #28
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800257c:	f107 030c 	add.w	r3, r7, #12
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800258a:	463b      	mov	r3, r7
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002594:	4b40      	ldr	r3, [pc, #256]	; (8002698 <MX_TIM15_Init+0x140>)
 8002596:	4a41      	ldr	r2, [pc, #260]	; (800269c <MX_TIM15_Init+0x144>)
 8002598:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 16000;
 800259a:	4b3f      	ldr	r3, [pc, #252]	; (8002698 <MX_TIM15_Init+0x140>)
 800259c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80025a0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a2:	4b3d      	ldr	r3, [pc, #244]	; (8002698 <MX_TIM15_Init+0x140>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80025a8:	4b3b      	ldr	r3, [pc, #236]	; (8002698 <MX_TIM15_Init+0x140>)
 80025aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ae:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80025b0:	4b39      	ldr	r3, [pc, #228]	; (8002698 <MX_TIM15_Init+0x140>)
 80025b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80025b8:	4b37      	ldr	r3, [pc, #220]	; (8002698 <MX_TIM15_Init+0x140>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025be:	4b36      	ldr	r3, [pc, #216]	; (8002698 <MX_TIM15_Init+0x140>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80025c4:	4834      	ldr	r0, [pc, #208]	; (8002698 <MX_TIM15_Init+0x140>)
 80025c6:	f006 fab9 	bl	8008b3c <HAL_TIM_Base_Init>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80025d0:	f000 f900 	bl	80027d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025d8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80025da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025de:	4619      	mov	r1, r3
 80025e0:	482d      	ldr	r0, [pc, #180]	; (8002698 <MX_TIM15_Init+0x140>)
 80025e2:	f006 fef3 	bl	80093cc <HAL_TIM_ConfigClockSource>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80025ec:	f000 f8f2 	bl	80027d4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80025f0:	4829      	ldr	r0, [pc, #164]	; (8002698 <MX_TIM15_Init+0x140>)
 80025f2:	f006 fb5b 	bl	8008cac <HAL_TIM_IC_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80025fc:	f000 f8ea 	bl	80027d4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002600:	2304      	movs	r3, #4
 8002602:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8002604:	2360      	movs	r3, #96	; 0x60
 8002606:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800260c:	2300      	movs	r3, #0
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8002614:	f107 031c 	add.w	r3, r7, #28
 8002618:	4619      	mov	r1, r3
 800261a:	481f      	ldr	r0, [pc, #124]	; (8002698 <MX_TIM15_Init+0x140>)
 800261c:	f006 ffec 	bl	80095f8 <HAL_TIM_SlaveConfigSynchro>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM15_Init+0xd2>
  {
    Error_Handler();
 8002626:	f000 f8d5 	bl	80027d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800262a:	2302      	movs	r3, #2
 800262c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800262e:	2302      	movs	r3, #2
 8002630:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800263a:	f107 030c 	add.w	r3, r7, #12
 800263e:	2200      	movs	r2, #0
 8002640:	4619      	mov	r1, r3
 8002642:	4815      	ldr	r0, [pc, #84]	; (8002698 <MX_TIM15_Init+0x140>)
 8002644:	f006 fd12 	bl	800906c <HAL_TIM_IC_ConfigChannel>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 800264e:	f000 f8c1 	bl	80027d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002656:	2301      	movs	r3, #1
 8002658:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800265a:	f107 030c 	add.w	r3, r7, #12
 800265e:	2204      	movs	r2, #4
 8002660:	4619      	mov	r1, r3
 8002662:	480d      	ldr	r0, [pc, #52]	; (8002698 <MX_TIM15_Init+0x140>)
 8002664:	f006 fd02 	bl	800906c <HAL_TIM_IC_ConfigChannel>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM15_Init+0x11a>
  {
    Error_Handler();
 800266e:	f000 f8b1 	bl	80027d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002672:	2300      	movs	r3, #0
 8002674:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800267a:	463b      	mov	r3, r7
 800267c:	4619      	mov	r1, r3
 800267e:	4806      	ldr	r0, [pc, #24]	; (8002698 <MX_TIM15_Init+0x140>)
 8002680:	f007 fea6 	bl	800a3d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_TIM15_Init+0x136>
  {
    Error_Handler();
 800268a:	f000 f8a3 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800268e:	bf00      	nop
 8002690:	3740      	adds	r7, #64	; 0x40
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	200005c4 	.word	0x200005c4
 800269c:	40014000 	.word	0x40014000

080026a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80026a6:	4b16      	ldr	r3, [pc, #88]	; (8002700 <MX_DMA_Init+0x60>)
 80026a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026aa:	4a15      	ldr	r2, [pc, #84]	; (8002700 <MX_DMA_Init+0x60>)
 80026ac:	f043 0304 	orr.w	r3, r3, #4
 80026b0:	6493      	str	r3, [r2, #72]	; 0x48
 80026b2:	4b13      	ldr	r3, [pc, #76]	; (8002700 <MX_DMA_Init+0x60>)
 80026b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	607b      	str	r3, [r7, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <MX_DMA_Init+0x60>)
 80026c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c2:	4a0f      	ldr	r2, [pc, #60]	; (8002700 <MX_DMA_Init+0x60>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	6493      	str	r3, [r2, #72]	; 0x48
 80026ca:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <MX_DMA_Init+0x60>)
 80026cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80026d6:	2200      	movs	r2, #0
 80026d8:	2100      	movs	r1, #0
 80026da:	200b      	movs	r0, #11
 80026dc:	f002 fde3 	bl	80052a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80026e0:	200b      	movs	r0, #11
 80026e2:	f002 fdfa 	bl	80052da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80026e6:	2200      	movs	r2, #0
 80026e8:	2100      	movs	r1, #0
 80026ea:	200c      	movs	r0, #12
 80026ec:	f002 fddb 	bl	80052a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80026f0:	200c      	movs	r0, #12
 80026f2:	f002 fdf2 	bl	80052da <HAL_NVIC_EnableIRQ>

}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40021000 	.word	0x40021000

08002704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08a      	sub	sp, #40	; 0x28
 8002708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270a:	f107 0314 	add.w	r3, r7, #20
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	609a      	str	r2, [r3, #8]
 8002716:	60da      	str	r2, [r3, #12]
 8002718:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800271a:	4b2c      	ldr	r3, [pc, #176]	; (80027cc <MX_GPIO_Init+0xc8>)
 800271c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271e:	4a2b      	ldr	r2, [pc, #172]	; (80027cc <MX_GPIO_Init+0xc8>)
 8002720:	f043 0320 	orr.w	r3, r3, #32
 8002724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002726:	4b29      	ldr	r3, [pc, #164]	; (80027cc <MX_GPIO_Init+0xc8>)
 8002728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272a:	f003 0320 	and.w	r3, r3, #32
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002732:	4b26      	ldr	r3, [pc, #152]	; (80027cc <MX_GPIO_Init+0xc8>)
 8002734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002736:	4a25      	ldr	r2, [pc, #148]	; (80027cc <MX_GPIO_Init+0xc8>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800273e:	4b23      	ldr	r3, [pc, #140]	; (80027cc <MX_GPIO_Init+0xc8>)
 8002740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800274a:	4b20      	ldr	r3, [pc, #128]	; (80027cc <MX_GPIO_Init+0xc8>)
 800274c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274e:	4a1f      	ldr	r2, [pc, #124]	; (80027cc <MX_GPIO_Init+0xc8>)
 8002750:	f043 0302 	orr.w	r3, r3, #2
 8002754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002756:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <MX_GPIO_Init+0xc8>)
 8002758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002762:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <MX_GPIO_Init+0xc8>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002766:	4a19      	ldr	r2, [pc, #100]	; (80027cc <MX_GPIO_Init+0xc8>)
 8002768:	f043 0304 	orr.w	r3, r3, #4
 800276c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800276e:	4b17      	ldr	r3, [pc, #92]	; (80027cc <MX_GPIO_Init+0xc8>)
 8002770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	607b      	str	r3, [r7, #4]
 8002778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_15, GPIO_PIN_RESET);
 800277a:	2200      	movs	r2, #0
 800277c:	f248 0104 	movw	r1, #32772	; 0x8004
 8002780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002784:	f004 f854 	bl	8006830 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8002788:	f248 0304 	movw	r3, #32772	; 0x8004
 800278c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278e:	2301      	movs	r3, #1
 8002790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002796:	2300      	movs	r3, #0
 8002798:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279a:	f107 0314 	add.w	r3, r7, #20
 800279e:	4619      	mov	r1, r3
 80027a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a4:	f003 fec2 	bl	800652c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80027a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	4619      	mov	r1, r3
 80027bc:	4804      	ldr	r0, [pc, #16]	; (80027d0 <MX_GPIO_Init+0xcc>)
 80027be:	f003 feb5 	bl	800652c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027c2:	bf00      	nop
 80027c4:	3728      	adds	r7, #40	; 0x28
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	48000400 	.word	0x48000400

080027d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027d8:	b672      	cpsid	i
}
 80027da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027dc:	e7fe      	b.n	80027dc <Error_Handler+0x8>
	...

080027e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e6:	4b13      	ldr	r3, [pc, #76]	; (8002834 <HAL_MspInit+0x54>)
 80027e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ea:	4a12      	ldr	r2, [pc, #72]	; (8002834 <HAL_MspInit+0x54>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	6613      	str	r3, [r2, #96]	; 0x60
 80027f2:	4b10      	ldr	r3, [pc, #64]	; (8002834 <HAL_MspInit+0x54>)
 80027f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	607b      	str	r3, [r7, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027fe:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <HAL_MspInit+0x54>)
 8002800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002802:	4a0c      	ldr	r2, [pc, #48]	; (8002834 <HAL_MspInit+0x54>)
 8002804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002808:	6593      	str	r3, [r2, #88]	; 0x58
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <HAL_MspInit+0x54>)
 800280c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 8002816:	2020      	movs	r0, #32
 8002818:	f000 fc2e 	bl	8003078 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 800281c:	f000 fc54 	bl	80030c8 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8002820:	2000      	movs	r0, #0
 8002822:	f000 fc3d 	bl	80030a0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002826:	f004 f8bf 	bl	80069a8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000

08002838 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b0a0      	sub	sp, #128	; 0x80
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002850:	f107 0318 	add.w	r3, r7, #24
 8002854:	2254      	movs	r2, #84	; 0x54
 8002856:	2100      	movs	r1, #0
 8002858:	4618      	mov	r0, r3
 800285a:	f007 febf 	bl	800a5dc <memset>
  if(hadc->Instance==ADC1)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002866:	d171      	bne.n	800294c <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002868:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800286c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800286e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002872:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002874:	f107 0318 	add.w	r3, r7, #24
 8002878:	4618      	mov	r0, r3
 800287a:	f004 fda1 	bl	80073c0 <HAL_RCCEx_PeriphCLKConfig>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002884:	f7ff ffa6 	bl	80027d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002888:	4b6d      	ldr	r3, [pc, #436]	; (8002a40 <HAL_ADC_MspInit+0x208>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3301      	adds	r3, #1
 800288e:	4a6c      	ldr	r2, [pc, #432]	; (8002a40 <HAL_ADC_MspInit+0x208>)
 8002890:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002892:	4b6b      	ldr	r3, [pc, #428]	; (8002a40 <HAL_ADC_MspInit+0x208>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d10b      	bne.n	80028b2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800289a:	4b6a      	ldr	r3, [pc, #424]	; (8002a44 <HAL_ADC_MspInit+0x20c>)
 800289c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289e:	4a69      	ldr	r2, [pc, #420]	; (8002a44 <HAL_ADC_MspInit+0x20c>)
 80028a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028a6:	4b67      	ldr	r3, [pc, #412]	; (8002a44 <HAL_ADC_MspInit+0x20c>)
 80028a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b2:	4b64      	ldr	r3, [pc, #400]	; (8002a44 <HAL_ADC_MspInit+0x20c>)
 80028b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b6:	4a63      	ldr	r2, [pc, #396]	; (8002a44 <HAL_ADC_MspInit+0x20c>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028be:	4b61      	ldr	r3, [pc, #388]	; (8002a44 <HAL_ADC_MspInit+0x20c>)
 80028c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028ca:	2308      	movs	r3, #8
 80028cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028ce:	2303      	movs	r3, #3
 80028d0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028da:	4619      	mov	r1, r3
 80028dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028e0:	f003 fe24 	bl	800652c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80028e4:	4b58      	ldr	r3, [pc, #352]	; (8002a48 <HAL_ADC_MspInit+0x210>)
 80028e6:	4a59      	ldr	r2, [pc, #356]	; (8002a4c <HAL_ADC_MspInit+0x214>)
 80028e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80028ea:	4b57      	ldr	r3, [pc, #348]	; (8002a48 <HAL_ADC_MspInit+0x210>)
 80028ec:	2205      	movs	r2, #5
 80028ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028f0:	4b55      	ldr	r3, [pc, #340]	; (8002a48 <HAL_ADC_MspInit+0x210>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028f6:	4b54      	ldr	r3, [pc, #336]	; (8002a48 <HAL_ADC_MspInit+0x210>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80028fc:	4b52      	ldr	r3, [pc, #328]	; (8002a48 <HAL_ADC_MspInit+0x210>)
 80028fe:	2280      	movs	r2, #128	; 0x80
 8002900:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002902:	4b51      	ldr	r3, [pc, #324]	; (8002a48 <HAL_ADC_MspInit+0x210>)
 8002904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002908:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800290a:	4b4f      	ldr	r3, [pc, #316]	; (8002a48 <HAL_ADC_MspInit+0x210>)
 800290c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002910:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002912:	4b4d      	ldr	r3, [pc, #308]	; (8002a48 <HAL_ADC_MspInit+0x210>)
 8002914:	2220      	movs	r2, #32
 8002916:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002918:	4b4b      	ldr	r3, [pc, #300]	; (8002a48 <HAL_ADC_MspInit+0x210>)
 800291a:	2200      	movs	r2, #0
 800291c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800291e:	484a      	ldr	r0, [pc, #296]	; (8002a48 <HAL_ADC_MspInit+0x210>)
 8002920:	f002 fcf6 	bl	8005310 <HAL_DMA_Init>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 800292a:	f7ff ff53 	bl	80027d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a45      	ldr	r2, [pc, #276]	; (8002a48 <HAL_ADC_MspInit+0x210>)
 8002932:	655a      	str	r2, [r3, #84]	; 0x54
 8002934:	4a44      	ldr	r2, [pc, #272]	; (8002a48 <HAL_ADC_MspInit+0x210>)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800293a:	2200      	movs	r2, #0
 800293c:	2100      	movs	r1, #0
 800293e:	2012      	movs	r0, #18
 8002940:	f002 fcb1 	bl	80052a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002944:	2012      	movs	r0, #18
 8002946:	f002 fcc8 	bl	80052da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800294a:	e075      	b.n	8002a38 <HAL_ADC_MspInit+0x200>
  else if(hadc->Instance==ADC2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a3f      	ldr	r2, [pc, #252]	; (8002a50 <HAL_ADC_MspInit+0x218>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d170      	bne.n	8002a38 <HAL_ADC_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800295a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800295c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002960:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002962:	f107 0318 	add.w	r3, r7, #24
 8002966:	4618      	mov	r0, r3
 8002968:	f004 fd2a 	bl	80073c0 <HAL_RCCEx_PeriphCLKConfig>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 8002972:	f7ff ff2f 	bl	80027d4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002976:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <HAL_ADC_MspInit+0x208>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	3301      	adds	r3, #1
 800297c:	4a30      	ldr	r2, [pc, #192]	; (8002a40 <HAL_ADC_MspInit+0x208>)
 800297e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002980:	4b2f      	ldr	r3, [pc, #188]	; (8002a40 <HAL_ADC_MspInit+0x208>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d10b      	bne.n	80029a0 <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002988:	4b2e      	ldr	r3, [pc, #184]	; (8002a44 <HAL_ADC_MspInit+0x20c>)
 800298a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298c:	4a2d      	ldr	r2, [pc, #180]	; (8002a44 <HAL_ADC_MspInit+0x20c>)
 800298e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002992:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002994:	4b2b      	ldr	r3, [pc, #172]	; (8002a44 <HAL_ADC_MspInit+0x20c>)
 8002996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a0:	4b28      	ldr	r3, [pc, #160]	; (8002a44 <HAL_ADC_MspInit+0x20c>)
 80029a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a4:	4a27      	ldr	r2, [pc, #156]	; (8002a44 <HAL_ADC_MspInit+0x20c>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ac:	4b25      	ldr	r3, [pc, #148]	; (8002a44 <HAL_ADC_MspInit+0x20c>)
 80029ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80029b8:	2330      	movs	r3, #48	; 0x30
 80029ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029bc:	2303      	movs	r3, #3
 80029be:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029c8:	4619      	mov	r1, r3
 80029ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ce:	f003 fdad 	bl	800652c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80029d2:	4b20      	ldr	r3, [pc, #128]	; (8002a54 <HAL_ADC_MspInit+0x21c>)
 80029d4:	4a20      	ldr	r2, [pc, #128]	; (8002a58 <HAL_ADC_MspInit+0x220>)
 80029d6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80029d8:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <HAL_ADC_MspInit+0x21c>)
 80029da:	2224      	movs	r2, #36	; 0x24
 80029dc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029de:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <HAL_ADC_MspInit+0x21c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80029e4:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <HAL_ADC_MspInit+0x21c>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80029ea:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <HAL_ADC_MspInit+0x21c>)
 80029ec:	2280      	movs	r2, #128	; 0x80
 80029ee:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029f0:	4b18      	ldr	r3, [pc, #96]	; (8002a54 <HAL_ADC_MspInit+0x21c>)
 80029f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029f6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029f8:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <HAL_ADC_MspInit+0x21c>)
 80029fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029fe:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002a00:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <HAL_ADC_MspInit+0x21c>)
 8002a02:	2220      	movs	r2, #32
 8002a04:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002a06:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <HAL_ADC_MspInit+0x21c>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002a0c:	4811      	ldr	r0, [pc, #68]	; (8002a54 <HAL_ADC_MspInit+0x21c>)
 8002a0e:	f002 fc7f 	bl	8005310 <HAL_DMA_Init>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_ADC_MspInit+0x1e4>
      Error_Handler();
 8002a18:	f7ff fedc 	bl	80027d4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a0d      	ldr	r2, [pc, #52]	; (8002a54 <HAL_ADC_MspInit+0x21c>)
 8002a20:	655a      	str	r2, [r3, #84]	; 0x54
 8002a22:	4a0c      	ldr	r2, [pc, #48]	; (8002a54 <HAL_ADC_MspInit+0x21c>)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	2012      	movs	r0, #18
 8002a2e:	f002 fc3a 	bl	80052a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002a32:	2012      	movs	r0, #18
 8002a34:	f002 fc51 	bl	80052da <HAL_NVIC_EnableIRQ>
}
 8002a38:	bf00      	nop
 8002a3a:	3780      	adds	r7, #128	; 0x80
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20000e74 	.word	0x20000e74
 8002a44:	40021000 	.word	0x40021000
 8002a48:	20000364 	.word	0x20000364
 8002a4c:	40020008 	.word	0x40020008
 8002a50:	50000100 	.word	0x50000100
 8002a54:	200003c4 	.word	0x200003c4
 8002a58:	4002001c 	.word	0x4002001c

08002a5c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b0a0      	sub	sp, #128	; 0x80
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	60da      	str	r2, [r3, #12]
 8002a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a74:	f107 0318 	add.w	r3, r7, #24
 8002a78:	2254      	movs	r2, #84	; 0x54
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f007 fdad 	bl	800a5dc <memset>
  if(hfdcan->Instance==FDCAN1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a51      	ldr	r2, [pc, #324]	; (8002bcc <HAL_FDCAN_MspInit+0x170>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d153      	bne.n	8002b34 <HAL_FDCAN_MspInit+0xd8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a90:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002a92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a96:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a98:	f107 0318 	add.w	r3, r7, #24
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f004 fc8f 	bl	80073c0 <HAL_RCCEx_PeriphCLKConfig>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002aa8:	f7ff fe94 	bl	80027d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002aac:	4b48      	ldr	r3, [pc, #288]	; (8002bd0 <HAL_FDCAN_MspInit+0x174>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	4a47      	ldr	r2, [pc, #284]	; (8002bd0 <HAL_FDCAN_MspInit+0x174>)
 8002ab4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002ab6:	4b46      	ldr	r3, [pc, #280]	; (8002bd0 <HAL_FDCAN_MspInit+0x174>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d10b      	bne.n	8002ad6 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002abe:	4b45      	ldr	r3, [pc, #276]	; (8002bd4 <HAL_FDCAN_MspInit+0x178>)
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac2:	4a44      	ldr	r2, [pc, #272]	; (8002bd4 <HAL_FDCAN_MspInit+0x178>)
 8002ac4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ac8:	6593      	str	r3, [r2, #88]	; 0x58
 8002aca:	4b42      	ldr	r3, [pc, #264]	; (8002bd4 <HAL_FDCAN_MspInit+0x178>)
 8002acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad6:	4b3f      	ldr	r3, [pc, #252]	; (8002bd4 <HAL_FDCAN_MspInit+0x178>)
 8002ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ada:	4a3e      	ldr	r2, [pc, #248]	; (8002bd4 <HAL_FDCAN_MspInit+0x178>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ae2:	4b3c      	ldr	r3, [pc, #240]	; (8002bd4 <HAL_FDCAN_MspInit+0x178>)
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002aee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002af2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af4:	2302      	movs	r3, #2
 8002af6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afc:	2300      	movs	r3, #0
 8002afe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002b00:	2309      	movs	r3, #9
 8002b02:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b04:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b0e:	f003 fd0d 	bl	800652c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8002b12:	2200      	movs	r2, #0
 8002b14:	2100      	movs	r1, #0
 8002b16:	2015      	movs	r0, #21
 8002b18:	f002 fbc5 	bl	80052a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002b1c:	2015      	movs	r0, #21
 8002b1e:	f002 fbdc 	bl	80052da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2100      	movs	r1, #0
 8002b26:	2016      	movs	r0, #22
 8002b28:	f002 fbbd 	bl	80052a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8002b2c:	2016      	movs	r0, #22
 8002b2e:	f002 fbd4 	bl	80052da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002b32:	e046      	b.n	8002bc2 <HAL_FDCAN_MspInit+0x166>
  else if(hfdcan->Instance==FDCAN2)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a27      	ldr	r2, [pc, #156]	; (8002bd8 <HAL_FDCAN_MspInit+0x17c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d141      	bne.n	8002bc2 <HAL_FDCAN_MspInit+0x166>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b42:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002b44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b48:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b4a:	f107 0318 	add.w	r3, r7, #24
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f004 fc36 	bl	80073c0 <HAL_RCCEx_PeriphCLKConfig>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_FDCAN_MspInit+0x102>
      Error_Handler();
 8002b5a:	f7ff fe3b 	bl	80027d4 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002b5e:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <HAL_FDCAN_MspInit+0x174>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3301      	adds	r3, #1
 8002b64:	4a1a      	ldr	r2, [pc, #104]	; (8002bd0 <HAL_FDCAN_MspInit+0x174>)
 8002b66:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002b68:	4b19      	ldr	r3, [pc, #100]	; (8002bd0 <HAL_FDCAN_MspInit+0x174>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d10b      	bne.n	8002b88 <HAL_FDCAN_MspInit+0x12c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002b70:	4b18      	ldr	r3, [pc, #96]	; (8002bd4 <HAL_FDCAN_MspInit+0x178>)
 8002b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b74:	4a17      	ldr	r2, [pc, #92]	; (8002bd4 <HAL_FDCAN_MspInit+0x178>)
 8002b76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b7c:	4b15      	ldr	r3, [pc, #84]	; (8002bd4 <HAL_FDCAN_MspInit+0x178>)
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b88:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <HAL_FDCAN_MspInit+0x178>)
 8002b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8c:	4a11      	ldr	r2, [pc, #68]	; (8002bd4 <HAL_FDCAN_MspInit+0x178>)
 8002b8e:	f043 0302 	orr.w	r3, r3, #2
 8002b92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b94:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <HAL_FDCAN_MspInit+0x178>)
 8002b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002ba0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002ba4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002bb2:	2309      	movs	r3, #9
 8002bb4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4807      	ldr	r0, [pc, #28]	; (8002bdc <HAL_FDCAN_MspInit+0x180>)
 8002bbe:	f003 fcb5 	bl	800652c <HAL_GPIO_Init>
}
 8002bc2:	bf00      	nop
 8002bc4:	3780      	adds	r7, #128	; 0x80
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40006400 	.word	0x40006400
 8002bd0:	20000e78 	.word	0x20000e78
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	40006800 	.word	0x40006800
 8002bdc:	48000400 	.word	0x48000400

08002be0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b098      	sub	sp, #96	; 0x60
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002be8:	f107 030c 	add.w	r3, r7, #12
 8002bec:	2254      	movs	r2, #84	; 0x54
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f007 fcf3 	bl	800a5dc <memset>
  if(hrtc->Instance==RTC)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a15      	ldr	r2, [pc, #84]	; (8002c50 <HAL_RTC_MspInit+0x70>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d123      	bne.n	8002c48 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c04:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002c06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c0c:	f107 030c 	add.w	r3, r7, #12
 8002c10:	4618      	mov	r0, r3
 8002c12:	f004 fbd5 	bl	80073c0 <HAL_RCCEx_PeriphCLKConfig>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002c1c:	f7ff fdda 	bl	80027d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <HAL_RTC_MspInit+0x74>)
 8002c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c26:	4a0b      	ldr	r2, [pc, #44]	; (8002c54 <HAL_RTC_MspInit+0x74>)
 8002c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002c30:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <HAL_RTC_MspInit+0x74>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	4a07      	ldr	r2, [pc, #28]	; (8002c54 <HAL_RTC_MspInit+0x74>)
 8002c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_RTC_MspInit+0x74>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c48:	bf00      	nop
 8002c4a:	3760      	adds	r7, #96	; 0x60
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40002800 	.word	0x40002800
 8002c54:	40021000 	.word	0x40021000

08002c58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08a      	sub	sp, #40	; 0x28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c60:	f107 0314 	add.w	r3, r7, #20
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a17      	ldr	r2, [pc, #92]	; (8002cd4 <HAL_SPI_MspInit+0x7c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d128      	bne.n	8002ccc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c7a:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <HAL_SPI_MspInit+0x80>)
 8002c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7e:	4a16      	ldr	r2, [pc, #88]	; (8002cd8 <HAL_SPI_MspInit+0x80>)
 8002c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c84:	6593      	str	r3, [r2, #88]	; 0x58
 8002c86:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <HAL_SPI_MspInit+0x80>)
 8002c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c92:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <HAL_SPI_MspInit+0x80>)
 8002c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c96:	4a10      	ldr	r2, [pc, #64]	; (8002cd8 <HAL_SPI_MspInit+0x80>)
 8002c98:	f043 0304 	orr.w	r3, r3, #4
 8002c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c9e:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <HAL_SPI_MspInit+0x80>)
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002caa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002cbc:	2306      	movs	r3, #6
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cc0:	f107 0314 	add.w	r3, r7, #20
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4805      	ldr	r0, [pc, #20]	; (8002cdc <HAL_SPI_MspInit+0x84>)
 8002cc8:	f003 fc30 	bl	800652c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002ccc:	bf00      	nop
 8002cce:	3728      	adds	r7, #40	; 0x28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40003c00 	.word	0x40003c00
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	48000800 	.word	0x48000800

08002ce0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08a      	sub	sp, #40	; 0x28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce8:	f107 0314 	add.w	r3, r7, #20
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d00:	d10c      	bne.n	8002d1c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d02:	4b23      	ldr	r3, [pc, #140]	; (8002d90 <HAL_TIM_Base_MspInit+0xb0>)
 8002d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d06:	4a22      	ldr	r2, [pc, #136]	; (8002d90 <HAL_TIM_Base_MspInit+0xb0>)
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8002d0e:	4b20      	ldr	r3, [pc, #128]	; (8002d90 <HAL_TIM_Base_MspInit+0xb0>)
 8002d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002d1a:	e035      	b.n	8002d88 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM15)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a1c      	ldr	r2, [pc, #112]	; (8002d94 <HAL_TIM_Base_MspInit+0xb4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d130      	bne.n	8002d88 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002d26:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <HAL_TIM_Base_MspInit+0xb0>)
 8002d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2a:	4a19      	ldr	r2, [pc, #100]	; (8002d90 <HAL_TIM_Base_MspInit+0xb0>)
 8002d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d30:	6613      	str	r3, [r2, #96]	; 0x60
 8002d32:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <HAL_TIM_Base_MspInit+0xb0>)
 8002d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d3e:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <HAL_TIM_Base_MspInit+0xb0>)
 8002d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d42:	4a13      	ldr	r2, [pc, #76]	; (8002d90 <HAL_TIM_Base_MspInit+0xb0>)
 8002d44:	f043 0302 	orr.w	r3, r3, #2
 8002d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d4a:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <HAL_TIM_Base_MspInit+0xb0>)
 8002d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	60bb      	str	r3, [r7, #8]
 8002d54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d64:	2300      	movs	r3, #0
 8002d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d6c:	f107 0314 	add.w	r3, r7, #20
 8002d70:	4619      	mov	r1, r3
 8002d72:	4809      	ldr	r0, [pc, #36]	; (8002d98 <HAL_TIM_Base_MspInit+0xb8>)
 8002d74:	f003 fbda 	bl	800652c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	2018      	movs	r0, #24
 8002d7e:	f002 fa92 	bl	80052a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002d82:	2018      	movs	r0, #24
 8002d84:	f002 faa9 	bl	80052da <HAL_NVIC_EnableIRQ>
}
 8002d88:	bf00      	nop
 8002d8a:	3728      	adds	r7, #40	; 0x28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40014000 	.word	0x40014000
 8002d98:	48000400 	.word	0x48000400

08002d9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b088      	sub	sp, #32
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da4:	f107 030c 	add.w	r3, r7, #12
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	60da      	str	r2, [r3, #12]
 8002db2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbc:	d11d      	bne.n	8002dfa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dbe:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <HAL_TIM_MspPostInit+0x68>)
 8002dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc2:	4a10      	ldr	r2, [pc, #64]	; (8002e04 <HAL_TIM_MspPostInit+0x68>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dca:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <HAL_TIM_MspPostInit+0x68>)
 8002dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA10     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de4:	2300      	movs	r3, #0
 8002de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8002de8:	230a      	movs	r3, #10
 8002dea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dec:	f107 030c 	add.w	r3, r7, #12
 8002df0:	4619      	mov	r1, r3
 8002df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002df6:	f003 fb99 	bl	800652c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002dfa:	bf00      	nop
 8002dfc:	3720      	adds	r7, #32
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000

08002e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e0c:	e7fe      	b.n	8002e0c <NMI_Handler+0x4>

08002e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e12:	e7fe      	b.n	8002e12 <HardFault_Handler+0x4>

08002e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e18:	e7fe      	b.n	8002e18 <MemManage_Handler+0x4>

08002e1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e1e:	e7fe      	b.n	8002e1e <BusFault_Handler+0x4>

08002e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e24:	e7fe      	b.n	8002e24 <UsageFault_Handler+0x4>

08002e26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e26:	b480      	push	{r7}
 8002e28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e42:	b480      	push	{r7}
 8002e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e54:	f000 f8d0 	bl	8002ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e58:	bf00      	nop
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e60:	4802      	ldr	r0, [pc, #8]	; (8002e6c <DMA1_Channel1_IRQHandler+0x10>)
 8002e62:	f002 fb78 	bl	8005556 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000364 	.word	0x20000364

08002e70 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002e74:	4802      	ldr	r0, [pc, #8]	; (8002e80 <DMA1_Channel2_IRQHandler+0x10>)
 8002e76:	f002 fb6e 	bl	8005556 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	200003c4 	.word	0x200003c4

08002e84 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002e88:	4803      	ldr	r0, [pc, #12]	; (8002e98 <ADC1_2_IRQHandler+0x14>)
 8002e8a:	f000 ff25 	bl	8003cd8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002e8e:	4803      	ldr	r0, [pc, #12]	; (8002e9c <ADC1_2_IRQHandler+0x18>)
 8002e90:	f000 ff22 	bl	8003cd8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002e94:	bf00      	nop
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	2000028c 	.word	0x2000028c
 8002e9c:	200002f8 	.word	0x200002f8

08002ea0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002ea4:	4802      	ldr	r0, [pc, #8]	; (8002eb0 <FDCAN1_IT0_IRQHandler+0x10>)
 8002ea6:	f003 f8b7 	bl	8006018 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000424 	.word	0x20000424

08002eb4 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002eb8:	4802      	ldr	r0, [pc, #8]	; (8002ec4 <FDCAN1_IT1_IRQHandler+0x10>)
 8002eba:	f003 f8ad 	bl	8006018 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000424 	.word	0x20000424

08002ec8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002ecc:	4802      	ldr	r0, [pc, #8]	; (8002ed8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8002ece:	f005 ff4e 	bl	8008d6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002ed2:	bf00      	nop
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	200005c4 	.word	0x200005c4

08002edc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <SystemInit+0x20>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee6:	4a05      	ldr	r2, [pc, #20]	; (8002efc <SystemInit+0x20>)
 8002ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f00:	480d      	ldr	r0, [pc, #52]	; (8002f38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f04:	480d      	ldr	r0, [pc, #52]	; (8002f3c <LoopForever+0x6>)
  ldr r1, =_edata
 8002f06:	490e      	ldr	r1, [pc, #56]	; (8002f40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f08:	4a0e      	ldr	r2, [pc, #56]	; (8002f44 <LoopForever+0xe>)
  movs r3, #0
 8002f0a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002f0c:	e002      	b.n	8002f14 <LoopCopyDataInit>

08002f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f12:	3304      	adds	r3, #4

08002f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f18:	d3f9      	bcc.n	8002f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f1a:	4a0b      	ldr	r2, [pc, #44]	; (8002f48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f1c:	4c0b      	ldr	r4, [pc, #44]	; (8002f4c <LoopForever+0x16>)
  movs r3, #0
 8002f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f20:	e001      	b.n	8002f26 <LoopFillZerobss>

08002f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f24:	3204      	adds	r2, #4

08002f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f28:	d3fb      	bcc.n	8002f22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f2a:	f7ff ffd7 	bl	8002edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f2e:	f007 fb31 	bl	800a594 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f32:	f7fe fe91 	bl	8001c58 <main>

08002f36 <LoopForever>:

LoopForever:
    b LoopForever
 8002f36:	e7fe      	b.n	8002f36 <LoopForever>
  ldr   r0, =_estack
 8002f38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002f44:	0800aa3c 	.word	0x0800aa3c
  ldr r2, =_sbss
 8002f48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002f4c:	20000e80 	.word	0x20000e80

08002f50 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f50:	e7fe      	b.n	8002f50 <ADC3_IRQHandler>

08002f52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f5c:	2003      	movs	r0, #3
 8002f5e:	f002 f997 	bl	8005290 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f62:	2000      	movs	r0, #0
 8002f64:	f000 f80e 	bl	8002f84 <HAL_InitTick>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	71fb      	strb	r3, [r7, #7]
 8002f72:	e001      	b.n	8002f78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f74:	f7ff fc34 	bl	80027e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f78:	79fb      	ldrb	r3, [r7, #7]

}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002f90:	4b16      	ldr	r3, [pc, #88]	; (8002fec <HAL_InitTick+0x68>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d022      	beq.n	8002fde <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002f98:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <HAL_InitTick+0x6c>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	4b13      	ldr	r3, [pc, #76]	; (8002fec <HAL_InitTick+0x68>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002fa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fac:	4618      	mov	r0, r3
 8002fae:	f002 f9a2 	bl	80052f6 <HAL_SYSTICK_Config>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10f      	bne.n	8002fd8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b0f      	cmp	r3, #15
 8002fbc:	d809      	bhi.n	8002fd2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc6:	f002 f96e 	bl	80052a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fca:	4a0a      	ldr	r2, [pc, #40]	; (8002ff4 <HAL_InitTick+0x70>)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	e007      	b.n	8002fe2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	73fb      	strb	r3, [r7, #15]
 8002fd6:	e004      	b.n	8002fe2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
 8002fdc:	e001      	b.n	8002fe2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000008 	.word	0x20000008
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	20000004 	.word	0x20000004

08002ff8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ffc:	4b05      	ldr	r3, [pc, #20]	; (8003014 <HAL_IncTick+0x1c>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <HAL_IncTick+0x20>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4413      	add	r3, r2
 8003006:	4a03      	ldr	r2, [pc, #12]	; (8003014 <HAL_IncTick+0x1c>)
 8003008:	6013      	str	r3, [r2, #0]
}
 800300a:	bf00      	nop
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	20000e7c 	.word	0x20000e7c
 8003018:	20000008 	.word	0x20000008

0800301c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return uwTick;
 8003020:	4b03      	ldr	r3, [pc, #12]	; (8003030 <HAL_GetTick+0x14>)
 8003022:	681b      	ldr	r3, [r3, #0]
}
 8003024:	4618      	mov	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20000e7c 	.word	0x20000e7c

08003034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800303c:	f7ff ffee 	bl	800301c <HAL_GetTick>
 8003040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304c:	d004      	beq.n	8003058 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800304e:	4b09      	ldr	r3, [pc, #36]	; (8003074 <HAL_Delay+0x40>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4413      	add	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003058:	bf00      	nop
 800305a:	f7ff ffdf 	bl	800301c <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	429a      	cmp	r2, r3
 8003068:	d8f7      	bhi.n	800305a <HAL_Delay+0x26>
  {
  }
}
 800306a:	bf00      	nop
 800306c:	bf00      	nop
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	20000008 	.word	0x20000008

08003078 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003088:	4904      	ldr	r1, [pc, #16]	; (800309c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4313      	orrs	r3, r2
 800308e:	600b      	str	r3, [r1, #0]
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	40010030 	.word	0x40010030

080030a0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80030a8:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f023 0202 	bic.w	r2, r3, #2
 80030b0:	4904      	ldr	r1, [pc, #16]	; (80030c4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	600b      	str	r3, [r1, #0]
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	40010030 	.word	0x40010030

080030c8 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80030ce:	4b0f      	ldr	r3, [pc, #60]	; (800310c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a0e      	ldr	r2, [pc, #56]	; (800310c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80030da:	f7ff ff9f 	bl	800301c <HAL_GetTick>
 80030de:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80030e0:	e008      	b.n	80030f4 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80030e2:	f7ff ff9b 	bl	800301c <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b0a      	cmp	r3, #10
 80030ee:	d901      	bls.n	80030f4 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e006      	b.n	8003102 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0f0      	beq.n	80030e2 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40010030 	.word	0x40010030

08003110 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	609a      	str	r2, [r3, #8]
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	609a      	str	r2, [r3, #8]
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
 8003184:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3360      	adds	r3, #96	; 0x60
 800318a:	461a      	mov	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4b08      	ldr	r3, [pc, #32]	; (80031bc <LL_ADC_SetOffset+0x44>)
 800319a:	4013      	ands	r3, r2
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80031b0:	bf00      	nop
 80031b2:	371c      	adds	r7, #28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	03fff000 	.word	0x03fff000

080031c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3360      	adds	r3, #96	; 0x60
 80031ce:	461a      	mov	r2, r3
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	3360      	adds	r3, #96	; 0x60
 80031fc:	461a      	mov	r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	431a      	orrs	r2, r3
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003222:	b480      	push	{r7}
 8003224:	b087      	sub	sp, #28
 8003226:	af00      	add	r7, sp, #0
 8003228:	60f8      	str	r0, [r7, #12]
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	3360      	adds	r3, #96	; 0x60
 8003232:	461a      	mov	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	431a      	orrs	r2, r3
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800324c:	bf00      	nop
 800324e:	371c      	adds	r7, #28
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	3360      	adds	r3, #96	; 0x60
 8003268:	461a      	mov	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	431a      	orrs	r2, r3
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003282:	bf00      	nop
 8003284:	371c      	adds	r7, #28
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	615a      	str	r2, [r3, #20]
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032da:	b480      	push	{r7}
 80032dc:	b087      	sub	sp, #28
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	3330      	adds	r3, #48	; 0x30
 80032ea:	461a      	mov	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	0a1b      	lsrs	r3, r3, #8
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	4413      	add	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	211f      	movs	r1, #31
 8003306:	fa01 f303 	lsl.w	r3, r1, r3
 800330a:	43db      	mvns	r3, r3
 800330c:	401a      	ands	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	0e9b      	lsrs	r3, r3, #26
 8003312:	f003 011f 	and.w	r1, r3, #31
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	fa01 f303 	lsl.w	r3, r1, r3
 8003320:	431a      	orrs	r2, r3
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003326:	bf00      	nop
 8003328:	371c      	adds	r7, #28
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	3314      	adds	r3, #20
 8003368:	461a      	mov	r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	0e5b      	lsrs	r3, r3, #25
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	4413      	add	r3, r2
 8003376:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	0d1b      	lsrs	r3, r3, #20
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	2107      	movs	r1, #7
 8003386:	fa01 f303 	lsl.w	r3, r1, r3
 800338a:	43db      	mvns	r3, r3
 800338c:	401a      	ands	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	0d1b      	lsrs	r3, r3, #20
 8003392:	f003 031f 	and.w	r3, r3, #31
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	fa01 f303 	lsl.w	r3, r1, r3
 800339c:	431a      	orrs	r2, r3
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80033a2:	bf00      	nop
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a0f      	ldr	r2, [pc, #60]	; (80033fc <LL_ADC_SetChannelSingleDiff+0x4c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d10a      	bne.n	80033da <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d0:	431a      	orrs	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80033d8:	e00a      	b.n	80033f0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e6:	43db      	mvns	r3, r3
 80033e8:	401a      	ands	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80033f0:	bf00      	nop
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	407f0000 	.word	0x407f0000

08003400 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 031f 	and.w	r3, r3, #31
}
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800342c:	4618      	mov	r0, r3
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003448:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6093      	str	r3, [r2, #8]
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800346c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003470:	d101      	bne.n	8003476 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003494:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003498:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034c0:	d101      	bne.n	80034c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034e8:	f043 0201 	orr.w	r2, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800350c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003510:	f043 0202 	orr.w	r2, r3, #2
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <LL_ADC_IsEnabled+0x18>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <LL_ADC_IsEnabled+0x1a>
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b02      	cmp	r3, #2
 800355c:	d101      	bne.n	8003562 <LL_ADC_IsDisableOngoing+0x18>
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <LL_ADC_IsDisableOngoing+0x1a>
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003580:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003584:	f043 0204 	orr.w	r2, r3, #4
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d101      	bne.n	80035b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80035ac:	2301      	movs	r3, #1
 80035ae:	e000      	b.n	80035b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d101      	bne.n	80035d6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035e4:	b590      	push	{r4, r7, lr}
 80035e6:	b089      	sub	sp, #36	; 0x24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ec:	2300      	movs	r3, #0
 80035ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e1af      	b.n	800395e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003608:	2b00      	cmp	r3, #0
 800360a:	d109      	bne.n	8003620 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff f913 	bl	8002838 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff ff19 	bl	800345c <LL_ADC_IsDeepPowerDownEnabled>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d004      	beq.n	800363a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff feff 	bl	8003438 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff ff34 	bl	80034ac <LL_ADC_IsInternalRegulatorEnabled>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d115      	bne.n	8003676 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff ff18 	bl	8003484 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003654:	4b9f      	ldr	r3, [pc, #636]	; (80038d4 <HAL_ADC_Init+0x2f0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	099b      	lsrs	r3, r3, #6
 800365a:	4a9f      	ldr	r2, [pc, #636]	; (80038d8 <HAL_ADC_Init+0x2f4>)
 800365c:	fba2 2303 	umull	r2, r3, r2, r3
 8003660:	099b      	lsrs	r3, r3, #6
 8003662:	3301      	adds	r3, #1
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003668:	e002      	b.n	8003670 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	3b01      	subs	r3, #1
 800366e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f9      	bne.n	800366a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff ff16 	bl	80034ac <LL_ADC_IsInternalRegulatorEnabled>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10d      	bne.n	80036a2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368a:	f043 0210 	orr.w	r2, r3, #16
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003696:	f043 0201 	orr.w	r2, r3, #1
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff ff76 	bl	8003598 <LL_ADC_REG_IsConversionOngoing>
 80036ac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f040 8148 	bne.w	800394c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f040 8144 	bne.w	800394c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80036cc:	f043 0202 	orr.w	r2, r3, #2
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff ff23 	bl	8003524 <LL_ADC_IsEnabled>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d141      	bne.n	8003768 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036ec:	d004      	beq.n	80036f8 <HAL_ADC_Init+0x114>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a7a      	ldr	r2, [pc, #488]	; (80038dc <HAL_ADC_Init+0x2f8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d10f      	bne.n	8003718 <HAL_ADC_Init+0x134>
 80036f8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80036fc:	f7ff ff12 	bl	8003524 <LL_ADC_IsEnabled>
 8003700:	4604      	mov	r4, r0
 8003702:	4876      	ldr	r0, [pc, #472]	; (80038dc <HAL_ADC_Init+0x2f8>)
 8003704:	f7ff ff0e 	bl	8003524 <LL_ADC_IsEnabled>
 8003708:	4603      	mov	r3, r0
 800370a:	4323      	orrs	r3, r4
 800370c:	2b00      	cmp	r3, #0
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	e012      	b.n	800373e <HAL_ADC_Init+0x15a>
 8003718:	4871      	ldr	r0, [pc, #452]	; (80038e0 <HAL_ADC_Init+0x2fc>)
 800371a:	f7ff ff03 	bl	8003524 <LL_ADC_IsEnabled>
 800371e:	4604      	mov	r4, r0
 8003720:	4870      	ldr	r0, [pc, #448]	; (80038e4 <HAL_ADC_Init+0x300>)
 8003722:	f7ff feff 	bl	8003524 <LL_ADC_IsEnabled>
 8003726:	4603      	mov	r3, r0
 8003728:	431c      	orrs	r4, r3
 800372a:	486f      	ldr	r0, [pc, #444]	; (80038e8 <HAL_ADC_Init+0x304>)
 800372c:	f7ff fefa 	bl	8003524 <LL_ADC_IsEnabled>
 8003730:	4603      	mov	r3, r0
 8003732:	4323      	orrs	r3, r4
 8003734:	2b00      	cmp	r3, #0
 8003736:	bf0c      	ite	eq
 8003738:	2301      	moveq	r3, #1
 800373a:	2300      	movne	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d012      	beq.n	8003768 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800374a:	d004      	beq.n	8003756 <HAL_ADC_Init+0x172>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a62      	ldr	r2, [pc, #392]	; (80038dc <HAL_ADC_Init+0x2f8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <HAL_ADC_Init+0x176>
 8003756:	4a65      	ldr	r2, [pc, #404]	; (80038ec <HAL_ADC_Init+0x308>)
 8003758:	e000      	b.n	800375c <HAL_ADC_Init+0x178>
 800375a:	4a65      	ldr	r2, [pc, #404]	; (80038f0 <HAL_ADC_Init+0x30c>)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	4619      	mov	r1, r3
 8003762:	4610      	mov	r0, r2
 8003764:	f7ff fcd4 	bl	8003110 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	7f5b      	ldrb	r3, [r3, #29]
 800376c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003772:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003778:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800377e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003786:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003788:	4313      	orrs	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003792:	2b01      	cmp	r3, #1
 8003794:	d106      	bne.n	80037a4 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	3b01      	subs	r3, #1
 800379c:	045b      	lsls	r3, r3, #17
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d009      	beq.n	80037c0 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	4b4b      	ldr	r3, [pc, #300]	; (80038f4 <HAL_ADC_Init+0x310>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	69b9      	ldr	r1, [r7, #24]
 80037d0:	430b      	orrs	r3, r1
 80037d2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fed2 	bl	8003598 <LL_ADC_REG_IsConversionOngoing>
 80037f4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fedf 	bl	80035be <LL_ADC_INJ_IsConversionOngoing>
 8003800:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d17f      	bne.n	8003908 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d17c      	bne.n	8003908 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003812:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800381a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800381c:	4313      	orrs	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800382a:	f023 0302 	bic.w	r3, r3, #2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	69b9      	ldr	r1, [r7, #24]
 8003834:	430b      	orrs	r3, r1
 8003836:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d017      	beq.n	8003870 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691a      	ldr	r2, [r3, #16]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800384e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003858:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800385c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6911      	ldr	r1, [r2, #16]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	430b      	orrs	r3, r1
 800386a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800386e:	e013      	b.n	8003898 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691a      	ldr	r2, [r3, #16]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800387e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6812      	ldr	r2, [r2, #0]
 800388c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003890:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003894:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d12a      	bne.n	80038f8 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80038ac:	f023 0304 	bic.w	r3, r3, #4
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80038b8:	4311      	orrs	r1, r2
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80038be:	4311      	orrs	r1, r2
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038c4:	430a      	orrs	r2, r1
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0201 	orr.w	r2, r2, #1
 80038d0:	611a      	str	r2, [r3, #16]
 80038d2:	e019      	b.n	8003908 <HAL_ADC_Init+0x324>
 80038d4:	20000000 	.word	0x20000000
 80038d8:	053e2d63 	.word	0x053e2d63
 80038dc:	50000100 	.word	0x50000100
 80038e0:	50000400 	.word	0x50000400
 80038e4:	50000500 	.word	0x50000500
 80038e8:	50000600 	.word	0x50000600
 80038ec:	50000300 	.word	0x50000300
 80038f0:	50000700 	.word	0x50000700
 80038f4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691a      	ldr	r2, [r3, #16]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0201 	bic.w	r2, r2, #1
 8003906:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d10c      	bne.n	800392a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	f023 010f 	bic.w	r1, r3, #15
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	1e5a      	subs	r2, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
 8003928:	e007      	b.n	800393a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 020f 	bic.w	r2, r2, #15
 8003938:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393e:	f023 0303 	bic.w	r3, r3, #3
 8003942:	f043 0201 	orr.w	r2, r3, #1
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	65da      	str	r2, [r3, #92]	; 0x5c
 800394a:	e007      	b.n	800395c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003950:	f043 0210 	orr.w	r2, r3, #16
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800395c:	7ffb      	ldrb	r3, [r7, #31]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3724      	adds	r7, #36	; 0x24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd90      	pop	{r4, r7, pc}
 8003966:	bf00      	nop

08003968 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003978:	d004      	beq.n	8003984 <HAL_ADC_Start+0x1c>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a67      	ldr	r2, [pc, #412]	; (8003b1c <HAL_ADC_Start+0x1b4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d101      	bne.n	8003988 <HAL_ADC_Start+0x20>
 8003984:	4b66      	ldr	r3, [pc, #408]	; (8003b20 <HAL_ADC_Start+0x1b8>)
 8003986:	e000      	b.n	800398a <HAL_ADC_Start+0x22>
 8003988:	4b66      	ldr	r3, [pc, #408]	; (8003b24 <HAL_ADC_Start+0x1bc>)
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff fd38 	bl	8003400 <LL_ADC_GetMultimode>
 8003990:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff fdfe 	bl	8003598 <LL_ADC_REG_IsConversionOngoing>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f040 80b4 	bne.w	8003b0c <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_ADC_Start+0x4a>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e0af      	b.n	8003b12 <HAL_ADC_Start+0x1aa>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f001 f854 	bl	8004a68 <ADC_Enable>
 80039c0:	4603      	mov	r3, r0
 80039c2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80039c4:	7dfb      	ldrb	r3, [r7, #23]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f040 809b 	bne.w	8003b02 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039d4:	f023 0301 	bic.w	r3, r3, #1
 80039d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a4d      	ldr	r2, [pc, #308]	; (8003b1c <HAL_ADC_Start+0x1b4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d009      	beq.n	80039fe <HAL_ADC_Start+0x96>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a4e      	ldr	r2, [pc, #312]	; (8003b28 <HAL_ADC_Start+0x1c0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d002      	beq.n	80039fa <HAL_ADC_Start+0x92>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	e003      	b.n	8003a02 <HAL_ADC_Start+0x9a>
 80039fa:	4b4c      	ldr	r3, [pc, #304]	; (8003b2c <HAL_ADC_Start+0x1c4>)
 80039fc:	e001      	b.n	8003a02 <HAL_ADC_Start+0x9a>
 80039fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d002      	beq.n	8003a10 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d105      	bne.n	8003a1c <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a14:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a28:	d106      	bne.n	8003a38 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2e:	f023 0206 	bic.w	r2, r3, #6
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	661a      	str	r2, [r3, #96]	; 0x60
 8003a36:	e002      	b.n	8003a3e <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	221c      	movs	r2, #28
 8003a44:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a32      	ldr	r2, [pc, #200]	; (8003b1c <HAL_ADC_Start+0x1b4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d009      	beq.n	8003a6c <HAL_ADC_Start+0x104>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a32      	ldr	r2, [pc, #200]	; (8003b28 <HAL_ADC_Start+0x1c0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d002      	beq.n	8003a68 <HAL_ADC_Start+0x100>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	e003      	b.n	8003a70 <HAL_ADC_Start+0x108>
 8003a68:	4b30      	ldr	r3, [pc, #192]	; (8003b2c <HAL_ADC_Start+0x1c4>)
 8003a6a:	e001      	b.n	8003a70 <HAL_ADC_Start+0x108>
 8003a6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d008      	beq.n	8003a8a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d005      	beq.n	8003a8a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	2b05      	cmp	r3, #5
 8003a82:	d002      	beq.n	8003a8a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	2b09      	cmp	r3, #9
 8003a88:	d114      	bne.n	8003ab4 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d007      	beq.n	8003aa8 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003aa0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff fd5f 	bl	8003570 <LL_ADC_REG_StartConversion>
 8003ab2:	e02d      	b.n	8003b10 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a15      	ldr	r2, [pc, #84]	; (8003b1c <HAL_ADC_Start+0x1b4>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d009      	beq.n	8003ade <HAL_ADC_Start+0x176>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a16      	ldr	r2, [pc, #88]	; (8003b28 <HAL_ADC_Start+0x1c0>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d002      	beq.n	8003ada <HAL_ADC_Start+0x172>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	e003      	b.n	8003ae2 <HAL_ADC_Start+0x17a>
 8003ada:	4b14      	ldr	r3, [pc, #80]	; (8003b2c <HAL_ADC_Start+0x1c4>)
 8003adc:	e001      	b.n	8003ae2 <HAL_ADC_Start+0x17a>
 8003ade:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ae2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00f      	beq.n	8003b10 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003af8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b00:	e006      	b.n	8003b10 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003b0a:	e001      	b.n	8003b10 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	50000100 	.word	0x50000100
 8003b20:	50000300 	.word	0x50000300
 8003b24:	50000700 	.word	0x50000700
 8003b28:	50000500 	.word	0x50000500
 8003b2c:	50000400 	.word	0x50000400

08003b30 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b44:	d004      	beq.n	8003b50 <HAL_ADC_Start_DMA+0x20>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a5a      	ldr	r2, [pc, #360]	; (8003cb4 <HAL_ADC_Start_DMA+0x184>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d101      	bne.n	8003b54 <HAL_ADC_Start_DMA+0x24>
 8003b50:	4b59      	ldr	r3, [pc, #356]	; (8003cb8 <HAL_ADC_Start_DMA+0x188>)
 8003b52:	e000      	b.n	8003b56 <HAL_ADC_Start_DMA+0x26>
 8003b54:	4b59      	ldr	r3, [pc, #356]	; (8003cbc <HAL_ADC_Start_DMA+0x18c>)
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff fc52 	bl	8003400 <LL_ADC_GetMultimode>
 8003b5c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff fd18 	bl	8003598 <LL_ADC_REG_IsConversionOngoing>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f040 809b 	bne.w	8003ca6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_ADC_Start_DMA+0x4e>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e096      	b.n	8003cac <HAL_ADC_Start_DMA+0x17c>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a4d      	ldr	r2, [pc, #308]	; (8003cc0 <HAL_ADC_Start_DMA+0x190>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d008      	beq.n	8003ba2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d005      	beq.n	8003ba2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	2b05      	cmp	r3, #5
 8003b9a:	d002      	beq.n	8003ba2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	2b09      	cmp	r3, #9
 8003ba0:	d17a      	bne.n	8003c98 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 ff60 	bl	8004a68 <ADC_Enable>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d16d      	bne.n	8003c8e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003bba:	f023 0301 	bic.w	r3, r3, #1
 8003bbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a3a      	ldr	r2, [pc, #232]	; (8003cb4 <HAL_ADC_Start_DMA+0x184>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d009      	beq.n	8003be4 <HAL_ADC_Start_DMA+0xb4>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a3b      	ldr	r2, [pc, #236]	; (8003cc4 <HAL_ADC_Start_DMA+0x194>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d002      	beq.n	8003be0 <HAL_ADC_Start_DMA+0xb0>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	e003      	b.n	8003be8 <HAL_ADC_Start_DMA+0xb8>
 8003be0:	4b39      	ldr	r3, [pc, #228]	; (8003cc8 <HAL_ADC_Start_DMA+0x198>)
 8003be2:	e001      	b.n	8003be8 <HAL_ADC_Start_DMA+0xb8>
 8003be4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	6812      	ldr	r2, [r2, #0]
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d002      	beq.n	8003bf6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d105      	bne.n	8003c02 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d006      	beq.n	8003c1c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c12:	f023 0206 	bic.w	r2, r3, #6
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	661a      	str	r2, [r3, #96]	; 0x60
 8003c1a:	e002      	b.n	8003c22 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c26:	4a29      	ldr	r2, [pc, #164]	; (8003ccc <HAL_ADC_Start_DMA+0x19c>)
 8003c28:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2e:	4a28      	ldr	r2, [pc, #160]	; (8003cd0 <HAL_ADC_Start_DMA+0x1a0>)
 8003c30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c36:	4a27      	ldr	r2, [pc, #156]	; (8003cd4 <HAL_ADC_Start_DMA+0x1a4>)
 8003c38:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	221c      	movs	r2, #28
 8003c40:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f042 0210 	orr.w	r2, r2, #16
 8003c58:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0201 	orr.w	r2, r2, #1
 8003c68:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3340      	adds	r3, #64	; 0x40
 8003c74:	4619      	mov	r1, r3
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f001 fbf1 	bl	8005460 <HAL_DMA_Start_IT>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff fc72 	bl	8003570 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003c8c:	e00d      	b.n	8003caa <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003c96:	e008      	b.n	8003caa <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003ca4:	e001      	b.n	8003caa <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	50000100 	.word	0x50000100
 8003cb8:	50000300 	.word	0x50000300
 8003cbc:	50000700 	.word	0x50000700
 8003cc0:	50000600 	.word	0x50000600
 8003cc4:	50000500 	.word	0x50000500
 8003cc8:	50000400 	.word	0x50000400
 8003ccc:	08004beb 	.word	0x08004beb
 8003cd0:	08004cc3 	.word	0x08004cc3
 8003cd4:	08004cdf 	.word	0x08004cdf

08003cd8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08a      	sub	sp, #40	; 0x28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cfc:	d004      	beq.n	8003d08 <HAL_ADC_IRQHandler+0x30>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a8e      	ldr	r2, [pc, #568]	; (8003f3c <HAL_ADC_IRQHandler+0x264>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d101      	bne.n	8003d0c <HAL_ADC_IRQHandler+0x34>
 8003d08:	4b8d      	ldr	r3, [pc, #564]	; (8003f40 <HAL_ADC_IRQHandler+0x268>)
 8003d0a:	e000      	b.n	8003d0e <HAL_ADC_IRQHandler+0x36>
 8003d0c:	4b8d      	ldr	r3, [pc, #564]	; (8003f44 <HAL_ADC_IRQHandler+0x26c>)
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff fb76 	bl	8003400 <LL_ADC_GetMultimode>
 8003d14:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d017      	beq.n	8003d50 <HAL_ADC_IRQHandler+0x78>
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d012      	beq.n	8003d50 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2e:	f003 0310 	and.w	r3, r3, #16
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d105      	bne.n	8003d42 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f001 f8c2 	bl	8004ecc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d004      	beq.n	8003d64 <HAL_ADC_IRQHandler+0x8c>
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10b      	bne.n	8003d7c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 8094 	beq.w	8003e98 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 808e 	beq.w	8003e98 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d80:	f003 0310 	and.w	r3, r3, #16
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d105      	bne.n	8003d94 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff fa8b 	bl	80032b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d072      	beq.n	8003e8a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a64      	ldr	r2, [pc, #400]	; (8003f3c <HAL_ADC_IRQHandler+0x264>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d009      	beq.n	8003dc2 <HAL_ADC_IRQHandler+0xea>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a65      	ldr	r2, [pc, #404]	; (8003f48 <HAL_ADC_IRQHandler+0x270>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d002      	beq.n	8003dbe <HAL_ADC_IRQHandler+0xe6>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	e003      	b.n	8003dc6 <HAL_ADC_IRQHandler+0xee>
 8003dbe:	4b63      	ldr	r3, [pc, #396]	; (8003f4c <HAL_ADC_IRQHandler+0x274>)
 8003dc0:	e001      	b.n	8003dc6 <HAL_ADC_IRQHandler+0xee>
 8003dc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6812      	ldr	r2, [r2, #0]
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d008      	beq.n	8003de0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	2b05      	cmp	r3, #5
 8003dd8:	d002      	beq.n	8003de0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2b09      	cmp	r3, #9
 8003dde:	d104      	bne.n	8003dea <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	623b      	str	r3, [r7, #32]
 8003de8:	e014      	b.n	8003e14 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a53      	ldr	r2, [pc, #332]	; (8003f3c <HAL_ADC_IRQHandler+0x264>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d009      	beq.n	8003e08 <HAL_ADC_IRQHandler+0x130>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a53      	ldr	r2, [pc, #332]	; (8003f48 <HAL_ADC_IRQHandler+0x270>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d002      	beq.n	8003e04 <HAL_ADC_IRQHandler+0x12c>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	e003      	b.n	8003e0c <HAL_ADC_IRQHandler+0x134>
 8003e04:	4b51      	ldr	r3, [pc, #324]	; (8003f4c <HAL_ADC_IRQHandler+0x274>)
 8003e06:	e001      	b.n	8003e0c <HAL_ADC_IRQHandler+0x134>
 8003e08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e0c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d135      	bne.n	8003e8a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d12e      	bne.n	8003e8a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff fbb1 	bl	8003598 <LL_ADC_REG_IsConversionOngoing>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d11a      	bne.n	8003e72 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 020c 	bic.w	r2, r2, #12
 8003e4a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d112      	bne.n	8003e8a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e68:	f043 0201 	orr.w	r2, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e70:	e00b      	b.n	8003e8a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e76:	f043 0210 	orr.w	r2, r3, #16
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e82:	f043 0201 	orr.w	r2, r3, #1
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f984 	bl	8004198 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	220c      	movs	r2, #12
 8003e96:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d004      	beq.n	8003eac <HAL_ADC_IRQHandler+0x1d4>
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10b      	bne.n	8003ec4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 80b3 	beq.w	800401e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 80ad 	beq.w	800401e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d105      	bne.n	8003edc <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff fa26 	bl	8003332 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003ee6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff f9e1 	bl	80032b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ef2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a10      	ldr	r2, [pc, #64]	; (8003f3c <HAL_ADC_IRQHandler+0x264>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d009      	beq.n	8003f12 <HAL_ADC_IRQHandler+0x23a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a11      	ldr	r2, [pc, #68]	; (8003f48 <HAL_ADC_IRQHandler+0x270>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d002      	beq.n	8003f0e <HAL_ADC_IRQHandler+0x236>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	e003      	b.n	8003f16 <HAL_ADC_IRQHandler+0x23e>
 8003f0e:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <HAL_ADC_IRQHandler+0x274>)
 8003f10:	e001      	b.n	8003f16 <HAL_ADC_IRQHandler+0x23e>
 8003f12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d008      	beq.n	8003f30 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2b06      	cmp	r3, #6
 8003f28:	d002      	beq.n	8003f30 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2b07      	cmp	r3, #7
 8003f2e:	d10f      	bne.n	8003f50 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	623b      	str	r3, [r7, #32]
 8003f38:	e01f      	b.n	8003f7a <HAL_ADC_IRQHandler+0x2a2>
 8003f3a:	bf00      	nop
 8003f3c:	50000100 	.word	0x50000100
 8003f40:	50000300 	.word	0x50000300
 8003f44:	50000700 	.word	0x50000700
 8003f48:	50000500 	.word	0x50000500
 8003f4c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a8b      	ldr	r2, [pc, #556]	; (8004184 <HAL_ADC_IRQHandler+0x4ac>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d009      	beq.n	8003f6e <HAL_ADC_IRQHandler+0x296>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a8a      	ldr	r2, [pc, #552]	; (8004188 <HAL_ADC_IRQHandler+0x4b0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d002      	beq.n	8003f6a <HAL_ADC_IRQHandler+0x292>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	e003      	b.n	8003f72 <HAL_ADC_IRQHandler+0x29a>
 8003f6a:	4b88      	ldr	r3, [pc, #544]	; (800418c <HAL_ADC_IRQHandler+0x4b4>)
 8003f6c:	e001      	b.n	8003f72 <HAL_ADC_IRQHandler+0x29a>
 8003f6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003f72:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d047      	beq.n	8004010 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d007      	beq.n	8003f9a <HAL_ADC_IRQHandler+0x2c2>
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d03f      	beq.n	8004010 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d13a      	bne.n	8004010 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa4:	2b40      	cmp	r3, #64	; 0x40
 8003fa6:	d133      	bne.n	8004010 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d12e      	bne.n	8004010 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff fb01 	bl	80035be <LL_ADC_INJ_IsConversionOngoing>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d11a      	bne.n	8003ff8 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fd0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d112      	bne.n	8004010 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fee:	f043 0201 	orr.w	r2, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ff6:	e00b      	b.n	8004010 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffc:	f043 0210 	orr.w	r2, r3, #16
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004008:	f043 0201 	orr.w	r2, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 ff33 	bl	8004e7c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2260      	movs	r2, #96	; 0x60
 800401c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004024:	2b00      	cmp	r3, #0
 8004026:	d011      	beq.n	800404c <HAL_ADC_IRQHandler+0x374>
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00c      	beq.n	800404c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004036:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f8be 	bl	80041c0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2280      	movs	r2, #128	; 0x80
 800404a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004052:	2b00      	cmp	r3, #0
 8004054:	d012      	beq.n	800407c <HAL_ADC_IRQHandler+0x3a4>
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004064:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 ff19 	bl	8004ea4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f44f 7280 	mov.w	r2, #256	; 0x100
 800407a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004082:	2b00      	cmp	r3, #0
 8004084:	d012      	beq.n	80040ac <HAL_ADC_IRQHandler+0x3d4>
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00d      	beq.n	80040ac <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004094:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 ff0b 	bl	8004eb8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d043      	beq.n	800413e <HAL_ADC_IRQHandler+0x466>
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	f003 0310 	and.w	r3, r3, #16
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d03e      	beq.n	800413e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d102      	bne.n	80040ce <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80040c8:	2301      	movs	r3, #1
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
 80040cc:	e021      	b.n	8004112 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d015      	beq.n	8004100 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040dc:	d004      	beq.n	80040e8 <HAL_ADC_IRQHandler+0x410>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a28      	ldr	r2, [pc, #160]	; (8004184 <HAL_ADC_IRQHandler+0x4ac>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d101      	bne.n	80040ec <HAL_ADC_IRQHandler+0x414>
 80040e8:	4b29      	ldr	r3, [pc, #164]	; (8004190 <HAL_ADC_IRQHandler+0x4b8>)
 80040ea:	e000      	b.n	80040ee <HAL_ADC_IRQHandler+0x416>
 80040ec:	4b29      	ldr	r3, [pc, #164]	; (8004194 <HAL_ADC_IRQHandler+0x4bc>)
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff f994 	bl	800341c <LL_ADC_GetMultiDMATransfer>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00b      	beq.n	8004112 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80040fa:	2301      	movs	r3, #1
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
 80040fe:	e008      	b.n	8004112 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800410e:	2301      	movs	r3, #1
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	2b01      	cmp	r3, #1
 8004116:	d10e      	bne.n	8004136 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004128:	f043 0202 	orr.w	r2, r3, #2
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f84f 	bl	80041d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2210      	movs	r2, #16
 800413c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004144:	2b00      	cmp	r3, #0
 8004146:	d018      	beq.n	800417a <HAL_ADC_IRQHandler+0x4a2>
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414e:	2b00      	cmp	r3, #0
 8004150:	d013      	beq.n	800417a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004156:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004162:	f043 0208 	orr.w	r2, r3, #8
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004172:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 fe8b 	bl	8004e90 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800417a:	bf00      	nop
 800417c:	3728      	adds	r7, #40	; 0x28
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	50000100 	.word	0x50000100
 8004188:	50000500 	.word	0x50000500
 800418c:	50000400 	.word	0x50000400
 8004190:	50000300 	.word	0x50000300
 8004194:	50000700 	.word	0x50000700

08004198 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b0b6      	sub	sp, #216	; 0xd8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004202:	2b01      	cmp	r3, #1
 8004204:	d102      	bne.n	800420c <HAL_ADC_ConfigChannel+0x24>
 8004206:	2302      	movs	r3, #2
 8004208:	f000 bc13 	b.w	8004a32 <HAL_ADC_ConfigChannel+0x84a>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff f9bd 	bl	8003598 <LL_ADC_REG_IsConversionOngoing>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	f040 83f3 	bne.w	8004a0c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	6859      	ldr	r1, [r3, #4]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	f7ff f851 	bl	80032da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff f9ab 	bl	8003598 <LL_ADC_REG_IsConversionOngoing>
 8004242:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff f9b7 	bl	80035be <LL_ADC_INJ_IsConversionOngoing>
 8004250:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004254:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004258:	2b00      	cmp	r3, #0
 800425a:	f040 81d9 	bne.w	8004610 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800425e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004262:	2b00      	cmp	r3, #0
 8004264:	f040 81d4 	bne.w	8004610 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004270:	d10f      	bne.n	8004292 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6818      	ldr	r0, [r3, #0]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2200      	movs	r2, #0
 800427c:	4619      	mov	r1, r3
 800427e:	f7ff f86b 	bl	8003358 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800428a:	4618      	mov	r0, r3
 800428c:	f7fe ffff 	bl	800328e <LL_ADC_SetSamplingTimeCommonConfig>
 8004290:	e00e      	b.n	80042b0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6818      	ldr	r0, [r3, #0]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	6819      	ldr	r1, [r3, #0]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	461a      	mov	r2, r3
 80042a0:	f7ff f85a 	bl	8003358 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2100      	movs	r1, #0
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fe ffef 	bl	800328e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	695a      	ldr	r2, [r3, #20]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	08db      	lsrs	r3, r3, #3
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d022      	beq.n	8004318 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	6919      	ldr	r1, [r3, #16]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042e2:	f7fe ff49 	bl	8003178 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6919      	ldr	r1, [r3, #16]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	461a      	mov	r2, r3
 80042f4:	f7fe ff95 	bl	8003222 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6818      	ldr	r0, [r3, #0]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	6919      	ldr	r1, [r3, #16]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	7f1b      	ldrb	r3, [r3, #28]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d102      	bne.n	800430e <HAL_ADC_ConfigChannel+0x126>
 8004308:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800430c:	e000      	b.n	8004310 <HAL_ADC_ConfigChannel+0x128>
 800430e:	2300      	movs	r3, #0
 8004310:	461a      	mov	r2, r3
 8004312:	f7fe ffa1 	bl	8003258 <LL_ADC_SetOffsetSaturation>
 8004316:	e17b      	b.n	8004610 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2100      	movs	r1, #0
 800431e:	4618      	mov	r0, r3
 8004320:	f7fe ff4e 	bl	80031c0 <LL_ADC_GetOffsetChannel>
 8004324:	4603      	mov	r3, r0
 8004326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10a      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x15c>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2100      	movs	r1, #0
 8004334:	4618      	mov	r0, r3
 8004336:	f7fe ff43 	bl	80031c0 <LL_ADC_GetOffsetChannel>
 800433a:	4603      	mov	r3, r0
 800433c:	0e9b      	lsrs	r3, r3, #26
 800433e:	f003 021f 	and.w	r2, r3, #31
 8004342:	e01e      	b.n	8004382 <HAL_ADC_ConfigChannel+0x19a>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2100      	movs	r1, #0
 800434a:	4618      	mov	r0, r3
 800434c:	f7fe ff38 	bl	80031c0 <LL_ADC_GetOffsetChannel>
 8004350:	4603      	mov	r3, r0
 8004352:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004356:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800435a:	fa93 f3a3 	rbit	r3, r3
 800435e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004362:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004366:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800436a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004372:	2320      	movs	r3, #32
 8004374:	e004      	b.n	8004380 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004376:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800437a:	fab3 f383 	clz	r3, r3
 800437e:	b2db      	uxtb	r3, r3
 8004380:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800438a:	2b00      	cmp	r3, #0
 800438c:	d105      	bne.n	800439a <HAL_ADC_ConfigChannel+0x1b2>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	0e9b      	lsrs	r3, r3, #26
 8004394:	f003 031f 	and.w	r3, r3, #31
 8004398:	e018      	b.n	80043cc <HAL_ADC_ConfigChannel+0x1e4>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80043a6:	fa93 f3a3 	rbit	r3, r3
 80043aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80043ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80043b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80043be:	2320      	movs	r3, #32
 80043c0:	e004      	b.n	80043cc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80043c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80043c6:	fab3 f383 	clz	r3, r3
 80043ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d106      	bne.n	80043de <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2200      	movs	r2, #0
 80043d6:	2100      	movs	r1, #0
 80043d8:	4618      	mov	r0, r3
 80043da:	f7fe ff07 	bl	80031ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2101      	movs	r1, #1
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fe feeb 	bl	80031c0 <LL_ADC_GetOffsetChannel>
 80043ea:	4603      	mov	r3, r0
 80043ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10a      	bne.n	800440a <HAL_ADC_ConfigChannel+0x222>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2101      	movs	r1, #1
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fe fee0 	bl	80031c0 <LL_ADC_GetOffsetChannel>
 8004400:	4603      	mov	r3, r0
 8004402:	0e9b      	lsrs	r3, r3, #26
 8004404:	f003 021f 	and.w	r2, r3, #31
 8004408:	e01e      	b.n	8004448 <HAL_ADC_ConfigChannel+0x260>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2101      	movs	r1, #1
 8004410:	4618      	mov	r0, r3
 8004412:	f7fe fed5 	bl	80031c0 <LL_ADC_GetOffsetChannel>
 8004416:	4603      	mov	r3, r0
 8004418:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004420:	fa93 f3a3 	rbit	r3, r3
 8004424:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004428:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800442c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004430:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004438:	2320      	movs	r3, #32
 800443a:	e004      	b.n	8004446 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800443c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004440:	fab3 f383 	clz	r3, r3
 8004444:	b2db      	uxtb	r3, r3
 8004446:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004450:	2b00      	cmp	r3, #0
 8004452:	d105      	bne.n	8004460 <HAL_ADC_ConfigChannel+0x278>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	0e9b      	lsrs	r3, r3, #26
 800445a:	f003 031f 	and.w	r3, r3, #31
 800445e:	e018      	b.n	8004492 <HAL_ADC_ConfigChannel+0x2aa>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004468:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800446c:	fa93 f3a3 	rbit	r3, r3
 8004470:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004474:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004478:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800447c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004484:	2320      	movs	r3, #32
 8004486:	e004      	b.n	8004492 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004488:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800448c:	fab3 f383 	clz	r3, r3
 8004490:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004492:	429a      	cmp	r2, r3
 8004494:	d106      	bne.n	80044a4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2200      	movs	r2, #0
 800449c:	2101      	movs	r1, #1
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fe fea4 	bl	80031ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2102      	movs	r1, #2
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fe fe88 	bl	80031c0 <LL_ADC_GetOffsetChannel>
 80044b0:	4603      	mov	r3, r0
 80044b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10a      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x2e8>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2102      	movs	r1, #2
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fe fe7d 	bl	80031c0 <LL_ADC_GetOffsetChannel>
 80044c6:	4603      	mov	r3, r0
 80044c8:	0e9b      	lsrs	r3, r3, #26
 80044ca:	f003 021f 	and.w	r2, r3, #31
 80044ce:	e01e      	b.n	800450e <HAL_ADC_ConfigChannel+0x326>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2102      	movs	r1, #2
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fe fe72 	bl	80031c0 <LL_ADC_GetOffsetChannel>
 80044dc:	4603      	mov	r3, r0
 80044de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044e6:	fa93 f3a3 	rbit	r3, r3
 80044ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80044ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80044f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80044fe:	2320      	movs	r3, #32
 8004500:	e004      	b.n	800450c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004502:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004506:	fab3 f383 	clz	r3, r3
 800450a:	b2db      	uxtb	r3, r3
 800450c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004516:	2b00      	cmp	r3, #0
 8004518:	d105      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x33e>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	0e9b      	lsrs	r3, r3, #26
 8004520:	f003 031f 	and.w	r3, r3, #31
 8004524:	e016      	b.n	8004554 <HAL_ADC_ConfigChannel+0x36c>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004532:	fa93 f3a3 	rbit	r3, r3
 8004536:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004538:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800453a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800453e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004546:	2320      	movs	r3, #32
 8004548:	e004      	b.n	8004554 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800454a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800454e:	fab3 f383 	clz	r3, r3
 8004552:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004554:	429a      	cmp	r2, r3
 8004556:	d106      	bne.n	8004566 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2200      	movs	r2, #0
 800455e:	2102      	movs	r1, #2
 8004560:	4618      	mov	r0, r3
 8004562:	f7fe fe43 	bl	80031ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2103      	movs	r1, #3
 800456c:	4618      	mov	r0, r3
 800456e:	f7fe fe27 	bl	80031c0 <LL_ADC_GetOffsetChannel>
 8004572:	4603      	mov	r3, r0
 8004574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10a      	bne.n	8004592 <HAL_ADC_ConfigChannel+0x3aa>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2103      	movs	r1, #3
 8004582:	4618      	mov	r0, r3
 8004584:	f7fe fe1c 	bl	80031c0 <LL_ADC_GetOffsetChannel>
 8004588:	4603      	mov	r3, r0
 800458a:	0e9b      	lsrs	r3, r3, #26
 800458c:	f003 021f 	and.w	r2, r3, #31
 8004590:	e017      	b.n	80045c2 <HAL_ADC_ConfigChannel+0x3da>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2103      	movs	r1, #3
 8004598:	4618      	mov	r0, r3
 800459a:	f7fe fe11 	bl	80031c0 <LL_ADC_GetOffsetChannel>
 800459e:	4603      	mov	r3, r0
 80045a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a4:	fa93 f3a3 	rbit	r3, r3
 80045a8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80045aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045ac:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80045ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80045b4:	2320      	movs	r3, #32
 80045b6:	e003      	b.n	80045c0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80045b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045ba:	fab3 f383 	clz	r3, r3
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d105      	bne.n	80045da <HAL_ADC_ConfigChannel+0x3f2>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	0e9b      	lsrs	r3, r3, #26
 80045d4:	f003 031f 	and.w	r3, r3, #31
 80045d8:	e011      	b.n	80045fe <HAL_ADC_ConfigChannel+0x416>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045e2:	fa93 f3a3 	rbit	r3, r3
 80045e6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80045e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80045ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80045f2:	2320      	movs	r3, #32
 80045f4:	e003      	b.n	80045fe <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80045f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045f8:	fab3 f383 	clz	r3, r3
 80045fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80045fe:	429a      	cmp	r2, r3
 8004600:	d106      	bne.n	8004610 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2200      	movs	r2, #0
 8004608:	2103      	movs	r1, #3
 800460a:	4618      	mov	r0, r3
 800460c:	f7fe fdee 	bl	80031ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f7fe ff85 	bl	8003524 <LL_ADC_IsEnabled>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	f040 813d 	bne.w	800489c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	6819      	ldr	r1, [r3, #0]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	461a      	mov	r2, r3
 8004630:	f7fe febe 	bl	80033b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	4aa2      	ldr	r2, [pc, #648]	; (80048c4 <HAL_ADC_ConfigChannel+0x6dc>)
 800463a:	4293      	cmp	r3, r2
 800463c:	f040 812e 	bne.w	800489c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10b      	bne.n	8004668 <HAL_ADC_ConfigChannel+0x480>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	0e9b      	lsrs	r3, r3, #26
 8004656:	3301      	adds	r3, #1
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	2b09      	cmp	r3, #9
 800465e:	bf94      	ite	ls
 8004660:	2301      	movls	r3, #1
 8004662:	2300      	movhi	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	e019      	b.n	800469c <HAL_ADC_ConfigChannel+0x4b4>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004670:	fa93 f3a3 	rbit	r3, r3
 8004674:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004676:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004678:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800467a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004680:	2320      	movs	r3, #32
 8004682:	e003      	b.n	800468c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004684:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004686:	fab3 f383 	clz	r3, r3
 800468a:	b2db      	uxtb	r3, r3
 800468c:	3301      	adds	r3, #1
 800468e:	f003 031f 	and.w	r3, r3, #31
 8004692:	2b09      	cmp	r3, #9
 8004694:	bf94      	ite	ls
 8004696:	2301      	movls	r3, #1
 8004698:	2300      	movhi	r3, #0
 800469a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800469c:	2b00      	cmp	r3, #0
 800469e:	d079      	beq.n	8004794 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d107      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x4d4>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	0e9b      	lsrs	r3, r3, #26
 80046b2:	3301      	adds	r3, #1
 80046b4:	069b      	lsls	r3, r3, #26
 80046b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046ba:	e015      	b.n	80046e8 <HAL_ADC_ConfigChannel+0x500>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046c4:	fa93 f3a3 	rbit	r3, r3
 80046c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80046ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80046ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80046d4:	2320      	movs	r3, #32
 80046d6:	e003      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80046d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046da:	fab3 f383 	clz	r3, r3
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	3301      	adds	r3, #1
 80046e2:	069b      	lsls	r3, r3, #26
 80046e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d109      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x520>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	0e9b      	lsrs	r3, r3, #26
 80046fa:	3301      	adds	r3, #1
 80046fc:	f003 031f 	and.w	r3, r3, #31
 8004700:	2101      	movs	r1, #1
 8004702:	fa01 f303 	lsl.w	r3, r1, r3
 8004706:	e017      	b.n	8004738 <HAL_ADC_ConfigChannel+0x550>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004710:	fa93 f3a3 	rbit	r3, r3
 8004714:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004718:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800471a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004720:	2320      	movs	r3, #32
 8004722:	e003      	b.n	800472c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004726:	fab3 f383 	clz	r3, r3
 800472a:	b2db      	uxtb	r3, r3
 800472c:	3301      	adds	r3, #1
 800472e:	f003 031f 	and.w	r3, r3, #31
 8004732:	2101      	movs	r1, #1
 8004734:	fa01 f303 	lsl.w	r3, r1, r3
 8004738:	ea42 0103 	orr.w	r1, r2, r3
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10a      	bne.n	800475e <HAL_ADC_ConfigChannel+0x576>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	0e9b      	lsrs	r3, r3, #26
 800474e:	3301      	adds	r3, #1
 8004750:	f003 021f 	and.w	r2, r3, #31
 8004754:	4613      	mov	r3, r2
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	4413      	add	r3, r2
 800475a:	051b      	lsls	r3, r3, #20
 800475c:	e018      	b.n	8004790 <HAL_ADC_ConfigChannel+0x5a8>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004766:	fa93 f3a3 	rbit	r3, r3
 800476a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800476c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004776:	2320      	movs	r3, #32
 8004778:	e003      	b.n	8004782 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800477a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800477c:	fab3 f383 	clz	r3, r3
 8004780:	b2db      	uxtb	r3, r3
 8004782:	3301      	adds	r3, #1
 8004784:	f003 021f 	and.w	r2, r3, #31
 8004788:	4613      	mov	r3, r2
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	4413      	add	r3, r2
 800478e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004790:	430b      	orrs	r3, r1
 8004792:	e07e      	b.n	8004892 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800479c:	2b00      	cmp	r3, #0
 800479e:	d107      	bne.n	80047b0 <HAL_ADC_ConfigChannel+0x5c8>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	0e9b      	lsrs	r3, r3, #26
 80047a6:	3301      	adds	r3, #1
 80047a8:	069b      	lsls	r3, r3, #26
 80047aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047ae:	e015      	b.n	80047dc <HAL_ADC_ConfigChannel+0x5f4>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b8:	fa93 f3a3 	rbit	r3, r3
 80047bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80047c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80047c8:	2320      	movs	r3, #32
 80047ca:	e003      	b.n	80047d4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80047cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ce:	fab3 f383 	clz	r3, r3
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	3301      	adds	r3, #1
 80047d6:	069b      	lsls	r3, r3, #26
 80047d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d109      	bne.n	80047fc <HAL_ADC_ConfigChannel+0x614>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	0e9b      	lsrs	r3, r3, #26
 80047ee:	3301      	adds	r3, #1
 80047f0:	f003 031f 	and.w	r3, r3, #31
 80047f4:	2101      	movs	r1, #1
 80047f6:	fa01 f303 	lsl.w	r3, r1, r3
 80047fa:	e017      	b.n	800482c <HAL_ADC_ConfigChannel+0x644>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	fa93 f3a3 	rbit	r3, r3
 8004808:	61fb      	str	r3, [r7, #28]
  return result;
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004814:	2320      	movs	r3, #32
 8004816:	e003      	b.n	8004820 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	fab3 f383 	clz	r3, r3
 800481e:	b2db      	uxtb	r3, r3
 8004820:	3301      	adds	r3, #1
 8004822:	f003 031f 	and.w	r3, r3, #31
 8004826:	2101      	movs	r1, #1
 8004828:	fa01 f303 	lsl.w	r3, r1, r3
 800482c:	ea42 0103 	orr.w	r1, r2, r3
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10d      	bne.n	8004858 <HAL_ADC_ConfigChannel+0x670>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	0e9b      	lsrs	r3, r3, #26
 8004842:	3301      	adds	r3, #1
 8004844:	f003 021f 	and.w	r2, r3, #31
 8004848:	4613      	mov	r3, r2
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	4413      	add	r3, r2
 800484e:	3b1e      	subs	r3, #30
 8004850:	051b      	lsls	r3, r3, #20
 8004852:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004856:	e01b      	b.n	8004890 <HAL_ADC_ConfigChannel+0x6a8>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	fa93 f3a3 	rbit	r3, r3
 8004864:	613b      	str	r3, [r7, #16]
  return result;
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004870:	2320      	movs	r3, #32
 8004872:	e003      	b.n	800487c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	fab3 f383 	clz	r3, r3
 800487a:	b2db      	uxtb	r3, r3
 800487c:	3301      	adds	r3, #1
 800487e:	f003 021f 	and.w	r2, r3, #31
 8004882:	4613      	mov	r3, r2
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	4413      	add	r3, r2
 8004888:	3b1e      	subs	r3, #30
 800488a:	051b      	lsls	r3, r3, #20
 800488c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004890:	430b      	orrs	r3, r1
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	6892      	ldr	r2, [r2, #8]
 8004896:	4619      	mov	r1, r3
 8004898:	f7fe fd5e 	bl	8003358 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	4b09      	ldr	r3, [pc, #36]	; (80048c8 <HAL_ADC_ConfigChannel+0x6e0>)
 80048a2:	4013      	ands	r3, r2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 80be 	beq.w	8004a26 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048b2:	d004      	beq.n	80048be <HAL_ADC_ConfigChannel+0x6d6>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a04      	ldr	r2, [pc, #16]	; (80048cc <HAL_ADC_ConfigChannel+0x6e4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d10a      	bne.n	80048d4 <HAL_ADC_ConfigChannel+0x6ec>
 80048be:	4b04      	ldr	r3, [pc, #16]	; (80048d0 <HAL_ADC_ConfigChannel+0x6e8>)
 80048c0:	e009      	b.n	80048d6 <HAL_ADC_ConfigChannel+0x6ee>
 80048c2:	bf00      	nop
 80048c4:	407f0000 	.word	0x407f0000
 80048c8:	80080000 	.word	0x80080000
 80048cc:	50000100 	.word	0x50000100
 80048d0:	50000300 	.word	0x50000300
 80048d4:	4b59      	ldr	r3, [pc, #356]	; (8004a3c <HAL_ADC_ConfigChannel+0x854>)
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fe fc40 	bl	800315c <LL_ADC_GetCommonPathInternalCh>
 80048dc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a56      	ldr	r2, [pc, #344]	; (8004a40 <HAL_ADC_ConfigChannel+0x858>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d004      	beq.n	80048f4 <HAL_ADC_ConfigChannel+0x70c>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a55      	ldr	r2, [pc, #340]	; (8004a44 <HAL_ADC_ConfigChannel+0x85c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d13a      	bne.n	800496a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80048f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d134      	bne.n	800496a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004908:	d005      	beq.n	8004916 <HAL_ADC_ConfigChannel+0x72e>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a4e      	ldr	r2, [pc, #312]	; (8004a48 <HAL_ADC_ConfigChannel+0x860>)
 8004910:	4293      	cmp	r3, r2
 8004912:	f040 8085 	bne.w	8004a20 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800491e:	d004      	beq.n	800492a <HAL_ADC_ConfigChannel+0x742>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a49      	ldr	r2, [pc, #292]	; (8004a4c <HAL_ADC_ConfigChannel+0x864>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d101      	bne.n	800492e <HAL_ADC_ConfigChannel+0x746>
 800492a:	4a49      	ldr	r2, [pc, #292]	; (8004a50 <HAL_ADC_ConfigChannel+0x868>)
 800492c:	e000      	b.n	8004930 <HAL_ADC_ConfigChannel+0x748>
 800492e:	4a43      	ldr	r2, [pc, #268]	; (8004a3c <HAL_ADC_ConfigChannel+0x854>)
 8004930:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004934:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004938:	4619      	mov	r1, r3
 800493a:	4610      	mov	r0, r2
 800493c:	f7fe fbfb 	bl	8003136 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004940:	4b44      	ldr	r3, [pc, #272]	; (8004a54 <HAL_ADC_ConfigChannel+0x86c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	099b      	lsrs	r3, r3, #6
 8004946:	4a44      	ldr	r2, [pc, #272]	; (8004a58 <HAL_ADC_ConfigChannel+0x870>)
 8004948:	fba2 2303 	umull	r2, r3, r2, r3
 800494c:	099b      	lsrs	r3, r3, #6
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	4613      	mov	r3, r2
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	4413      	add	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800495a:	e002      	b.n	8004962 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3b01      	subs	r3, #1
 8004960:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1f9      	bne.n	800495c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004968:	e05a      	b.n	8004a20 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a3b      	ldr	r2, [pc, #236]	; (8004a5c <HAL_ADC_ConfigChannel+0x874>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d125      	bne.n	80049c0 <HAL_ADC_ConfigChannel+0x7d8>
 8004974:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d11f      	bne.n	80049c0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a31      	ldr	r2, [pc, #196]	; (8004a4c <HAL_ADC_ConfigChannel+0x864>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d104      	bne.n	8004994 <HAL_ADC_ConfigChannel+0x7ac>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a34      	ldr	r2, [pc, #208]	; (8004a60 <HAL_ADC_ConfigChannel+0x878>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d047      	beq.n	8004a24 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800499c:	d004      	beq.n	80049a8 <HAL_ADC_ConfigChannel+0x7c0>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a2a      	ldr	r2, [pc, #168]	; (8004a4c <HAL_ADC_ConfigChannel+0x864>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d101      	bne.n	80049ac <HAL_ADC_ConfigChannel+0x7c4>
 80049a8:	4a29      	ldr	r2, [pc, #164]	; (8004a50 <HAL_ADC_ConfigChannel+0x868>)
 80049aa:	e000      	b.n	80049ae <HAL_ADC_ConfigChannel+0x7c6>
 80049ac:	4a23      	ldr	r2, [pc, #140]	; (8004a3c <HAL_ADC_ConfigChannel+0x854>)
 80049ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049b6:	4619      	mov	r1, r3
 80049b8:	4610      	mov	r0, r2
 80049ba:	f7fe fbbc 	bl	8003136 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049be:	e031      	b.n	8004a24 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a27      	ldr	r2, [pc, #156]	; (8004a64 <HAL_ADC_ConfigChannel+0x87c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d12d      	bne.n	8004a26 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80049ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d127      	bne.n	8004a26 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a1c      	ldr	r2, [pc, #112]	; (8004a4c <HAL_ADC_ConfigChannel+0x864>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d022      	beq.n	8004a26 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049e8:	d004      	beq.n	80049f4 <HAL_ADC_ConfigChannel+0x80c>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a17      	ldr	r2, [pc, #92]	; (8004a4c <HAL_ADC_ConfigChannel+0x864>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d101      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0x810>
 80049f4:	4a16      	ldr	r2, [pc, #88]	; (8004a50 <HAL_ADC_ConfigChannel+0x868>)
 80049f6:	e000      	b.n	80049fa <HAL_ADC_ConfigChannel+0x812>
 80049f8:	4a10      	ldr	r2, [pc, #64]	; (8004a3c <HAL_ADC_ConfigChannel+0x854>)
 80049fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a02:	4619      	mov	r1, r3
 8004a04:	4610      	mov	r0, r2
 8004a06:	f7fe fb96 	bl	8003136 <LL_ADC_SetCommonPathInternalCh>
 8004a0a:	e00c      	b.n	8004a26 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a10:	f043 0220 	orr.w	r2, r3, #32
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004a1e:	e002      	b.n	8004a26 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a20:	bf00      	nop
 8004a22:	e000      	b.n	8004a26 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a24:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a2e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	37d8      	adds	r7, #216	; 0xd8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	50000700 	.word	0x50000700
 8004a40:	c3210000 	.word	0xc3210000
 8004a44:	90c00010 	.word	0x90c00010
 8004a48:	50000600 	.word	0x50000600
 8004a4c:	50000100 	.word	0x50000100
 8004a50:	50000300 	.word	0x50000300
 8004a54:	20000000 	.word	0x20000000
 8004a58:	053e2d63 	.word	0x053e2d63
 8004a5c:	c7520000 	.word	0xc7520000
 8004a60:	50000500 	.word	0x50000500
 8004a64:	cb840000 	.word	0xcb840000

08004a68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fe fd55 	bl	8003524 <LL_ADC_IsEnabled>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d14d      	bne.n	8004b1c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	4b28      	ldr	r3, [pc, #160]	; (8004b28 <ADC_Enable+0xc0>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00d      	beq.n	8004aaa <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a92:	f043 0210 	orr.w	r2, r3, #16
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a9e:	f043 0201 	orr.w	r2, r3, #1
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e039      	b.n	8004b1e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fe fd10 	bl	80034d4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004ab4:	f7fe fab2 	bl	800301c <HAL_GetTick>
 8004ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004aba:	e028      	b.n	8004b0e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fe fd2f 	bl	8003524 <LL_ADC_IsEnabled>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d104      	bne.n	8004ad6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7fe fcff 	bl	80034d4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ad6:	f7fe faa1 	bl	800301c <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d914      	bls.n	8004b0e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d00d      	beq.n	8004b0e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af6:	f043 0210 	orr.w	r2, r3, #16
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b02:	f043 0201 	orr.w	r2, r3, #1
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e007      	b.n	8004b1e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d1cf      	bne.n	8004abc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	8000003f 	.word	0x8000003f

08004b2c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7fe fd06 	bl	800354a <LL_ADC_IsDisableOngoing>
 8004b3e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fe fced 	bl	8003524 <LL_ADC_IsEnabled>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d047      	beq.n	8004be0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d144      	bne.n	8004be0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 030d 	and.w	r3, r3, #13
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d10c      	bne.n	8004b7e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7fe fcc7 	bl	80034fc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2203      	movs	r2, #3
 8004b74:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b76:	f7fe fa51 	bl	800301c <HAL_GetTick>
 8004b7a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b7c:	e029      	b.n	8004bd2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b82:	f043 0210 	orr.w	r2, r3, #16
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b8e:	f043 0201 	orr.w	r2, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e023      	b.n	8004be2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b9a:	f7fe fa3f 	bl	800301c <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d914      	bls.n	8004bd2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00d      	beq.n	8004bd2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bba:	f043 0210 	orr.w	r2, r3, #16
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc6:	f043 0201 	orr.w	r2, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e007      	b.n	8004be2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1dc      	bne.n	8004b9a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b084      	sub	sp, #16
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d14b      	bne.n	8004c9c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c08:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d021      	beq.n	8004c62 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fe fb46 	bl	80032b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d032      	beq.n	8004c94 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d12b      	bne.n	8004c94 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d11f      	bne.n	8004c94 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c58:	f043 0201 	orr.w	r2, r3, #1
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c60:	e018      	b.n	8004c94 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d111      	bne.n	8004c94 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d105      	bne.n	8004c94 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8c:	f043 0201 	orr.w	r2, r3, #1
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f7ff fa7f 	bl	8004198 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c9a:	e00e      	b.n	8004cba <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca0:	f003 0310 	and.w	r3, r3, #16
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f7ff fa93 	bl	80041d4 <HAL_ADC_ErrorCallback>
}
 8004cae:	e004      	b.n	8004cba <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	4798      	blx	r3
}
 8004cba:	bf00      	nop
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f7ff fa6b 	bl	80041ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cd6:	bf00      	nop
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b084      	sub	sp, #16
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cfc:	f043 0204 	orr.w	r2, r3, #4
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f7ff fa65 	bl	80041d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d0a:	bf00      	nop
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <LL_ADC_IsEnabled>:
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d101      	bne.n	8004d2a <LL_ADC_IsEnabled+0x18>
 8004d26:	2301      	movs	r3, #1
 8004d28:	e000      	b.n	8004d2c <LL_ADC_IsEnabled+0x1a>
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <LL_ADC_StartCalibration>:
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004d4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004d54:	4313      	orrs	r3, r2
 8004d56:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	609a      	str	r2, [r3, #8]
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <LL_ADC_IsCalibrationOnGoing>:
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d7e:	d101      	bne.n	8004d84 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004d80:	2301      	movs	r3, #1
 8004d82:	e000      	b.n	8004d86 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <LL_ADC_REG_IsConversionOngoing>:
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d101      	bne.n	8004daa <LL_ADC_REG_IsConversionOngoing+0x18>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_ADCEx_Calibration_Start+0x1c>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e04d      	b.n	8004e70 <HAL_ADCEx_Calibration_Start+0xb8>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7ff fea5 	bl	8004b2c <ADC_Disable>
 8004de2:	4603      	mov	r3, r0
 8004de4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d136      	bne.n	8004e5a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004df4:	f023 0302 	bic.w	r3, r3, #2
 8004df8:	f043 0202 	orr.w	r2, r3, #2
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6839      	ldr	r1, [r7, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff ff96 	bl	8004d38 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e0c:	e014      	b.n	8004e38 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	3301      	adds	r3, #1
 8004e12:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4a18      	ldr	r2, [pc, #96]	; (8004e78 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d90d      	bls.n	8004e38 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e20:	f023 0312 	bic.w	r3, r3, #18
 8004e24:	f043 0210 	orr.w	r2, r3, #16
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e01b      	b.n	8004e70 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff ff94 	bl	8004d6a <LL_ADC_IsCalibrationOnGoing>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e2      	bne.n	8004e0e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e4c:	f023 0303 	bic.w	r3, r3, #3
 8004e50:	f043 0201 	orr.w	r2, r3, #1
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e58:	e005      	b.n	8004e66 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5e:	f043 0210 	orr.w	r2, r3, #16
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	0004de01 	.word	0x0004de01

08004e7c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004ee0:	b590      	push	{r4, r7, lr}
 8004ee2:	b0a1      	sub	sp, #132	; 0x84
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e0e7      	b.n	80050ce <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004f06:	2300      	movs	r3, #0
 8004f08:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f16:	d102      	bne.n	8004f1e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004f18:	4b6f      	ldr	r3, [pc, #444]	; (80050d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004f1a:	60bb      	str	r3, [r7, #8]
 8004f1c:	e009      	b.n	8004f32 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a6e      	ldr	r2, [pc, #440]	; (80050dc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d102      	bne.n	8004f2e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004f28:	4b6d      	ldr	r3, [pc, #436]	; (80050e0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004f2a:	60bb      	str	r3, [r7, #8]
 8004f2c:	e001      	b.n	8004f32 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10b      	bne.n	8004f50 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f3c:	f043 0220 	orr.w	r2, r3, #32
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e0be      	b.n	80050ce <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7ff ff1d 	bl	8004d92 <LL_ADC_REG_IsConversionOngoing>
 8004f58:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff ff17 	bl	8004d92 <LL_ADC_REG_IsConversionOngoing>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f040 80a0 	bne.w	80050ac <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004f6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f040 809c 	bne.w	80050ac <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f7c:	d004      	beq.n	8004f88 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a55      	ldr	r2, [pc, #340]	; (80050d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d101      	bne.n	8004f8c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004f88:	4b56      	ldr	r3, [pc, #344]	; (80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004f8a:	e000      	b.n	8004f8e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004f8c:	4b56      	ldr	r3, [pc, #344]	; (80050e8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004f8e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d04b      	beq.n	8005030 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004f98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	6859      	ldr	r1, [r3, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004faa:	035b      	lsls	r3, r3, #13
 8004fac:	430b      	orrs	r3, r1
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fb2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fbc:	d004      	beq.n	8004fc8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a45      	ldr	r2, [pc, #276]	; (80050d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d10f      	bne.n	8004fe8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004fc8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004fcc:	f7ff fea1 	bl	8004d12 <LL_ADC_IsEnabled>
 8004fd0:	4604      	mov	r4, r0
 8004fd2:	4841      	ldr	r0, [pc, #260]	; (80050d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004fd4:	f7ff fe9d 	bl	8004d12 <LL_ADC_IsEnabled>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	4323      	orrs	r3, r4
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	bf0c      	ite	eq
 8004fe0:	2301      	moveq	r3, #1
 8004fe2:	2300      	movne	r3, #0
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	e012      	b.n	800500e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004fe8:	483c      	ldr	r0, [pc, #240]	; (80050dc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004fea:	f7ff fe92 	bl	8004d12 <LL_ADC_IsEnabled>
 8004fee:	4604      	mov	r4, r0
 8004ff0:	483b      	ldr	r0, [pc, #236]	; (80050e0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004ff2:	f7ff fe8e 	bl	8004d12 <LL_ADC_IsEnabled>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	431c      	orrs	r4, r3
 8004ffa:	483c      	ldr	r0, [pc, #240]	; (80050ec <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004ffc:	f7ff fe89 	bl	8004d12 <LL_ADC_IsEnabled>
 8005000:	4603      	mov	r3, r0
 8005002:	4323      	orrs	r3, r4
 8005004:	2b00      	cmp	r3, #0
 8005006:	bf0c      	ite	eq
 8005008:	2301      	moveq	r3, #1
 800500a:	2300      	movne	r3, #0
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d056      	beq.n	80050c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800501a:	f023 030f 	bic.w	r3, r3, #15
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	6811      	ldr	r1, [r2, #0]
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	6892      	ldr	r2, [r2, #8]
 8005026:	430a      	orrs	r2, r1
 8005028:	431a      	orrs	r2, r3
 800502a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800502c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800502e:	e047      	b.n	80050c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005030:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800503a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005044:	d004      	beq.n	8005050 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a23      	ldr	r2, [pc, #140]	; (80050d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d10f      	bne.n	8005070 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005050:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005054:	f7ff fe5d 	bl	8004d12 <LL_ADC_IsEnabled>
 8005058:	4604      	mov	r4, r0
 800505a:	481f      	ldr	r0, [pc, #124]	; (80050d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800505c:	f7ff fe59 	bl	8004d12 <LL_ADC_IsEnabled>
 8005060:	4603      	mov	r3, r0
 8005062:	4323      	orrs	r3, r4
 8005064:	2b00      	cmp	r3, #0
 8005066:	bf0c      	ite	eq
 8005068:	2301      	moveq	r3, #1
 800506a:	2300      	movne	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	e012      	b.n	8005096 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005070:	481a      	ldr	r0, [pc, #104]	; (80050dc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005072:	f7ff fe4e 	bl	8004d12 <LL_ADC_IsEnabled>
 8005076:	4604      	mov	r4, r0
 8005078:	4819      	ldr	r0, [pc, #100]	; (80050e0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800507a:	f7ff fe4a 	bl	8004d12 <LL_ADC_IsEnabled>
 800507e:	4603      	mov	r3, r0
 8005080:	431c      	orrs	r4, r3
 8005082:	481a      	ldr	r0, [pc, #104]	; (80050ec <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005084:	f7ff fe45 	bl	8004d12 <LL_ADC_IsEnabled>
 8005088:	4603      	mov	r3, r0
 800508a:	4323      	orrs	r3, r4
 800508c:	2b00      	cmp	r3, #0
 800508e:	bf0c      	ite	eq
 8005090:	2301      	moveq	r3, #1
 8005092:	2300      	movne	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d012      	beq.n	80050c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800509a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80050a2:	f023 030f 	bic.w	r3, r3, #15
 80050a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80050a8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050aa:	e009      	b.n	80050c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b0:	f043 0220 	orr.w	r2, r3, #32
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80050be:	e000      	b.n	80050c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80050ca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3784      	adds	r7, #132	; 0x84
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd90      	pop	{r4, r7, pc}
 80050d6:	bf00      	nop
 80050d8:	50000100 	.word	0x50000100
 80050dc:	50000400 	.word	0x50000400
 80050e0:	50000500 	.word	0x50000500
 80050e4:	50000300 	.word	0x50000300
 80050e8:	50000700 	.word	0x50000700
 80050ec:	50000600 	.word	0x50000600

080050f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005100:	4b0c      	ldr	r3, [pc, #48]	; (8005134 <__NVIC_SetPriorityGrouping+0x44>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800510c:	4013      	ands	r3, r2
 800510e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800511c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005122:	4a04      	ldr	r2, [pc, #16]	; (8005134 <__NVIC_SetPriorityGrouping+0x44>)
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	60d3      	str	r3, [r2, #12]
}
 8005128:	bf00      	nop
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	e000ed00 	.word	0xe000ed00

08005138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800513c:	4b04      	ldr	r3, [pc, #16]	; (8005150 <__NVIC_GetPriorityGrouping+0x18>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	0a1b      	lsrs	r3, r3, #8
 8005142:	f003 0307 	and.w	r3, r3, #7
}
 8005146:	4618      	mov	r0, r3
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	e000ed00 	.word	0xe000ed00

08005154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	4603      	mov	r3, r0
 800515c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800515e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005162:	2b00      	cmp	r3, #0
 8005164:	db0b      	blt.n	800517e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	f003 021f 	and.w	r2, r3, #31
 800516c:	4907      	ldr	r1, [pc, #28]	; (800518c <__NVIC_EnableIRQ+0x38>)
 800516e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	2001      	movs	r0, #1
 8005176:	fa00 f202 	lsl.w	r2, r0, r2
 800517a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	e000e100 	.word	0xe000e100

08005190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	4603      	mov	r3, r0
 8005198:	6039      	str	r1, [r7, #0]
 800519a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800519c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	db0a      	blt.n	80051ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	490c      	ldr	r1, [pc, #48]	; (80051dc <__NVIC_SetPriority+0x4c>)
 80051aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ae:	0112      	lsls	r2, r2, #4
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	440b      	add	r3, r1
 80051b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051b8:	e00a      	b.n	80051d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	4908      	ldr	r1, [pc, #32]	; (80051e0 <__NVIC_SetPriority+0x50>)
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	3b04      	subs	r3, #4
 80051c8:	0112      	lsls	r2, r2, #4
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	440b      	add	r3, r1
 80051ce:	761a      	strb	r2, [r3, #24]
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr
 80051dc:	e000e100 	.word	0xe000e100
 80051e0:	e000ed00 	.word	0xe000ed00

080051e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b089      	sub	sp, #36	; 0x24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	f1c3 0307 	rsb	r3, r3, #7
 80051fe:	2b04      	cmp	r3, #4
 8005200:	bf28      	it	cs
 8005202:	2304      	movcs	r3, #4
 8005204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	3304      	adds	r3, #4
 800520a:	2b06      	cmp	r3, #6
 800520c:	d902      	bls.n	8005214 <NVIC_EncodePriority+0x30>
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	3b03      	subs	r3, #3
 8005212:	e000      	b.n	8005216 <NVIC_EncodePriority+0x32>
 8005214:	2300      	movs	r3, #0
 8005216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005218:	f04f 32ff 	mov.w	r2, #4294967295
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	fa02 f303 	lsl.w	r3, r2, r3
 8005222:	43da      	mvns	r2, r3
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	401a      	ands	r2, r3
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800522c:	f04f 31ff 	mov.w	r1, #4294967295
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	fa01 f303 	lsl.w	r3, r1, r3
 8005236:	43d9      	mvns	r1, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800523c:	4313      	orrs	r3, r2
         );
}
 800523e:	4618      	mov	r0, r3
 8005240:	3724      	adds	r7, #36	; 0x24
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
	...

0800524c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3b01      	subs	r3, #1
 8005258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800525c:	d301      	bcc.n	8005262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800525e:	2301      	movs	r3, #1
 8005260:	e00f      	b.n	8005282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005262:	4a0a      	ldr	r2, [pc, #40]	; (800528c <SysTick_Config+0x40>)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3b01      	subs	r3, #1
 8005268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800526a:	210f      	movs	r1, #15
 800526c:	f04f 30ff 	mov.w	r0, #4294967295
 8005270:	f7ff ff8e 	bl	8005190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005274:	4b05      	ldr	r3, [pc, #20]	; (800528c <SysTick_Config+0x40>)
 8005276:	2200      	movs	r2, #0
 8005278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800527a:	4b04      	ldr	r3, [pc, #16]	; (800528c <SysTick_Config+0x40>)
 800527c:	2207      	movs	r2, #7
 800527e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	e000e010 	.word	0xe000e010

08005290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7ff ff29 	bl	80050f0 <__NVIC_SetPriorityGrouping>
}
 800529e:	bf00      	nop
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b086      	sub	sp, #24
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	4603      	mov	r3, r0
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	607a      	str	r2, [r7, #4]
 80052b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80052b4:	f7ff ff40 	bl	8005138 <__NVIC_GetPriorityGrouping>
 80052b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	68b9      	ldr	r1, [r7, #8]
 80052be:	6978      	ldr	r0, [r7, #20]
 80052c0:	f7ff ff90 	bl	80051e4 <NVIC_EncodePriority>
 80052c4:	4602      	mov	r2, r0
 80052c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ca:	4611      	mov	r1, r2
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7ff ff5f 	bl	8005190 <__NVIC_SetPriority>
}
 80052d2:	bf00      	nop
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b082      	sub	sp, #8
 80052de:	af00      	add	r7, sp, #0
 80052e0:	4603      	mov	r3, r0
 80052e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7ff ff33 	bl	8005154 <__NVIC_EnableIRQ>
}
 80052ee:	bf00      	nop
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b082      	sub	sp, #8
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7ff ffa4 	bl	800524c <SysTick_Config>
 8005304:	4603      	mov	r3, r0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e08d      	b.n	800543e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	461a      	mov	r2, r3
 8005328:	4b47      	ldr	r3, [pc, #284]	; (8005448 <HAL_DMA_Init+0x138>)
 800532a:	429a      	cmp	r2, r3
 800532c:	d80f      	bhi.n	800534e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	4b45      	ldr	r3, [pc, #276]	; (800544c <HAL_DMA_Init+0x13c>)
 8005336:	4413      	add	r3, r2
 8005338:	4a45      	ldr	r2, [pc, #276]	; (8005450 <HAL_DMA_Init+0x140>)
 800533a:	fba2 2303 	umull	r2, r3, r2, r3
 800533e:	091b      	lsrs	r3, r3, #4
 8005340:	009a      	lsls	r2, r3, #2
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a42      	ldr	r2, [pc, #264]	; (8005454 <HAL_DMA_Init+0x144>)
 800534a:	641a      	str	r2, [r3, #64]	; 0x40
 800534c:	e00e      	b.n	800536c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	461a      	mov	r2, r3
 8005354:	4b40      	ldr	r3, [pc, #256]	; (8005458 <HAL_DMA_Init+0x148>)
 8005356:	4413      	add	r3, r2
 8005358:	4a3d      	ldr	r2, [pc, #244]	; (8005450 <HAL_DMA_Init+0x140>)
 800535a:	fba2 2303 	umull	r2, r3, r2, r3
 800535e:	091b      	lsrs	r3, r3, #4
 8005360:	009a      	lsls	r2, r3, #2
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a3c      	ldr	r2, [pc, #240]	; (800545c <HAL_DMA_Init+0x14c>)
 800536a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005386:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005390:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800539c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f9b6 	bl	8005730 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053cc:	d102      	bne.n	80053d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80053e8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d010      	beq.n	8005414 <HAL_DMA_Init+0x104>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	d80c      	bhi.n	8005414 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f9d6 	bl	80057ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005410:	605a      	str	r2, [r3, #4]
 8005412:	e008      	b.n	8005426 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	40020407 	.word	0x40020407
 800544c:	bffdfff8 	.word	0xbffdfff8
 8005450:	cccccccd 	.word	0xcccccccd
 8005454:	40020000 	.word	0x40020000
 8005458:	bffdfbf8 	.word	0xbffdfbf8
 800545c:	40020400 	.word	0x40020400

08005460 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005478:	2b01      	cmp	r3, #1
 800547a:	d101      	bne.n	8005480 <HAL_DMA_Start_IT+0x20>
 800547c:	2302      	movs	r3, #2
 800547e:	e066      	b.n	800554e <HAL_DMA_Start_IT+0xee>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b01      	cmp	r3, #1
 8005492:	d155      	bne.n	8005540 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0201 	bic.w	r2, r2, #1
 80054b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 f8fb 	bl	80056b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d008      	beq.n	80054d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f042 020e 	orr.w	r2, r2, #14
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	e00f      	b.n	80054f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0204 	bic.w	r2, r2, #4
 80054e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f042 020a 	orr.w	r2, r2, #10
 80054f6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d007      	beq.n	8005516 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005510:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005514:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551a:	2b00      	cmp	r3, #0
 800551c:	d007      	beq.n	800552e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005528:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800552c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f042 0201 	orr.w	r2, r2, #1
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	e005      	b.n	800554c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005548:	2302      	movs	r3, #2
 800554a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800554c:	7dfb      	ldrb	r3, [r7, #23]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b084      	sub	sp, #16
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005572:	f003 031f 	and.w	r3, r3, #31
 8005576:	2204      	movs	r2, #4
 8005578:	409a      	lsls	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4013      	ands	r3, r2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d026      	beq.n	80055d0 <HAL_DMA_IRQHandler+0x7a>
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b00      	cmp	r3, #0
 800558a:	d021      	beq.n	80055d0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0320 	and.w	r3, r3, #32
 8005596:	2b00      	cmp	r3, #0
 8005598:	d107      	bne.n	80055aa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0204 	bic.w	r2, r2, #4
 80055a8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ae:	f003 021f 	and.w	r2, r3, #31
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	2104      	movs	r1, #4
 80055b8:	fa01 f202 	lsl.w	r2, r1, r2
 80055bc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d071      	beq.n	80056aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80055ce:	e06c      	b.n	80056aa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d4:	f003 031f 	and.w	r3, r3, #31
 80055d8:	2202      	movs	r2, #2
 80055da:	409a      	lsls	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4013      	ands	r3, r2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d02e      	beq.n	8005642 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d029      	beq.n	8005642 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0320 	and.w	r3, r3, #32
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10b      	bne.n	8005614 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 020a 	bic.w	r2, r2, #10
 800560a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005618:	f003 021f 	and.w	r2, r3, #31
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	2102      	movs	r1, #2
 8005622:	fa01 f202 	lsl.w	r2, r1, r2
 8005626:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005634:	2b00      	cmp	r3, #0
 8005636:	d038      	beq.n	80056aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005640:	e033      	b.n	80056aa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005646:	f003 031f 	and.w	r3, r3, #31
 800564a:	2208      	movs	r2, #8
 800564c:	409a      	lsls	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4013      	ands	r3, r2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d02a      	beq.n	80056ac <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f003 0308 	and.w	r3, r3, #8
 800565c:	2b00      	cmp	r3, #0
 800565e:	d025      	beq.n	80056ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 020e 	bic.w	r2, r2, #14
 800566e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005674:	f003 021f 	and.w	r2, r3, #31
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567c:	2101      	movs	r1, #1
 800567e:	fa01 f202 	lsl.w	r2, r1, r2
 8005682:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d004      	beq.n	80056ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80056aa:	bf00      	nop
 80056ac:	bf00      	nop
}
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80056ca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d004      	beq.n	80056de <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80056dc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e2:	f003 021f 	and.w	r2, r3, #31
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	2101      	movs	r1, #1
 80056ec:	fa01 f202 	lsl.w	r2, r1, r2
 80056f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	2b10      	cmp	r3, #16
 8005700:	d108      	bne.n	8005714 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005712:	e007      	b.n	8005724 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	60da      	str	r2, [r3, #12]
}
 8005724:	bf00      	nop
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005730:	b480      	push	{r7}
 8005732:	b087      	sub	sp, #28
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	461a      	mov	r2, r3
 800573e:	4b16      	ldr	r3, [pc, #88]	; (8005798 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005740:	429a      	cmp	r2, r3
 8005742:	d802      	bhi.n	800574a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005744:	4b15      	ldr	r3, [pc, #84]	; (800579c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	e001      	b.n	800574e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800574a:	4b15      	ldr	r3, [pc, #84]	; (80057a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800574c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	b2db      	uxtb	r3, r3
 8005758:	3b08      	subs	r3, #8
 800575a:	4a12      	ldr	r2, [pc, #72]	; (80057a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800575c:	fba2 2303 	umull	r2, r3, r2, r3
 8005760:	091b      	lsrs	r3, r3, #4
 8005762:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005768:	089b      	lsrs	r3, r3, #2
 800576a:	009a      	lsls	r2, r3, #2
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	4413      	add	r3, r2
 8005770:	461a      	mov	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a0b      	ldr	r2, [pc, #44]	; (80057a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800577a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f003 031f 	and.w	r3, r3, #31
 8005782:	2201      	movs	r2, #1
 8005784:	409a      	lsls	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	651a      	str	r2, [r3, #80]	; 0x50
}
 800578a:	bf00      	nop
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	40020407 	.word	0x40020407
 800579c:	40020800 	.word	0x40020800
 80057a0:	40020820 	.word	0x40020820
 80057a4:	cccccccd 	.word	0xcccccccd
 80057a8:	40020880 	.word	0x40020880

080057ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4b0b      	ldr	r3, [pc, #44]	; (80057ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80057c0:	4413      	add	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	461a      	mov	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a08      	ldr	r2, [pc, #32]	; (80057f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80057ce:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	3b01      	subs	r3, #1
 80057d4:	f003 031f 	and.w	r3, r3, #31
 80057d8:	2201      	movs	r2, #1
 80057da:	409a      	lsls	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80057e0:	bf00      	nop
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	1000823f 	.word	0x1000823f
 80057f0:	40020940 	.word	0x40020940

080057f4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e147      	b.n	8005a96 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d106      	bne.n	8005820 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7fd f91e 	bl	8002a5c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699a      	ldr	r2, [r3, #24]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0210 	bic.w	r2, r2, #16
 800582e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005830:	f7fd fbf4 	bl	800301c <HAL_GetTick>
 8005834:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005836:	e012      	b.n	800585e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005838:	f7fd fbf0 	bl	800301c <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b0a      	cmp	r3, #10
 8005844:	d90b      	bls.n	800585e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800584a:	f043 0201 	orr.w	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2203      	movs	r2, #3
 8005856:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e11b      	b.n	8005a96 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	f003 0308 	and.w	r3, r3, #8
 8005868:	2b08      	cmp	r3, #8
 800586a:	d0e5      	beq.n	8005838 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699a      	ldr	r2, [r3, #24]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0201 	orr.w	r2, r2, #1
 800587a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800587c:	f7fd fbce 	bl	800301c <HAL_GetTick>
 8005880:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005882:	e012      	b.n	80058aa <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005884:	f7fd fbca 	bl	800301c <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b0a      	cmp	r3, #10
 8005890:	d90b      	bls.n	80058aa <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005896:	f043 0201 	orr.w	r2, r3, #1
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2203      	movs	r2, #3
 80058a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e0f5      	b.n	8005a96 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0e5      	beq.n	8005884 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0202 	orr.w	r2, r2, #2
 80058c6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a74      	ldr	r2, [pc, #464]	; (8005aa0 <HAL_FDCAN_Init+0x2ac>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d103      	bne.n	80058da <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80058d2:	4a74      	ldr	r2, [pc, #464]	; (8005aa4 <HAL_FDCAN_Init+0x2b0>)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	7c1b      	ldrb	r3, [r3, #16]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d108      	bne.n	80058f4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	699a      	ldr	r2, [r3, #24]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058f0:	619a      	str	r2, [r3, #24]
 80058f2:	e007      	b.n	8005904 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699a      	ldr	r2, [r3, #24]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005902:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	7c5b      	ldrb	r3, [r3, #17]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d108      	bne.n	800591e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699a      	ldr	r2, [r3, #24]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800591a:	619a      	str	r2, [r3, #24]
 800591c:	e007      	b.n	800592e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	699a      	ldr	r2, [r3, #24]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800592c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	7c9b      	ldrb	r3, [r3, #18]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d108      	bne.n	8005948 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	699a      	ldr	r2, [r3, #24]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005944:	619a      	str	r2, [r3, #24]
 8005946:	e007      	b.n	8005958 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699a      	ldr	r2, [r3, #24]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005956:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689a      	ldr	r2, [r3, #8]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	699a      	ldr	r2, [r3, #24]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800597c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	691a      	ldr	r2, [r3, #16]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 0210 	bic.w	r2, r2, #16
 800598c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d108      	bne.n	80059a8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	699a      	ldr	r2, [r3, #24]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0204 	orr.w	r2, r2, #4
 80059a4:	619a      	str	r2, [r3, #24]
 80059a6:	e02c      	b.n	8005a02 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d028      	beq.n	8005a02 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d01c      	beq.n	80059f2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699a      	ldr	r2, [r3, #24]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059c6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691a      	ldr	r2, [r3, #16]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 0210 	orr.w	r2, r2, #16
 80059d6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	2b03      	cmp	r3, #3
 80059de:	d110      	bne.n	8005a02 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	699a      	ldr	r2, [r3, #24]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f042 0220 	orr.w	r2, r2, #32
 80059ee:	619a      	str	r2, [r3, #24]
 80059f0:	e007      	b.n	8005a02 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	699a      	ldr	r2, [r3, #24]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f042 0220 	orr.w	r2, r2, #32
 8005a00:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	3b01      	subs	r3, #1
 8005a08:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a12:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a1a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	3b01      	subs	r3, #1
 8005a24:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a2a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a2c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a36:	d115      	bne.n	8005a64 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a42:	3b01      	subs	r3, #1
 8005a44:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a46:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a50:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a60:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a62:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fc6e 	bl	800635c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	40006400 	.word	0x40006400
 8005aa4:	40006500 	.word	0x40006500

08005aa8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ab8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005aba:	7dfb      	ldrb	r3, [r7, #23]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d002      	beq.n	8005ac6 <HAL_FDCAN_ConfigFilter+0x1e>
 8005ac0:	7dfb      	ldrb	r3, [r7, #23]
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d13d      	bne.n	8005b42 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d119      	bne.n	8005b02 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005ada:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8005ae2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	e01d      	b.n	8005b3e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	075a      	lsls	r2, r3, #29
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	079a      	lsls	r2, r3, #30
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	4413      	add	r3, r2
 8005b2a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	3304      	adds	r3, #4
 8005b36:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e006      	b.n	8005b50 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b46:	f043 0202 	orr.w	r2, r3, #2
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
  }
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	371c      	adds	r7, #28
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d116      	bne.n	8005ba4 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b7e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	011a      	lsls	r2, r3, #4
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	431a      	orrs	r2, r3
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	431a      	orrs	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e006      	b.n	8005bb2 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba8:	f043 0204 	orr.w	r2, r3, #4
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
  }
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d110      	bne.n	8005bf4 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	699a      	ldr	r2, [r3, #24]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 0201 	bic.w	r2, r2, #1
 8005be8:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	e006      	b.n	8005c02 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bf8:	f043 0204 	orr.w	r2, r3, #4
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
  }
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b086      	sub	sp, #24
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	60f8      	str	r0, [r7, #12]
 8005c16:	60b9      	str	r1, [r7, #8]
 8005c18:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d12c      	bne.n	8005c80 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e023      	b.n	8005c8e <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005c4e:	0c1b      	lsrs	r3, r3, #16
 8005c50:	f003 0303 	and.w	r3, r3, #3
 8005c54:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	68b9      	ldr	r1, [r7, #8]
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 fbe9 	bl	8006434 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2101      	movs	r1, #1
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8005c6e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005c72:	2201      	movs	r2, #1
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	409a      	lsls	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	e006      	b.n	8005c8e <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c84:	f043 0208 	orr.w	r2, r3, #8
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
  }
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b08b      	sub	sp, #44	; 0x2c
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
 8005ca4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005cac:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8005cae:	7efb      	ldrb	r3, [r7, #27]
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	f040 80bc 	bne.w	8005e2e <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2b40      	cmp	r3, #64	; 0x40
 8005cba:	d121      	bne.n	8005d00 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc4:	f003 030f 	and.w	r3, r3, #15
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d107      	bne.n	8005cdc <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e0af      	b.n	8005e3c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce4:	0a1b      	lsrs	r3, r3, #8
 8005ce6:	f003 0303 	and.w	r3, r3, #3
 8005cea:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8005cf0:	69fa      	ldr	r2, [r7, #28]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	00db      	lsls	r3, r3, #3
 8005cf6:	4413      	add	r3, r2
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	440b      	add	r3, r1
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8005cfe:	e020      	b.n	8005d42 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d08:	f003 030f 	and.w	r3, r3, #15
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d107      	bne.n	8005d20 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e08d      	b.n	8005e3c <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d28:	0a1b      	lsrs	r3, r3, #8
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005d34:	69fa      	ldr	r2, [r7, #28]
 8005d36:	4613      	mov	r3, r2
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	4413      	add	r3, r2
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	440b      	add	r3, r1
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d107      	bne.n	8005d66 <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	0c9b      	lsrs	r3, r3, #18
 8005d5c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	e005      	b.n	8005d72 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	0e1b      	lsrs	r3, r3, #24
 8005dc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	0fda      	lsrs	r2, r3, #31
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	3304      	adds	r3, #4
 8005dda:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005de0:	2300      	movs	r3, #0
 8005de2:	623b      	str	r3, [r7, #32]
 8005de4:	e00a      	b.n	8005dfc <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	441a      	add	r2, r3
 8005dec:	6839      	ldr	r1, [r7, #0]
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	440b      	add	r3, r1
 8005df2:	7812      	ldrb	r2, [r2, #0]
 8005df4:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	623b      	str	r3, [r7, #32]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	0c1b      	lsrs	r3, r3, #16
 8005e02:	4a11      	ldr	r2, [pc, #68]	; (8005e48 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8005e04:	5cd3      	ldrb	r3, [r2, r3]
 8005e06:	461a      	mov	r2, r3
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d3eb      	bcc.n	8005de6 <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	2b40      	cmp	r3, #64	; 0x40
 8005e12:	d105      	bne.n	8005e20 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	69fa      	ldr	r2, [r7, #28]
 8005e1a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005e1e:	e004      	b.n	8005e2a <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	69fa      	ldr	r2, [r7, #28]
 8005e26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e006      	b.n	8005e3c <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e32:	f043 0208 	orr.w	r2, r3, #8
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
  }
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	372c      	adds	r7, #44	; 0x2c
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	0800aa20 	.word	0x0800aa20

08005e4c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e5e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005e60:	7dfb      	ldrb	r3, [r7, #23]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d003      	beq.n	8005e6e <HAL_FDCAN_ActivateNotification+0x22>
 8005e66:	7dfb      	ldrb	r3, [r7, #23]
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	f040 80c8 	bne.w	8005ffe <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e74:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f003 0307 	and.w	r3, r3, #7
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d004      	beq.n	8005e8a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d03b      	beq.n	8005f02 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d004      	beq.n	8005e9e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d031      	beq.n	8005f02 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d004      	beq.n	8005eb2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	f003 0304 	and.w	r3, r3, #4
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d027      	beq.n	8005f02 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d004      	beq.n	8005ec6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f003 0308 	and.w	r3, r3, #8
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d01d      	beq.n	8005f02 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d004      	beq.n	8005eda <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f003 0310 	and.w	r3, r3, #16
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d013      	beq.n	8005f02 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d004      	beq.n	8005eee <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d009      	beq.n	8005f02 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00c      	beq.n	8005f12 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d107      	bne.n	8005f12 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f042 0201 	orr.w	r2, r2, #1
 8005f10:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d004      	beq.n	8005f26 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d13b      	bne.n	8005f9e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d004      	beq.n	8005f3a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d131      	bne.n	8005f9e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d004      	beq.n	8005f4e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f003 0304 	and.w	r3, r3, #4
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d127      	bne.n	8005f9e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d004      	beq.n	8005f62 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d11d      	bne.n	8005f9e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d004      	beq.n	8005f76 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	f003 0310 	and.w	r3, r3, #16
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d113      	bne.n	8005f9e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d004      	beq.n	8005f8a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f003 0320 	and.w	r3, r3, #32
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d109      	bne.n	8005f9e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00c      	beq.n	8005fae <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d007      	beq.n	8005fae <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f042 0202 	orr.w	r2, r2, #2
 8005fac:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d009      	beq.n	8005fcc <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d009      	beq.n	8005fea <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e006      	b.n	800600c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006002:	f043 0202 	orr.w	r2, r3, #2
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
  }
}
 800600c:	4618      	mov	r0, r3
 800600e:	371c      	adds	r7, #28
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b08a      	sub	sp, #40	; 0x28
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006026:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800602a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006034:	4013      	ands	r3, r2
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603e:	f003 0307 	and.w	r3, r3, #7
 8006042:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604a:	6a3a      	ldr	r2, [r7, #32]
 800604c:	4013      	ands	r3, r2
 800604e:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006056:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800605a:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006062:	69fa      	ldr	r2, [r7, #28]
 8006064:	4013      	ands	r3, r2
 8006066:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800606e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8006072:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	4013      	ands	r3, r2
 800607e:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006086:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800608a:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	4013      	ands	r3, r2
 8006096:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800609e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00d      	beq.n	80060c2 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d006      	beq.n	80060c2 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2240      	movs	r2, #64	; 0x40
 80060ba:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f92e 	bl	800631e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01b      	beq.n	8006108 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d014      	beq.n	8006108 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80060e6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4013      	ands	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060fe:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006100:	6939      	ldr	r1, [r7, #16]
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f8ec 	bl	80062e0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	2b00      	cmp	r3, #0
 800610c:	d007      	beq.n	800611e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006114:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006116:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f8b6 	bl	800628a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d007      	beq.n	8006134 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6a3a      	ldr	r2, [r7, #32]
 800612a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800612c:	6a39      	ldr	r1, [r7, #32]
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7fb fd46 	bl	8001bc0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d007      	beq.n	800614a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006142:	69f9      	ldr	r1, [r7, #28]
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f8ab 	bl	80062a0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006150:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00e      	beq.n	8006176 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006162:	2b00      	cmp	r3, #0
 8006164:	d007      	beq.n	8006176 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800616e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f8a0 	bl	80062b6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800617c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006180:	2b00      	cmp	r3, #0
 8006182:	d01a      	beq.n	80061ba <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618e:	2b00      	cmp	r3, #0
 8006190:	d013      	beq.n	80061ba <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800619a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4013      	ands	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2280      	movs	r2, #128	; 0x80
 80061b0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80061b2:	68f9      	ldr	r1, [r7, #12]
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f888 	bl	80062ca <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00e      	beq.n	80061e6 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d007      	beq.n	80061e6 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80061de:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f888 	bl	80062f6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00e      	beq.n	8006212 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d007      	beq.n	8006212 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800620a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f87c 	bl	800630a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d011      	beq.n	8006244 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00a      	beq.n	8006244 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006236:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800623c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d007      	beq.n	800625a <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006252:	6979      	ldr	r1, [r7, #20]
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f876 	bl	8006346 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d009      	beq.n	8006274 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	69ba      	ldr	r2, [r7, #24]
 8006266:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	431a      	orrs	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 f858 	bl	8006332 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006282:	bf00      	nop
 8006284:	3728      	adds	r7, #40	; 0x28
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800628a:	b480      	push	{r7}
 800628c:	b083      	sub	sp, #12
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80062aa:	bf00      	nop
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b083      	sub	sp, #12
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80062ea:	bf00      	nop
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80062fe:	bf00      	nop
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800630a:	b480      	push	{r7}
 800630c:	b083      	sub	sp, #12
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006312:	bf00      	nop
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006326:	bf00      	nop
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800633a:	bf00      	nop
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006346:	b480      	push	{r7}
 8006348:	b083      	sub	sp, #12
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
 800634e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006364:	4b30      	ldr	r3, [pc, #192]	; (8006428 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8006366:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a2f      	ldr	r2, [pc, #188]	; (800642c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d103      	bne.n	800637a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006378:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a2c      	ldr	r2, [pc, #176]	; (8006430 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d103      	bne.n	800638c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800638a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800639a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a2:	041a      	lsls	r2, r3, #16
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	430a      	orrs	r2, r1
 80063aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063c0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c8:	061a      	lsls	r2, r3, #24
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	430a      	orrs	r2, r1
 80063d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	e005      	b.n	800640e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	3304      	adds	r3, #4
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	429a      	cmp	r2, r3
 8006418:	d3f3      	bcc.n	8006402 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800641a:	bf00      	nop
 800641c:	bf00      	nop
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	4000a400 	.word	0x4000a400
 800642c:	40006800 	.word	0x40006800
 8006430:	40006c00 	.word	0x40006c00

08006434 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8006434:	b480      	push	{r7}
 8006436:	b089      	sub	sp, #36	; 0x24
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
 8006440:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10a      	bne.n	8006460 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006452:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800645a:	4313      	orrs	r3, r2
 800645c:	61fb      	str	r3, [r7, #28]
 800645e:	e00a      	b.n	8006476 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006468:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800646e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006470:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006474:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006480:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006486:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800648c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006492:	4313      	orrs	r3, r2
 8006494:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	4613      	mov	r3, r2
 800649e:	00db      	lsls	r3, r3, #3
 80064a0:	4413      	add	r3, r2
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	440b      	add	r3, r1
 80064a6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	69fa      	ldr	r2, [r7, #28]
 80064ac:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	3304      	adds	r3, #4
 80064b2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	3304      	adds	r3, #4
 80064be:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80064c0:	2300      	movs	r3, #0
 80064c2:	617b      	str	r3, [r7, #20]
 80064c4:	e020      	b.n	8006508 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	3303      	adds	r3, #3
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	4413      	add	r3, r2
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	3302      	adds	r3, #2
 80064d6:	6879      	ldr	r1, [r7, #4]
 80064d8:	440b      	add	r3, r1
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80064de:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	3301      	adds	r3, #1
 80064e4:	6879      	ldr	r1, [r7, #4]
 80064e6:	440b      	add	r3, r1
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80064ec:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80064ee:	6879      	ldr	r1, [r7, #4]
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	440a      	add	r2, r1
 80064f4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80064f6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	3304      	adds	r3, #4
 8006500:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	3304      	adds	r3, #4
 8006506:	617b      	str	r3, [r7, #20]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	0c1b      	lsrs	r3, r3, #16
 800650e:	4a06      	ldr	r2, [pc, #24]	; (8006528 <FDCAN_CopyMessageToRAM+0xf4>)
 8006510:	5cd3      	ldrb	r3, [r2, r3]
 8006512:	461a      	mov	r2, r3
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	4293      	cmp	r3, r2
 8006518:	d3d5      	bcc.n	80064c6 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 800651a:	bf00      	nop
 800651c:	bf00      	nop
 800651e:	3724      	adds	r7, #36	; 0x24
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr
 8006528:	0800aa20 	.word	0x0800aa20

0800652c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006536:	2300      	movs	r3, #0
 8006538:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800653a:	e15a      	b.n	80067f2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	2101      	movs	r1, #1
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	fa01 f303 	lsl.w	r3, r1, r3
 8006548:	4013      	ands	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 814c 	beq.w	80067ec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f003 0303 	and.w	r3, r3, #3
 800655c:	2b01      	cmp	r3, #1
 800655e:	d005      	beq.n	800656c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006568:	2b02      	cmp	r3, #2
 800656a:	d130      	bne.n	80065ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	2203      	movs	r2, #3
 8006578:	fa02 f303 	lsl.w	r3, r2, r3
 800657c:	43db      	mvns	r3, r3
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	4013      	ands	r3, r2
 8006582:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	fa02 f303 	lsl.w	r3, r2, r3
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	4313      	orrs	r3, r2
 8006594:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80065a2:	2201      	movs	r2, #1
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	fa02 f303 	lsl.w	r3, r2, r3
 80065aa:	43db      	mvns	r3, r3
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	4013      	ands	r3, r2
 80065b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	091b      	lsrs	r3, r3, #4
 80065b8:	f003 0201 	and.w	r2, r3, #1
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	fa02 f303 	lsl.w	r3, r2, r3
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f003 0303 	and.w	r3, r3, #3
 80065d6:	2b03      	cmp	r3, #3
 80065d8:	d017      	beq.n	800660a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	2203      	movs	r2, #3
 80065e6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ea:	43db      	mvns	r3, r3
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	4013      	ands	r3, r2
 80065f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	689a      	ldr	r2, [r3, #8]
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	fa02 f303 	lsl.w	r3, r2, r3
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f003 0303 	and.w	r3, r3, #3
 8006612:	2b02      	cmp	r3, #2
 8006614:	d123      	bne.n	800665e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	08da      	lsrs	r2, r3, #3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	3208      	adds	r2, #8
 800661e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006622:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	220f      	movs	r2, #15
 800662e:	fa02 f303 	lsl.w	r3, r2, r3
 8006632:	43db      	mvns	r3, r3
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	4013      	ands	r3, r2
 8006638:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	691a      	ldr	r2, [r3, #16]
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	fa02 f303 	lsl.w	r3, r2, r3
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	4313      	orrs	r3, r2
 800664e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	08da      	lsrs	r2, r3, #3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3208      	adds	r2, #8
 8006658:	6939      	ldr	r1, [r7, #16]
 800665a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	005b      	lsls	r3, r3, #1
 8006668:	2203      	movs	r2, #3
 800666a:	fa02 f303 	lsl.w	r3, r2, r3
 800666e:	43db      	mvns	r3, r3
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	4013      	ands	r3, r2
 8006674:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f003 0203 	and.w	r2, r3, #3
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	fa02 f303 	lsl.w	r3, r2, r3
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	4313      	orrs	r3, r2
 800668a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 80a6 	beq.w	80067ec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066a0:	4b5b      	ldr	r3, [pc, #364]	; (8006810 <HAL_GPIO_Init+0x2e4>)
 80066a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a4:	4a5a      	ldr	r2, [pc, #360]	; (8006810 <HAL_GPIO_Init+0x2e4>)
 80066a6:	f043 0301 	orr.w	r3, r3, #1
 80066aa:	6613      	str	r3, [r2, #96]	; 0x60
 80066ac:	4b58      	ldr	r3, [pc, #352]	; (8006810 <HAL_GPIO_Init+0x2e4>)
 80066ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	60bb      	str	r3, [r7, #8]
 80066b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80066b8:	4a56      	ldr	r2, [pc, #344]	; (8006814 <HAL_GPIO_Init+0x2e8>)
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	089b      	lsrs	r3, r3, #2
 80066be:	3302      	adds	r3, #2
 80066c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f003 0303 	and.w	r3, r3, #3
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	220f      	movs	r2, #15
 80066d0:	fa02 f303 	lsl.w	r3, r2, r3
 80066d4:	43db      	mvns	r3, r3
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	4013      	ands	r3, r2
 80066da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80066e2:	d01f      	beq.n	8006724 <HAL_GPIO_Init+0x1f8>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a4c      	ldr	r2, [pc, #304]	; (8006818 <HAL_GPIO_Init+0x2ec>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d019      	beq.n	8006720 <HAL_GPIO_Init+0x1f4>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a4b      	ldr	r2, [pc, #300]	; (800681c <HAL_GPIO_Init+0x2f0>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d013      	beq.n	800671c <HAL_GPIO_Init+0x1f0>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a4a      	ldr	r2, [pc, #296]	; (8006820 <HAL_GPIO_Init+0x2f4>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d00d      	beq.n	8006718 <HAL_GPIO_Init+0x1ec>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a49      	ldr	r2, [pc, #292]	; (8006824 <HAL_GPIO_Init+0x2f8>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d007      	beq.n	8006714 <HAL_GPIO_Init+0x1e8>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a48      	ldr	r2, [pc, #288]	; (8006828 <HAL_GPIO_Init+0x2fc>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d101      	bne.n	8006710 <HAL_GPIO_Init+0x1e4>
 800670c:	2305      	movs	r3, #5
 800670e:	e00a      	b.n	8006726 <HAL_GPIO_Init+0x1fa>
 8006710:	2306      	movs	r3, #6
 8006712:	e008      	b.n	8006726 <HAL_GPIO_Init+0x1fa>
 8006714:	2304      	movs	r3, #4
 8006716:	e006      	b.n	8006726 <HAL_GPIO_Init+0x1fa>
 8006718:	2303      	movs	r3, #3
 800671a:	e004      	b.n	8006726 <HAL_GPIO_Init+0x1fa>
 800671c:	2302      	movs	r3, #2
 800671e:	e002      	b.n	8006726 <HAL_GPIO_Init+0x1fa>
 8006720:	2301      	movs	r3, #1
 8006722:	e000      	b.n	8006726 <HAL_GPIO_Init+0x1fa>
 8006724:	2300      	movs	r3, #0
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	f002 0203 	and.w	r2, r2, #3
 800672c:	0092      	lsls	r2, r2, #2
 800672e:	4093      	lsls	r3, r2
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	4313      	orrs	r3, r2
 8006734:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006736:	4937      	ldr	r1, [pc, #220]	; (8006814 <HAL_GPIO_Init+0x2e8>)
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	089b      	lsrs	r3, r3, #2
 800673c:	3302      	adds	r3, #2
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006744:	4b39      	ldr	r3, [pc, #228]	; (800682c <HAL_GPIO_Init+0x300>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	43db      	mvns	r3, r3
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	4013      	ands	r3, r2
 8006752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d003      	beq.n	8006768 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006768:	4a30      	ldr	r2, [pc, #192]	; (800682c <HAL_GPIO_Init+0x300>)
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800676e:	4b2f      	ldr	r3, [pc, #188]	; (800682c <HAL_GPIO_Init+0x300>)
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	43db      	mvns	r3, r3
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	4013      	ands	r3, r2
 800677c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4313      	orrs	r3, r2
 8006790:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006792:	4a26      	ldr	r2, [pc, #152]	; (800682c <HAL_GPIO_Init+0x300>)
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006798:	4b24      	ldr	r3, [pc, #144]	; (800682c <HAL_GPIO_Init+0x300>)
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	43db      	mvns	r3, r3
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	4013      	ands	r3, r2
 80067a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d003      	beq.n	80067bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80067bc:	4a1b      	ldr	r2, [pc, #108]	; (800682c <HAL_GPIO_Init+0x300>)
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80067c2:	4b1a      	ldr	r3, [pc, #104]	; (800682c <HAL_GPIO_Init+0x300>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	43db      	mvns	r3, r3
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	4013      	ands	r3, r2
 80067d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80067e6:	4a11      	ldr	r2, [pc, #68]	; (800682c <HAL_GPIO_Init+0x300>)
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	3301      	adds	r3, #1
 80067f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	fa22 f303 	lsr.w	r3, r2, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f47f ae9d 	bne.w	800653c <HAL_GPIO_Init+0x10>
  }
}
 8006802:	bf00      	nop
 8006804:	bf00      	nop
 8006806:	371c      	adds	r7, #28
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	40021000 	.word	0x40021000
 8006814:	40010000 	.word	0x40010000
 8006818:	48000400 	.word	0x48000400
 800681c:	48000800 	.word	0x48000800
 8006820:	48000c00 	.word	0x48000c00
 8006824:	48001000 	.word	0x48001000
 8006828:	48001400 	.word	0x48001400
 800682c:	40010400 	.word	0x40010400

08006830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	460b      	mov	r3, r1
 800683a:	807b      	strh	r3, [r7, #2]
 800683c:	4613      	mov	r3, r2
 800683e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006840:	787b      	ldrb	r3, [r7, #1]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006846:	887a      	ldrh	r2, [r7, #2]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800684c:	e002      	b.n	8006854 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800684e:	887a      	ldrh	r2, [r7, #2]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d141      	bne.n	80068f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800686e:	4b4b      	ldr	r3, [pc, #300]	; (800699c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800687a:	d131      	bne.n	80068e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800687c:	4b47      	ldr	r3, [pc, #284]	; (800699c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800687e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006882:	4a46      	ldr	r2, [pc, #280]	; (800699c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006888:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800688c:	4b43      	ldr	r3, [pc, #268]	; (800699c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006894:	4a41      	ldr	r2, [pc, #260]	; (800699c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800689a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800689c:	4b40      	ldr	r3, [pc, #256]	; (80069a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2232      	movs	r2, #50	; 0x32
 80068a2:	fb02 f303 	mul.w	r3, r2, r3
 80068a6:	4a3f      	ldr	r2, [pc, #252]	; (80069a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80068a8:	fba2 2303 	umull	r2, r3, r2, r3
 80068ac:	0c9b      	lsrs	r3, r3, #18
 80068ae:	3301      	adds	r3, #1
 80068b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068b2:	e002      	b.n	80068ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	3b01      	subs	r3, #1
 80068b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068ba:	4b38      	ldr	r3, [pc, #224]	; (800699c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068c6:	d102      	bne.n	80068ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1f2      	bne.n	80068b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80068ce:	4b33      	ldr	r3, [pc, #204]	; (800699c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068da:	d158      	bne.n	800698e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e057      	b.n	8006990 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068e0:	4b2e      	ldr	r3, [pc, #184]	; (800699c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068e6:	4a2d      	ldr	r2, [pc, #180]	; (800699c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80068f0:	e04d      	b.n	800698e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068f8:	d141      	bne.n	800697e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80068fa:	4b28      	ldr	r3, [pc, #160]	; (800699c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006906:	d131      	bne.n	800696c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006908:	4b24      	ldr	r3, [pc, #144]	; (800699c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800690a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800690e:	4a23      	ldr	r2, [pc, #140]	; (800699c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006914:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006918:	4b20      	ldr	r3, [pc, #128]	; (800699c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006920:	4a1e      	ldr	r2, [pc, #120]	; (800699c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006926:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006928:	4b1d      	ldr	r3, [pc, #116]	; (80069a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2232      	movs	r2, #50	; 0x32
 800692e:	fb02 f303 	mul.w	r3, r2, r3
 8006932:	4a1c      	ldr	r2, [pc, #112]	; (80069a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006934:	fba2 2303 	umull	r2, r3, r2, r3
 8006938:	0c9b      	lsrs	r3, r3, #18
 800693a:	3301      	adds	r3, #1
 800693c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800693e:	e002      	b.n	8006946 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3b01      	subs	r3, #1
 8006944:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006946:	4b15      	ldr	r3, [pc, #84]	; (800699c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800694e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006952:	d102      	bne.n	800695a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1f2      	bne.n	8006940 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800695a:	4b10      	ldr	r3, [pc, #64]	; (800699c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006966:	d112      	bne.n	800698e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e011      	b.n	8006990 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800696c:	4b0b      	ldr	r3, [pc, #44]	; (800699c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800696e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006972:	4a0a      	ldr	r2, [pc, #40]	; (800699c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006978:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800697c:	e007      	b.n	800698e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800697e:	4b07      	ldr	r3, [pc, #28]	; (800699c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006986:	4a05      	ldr	r2, [pc, #20]	; (800699c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006988:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800698c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	40007000 	.word	0x40007000
 80069a0:	20000000 	.word	0x20000000
 80069a4:	431bde83 	.word	0x431bde83

080069a8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80069a8:	b480      	push	{r7}
 80069aa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80069ac:	4b05      	ldr	r3, [pc, #20]	; (80069c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	4a04      	ldr	r2, [pc, #16]	; (80069c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80069b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069b6:	6093      	str	r3, [r2, #8]
}
 80069b8:	bf00      	nop
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	40007000 	.word	0x40007000

080069c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e306      	b.n	8006fe8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d075      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069e6:	4b97      	ldr	r3, [pc, #604]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f003 030c 	and.w	r3, r3, #12
 80069ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069f0:	4b94      	ldr	r3, [pc, #592]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	f003 0303 	and.w	r3, r3, #3
 80069f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	2b0c      	cmp	r3, #12
 80069fe:	d102      	bne.n	8006a06 <HAL_RCC_OscConfig+0x3e>
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	2b03      	cmp	r3, #3
 8006a04:	d002      	beq.n	8006a0c <HAL_RCC_OscConfig+0x44>
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	d10b      	bne.n	8006a24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a0c:	4b8d      	ldr	r3, [pc, #564]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d05b      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x108>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d157      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e2e1      	b.n	8006fe8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a2c:	d106      	bne.n	8006a3c <HAL_RCC_OscConfig+0x74>
 8006a2e:	4b85      	ldr	r3, [pc, #532]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a84      	ldr	r2, [pc, #528]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a38:	6013      	str	r3, [r2, #0]
 8006a3a:	e01d      	b.n	8006a78 <HAL_RCC_OscConfig+0xb0>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a44:	d10c      	bne.n	8006a60 <HAL_RCC_OscConfig+0x98>
 8006a46:	4b7f      	ldr	r3, [pc, #508]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a7e      	ldr	r2, [pc, #504]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a50:	6013      	str	r3, [r2, #0]
 8006a52:	4b7c      	ldr	r3, [pc, #496]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a7b      	ldr	r2, [pc, #492]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	e00b      	b.n	8006a78 <HAL_RCC_OscConfig+0xb0>
 8006a60:	4b78      	ldr	r3, [pc, #480]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a77      	ldr	r2, [pc, #476]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a6a:	6013      	str	r3, [r2, #0]
 8006a6c:	4b75      	ldr	r3, [pc, #468]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a74      	ldr	r2, [pc, #464]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d013      	beq.n	8006aa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a80:	f7fc facc 	bl	800301c <HAL_GetTick>
 8006a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a86:	e008      	b.n	8006a9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a88:	f7fc fac8 	bl	800301c <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b64      	cmp	r3, #100	; 0x64
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e2a6      	b.n	8006fe8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a9a:	4b6a      	ldr	r3, [pc, #424]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0f0      	beq.n	8006a88 <HAL_RCC_OscConfig+0xc0>
 8006aa6:	e014      	b.n	8006ad2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa8:	f7fc fab8 	bl	800301c <HAL_GetTick>
 8006aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006aae:	e008      	b.n	8006ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ab0:	f7fc fab4 	bl	800301c <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b64      	cmp	r3, #100	; 0x64
 8006abc:	d901      	bls.n	8006ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e292      	b.n	8006fe8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ac2:	4b60      	ldr	r3, [pc, #384]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1f0      	bne.n	8006ab0 <HAL_RCC_OscConfig+0xe8>
 8006ace:	e000      	b.n	8006ad2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d075      	beq.n	8006bca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ade:	4b59      	ldr	r3, [pc, #356]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f003 030c 	and.w	r3, r3, #12
 8006ae6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ae8:	4b56      	ldr	r3, [pc, #344]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f003 0303 	and.w	r3, r3, #3
 8006af0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	2b0c      	cmp	r3, #12
 8006af6:	d102      	bne.n	8006afe <HAL_RCC_OscConfig+0x136>
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d002      	beq.n	8006b04 <HAL_RCC_OscConfig+0x13c>
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	2b04      	cmp	r3, #4
 8006b02:	d11f      	bne.n	8006b44 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b04:	4b4f      	ldr	r3, [pc, #316]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d005      	beq.n	8006b1c <HAL_RCC_OscConfig+0x154>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e265      	b.n	8006fe8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b1c:	4b49      	ldr	r3, [pc, #292]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	061b      	lsls	r3, r3, #24
 8006b2a:	4946      	ldr	r1, [pc, #280]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006b30:	4b45      	ldr	r3, [pc, #276]	; (8006c48 <HAL_RCC_OscConfig+0x280>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7fc fa25 	bl	8002f84 <HAL_InitTick>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d043      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e251      	b.n	8006fe8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d023      	beq.n	8006b94 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b4c:	4b3d      	ldr	r3, [pc, #244]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a3c      	ldr	r2, [pc, #240]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b58:	f7fc fa60 	bl	800301c <HAL_GetTick>
 8006b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b5e:	e008      	b.n	8006b72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b60:	f7fc fa5c 	bl	800301c <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e23a      	b.n	8006fe8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b72:	4b34      	ldr	r3, [pc, #208]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d0f0      	beq.n	8006b60 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b7e:	4b31      	ldr	r3, [pc, #196]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	061b      	lsls	r3, r3, #24
 8006b8c:	492d      	ldr	r1, [pc, #180]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	604b      	str	r3, [r1, #4]
 8006b92:	e01a      	b.n	8006bca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b94:	4b2b      	ldr	r3, [pc, #172]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a2a      	ldr	r2, [pc, #168]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006b9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba0:	f7fc fa3c 	bl	800301c <HAL_GetTick>
 8006ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ba6:	e008      	b.n	8006bba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ba8:	f7fc fa38 	bl	800301c <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e216      	b.n	8006fe8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006bba:	4b22      	ldr	r3, [pc, #136]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1f0      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x1e0>
 8006bc6:	e000      	b.n	8006bca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0308 	and.w	r3, r3, #8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d041      	beq.n	8006c5a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d01c      	beq.n	8006c18 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bde:	4b19      	ldr	r3, [pc, #100]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006be4:	4a17      	ldr	r2, [pc, #92]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006be6:	f043 0301 	orr.w	r3, r3, #1
 8006bea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bee:	f7fc fa15 	bl	800301c <HAL_GetTick>
 8006bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006bf4:	e008      	b.n	8006c08 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bf6:	f7fc fa11 	bl	800301c <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d901      	bls.n	8006c08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e1ef      	b.n	8006fe8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c08:	4b0e      	ldr	r3, [pc, #56]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0ef      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x22e>
 8006c16:	e020      	b.n	8006c5a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c18:	4b0a      	ldr	r3, [pc, #40]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c1e:	4a09      	ldr	r2, [pc, #36]	; (8006c44 <HAL_RCC_OscConfig+0x27c>)
 8006c20:	f023 0301 	bic.w	r3, r3, #1
 8006c24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c28:	f7fc f9f8 	bl	800301c <HAL_GetTick>
 8006c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c2e:	e00d      	b.n	8006c4c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c30:	f7fc f9f4 	bl	800301c <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d906      	bls.n	8006c4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e1d2      	b.n	8006fe8 <HAL_RCC_OscConfig+0x620>
 8006c42:	bf00      	nop
 8006c44:	40021000 	.word	0x40021000
 8006c48:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c4c:	4b8c      	ldr	r3, [pc, #560]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1ea      	bne.n	8006c30 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0304 	and.w	r3, r3, #4
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f000 80a6 	beq.w	8006db4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006c6c:	4b84      	ldr	r3, [pc, #528]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <HAL_RCC_OscConfig+0x2b4>
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e000      	b.n	8006c7e <HAL_RCC_OscConfig+0x2b6>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00d      	beq.n	8006c9e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c82:	4b7f      	ldr	r3, [pc, #508]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c86:	4a7e      	ldr	r2, [pc, #504]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c8c:	6593      	str	r3, [r2, #88]	; 0x58
 8006c8e:	4b7c      	ldr	r3, [pc, #496]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c96:	60fb      	str	r3, [r7, #12]
 8006c98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c9e:	4b79      	ldr	r3, [pc, #484]	; (8006e84 <HAL_RCC_OscConfig+0x4bc>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d118      	bne.n	8006cdc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006caa:	4b76      	ldr	r3, [pc, #472]	; (8006e84 <HAL_RCC_OscConfig+0x4bc>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a75      	ldr	r2, [pc, #468]	; (8006e84 <HAL_RCC_OscConfig+0x4bc>)
 8006cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cb6:	f7fc f9b1 	bl	800301c <HAL_GetTick>
 8006cba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cbc:	e008      	b.n	8006cd0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cbe:	f7fc f9ad 	bl	800301c <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d901      	bls.n	8006cd0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e18b      	b.n	8006fe8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cd0:	4b6c      	ldr	r3, [pc, #432]	; (8006e84 <HAL_RCC_OscConfig+0x4bc>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d0f0      	beq.n	8006cbe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d108      	bne.n	8006cf6 <HAL_RCC_OscConfig+0x32e>
 8006ce4:	4b66      	ldr	r3, [pc, #408]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cea:	4a65      	ldr	r2, [pc, #404]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006cec:	f043 0301 	orr.w	r3, r3, #1
 8006cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006cf4:	e024      	b.n	8006d40 <HAL_RCC_OscConfig+0x378>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	2b05      	cmp	r3, #5
 8006cfc:	d110      	bne.n	8006d20 <HAL_RCC_OscConfig+0x358>
 8006cfe:	4b60      	ldr	r3, [pc, #384]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d04:	4a5e      	ldr	r2, [pc, #376]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006d06:	f043 0304 	orr.w	r3, r3, #4
 8006d0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d0e:	4b5c      	ldr	r3, [pc, #368]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d14:	4a5a      	ldr	r2, [pc, #360]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006d16:	f043 0301 	orr.w	r3, r3, #1
 8006d1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d1e:	e00f      	b.n	8006d40 <HAL_RCC_OscConfig+0x378>
 8006d20:	4b57      	ldr	r3, [pc, #348]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d26:	4a56      	ldr	r2, [pc, #344]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006d28:	f023 0301 	bic.w	r3, r3, #1
 8006d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d30:	4b53      	ldr	r3, [pc, #332]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d36:	4a52      	ldr	r2, [pc, #328]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006d38:	f023 0304 	bic.w	r3, r3, #4
 8006d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d016      	beq.n	8006d76 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d48:	f7fc f968 	bl	800301c <HAL_GetTick>
 8006d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d4e:	e00a      	b.n	8006d66 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d50:	f7fc f964 	bl	800301c <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d901      	bls.n	8006d66 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e140      	b.n	8006fe8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d66:	4b46      	ldr	r3, [pc, #280]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0ed      	beq.n	8006d50 <HAL_RCC_OscConfig+0x388>
 8006d74:	e015      	b.n	8006da2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d76:	f7fc f951 	bl	800301c <HAL_GetTick>
 8006d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d7c:	e00a      	b.n	8006d94 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d7e:	f7fc f94d 	bl	800301c <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d901      	bls.n	8006d94 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e129      	b.n	8006fe8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d94:	4b3a      	ldr	r3, [pc, #232]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1ed      	bne.n	8006d7e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006da2:	7ffb      	ldrb	r3, [r7, #31]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d105      	bne.n	8006db4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006da8:	4b35      	ldr	r3, [pc, #212]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dac:	4a34      	ldr	r2, [pc, #208]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006db2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0320 	and.w	r3, r3, #32
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d03c      	beq.n	8006e3a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d01c      	beq.n	8006e02 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006dc8:	4b2d      	ldr	r3, [pc, #180]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006dca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006dce:	4a2c      	ldr	r2, [pc, #176]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006dd0:	f043 0301 	orr.w	r3, r3, #1
 8006dd4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dd8:	f7fc f920 	bl	800301c <HAL_GetTick>
 8006ddc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006dde:	e008      	b.n	8006df2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006de0:	f7fc f91c 	bl	800301c <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e0fa      	b.n	8006fe8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006df2:	4b23      	ldr	r3, [pc, #140]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006df4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d0ef      	beq.n	8006de0 <HAL_RCC_OscConfig+0x418>
 8006e00:	e01b      	b.n	8006e3a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006e02:	4b1f      	ldr	r3, [pc, #124]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006e04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e08:	4a1d      	ldr	r2, [pc, #116]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006e0a:	f023 0301 	bic.w	r3, r3, #1
 8006e0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e12:	f7fc f903 	bl	800301c <HAL_GetTick>
 8006e16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e18:	e008      	b.n	8006e2c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e1a:	f7fc f8ff 	bl	800301c <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d901      	bls.n	8006e2c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e0dd      	b.n	8006fe8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e2c:	4b14      	ldr	r3, [pc, #80]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006e2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1ef      	bne.n	8006e1a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 80d1 	beq.w	8006fe6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e44:	4b0e      	ldr	r3, [pc, #56]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f003 030c 	and.w	r3, r3, #12
 8006e4c:	2b0c      	cmp	r3, #12
 8006e4e:	f000 808b 	beq.w	8006f68 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d15e      	bne.n	8006f18 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e5a:	4b09      	ldr	r3, [pc, #36]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a08      	ldr	r2, [pc, #32]	; (8006e80 <HAL_RCC_OscConfig+0x4b8>)
 8006e60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e66:	f7fc f8d9 	bl	800301c <HAL_GetTick>
 8006e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e6c:	e00c      	b.n	8006e88 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e6e:	f7fc f8d5 	bl	800301c <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d905      	bls.n	8006e88 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e0b3      	b.n	8006fe8 <HAL_RCC_OscConfig+0x620>
 8006e80:	40021000 	.word	0x40021000
 8006e84:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e88:	4b59      	ldr	r3, [pc, #356]	; (8006ff0 <HAL_RCC_OscConfig+0x628>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1ec      	bne.n	8006e6e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e94:	4b56      	ldr	r3, [pc, #344]	; (8006ff0 <HAL_RCC_OscConfig+0x628>)
 8006e96:	68da      	ldr	r2, [r3, #12]
 8006e98:	4b56      	ldr	r3, [pc, #344]	; (8006ff4 <HAL_RCC_OscConfig+0x62c>)
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	6a11      	ldr	r1, [r2, #32]
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ea4:	3a01      	subs	r2, #1
 8006ea6:	0112      	lsls	r2, r2, #4
 8006ea8:	4311      	orrs	r1, r2
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006eae:	0212      	lsls	r2, r2, #8
 8006eb0:	4311      	orrs	r1, r2
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006eb6:	0852      	lsrs	r2, r2, #1
 8006eb8:	3a01      	subs	r2, #1
 8006eba:	0552      	lsls	r2, r2, #21
 8006ebc:	4311      	orrs	r1, r2
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ec2:	0852      	lsrs	r2, r2, #1
 8006ec4:	3a01      	subs	r2, #1
 8006ec6:	0652      	lsls	r2, r2, #25
 8006ec8:	4311      	orrs	r1, r2
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006ece:	06d2      	lsls	r2, r2, #27
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	4947      	ldr	r1, [pc, #284]	; (8006ff0 <HAL_RCC_OscConfig+0x628>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ed8:	4b45      	ldr	r3, [pc, #276]	; (8006ff0 <HAL_RCC_OscConfig+0x628>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a44      	ldr	r2, [pc, #272]	; (8006ff0 <HAL_RCC_OscConfig+0x628>)
 8006ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ee2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ee4:	4b42      	ldr	r3, [pc, #264]	; (8006ff0 <HAL_RCC_OscConfig+0x628>)
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	4a41      	ldr	r2, [pc, #260]	; (8006ff0 <HAL_RCC_OscConfig+0x628>)
 8006eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006eee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ef0:	f7fc f894 	bl	800301c <HAL_GetTick>
 8006ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ef6:	e008      	b.n	8006f0a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ef8:	f7fc f890 	bl	800301c <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d901      	bls.n	8006f0a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e06e      	b.n	8006fe8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f0a:	4b39      	ldr	r3, [pc, #228]	; (8006ff0 <HAL_RCC_OscConfig+0x628>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d0f0      	beq.n	8006ef8 <HAL_RCC_OscConfig+0x530>
 8006f16:	e066      	b.n	8006fe6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f18:	4b35      	ldr	r3, [pc, #212]	; (8006ff0 <HAL_RCC_OscConfig+0x628>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a34      	ldr	r2, [pc, #208]	; (8006ff0 <HAL_RCC_OscConfig+0x628>)
 8006f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f22:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006f24:	4b32      	ldr	r3, [pc, #200]	; (8006ff0 <HAL_RCC_OscConfig+0x628>)
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	4a31      	ldr	r2, [pc, #196]	; (8006ff0 <HAL_RCC_OscConfig+0x628>)
 8006f2a:	f023 0303 	bic.w	r3, r3, #3
 8006f2e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006f30:	4b2f      	ldr	r3, [pc, #188]	; (8006ff0 <HAL_RCC_OscConfig+0x628>)
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	4a2e      	ldr	r2, [pc, #184]	; (8006ff0 <HAL_RCC_OscConfig+0x628>)
 8006f36:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f40:	f7fc f86c 	bl	800301c <HAL_GetTick>
 8006f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f46:	e008      	b.n	8006f5a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f48:	f7fc f868 	bl	800301c <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d901      	bls.n	8006f5a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e046      	b.n	8006fe8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f5a:	4b25      	ldr	r3, [pc, #148]	; (8006ff0 <HAL_RCC_OscConfig+0x628>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1f0      	bne.n	8006f48 <HAL_RCC_OscConfig+0x580>
 8006f66:	e03e      	b.n	8006fe6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e039      	b.n	8006fe8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006f74:	4b1e      	ldr	r3, [pc, #120]	; (8006ff0 <HAL_RCC_OscConfig+0x628>)
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f003 0203 	and.w	r2, r3, #3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d12c      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	3b01      	subs	r3, #1
 8006f94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d123      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d11b      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d113      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc4:	085b      	lsrs	r3, r3, #1
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d109      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd8:	085b      	lsrs	r3, r3, #1
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d001      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e000      	b.n	8006fe8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3720      	adds	r7, #32
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	40021000 	.word	0x40021000
 8006ff4:	019f800c 	.word	0x019f800c

08006ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007002:	2300      	movs	r3, #0
 8007004:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d101      	bne.n	8007010 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e11e      	b.n	800724e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007010:	4b91      	ldr	r3, [pc, #580]	; (8007258 <HAL_RCC_ClockConfig+0x260>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 030f 	and.w	r3, r3, #15
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	429a      	cmp	r2, r3
 800701c:	d910      	bls.n	8007040 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800701e:	4b8e      	ldr	r3, [pc, #568]	; (8007258 <HAL_RCC_ClockConfig+0x260>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f023 020f 	bic.w	r2, r3, #15
 8007026:	498c      	ldr	r1, [pc, #560]	; (8007258 <HAL_RCC_ClockConfig+0x260>)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	4313      	orrs	r3, r2
 800702c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800702e:	4b8a      	ldr	r3, [pc, #552]	; (8007258 <HAL_RCC_ClockConfig+0x260>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 030f 	and.w	r3, r3, #15
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	429a      	cmp	r2, r3
 800703a:	d001      	beq.n	8007040 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e106      	b.n	800724e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	2b00      	cmp	r3, #0
 800704a:	d073      	beq.n	8007134 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	2b03      	cmp	r3, #3
 8007052:	d129      	bne.n	80070a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007054:	4b81      	ldr	r3, [pc, #516]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e0f4      	b.n	800724e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007064:	f000 f966 	bl	8007334 <RCC_GetSysClockFreqFromPLLSource>
 8007068:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	4a7c      	ldr	r2, [pc, #496]	; (8007260 <HAL_RCC_ClockConfig+0x268>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d93f      	bls.n	80070f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007072:	4b7a      	ldr	r3, [pc, #488]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d009      	beq.n	8007092 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007086:	2b00      	cmp	r3, #0
 8007088:	d033      	beq.n	80070f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800708e:	2b00      	cmp	r3, #0
 8007090:	d12f      	bne.n	80070f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007092:	4b72      	ldr	r3, [pc, #456]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800709a:	4a70      	ldr	r2, [pc, #448]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 800709c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80070a2:	2380      	movs	r3, #128	; 0x80
 80070a4:	617b      	str	r3, [r7, #20]
 80070a6:	e024      	b.n	80070f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d107      	bne.n	80070c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070b0:	4b6a      	ldr	r3, [pc, #424]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d109      	bne.n	80070d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e0c6      	b.n	800724e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070c0:	4b66      	ldr	r3, [pc, #408]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e0be      	b.n	800724e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80070d0:	f000 f8ce 	bl	8007270 <HAL_RCC_GetSysClockFreq>
 80070d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	4a61      	ldr	r2, [pc, #388]	; (8007260 <HAL_RCC_ClockConfig+0x268>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d909      	bls.n	80070f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80070de:	4b5f      	ldr	r3, [pc, #380]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070e6:	4a5d      	ldr	r2, [pc, #372]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 80070e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80070ee:	2380      	movs	r3, #128	; 0x80
 80070f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80070f2:	4b5a      	ldr	r3, [pc, #360]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f023 0203 	bic.w	r2, r3, #3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	4957      	ldr	r1, [pc, #348]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 8007100:	4313      	orrs	r3, r2
 8007102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007104:	f7fb ff8a 	bl	800301c <HAL_GetTick>
 8007108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800710a:	e00a      	b.n	8007122 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800710c:	f7fb ff86 	bl	800301c <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	f241 3288 	movw	r2, #5000	; 0x1388
 800711a:	4293      	cmp	r3, r2
 800711c:	d901      	bls.n	8007122 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e095      	b.n	800724e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007122:	4b4e      	ldr	r3, [pc, #312]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f003 020c 	and.w	r2, r3, #12
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	429a      	cmp	r2, r3
 8007132:	d1eb      	bne.n	800710c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0302 	and.w	r3, r3, #2
 800713c:	2b00      	cmp	r3, #0
 800713e:	d023      	beq.n	8007188 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0304 	and.w	r3, r3, #4
 8007148:	2b00      	cmp	r3, #0
 800714a:	d005      	beq.n	8007158 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800714c:	4b43      	ldr	r3, [pc, #268]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	4a42      	ldr	r2, [pc, #264]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 8007152:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007156:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0308 	and.w	r3, r3, #8
 8007160:	2b00      	cmp	r3, #0
 8007162:	d007      	beq.n	8007174 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007164:	4b3d      	ldr	r3, [pc, #244]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800716c:	4a3b      	ldr	r2, [pc, #236]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 800716e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007172:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007174:	4b39      	ldr	r3, [pc, #228]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	4936      	ldr	r1, [pc, #216]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 8007182:	4313      	orrs	r3, r2
 8007184:	608b      	str	r3, [r1, #8]
 8007186:	e008      	b.n	800719a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	2b80      	cmp	r3, #128	; 0x80
 800718c:	d105      	bne.n	800719a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800718e:	4b33      	ldr	r3, [pc, #204]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	4a32      	ldr	r2, [pc, #200]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 8007194:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007198:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800719a:	4b2f      	ldr	r3, [pc, #188]	; (8007258 <HAL_RCC_ClockConfig+0x260>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 030f 	and.w	r3, r3, #15
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d21d      	bcs.n	80071e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071a8:	4b2b      	ldr	r3, [pc, #172]	; (8007258 <HAL_RCC_ClockConfig+0x260>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f023 020f 	bic.w	r2, r3, #15
 80071b0:	4929      	ldr	r1, [pc, #164]	; (8007258 <HAL_RCC_ClockConfig+0x260>)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80071b8:	f7fb ff30 	bl	800301c <HAL_GetTick>
 80071bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071be:	e00a      	b.n	80071d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071c0:	f7fb ff2c 	bl	800301c <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d901      	bls.n	80071d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e03b      	b.n	800724e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071d6:	4b20      	ldr	r3, [pc, #128]	; (8007258 <HAL_RCC_ClockConfig+0x260>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 030f 	and.w	r3, r3, #15
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d1ed      	bne.n	80071c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0304 	and.w	r3, r3, #4
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d008      	beq.n	8007202 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071f0:	4b1a      	ldr	r3, [pc, #104]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	4917      	ldr	r1, [pc, #92]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 0308 	and.w	r3, r3, #8
 800720a:	2b00      	cmp	r3, #0
 800720c:	d009      	beq.n	8007222 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800720e:	4b13      	ldr	r3, [pc, #76]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	490f      	ldr	r1, [pc, #60]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 800721e:	4313      	orrs	r3, r2
 8007220:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007222:	f000 f825 	bl	8007270 <HAL_RCC_GetSysClockFreq>
 8007226:	4602      	mov	r2, r0
 8007228:	4b0c      	ldr	r3, [pc, #48]	; (800725c <HAL_RCC_ClockConfig+0x264>)
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	091b      	lsrs	r3, r3, #4
 800722e:	f003 030f 	and.w	r3, r3, #15
 8007232:	490c      	ldr	r1, [pc, #48]	; (8007264 <HAL_RCC_ClockConfig+0x26c>)
 8007234:	5ccb      	ldrb	r3, [r1, r3]
 8007236:	f003 031f 	and.w	r3, r3, #31
 800723a:	fa22 f303 	lsr.w	r3, r2, r3
 800723e:	4a0a      	ldr	r2, [pc, #40]	; (8007268 <HAL_RCC_ClockConfig+0x270>)
 8007240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007242:	4b0a      	ldr	r3, [pc, #40]	; (800726c <HAL_RCC_ClockConfig+0x274>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4618      	mov	r0, r3
 8007248:	f7fb fe9c 	bl	8002f84 <HAL_InitTick>
 800724c:	4603      	mov	r3, r0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3718      	adds	r7, #24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	40022000 	.word	0x40022000
 800725c:	40021000 	.word	0x40021000
 8007260:	04c4b400 	.word	0x04c4b400
 8007264:	0800aa10 	.word	0x0800aa10
 8007268:	20000000 	.word	0x20000000
 800726c:	20000004 	.word	0x20000004

08007270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007276:	4b2c      	ldr	r3, [pc, #176]	; (8007328 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f003 030c 	and.w	r3, r3, #12
 800727e:	2b04      	cmp	r3, #4
 8007280:	d102      	bne.n	8007288 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007282:	4b2a      	ldr	r3, [pc, #168]	; (800732c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007284:	613b      	str	r3, [r7, #16]
 8007286:	e047      	b.n	8007318 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007288:	4b27      	ldr	r3, [pc, #156]	; (8007328 <HAL_RCC_GetSysClockFreq+0xb8>)
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f003 030c 	and.w	r3, r3, #12
 8007290:	2b08      	cmp	r3, #8
 8007292:	d102      	bne.n	800729a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007294:	4b26      	ldr	r3, [pc, #152]	; (8007330 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007296:	613b      	str	r3, [r7, #16]
 8007298:	e03e      	b.n	8007318 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800729a:	4b23      	ldr	r3, [pc, #140]	; (8007328 <HAL_RCC_GetSysClockFreq+0xb8>)
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f003 030c 	and.w	r3, r3, #12
 80072a2:	2b0c      	cmp	r3, #12
 80072a4:	d136      	bne.n	8007314 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80072a6:	4b20      	ldr	r3, [pc, #128]	; (8007328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f003 0303 	and.w	r3, r3, #3
 80072ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80072b0:	4b1d      	ldr	r3, [pc, #116]	; (8007328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	091b      	lsrs	r3, r3, #4
 80072b6:	f003 030f 	and.w	r3, r3, #15
 80072ba:	3301      	adds	r3, #1
 80072bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2b03      	cmp	r3, #3
 80072c2:	d10c      	bne.n	80072de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072c4:	4a1a      	ldr	r2, [pc, #104]	; (8007330 <HAL_RCC_GetSysClockFreq+0xc0>)
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072cc:	4a16      	ldr	r2, [pc, #88]	; (8007328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072ce:	68d2      	ldr	r2, [r2, #12]
 80072d0:	0a12      	lsrs	r2, r2, #8
 80072d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80072d6:	fb02 f303 	mul.w	r3, r2, r3
 80072da:	617b      	str	r3, [r7, #20]
      break;
 80072dc:	e00c      	b.n	80072f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072de:	4a13      	ldr	r2, [pc, #76]	; (800732c <HAL_RCC_GetSysClockFreq+0xbc>)
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e6:	4a10      	ldr	r2, [pc, #64]	; (8007328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072e8:	68d2      	ldr	r2, [r2, #12]
 80072ea:	0a12      	lsrs	r2, r2, #8
 80072ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80072f0:	fb02 f303 	mul.w	r3, r2, r3
 80072f4:	617b      	str	r3, [r7, #20]
      break;
 80072f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80072f8:	4b0b      	ldr	r3, [pc, #44]	; (8007328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	0e5b      	lsrs	r3, r3, #25
 80072fe:	f003 0303 	and.w	r3, r3, #3
 8007302:	3301      	adds	r3, #1
 8007304:	005b      	lsls	r3, r3, #1
 8007306:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007310:	613b      	str	r3, [r7, #16]
 8007312:	e001      	b.n	8007318 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007314:	2300      	movs	r3, #0
 8007316:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007318:	693b      	ldr	r3, [r7, #16]
}
 800731a:	4618      	mov	r0, r3
 800731c:	371c      	adds	r7, #28
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	40021000 	.word	0x40021000
 800732c:	00f42400 	.word	0x00f42400
 8007330:	016e3600 	.word	0x016e3600

08007334 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007334:	b480      	push	{r7}
 8007336:	b087      	sub	sp, #28
 8007338:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800733a:	4b1e      	ldr	r3, [pc, #120]	; (80073b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	f003 0303 	and.w	r3, r3, #3
 8007342:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007344:	4b1b      	ldr	r3, [pc, #108]	; (80073b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	091b      	lsrs	r3, r3, #4
 800734a:	f003 030f 	and.w	r3, r3, #15
 800734e:	3301      	adds	r3, #1
 8007350:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	2b03      	cmp	r3, #3
 8007356:	d10c      	bne.n	8007372 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007358:	4a17      	ldr	r2, [pc, #92]	; (80073b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007360:	4a14      	ldr	r2, [pc, #80]	; (80073b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007362:	68d2      	ldr	r2, [r2, #12]
 8007364:	0a12      	lsrs	r2, r2, #8
 8007366:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800736a:	fb02 f303 	mul.w	r3, r2, r3
 800736e:	617b      	str	r3, [r7, #20]
    break;
 8007370:	e00c      	b.n	800738c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007372:	4a12      	ldr	r2, [pc, #72]	; (80073bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	fbb2 f3f3 	udiv	r3, r2, r3
 800737a:	4a0e      	ldr	r2, [pc, #56]	; (80073b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800737c:	68d2      	ldr	r2, [r2, #12]
 800737e:	0a12      	lsrs	r2, r2, #8
 8007380:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007384:	fb02 f303 	mul.w	r3, r2, r3
 8007388:	617b      	str	r3, [r7, #20]
    break;
 800738a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800738c:	4b09      	ldr	r3, [pc, #36]	; (80073b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	0e5b      	lsrs	r3, r3, #25
 8007392:	f003 0303 	and.w	r3, r3, #3
 8007396:	3301      	adds	r3, #1
 8007398:	005b      	lsls	r3, r3, #1
 800739a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80073a6:	687b      	ldr	r3, [r7, #4]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	371c      	adds	r7, #28
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	40021000 	.word	0x40021000
 80073b8:	016e3600 	.word	0x016e3600
 80073bc:	00f42400 	.word	0x00f42400

080073c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073c8:	2300      	movs	r3, #0
 80073ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073cc:	2300      	movs	r3, #0
 80073ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 8098 	beq.w	800750e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073de:	2300      	movs	r3, #0
 80073e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073e2:	4b43      	ldr	r3, [pc, #268]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10d      	bne.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073ee:	4b40      	ldr	r3, [pc, #256]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f2:	4a3f      	ldr	r2, [pc, #252]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073f8:	6593      	str	r3, [r2, #88]	; 0x58
 80073fa:	4b3d      	ldr	r3, [pc, #244]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007402:	60bb      	str	r3, [r7, #8]
 8007404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007406:	2301      	movs	r3, #1
 8007408:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800740a:	4b3a      	ldr	r3, [pc, #232]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a39      	ldr	r2, [pc, #228]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007414:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007416:	f7fb fe01 	bl	800301c <HAL_GetTick>
 800741a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800741c:	e009      	b.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800741e:	f7fb fdfd 	bl	800301c <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	2b02      	cmp	r3, #2
 800742a:	d902      	bls.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	74fb      	strb	r3, [r7, #19]
        break;
 8007430:	e005      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007432:	4b30      	ldr	r3, [pc, #192]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800743a:	2b00      	cmp	r3, #0
 800743c:	d0ef      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800743e:	7cfb      	ldrb	r3, [r7, #19]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d159      	bne.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007444:	4b2a      	ldr	r3, [pc, #168]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800744a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800744e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d01e      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	429a      	cmp	r2, r3
 800745e:	d019      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007460:	4b23      	ldr	r3, [pc, #140]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800746a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800746c:	4b20      	ldr	r3, [pc, #128]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800746e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007472:	4a1f      	ldr	r2, [pc, #124]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800747c:	4b1c      	ldr	r3, [pc, #112]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800747e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007482:	4a1b      	ldr	r2, [pc, #108]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800748c:	4a18      	ldr	r2, [pc, #96]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	d016      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800749e:	f7fb fdbd 	bl	800301c <HAL_GetTick>
 80074a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074a4:	e00b      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074a6:	f7fb fdb9 	bl	800301c <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d902      	bls.n	80074be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	74fb      	strb	r3, [r7, #19]
            break;
 80074bc:	e006      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074be:	4b0c      	ldr	r3, [pc, #48]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c4:	f003 0302 	and.w	r3, r3, #2
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d0ec      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80074cc:	7cfb      	ldrb	r3, [r7, #19]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10b      	bne.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074d2:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e0:	4903      	ldr	r1, [pc, #12]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80074e8:	e008      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80074ea:	7cfb      	ldrb	r3, [r7, #19]
 80074ec:	74bb      	strb	r3, [r7, #18]
 80074ee:	e005      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80074f0:	40021000 	.word	0x40021000
 80074f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f8:	7cfb      	ldrb	r3, [r7, #19]
 80074fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074fc:	7c7b      	ldrb	r3, [r7, #17]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d105      	bne.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007502:	4ba7      	ldr	r3, [pc, #668]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007506:	4aa6      	ldr	r2, [pc, #664]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800750c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00a      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800751a:	4ba1      	ldr	r3, [pc, #644]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800751c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007520:	f023 0203 	bic.w	r2, r3, #3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	499d      	ldr	r1, [pc, #628]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800752a:	4313      	orrs	r3, r2
 800752c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0302 	and.w	r3, r3, #2
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00a      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800753c:	4b98      	ldr	r3, [pc, #608]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800753e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007542:	f023 020c 	bic.w	r2, r3, #12
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	4995      	ldr	r1, [pc, #596]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800754c:	4313      	orrs	r3, r2
 800754e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0304 	and.w	r3, r3, #4
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00a      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800755e:	4b90      	ldr	r3, [pc, #576]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007564:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	498c      	ldr	r1, [pc, #560]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800756e:	4313      	orrs	r3, r2
 8007570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0308 	and.w	r3, r3, #8
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00a      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007580:	4b87      	ldr	r3, [pc, #540]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007586:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	4984      	ldr	r1, [pc, #528]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007590:	4313      	orrs	r3, r2
 8007592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0310 	and.w	r3, r3, #16
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00a      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80075a2:	4b7f      	ldr	r3, [pc, #508]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	695b      	ldr	r3, [r3, #20]
 80075b0:	497b      	ldr	r1, [pc, #492]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0320 	and.w	r3, r3, #32
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00a      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075c4:	4b76      	ldr	r3, [pc, #472]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	4973      	ldr	r1, [pc, #460]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00a      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075e6:	4b6e      	ldr	r3, [pc, #440]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	69db      	ldr	r3, [r3, #28]
 80075f4:	496a      	ldr	r1, [pc, #424]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00a      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007608:	4b65      	ldr	r3, [pc, #404]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800760a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800760e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	4962      	ldr	r1, [pc, #392]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007618:	4313      	orrs	r3, r2
 800761a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00a      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800762a:	4b5d      	ldr	r3, [pc, #372]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800762c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007630:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007638:	4959      	ldr	r1, [pc, #356]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800763a:	4313      	orrs	r3, r2
 800763c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00a      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800764c:	4b54      	ldr	r3, [pc, #336]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800764e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007652:	f023 0203 	bic.w	r2, r3, #3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765a:	4951      	ldr	r1, [pc, #324]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800765c:	4313      	orrs	r3, r2
 800765e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00a      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800766e:	4b4c      	ldr	r3, [pc, #304]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007674:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	4948      	ldr	r1, [pc, #288]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800767e:	4313      	orrs	r3, r2
 8007680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800768c:	2b00      	cmp	r3, #0
 800768e:	d015      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007690:	4b43      	ldr	r3, [pc, #268]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007696:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769e:	4940      	ldr	r1, [pc, #256]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076a0:	4313      	orrs	r3, r2
 80076a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076ae:	d105      	bne.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076b0:	4b3b      	ldr	r3, [pc, #236]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	4a3a      	ldr	r2, [pc, #232]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d015      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80076c8:	4b35      	ldr	r3, [pc, #212]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076d6:	4932      	ldr	r1, [pc, #200]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076e6:	d105      	bne.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076e8:	4b2d      	ldr	r3, [pc, #180]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	4a2c      	ldr	r2, [pc, #176]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076f2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d015      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007700:	4b27      	ldr	r3, [pc, #156]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007706:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770e:	4924      	ldr	r1, [pc, #144]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007710:	4313      	orrs	r3, r2
 8007712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800771e:	d105      	bne.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007720:	4b1f      	ldr	r3, [pc, #124]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	4a1e      	ldr	r2, [pc, #120]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007726:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800772a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d015      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007738:	4b19      	ldr	r3, [pc, #100]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800773a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007746:	4916      	ldr	r1, [pc, #88]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007748:	4313      	orrs	r3, r2
 800774a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007752:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007756:	d105      	bne.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007758:	4b11      	ldr	r3, [pc, #68]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	4a10      	ldr	r2, [pc, #64]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800775e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007762:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d019      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007770:	4b0b      	ldr	r3, [pc, #44]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007776:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777e:	4908      	ldr	r1, [pc, #32]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007780:	4313      	orrs	r3, r2
 8007782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800778e:	d109      	bne.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007790:	4b03      	ldr	r3, [pc, #12]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	4a02      	ldr	r2, [pc, #8]	; (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800779a:	60d3      	str	r3, [r2, #12]
 800779c:	e002      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800779e:	bf00      	nop
 80077a0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d015      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80077b0:	4b29      	ldr	r3, [pc, #164]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077be:	4926      	ldr	r1, [pc, #152]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077c0:	4313      	orrs	r3, r2
 80077c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077ce:	d105      	bne.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80077d0:	4b21      	ldr	r3, [pc, #132]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	4a20      	ldr	r2, [pc, #128]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077da:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d015      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80077e8:	4b1b      	ldr	r3, [pc, #108]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ee:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077f6:	4918      	ldr	r1, [pc, #96]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007806:	d105      	bne.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007808:	4b13      	ldr	r3, [pc, #76]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	4a12      	ldr	r2, [pc, #72]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800780e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007812:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d015      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007820:	4b0d      	ldr	r3, [pc, #52]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007822:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007826:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800782e:	490a      	ldr	r1, [pc, #40]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007830:	4313      	orrs	r3, r2
 8007832:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800783a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800783e:	d105      	bne.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007840:	4b05      	ldr	r3, [pc, #20]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	4a04      	ldr	r2, [pc, #16]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007846:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800784a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800784c:	7cbb      	ldrb	r3, [r7, #18]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	40021000 	.word	0x40021000

0800785c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d066      	beq.n	800793c <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d106      	bne.n	8007888 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7fb f9ac 	bl	8002be0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2202      	movs	r2, #2
 800788c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	22ca      	movs	r2, #202	; 0xca
 8007896:	625a      	str	r2, [r3, #36]	; 0x24
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2253      	movs	r2, #83	; 0x53
 800789e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f99a 	bl	8007bda <RTC_EnterInitMode>
 80078a6:	4603      	mov	r3, r0
 80078a8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d13a      	bne.n	8007926 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	6812      	ldr	r2, [r2, #0]
 80078ba:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80078be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078c2:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6999      	ldr	r1, [r3, #24]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	431a      	orrs	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	699b      	ldr	r3, [r3, #24]
 80078d8:	431a      	orrs	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68d9      	ldr	r1, [r3, #12]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	041a      	lsls	r2, r3, #16
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	430a      	orrs	r2, r1
 80078f2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f9a6 	bl	8007c46 <RTC_ExitInitMode>
 80078fa:	4603      	mov	r3, r0
 80078fc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80078fe:	7bfb      	ldrb	r3, [r7, #15]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d110      	bne.n	8007926 <HAL_RTC_Init+0xca>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a1a      	ldr	r2, [r3, #32]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	431a      	orrs	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	431a      	orrs	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	430a      	orrs	r2, r1
 8007924:	619a      	str	r2, [r3, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	22ff      	movs	r2, #255	; 0xff
 800792c:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800792e:	7bfb      	ldrb	r3, [r7, #15]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d103      	bne.n	800793c <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800793c:	7bfb      	ldrb	r3, [r7, #15]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007946:	b590      	push	{r4, r7, lr}
 8007948:	b087      	sub	sp, #28
 800794a:	af00      	add	r7, sp, #0
 800794c:	60f8      	str	r0, [r7, #12]
 800794e:	60b9      	str	r1, [r7, #8]
 8007950:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007958:	2b01      	cmp	r3, #1
 800795a:	d101      	bne.n	8007960 <HAL_RTC_SetTime+0x1a>
 800795c:	2302      	movs	r3, #2
 800795e:	e08b      	b.n	8007a78 <HAL_RTC_SetTime+0x132>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	22ca      	movs	r2, #202	; 0xca
 8007976:	625a      	str	r2, [r3, #36]	; 0x24
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2253      	movs	r2, #83	; 0x53
 800797e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 f92a 	bl	8007bda <RTC_EnterInitMode>
 8007986:	4603      	mov	r3, r0
 8007988:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800798a:	7cfb      	ldrb	r3, [r7, #19]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d163      	bne.n	8007a58 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d126      	bne.n	80079e4 <HAL_RTC_SetTime+0x9e>
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d102      	bne.n	80079aa <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2200      	movs	r2, #0
 80079a8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f000 f98c 	bl	8007ccc <RTC_ByteToBcd2>
 80079b4:	4603      	mov	r3, r0
 80079b6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	785b      	ldrb	r3, [r3, #1]
 80079bc:	4618      	mov	r0, r3
 80079be:	f000 f985 	bl	8007ccc <RTC_ByteToBcd2>
 80079c2:	4603      	mov	r3, r0
 80079c4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80079c6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	789b      	ldrb	r3, [r3, #2]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f000 f97d 	bl	8007ccc <RTC_ByteToBcd2>
 80079d2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80079d4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	78db      	ldrb	r3, [r3, #3]
 80079dc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80079de:	4313      	orrs	r3, r2
 80079e0:	617b      	str	r3, [r7, #20]
 80079e2:	e018      	b.n	8007a16 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d102      	bne.n	80079f8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	2200      	movs	r2, #0
 80079f6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	785b      	ldrb	r3, [r3, #1]
 8007a02:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007a04:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007a06:	68ba      	ldr	r2, [r7, #8]
 8007a08:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007a0a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	78db      	ldrb	r3, [r3, #3]
 8007a10:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007a12:	4313      	orrs	r3, r2
 8007a14:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(hrtc->Instance->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007a20:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007a24:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BKP);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	699a      	ldr	r2, [r3, #24]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007a34:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(hrtc->Instance->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	6999      	ldr	r1, [r3, #24]
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	68da      	ldr	r2, [r3, #12]
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	431a      	orrs	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f000 f8f9 	bl	8007c46 <RTC_ExitInitMode>
 8007a54:	4603      	mov	r3, r0
 8007a56:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	22ff      	movs	r2, #255	; 0xff
 8007a5e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007a60:	7cfb      	ldrb	r3, [r7, #19]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d103      	bne.n	8007a6e <HAL_RTC_SetTime+0x128>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
    __HAL_UNLOCK(hrtc);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8007a76:	7cfb      	ldrb	r3, [r7, #19]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	371c      	adds	r7, #28
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd90      	pop	{r4, r7, pc}

08007a80 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007a80:	b590      	push	{r4, r7, lr}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d101      	bne.n	8007a9a <HAL_RTC_SetDate+0x1a>
 8007a96:	2302      	movs	r3, #2
 8007a98:	e075      	b.n	8007b86 <HAL_RTC_SetDate+0x106>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10e      	bne.n	8007ace <HAL_RTC_SetDate+0x4e>
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	785b      	ldrb	r3, [r3, #1]
 8007ab4:	f003 0310 	and.w	r3, r3, #16
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d008      	beq.n	8007ace <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	785b      	ldrb	r3, [r3, #1]
 8007ac0:	f023 0310 	bic.w	r3, r3, #16
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	330a      	adds	r3, #10
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d11c      	bne.n	8007b0e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	78db      	ldrb	r3, [r3, #3]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f000 f8f7 	bl	8007ccc <RTC_ByteToBcd2>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	785b      	ldrb	r3, [r3, #1]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 f8f0 	bl	8007ccc <RTC_ByteToBcd2>
 8007aec:	4603      	mov	r3, r0
 8007aee:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007af0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	789b      	ldrb	r3, [r3, #2]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 f8e8 	bl	8007ccc <RTC_ByteToBcd2>
 8007afc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007afe:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	617b      	str	r3, [r7, #20]
 8007b0c:	e00e      	b.n	8007b2c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	78db      	ldrb	r3, [r3, #3]
 8007b12:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	785b      	ldrb	r3, [r3, #1]
 8007b18:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007b1a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007b20:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	22ca      	movs	r2, #202	; 0xca
 8007b32:	625a      	str	r2, [r3, #36]	; 0x24
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2253      	movs	r2, #83	; 0x53
 8007b3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f000 f84c 	bl	8007bda <RTC_EnterInitMode>
 8007b42:	4603      	mov	r3, r0
 8007b44:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007b46:	7cfb      	ldrb	r3, [r7, #19]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10c      	bne.n	8007b66 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    WRITE_REG(hrtc->Instance->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007b56:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007b5a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 f872 	bl	8007c46 <RTC_ExitInitMode>
 8007b62:	4603      	mov	r3, r0
 8007b64:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	22ff      	movs	r2, #255	; 0xff
 8007b6c:	625a      	str	r2, [r3, #36]	; 0x24
 
  if (status == HAL_OK)
 8007b6e:	7cfb      	ldrb	r3, [r7, #19]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d103      	bne.n	8007b7c <HAL_RTC_SetDate+0xfc>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8007b84:	7cfb      	ldrb	r3, [r7, #19]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	371c      	adds	r7, #28
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd90      	pop	{r4, r7, pc}

08007b8e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b084      	sub	sp, #16
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68da      	ldr	r2, [r3, #12]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f022 0220 	bic.w	r2, r2, #32
 8007ba4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007ba6:	f7fb fa39 	bl	800301c <HAL_GetTick>
 8007baa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8007bac:	e009      	b.n	8007bc2 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007bae:	f7fb fa35 	bl	800301c <HAL_GetTick>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bbc:	d901      	bls.n	8007bc2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e007      	b.n	8007bd2 <HAL_RTC_WaitForSynchro+0x44>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	f003 0320 	and.w	r3, r3, #32
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d0ee      	beq.n	8007bae <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d123      	bne.n	8007c3c <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68da      	ldr	r2, [r3, #12]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007c02:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007c04:	f7fb fa0a 	bl	800301c <HAL_GetTick>
 8007c08:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007c0a:	e00d      	b.n	8007c28 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007c0c:	f7fb fa06 	bl	800301c <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c1a:	d905      	bls.n	8007c28 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2203      	movs	r2, #3
 8007c24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d102      	bne.n	8007c3c <RTC_EnterInitMode+0x62>
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
 8007c38:	2b03      	cmp	r3, #3
 8007c3a:	d1e7      	bne.n	8007c0c <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b084      	sub	sp, #16
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68da      	ldr	r2, [r3, #12]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c60:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	f003 0320 	and.w	r3, r3, #32
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10c      	bne.n	8007c8a <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7ff ff8c 	bl	8007b8e <HAL_RTC_WaitForSynchro>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d022      	beq.n	8007cc2 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2203      	movs	r2, #3
 8007c80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	73fb      	strb	r3, [r7, #15]
 8007c88:	e01b      	b.n	8007cc2 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	699a      	ldr	r2, [r3, #24]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f022 0220 	bic.w	r2, r2, #32
 8007c98:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7ff ff77 	bl	8007b8e <HAL_RTC_WaitForSynchro>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d005      	beq.n	8007cb2 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2203      	movs	r2, #3
 8007caa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	699a      	ldr	r2, [r3, #24]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f042 0220 	orr.w	r2, r2, #32
 8007cc0:	619a      	str	r2, [r3, #24]
  }

  return status;
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8007cda:	79fb      	ldrb	r3, [r7, #7]
 8007cdc:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8007cde:	e005      	b.n	8007cec <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8007ce6:	7afb      	ldrb	r3, [r7, #11]
 8007ce8:	3b0a      	subs	r3, #10
 8007cea:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8007cec:	7afb      	ldrb	r3, [r7, #11]
 8007cee:	2b09      	cmp	r3, #9
 8007cf0:	d8f6      	bhi.n	8007ce0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	011b      	lsls	r3, r3, #4
 8007cf8:	b2da      	uxtb	r2, r3
 8007cfa:	7afb      	ldrb	r3, [r7, #11]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	b2db      	uxtb	r3, r3
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3714      	adds	r7, #20
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e09d      	b.n	8007e5a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d108      	bne.n	8007d38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d2e:	d009      	beq.n	8007d44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	61da      	str	r2, [r3, #28]
 8007d36:	e005      	b.n	8007d44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d106      	bne.n	8007d64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7fa ff7a 	bl	8002c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2202      	movs	r2, #2
 8007d68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d84:	d902      	bls.n	8007d8c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007d86:	2300      	movs	r3, #0
 8007d88:	60fb      	str	r3, [r7, #12]
 8007d8a:	e002      	b.n	8007d92 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d90:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007d9a:	d007      	beq.n	8007dac <HAL_SPI_Init+0xa0>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007da4:	d002      	beq.n	8007dac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	f003 0302 	and.w	r3, r3, #2
 8007dc6:	431a      	orrs	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	431a      	orrs	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dda:	431a      	orrs	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	69db      	ldr	r3, [r3, #28]
 8007de0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007de4:	431a      	orrs	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dee:	ea42 0103 	orr.w	r1, r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	0c1b      	lsrs	r3, r3, #16
 8007e08:	f003 0204 	and.w	r2, r3, #4
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e10:	f003 0310 	and.w	r3, r3, #16
 8007e14:	431a      	orrs	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1a:	f003 0308 	and.w	r3, r3, #8
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007e28:	ea42 0103 	orr.w	r1, r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	430a      	orrs	r2, r1
 8007e38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	69da      	ldr	r2, [r3, #28]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b088      	sub	sp, #32
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	60f8      	str	r0, [r7, #12]
 8007e6a:	60b9      	str	r1, [r7, #8]
 8007e6c:	603b      	str	r3, [r7, #0]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d101      	bne.n	8007e84 <HAL_SPI_Transmit+0x22>
 8007e80:	2302      	movs	r3, #2
 8007e82:	e158      	b.n	8008136 <HAL_SPI_Transmit+0x2d4>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e8c:	f7fb f8c6 	bl	800301c <HAL_GetTick>
 8007e90:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007e92:	88fb      	ldrh	r3, [r7, #6]
 8007e94:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d002      	beq.n	8007ea8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007ea6:	e13d      	b.n	8008124 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d002      	beq.n	8007eb4 <HAL_SPI_Transmit+0x52>
 8007eae:	88fb      	ldrh	r3, [r7, #6]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d102      	bne.n	8007eba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007eb8:	e134      	b.n	8008124 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2203      	movs	r2, #3
 8007ebe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	88fa      	ldrh	r2, [r7, #6]
 8007ed2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	88fa      	ldrh	r2, [r7, #6]
 8007ed8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f04:	d10f      	bne.n	8007f26 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f30:	2b40      	cmp	r3, #64	; 0x40
 8007f32:	d007      	beq.n	8007f44 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f4c:	d94b      	bls.n	8007fe6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d002      	beq.n	8007f5c <HAL_SPI_Transmit+0xfa>
 8007f56:	8afb      	ldrh	r3, [r7, #22]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d13e      	bne.n	8007fda <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f60:	881a      	ldrh	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6c:	1c9a      	adds	r2, r3, #2
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007f80:	e02b      	b.n	8007fda <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f003 0302 	and.w	r3, r3, #2
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d112      	bne.n	8007fb6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f94:	881a      	ldrh	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa0:	1c9a      	adds	r2, r3, #2
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	3b01      	subs	r3, #1
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007fb4:	e011      	b.n	8007fda <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fb6:	f7fb f831 	bl	800301c <HAL_GetTick>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	683a      	ldr	r2, [r7, #0]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d803      	bhi.n	8007fce <HAL_SPI_Transmit+0x16c>
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fcc:	d102      	bne.n	8007fd4 <HAL_SPI_Transmit+0x172>
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d102      	bne.n	8007fda <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007fd8:	e0a4      	b.n	8008124 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1ce      	bne.n	8007f82 <HAL_SPI_Transmit+0x120>
 8007fe4:	e07c      	b.n	80080e0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d002      	beq.n	8007ff4 <HAL_SPI_Transmit+0x192>
 8007fee:	8afb      	ldrh	r3, [r7, #22]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d170      	bne.n	80080d6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d912      	bls.n	8008024 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008002:	881a      	ldrh	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800e:	1c9a      	adds	r2, r3, #2
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008018:	b29b      	uxth	r3, r3
 800801a:	3b02      	subs	r3, #2
 800801c:	b29a      	uxth	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008022:	e058      	b.n	80080d6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	330c      	adds	r3, #12
 800802e:	7812      	ldrb	r2, [r2, #0]
 8008030:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008036:	1c5a      	adds	r2, r3, #1
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008040:	b29b      	uxth	r3, r3
 8008042:	3b01      	subs	r3, #1
 8008044:	b29a      	uxth	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800804a:	e044      	b.n	80080d6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	f003 0302 	and.w	r3, r3, #2
 8008056:	2b02      	cmp	r3, #2
 8008058:	d12b      	bne.n	80080b2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800805e:	b29b      	uxth	r3, r3
 8008060:	2b01      	cmp	r3, #1
 8008062:	d912      	bls.n	800808a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008068:	881a      	ldrh	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008074:	1c9a      	adds	r2, r3, #2
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800807e:	b29b      	uxth	r3, r3
 8008080:	3b02      	subs	r3, #2
 8008082:	b29a      	uxth	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008088:	e025      	b.n	80080d6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	330c      	adds	r3, #12
 8008094:	7812      	ldrb	r2, [r2, #0]
 8008096:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809c:	1c5a      	adds	r2, r3, #1
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	3b01      	subs	r3, #1
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080b0:	e011      	b.n	80080d6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080b2:	f7fa ffb3 	bl	800301c <HAL_GetTick>
 80080b6:	4602      	mov	r2, r0
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d803      	bhi.n	80080ca <HAL_SPI_Transmit+0x268>
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c8:	d102      	bne.n	80080d0 <HAL_SPI_Transmit+0x26e>
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d102      	bne.n	80080d6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80080d4:	e026      	b.n	8008124 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080da:	b29b      	uxth	r3, r3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1b5      	bne.n	800804c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080e0:	69ba      	ldr	r2, [r7, #24]
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 fce3 	bl	8008ab0 <SPI_EndRxTxTransaction>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d002      	beq.n	80080f6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2220      	movs	r2, #32
 80080f4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10a      	bne.n	8008114 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080fe:	2300      	movs	r3, #0
 8008100:	613b      	str	r3, [r7, #16]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	613b      	str	r3, [r7, #16]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	613b      	str	r3, [r7, #16]
 8008112:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008118:	2b00      	cmp	r3, #0
 800811a:	d002      	beq.n	8008122 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	77fb      	strb	r3, [r7, #31]
 8008120:	e000      	b.n	8008124 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8008122:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008134:	7ffb      	ldrb	r3, [r7, #31]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3720      	adds	r7, #32
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b088      	sub	sp, #32
 8008142:	af02      	add	r7, sp, #8
 8008144:	60f8      	str	r0, [r7, #12]
 8008146:	60b9      	str	r1, [r7, #8]
 8008148:	603b      	str	r3, [r7, #0]
 800814a:	4613      	mov	r3, r2
 800814c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800815a:	d112      	bne.n	8008182 <HAL_SPI_Receive+0x44>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10e      	bne.n	8008182 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2204      	movs	r2, #4
 8008168:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800816c:	88fa      	ldrh	r2, [r7, #6]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	4613      	mov	r3, r2
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	68b9      	ldr	r1, [r7, #8]
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f000 f910 	bl	800839e <HAL_SPI_TransmitReceive>
 800817e:	4603      	mov	r3, r0
 8008180:	e109      	b.n	8008396 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008188:	2b01      	cmp	r3, #1
 800818a:	d101      	bne.n	8008190 <HAL_SPI_Receive+0x52>
 800818c:	2302      	movs	r3, #2
 800818e:	e102      	b.n	8008396 <HAL_SPI_Receive+0x258>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008198:	f7fa ff40 	bl	800301c <HAL_GetTick>
 800819c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d002      	beq.n	80081b0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80081aa:	2302      	movs	r3, #2
 80081ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80081ae:	e0e9      	b.n	8008384 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d002      	beq.n	80081bc <HAL_SPI_Receive+0x7e>
 80081b6:	88fb      	ldrh	r3, [r7, #6]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d102      	bne.n	80081c2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80081c0:	e0e0      	b.n	8008384 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2204      	movs	r2, #4
 80081c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	88fa      	ldrh	r2, [r7, #6]
 80081da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	88fa      	ldrh	r2, [r7, #6]
 80081e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800820c:	d908      	bls.n	8008220 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	685a      	ldr	r2, [r3, #4]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800821c:	605a      	str	r2, [r3, #4]
 800821e:	e007      	b.n	8008230 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800822e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008238:	d10f      	bne.n	800825a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008248:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008258:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008264:	2b40      	cmp	r3, #64	; 0x40
 8008266:	d007      	beq.n	8008278 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008276:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008280:	d867      	bhi.n	8008352 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008282:	e030      	b.n	80082e6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	2b01      	cmp	r3, #1
 8008290:	d117      	bne.n	80082c2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f103 020c 	add.w	r2, r3, #12
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829e:	7812      	ldrb	r2, [r2, #0]
 80082a0:	b2d2      	uxtb	r2, r2
 80082a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a8:	1c5a      	adds	r2, r3, #1
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	3b01      	subs	r3, #1
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80082c0:	e011      	b.n	80082e6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082c2:	f7fa feab 	bl	800301c <HAL_GetTick>
 80082c6:	4602      	mov	r2, r0
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	683a      	ldr	r2, [r7, #0]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d803      	bhi.n	80082da <HAL_SPI_Receive+0x19c>
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d8:	d102      	bne.n	80082e0 <HAL_SPI_Receive+0x1a2>
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d102      	bne.n	80082e6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80082e4:	e04e      	b.n	8008384 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1c8      	bne.n	8008284 <HAL_SPI_Receive+0x146>
 80082f2:	e034      	b.n	800835e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f003 0301 	and.w	r3, r3, #1
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d115      	bne.n	800832e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68da      	ldr	r2, [r3, #12]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830c:	b292      	uxth	r2, r2
 800830e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008314:	1c9a      	adds	r2, r3, #2
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008320:	b29b      	uxth	r3, r3
 8008322:	3b01      	subs	r3, #1
 8008324:	b29a      	uxth	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800832c:	e011      	b.n	8008352 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800832e:	f7fa fe75 	bl	800301c <HAL_GetTick>
 8008332:	4602      	mov	r2, r0
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	429a      	cmp	r2, r3
 800833c:	d803      	bhi.n	8008346 <HAL_SPI_Receive+0x208>
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008344:	d102      	bne.n	800834c <HAL_SPI_Receive+0x20e>
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d102      	bne.n	8008352 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008350:	e018      	b.n	8008384 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008358:	b29b      	uxth	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1ca      	bne.n	80082f4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800835e:	693a      	ldr	r2, [r7, #16]
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	f000 fb4c 	bl	8008a00 <SPI_EndRxTransaction>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d002      	beq.n	8008374 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2220      	movs	r2, #32
 8008372:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008378:	2b00      	cmp	r3, #0
 800837a:	d002      	beq.n	8008382 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	75fb      	strb	r3, [r7, #23]
 8008380:	e000      	b.n	8008384 <HAL_SPI_Receive+0x246>
  }

error :
 8008382:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008394:	7dfb      	ldrb	r3, [r7, #23]
}
 8008396:	4618      	mov	r0, r3
 8008398:	3718      	adds	r7, #24
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b08a      	sub	sp, #40	; 0x28
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	60f8      	str	r0, [r7, #12]
 80083a6:	60b9      	str	r1, [r7, #8]
 80083a8:	607a      	str	r2, [r7, #4]
 80083aa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80083ac:	2301      	movs	r3, #1
 80083ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d101      	bne.n	80083c4 <HAL_SPI_TransmitReceive+0x26>
 80083c0:	2302      	movs	r3, #2
 80083c2:	e1fb      	b.n	80087bc <HAL_SPI_TransmitReceive+0x41e>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083cc:	f7fa fe26 	bl	800301c <HAL_GetTick>
 80083d0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80083d8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80083e0:	887b      	ldrh	r3, [r7, #2]
 80083e2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80083e4:	887b      	ldrh	r3, [r7, #2]
 80083e6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80083e8:	7efb      	ldrb	r3, [r7, #27]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d00e      	beq.n	800840c <HAL_SPI_TransmitReceive+0x6e>
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083f4:	d106      	bne.n	8008404 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d102      	bne.n	8008404 <HAL_SPI_TransmitReceive+0x66>
 80083fe:	7efb      	ldrb	r3, [r7, #27]
 8008400:	2b04      	cmp	r3, #4
 8008402:	d003      	beq.n	800840c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008404:	2302      	movs	r3, #2
 8008406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800840a:	e1cd      	b.n	80087a8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d005      	beq.n	800841e <HAL_SPI_TransmitReceive+0x80>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d002      	beq.n	800841e <HAL_SPI_TransmitReceive+0x80>
 8008418:	887b      	ldrh	r3, [r7, #2]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d103      	bne.n	8008426 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008424:	e1c0      	b.n	80087a8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b04      	cmp	r3, #4
 8008430:	d003      	beq.n	800843a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2205      	movs	r2, #5
 8008436:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	887a      	ldrh	r2, [r7, #2]
 800844a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	887a      	ldrh	r2, [r7, #2]
 8008452:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	887a      	ldrh	r2, [r7, #2]
 8008460:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	887a      	ldrh	r2, [r7, #2]
 8008466:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800847c:	d802      	bhi.n	8008484 <HAL_SPI_TransmitReceive+0xe6>
 800847e:	8a3b      	ldrh	r3, [r7, #16]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d908      	bls.n	8008496 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	685a      	ldr	r2, [r3, #4]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008492:	605a      	str	r2, [r3, #4]
 8008494:	e007      	b.n	80084a6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	685a      	ldr	r2, [r3, #4]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80084a4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b0:	2b40      	cmp	r3, #64	; 0x40
 80084b2:	d007      	beq.n	80084c4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80084cc:	d97c      	bls.n	80085c8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d002      	beq.n	80084dc <HAL_SPI_TransmitReceive+0x13e>
 80084d6:	8a7b      	ldrh	r3, [r7, #18]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d169      	bne.n	80085b0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e0:	881a      	ldrh	r2, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ec:	1c9a      	adds	r2, r3, #2
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	3b01      	subs	r3, #1
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008500:	e056      	b.n	80085b0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	f003 0302 	and.w	r3, r3, #2
 800850c:	2b02      	cmp	r3, #2
 800850e:	d11b      	bne.n	8008548 <HAL_SPI_TransmitReceive+0x1aa>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008514:	b29b      	uxth	r3, r3
 8008516:	2b00      	cmp	r3, #0
 8008518:	d016      	beq.n	8008548 <HAL_SPI_TransmitReceive+0x1aa>
 800851a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851c:	2b01      	cmp	r3, #1
 800851e:	d113      	bne.n	8008548 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008524:	881a      	ldrh	r2, [r3, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008530:	1c9a      	adds	r2, r3, #2
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800853a:	b29b      	uxth	r3, r3
 800853c:	3b01      	subs	r3, #1
 800853e:	b29a      	uxth	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008544:	2300      	movs	r3, #0
 8008546:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	2b01      	cmp	r3, #1
 8008554:	d11c      	bne.n	8008590 <HAL_SPI_TransmitReceive+0x1f2>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800855c:	b29b      	uxth	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d016      	beq.n	8008590 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	68da      	ldr	r2, [r3, #12]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856c:	b292      	uxth	r2, r2
 800856e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008574:	1c9a      	adds	r2, r3, #2
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008580:	b29b      	uxth	r3, r3
 8008582:	3b01      	subs	r3, #1
 8008584:	b29a      	uxth	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800858c:	2301      	movs	r3, #1
 800858e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008590:	f7fa fd44 	bl	800301c <HAL_GetTick>
 8008594:	4602      	mov	r2, r0
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800859c:	429a      	cmp	r2, r3
 800859e:	d807      	bhi.n	80085b0 <HAL_SPI_TransmitReceive+0x212>
 80085a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a6:	d003      	beq.n	80085b0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80085ae:	e0fb      	b.n	80087a8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1a3      	bne.n	8008502 <HAL_SPI_TransmitReceive+0x164>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d19d      	bne.n	8008502 <HAL_SPI_TransmitReceive+0x164>
 80085c6:	e0df      	b.n	8008788 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d003      	beq.n	80085d8 <HAL_SPI_TransmitReceive+0x23a>
 80085d0:	8a7b      	ldrh	r3, [r7, #18]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	f040 80cb 	bne.w	800876e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085dc:	b29b      	uxth	r3, r3
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d912      	bls.n	8008608 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e6:	881a      	ldrh	r2, [r3, #0]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f2:	1c9a      	adds	r2, r3, #2
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	3b02      	subs	r3, #2
 8008600:	b29a      	uxth	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008606:	e0b2      	b.n	800876e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	330c      	adds	r3, #12
 8008612:	7812      	ldrb	r2, [r2, #0]
 8008614:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008624:	b29b      	uxth	r3, r3
 8008626:	3b01      	subs	r3, #1
 8008628:	b29a      	uxth	r2, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800862e:	e09e      	b.n	800876e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f003 0302 	and.w	r3, r3, #2
 800863a:	2b02      	cmp	r3, #2
 800863c:	d134      	bne.n	80086a8 <HAL_SPI_TransmitReceive+0x30a>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008642:	b29b      	uxth	r3, r3
 8008644:	2b00      	cmp	r3, #0
 8008646:	d02f      	beq.n	80086a8 <HAL_SPI_TransmitReceive+0x30a>
 8008648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864a:	2b01      	cmp	r3, #1
 800864c:	d12c      	bne.n	80086a8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008652:	b29b      	uxth	r3, r3
 8008654:	2b01      	cmp	r3, #1
 8008656:	d912      	bls.n	800867e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865c:	881a      	ldrh	r2, [r3, #0]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008668:	1c9a      	adds	r2, r3, #2
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008672:	b29b      	uxth	r3, r3
 8008674:	3b02      	subs	r3, #2
 8008676:	b29a      	uxth	r2, r3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800867c:	e012      	b.n	80086a4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	330c      	adds	r3, #12
 8008688:	7812      	ldrb	r2, [r2, #0]
 800868a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008690:	1c5a      	adds	r2, r3, #1
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800869a:	b29b      	uxth	r3, r3
 800869c:	3b01      	subs	r3, #1
 800869e:	b29a      	uxth	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80086a4:	2300      	movs	r3, #0
 80086a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f003 0301 	and.w	r3, r3, #1
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d148      	bne.n	8008748 <HAL_SPI_TransmitReceive+0x3aa>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086bc:	b29b      	uxth	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d042      	beq.n	8008748 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d923      	bls.n	8008716 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68da      	ldr	r2, [r3, #12]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d8:	b292      	uxth	r2, r2
 80086da:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e0:	1c9a      	adds	r2, r3, #2
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	3b02      	subs	r3, #2
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086fe:	b29b      	uxth	r3, r3
 8008700:	2b01      	cmp	r3, #1
 8008702:	d81f      	bhi.n	8008744 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	685a      	ldr	r2, [r3, #4]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008712:	605a      	str	r2, [r3, #4]
 8008714:	e016      	b.n	8008744 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f103 020c 	add.w	r2, r3, #12
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008722:	7812      	ldrb	r2, [r2, #0]
 8008724:	b2d2      	uxtb	r2, r2
 8008726:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872c:	1c5a      	adds	r2, r3, #1
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008738:	b29b      	uxth	r3, r3
 800873a:	3b01      	subs	r3, #1
 800873c:	b29a      	uxth	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008744:	2301      	movs	r3, #1
 8008746:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008748:	f7fa fc68 	bl	800301c <HAL_GetTick>
 800874c:	4602      	mov	r2, r0
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008754:	429a      	cmp	r2, r3
 8008756:	d803      	bhi.n	8008760 <HAL_SPI_TransmitReceive+0x3c2>
 8008758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800875e:	d102      	bne.n	8008766 <HAL_SPI_TransmitReceive+0x3c8>
 8008760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008762:	2b00      	cmp	r3, #0
 8008764:	d103      	bne.n	800876e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800876c:	e01c      	b.n	80087a8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008772:	b29b      	uxth	r3, r3
 8008774:	2b00      	cmp	r3, #0
 8008776:	f47f af5b 	bne.w	8008630 <HAL_SPI_TransmitReceive+0x292>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008780:	b29b      	uxth	r3, r3
 8008782:	2b00      	cmp	r3, #0
 8008784:	f47f af54 	bne.w	8008630 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008788:	69fa      	ldr	r2, [r7, #28]
 800878a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f000 f98f 	bl	8008ab0 <SPI_EndRxTxTransaction>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d006      	beq.n	80087a6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2220      	movs	r2, #32
 80087a2:	661a      	str	r2, [r3, #96]	; 0x60
 80087a4:	e000      	b.n	80087a8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80087a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80087b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3728      	adds	r7, #40	; 0x28
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b088      	sub	sp, #32
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	603b      	str	r3, [r7, #0]
 80087d0:	4613      	mov	r3, r2
 80087d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80087d4:	f7fa fc22 	bl	800301c <HAL_GetTick>
 80087d8:	4602      	mov	r2, r0
 80087da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087dc:	1a9b      	subs	r3, r3, r2
 80087de:	683a      	ldr	r2, [r7, #0]
 80087e0:	4413      	add	r3, r2
 80087e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80087e4:	f7fa fc1a 	bl	800301c <HAL_GetTick>
 80087e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80087ea:	4b39      	ldr	r3, [pc, #228]	; (80088d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	015b      	lsls	r3, r3, #5
 80087f0:	0d1b      	lsrs	r3, r3, #20
 80087f2:	69fa      	ldr	r2, [r7, #28]
 80087f4:	fb02 f303 	mul.w	r3, r2, r3
 80087f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087fa:	e054      	b.n	80088a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008802:	d050      	beq.n	80088a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008804:	f7fa fc0a 	bl	800301c <HAL_GetTick>
 8008808:	4602      	mov	r2, r0
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	69fa      	ldr	r2, [r7, #28]
 8008810:	429a      	cmp	r2, r3
 8008812:	d902      	bls.n	800881a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d13d      	bne.n	8008896 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	685a      	ldr	r2, [r3, #4]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008828:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008832:	d111      	bne.n	8008858 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800883c:	d004      	beq.n	8008848 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008846:	d107      	bne.n	8008858 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008856:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008860:	d10f      	bne.n	8008882 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008870:	601a      	str	r2, [r3, #0]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008880:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2201      	movs	r2, #1
 8008886:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e017      	b.n	80088c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800889c:	2300      	movs	r3, #0
 800889e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	3b01      	subs	r3, #1
 80088a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	689a      	ldr	r2, [r3, #8]
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	4013      	ands	r3, r2
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	bf0c      	ite	eq
 80088b6:	2301      	moveq	r3, #1
 80088b8:	2300      	movne	r3, #0
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	461a      	mov	r2, r3
 80088be:	79fb      	ldrb	r3, [r7, #7]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d19b      	bne.n	80087fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3720      	adds	r7, #32
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	20000000 	.word	0x20000000

080088d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b08a      	sub	sp, #40	; 0x28
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
 80088e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80088e2:	2300      	movs	r3, #0
 80088e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80088e6:	f7fa fb99 	bl	800301c <HAL_GetTick>
 80088ea:	4602      	mov	r2, r0
 80088ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ee:	1a9b      	subs	r3, r3, r2
 80088f0:	683a      	ldr	r2, [r7, #0]
 80088f2:	4413      	add	r3, r2
 80088f4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80088f6:	f7fa fb91 	bl	800301c <HAL_GetTick>
 80088fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	330c      	adds	r3, #12
 8008902:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008904:	4b3d      	ldr	r3, [pc, #244]	; (80089fc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	4613      	mov	r3, r2
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	4413      	add	r3, r2
 800890e:	00da      	lsls	r2, r3, #3
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	0d1b      	lsrs	r3, r3, #20
 8008914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008916:	fb02 f303 	mul.w	r3, r2, r3
 800891a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800891c:	e060      	b.n	80089e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008924:	d107      	bne.n	8008936 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d104      	bne.n	8008936 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	b2db      	uxtb	r3, r3
 8008932:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008934:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893c:	d050      	beq.n	80089e0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800893e:	f7fa fb6d 	bl	800301c <HAL_GetTick>
 8008942:	4602      	mov	r2, r0
 8008944:	6a3b      	ldr	r3, [r7, #32]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800894a:	429a      	cmp	r2, r3
 800894c:	d902      	bls.n	8008954 <SPI_WaitFifoStateUntilTimeout+0x80>
 800894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008950:	2b00      	cmp	r3, #0
 8008952:	d13d      	bne.n	80089d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	685a      	ldr	r2, [r3, #4]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008962:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800896c:	d111      	bne.n	8008992 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008976:	d004      	beq.n	8008982 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008980:	d107      	bne.n	8008992 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008990:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800899a:	d10f      	bne.n	80089bc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089aa:	601a      	str	r2, [r3, #0]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80089ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e010      	b.n	80089f2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d101      	bne.n	80089da <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80089d6:	2300      	movs	r3, #0
 80089d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	3b01      	subs	r3, #1
 80089de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	689a      	ldr	r2, [r3, #8]
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	4013      	ands	r3, r2
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d196      	bne.n	800891e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3728      	adds	r7, #40	; 0x28
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	20000000 	.word	0x20000000

08008a00 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b086      	sub	sp, #24
 8008a04:	af02      	add	r7, sp, #8
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a14:	d111      	bne.n	8008a3a <SPI_EndRxTransaction+0x3a>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a1e:	d004      	beq.n	8008a2a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a28:	d107      	bne.n	8008a3a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a38:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	9300      	str	r3, [sp, #0]
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	2200      	movs	r2, #0
 8008a42:	2180      	movs	r1, #128	; 0x80
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f7ff febd 	bl	80087c4 <SPI_WaitFlagStateUntilTimeout>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d007      	beq.n	8008a60 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a54:	f043 0220 	orr.w	r2, r3, #32
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e023      	b.n	8008aa8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a68:	d11d      	bne.n	8008aa6 <SPI_EndRxTransaction+0xa6>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a72:	d004      	beq.n	8008a7e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a7c:	d113      	bne.n	8008aa6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f7ff ff22 	bl	80088d4 <SPI_WaitFifoStateUntilTimeout>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d007      	beq.n	8008aa6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a9a:	f043 0220 	orr.w	r2, r3, #32
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e000      	b.n	8008aa8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af02      	add	r7, sp, #8
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008ac8:	68f8      	ldr	r0, [r7, #12]
 8008aca:	f7ff ff03 	bl	80088d4 <SPI_WaitFifoStateUntilTimeout>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d007      	beq.n	8008ae4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ad8:	f043 0220 	orr.w	r2, r3, #32
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e027      	b.n	8008b34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	9300      	str	r3, [sp, #0]
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	2200      	movs	r2, #0
 8008aec:	2180      	movs	r1, #128	; 0x80
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f7ff fe68 	bl	80087c4 <SPI_WaitFlagStateUntilTimeout>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d007      	beq.n	8008b0a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008afe:	f043 0220 	orr.w	r2, r3, #32
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008b06:	2303      	movs	r3, #3
 8008b08:	e014      	b.n	8008b34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f7ff fedc 	bl	80088d4 <SPI_WaitFifoStateUntilTimeout>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d007      	beq.n	8008b32 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b26:	f043 0220 	orr.w	r2, r3, #32
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	e000      	b.n	8008b34 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3710      	adds	r7, #16
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d101      	bne.n	8008b4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e049      	b.n	8008be2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d106      	bne.n	8008b68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f7fa f8bc 	bl	8002ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2202      	movs	r2, #2
 8008b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	3304      	adds	r3, #4
 8008b78:	4619      	mov	r1, r3
 8008b7a:	4610      	mov	r0, r2
 8008b7c:	f000 fdb0 	bl	80096e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b082      	sub	sp, #8
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d101      	bne.n	8008bfc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e049      	b.n	8008c90 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d106      	bne.n	8008c16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f841 	bl	8008c98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2202      	movs	r2, #2
 8008c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	3304      	adds	r3, #4
 8008c26:	4619      	mov	r1, r3
 8008c28:	4610      	mov	r0, r2
 8008c2a:	f000 fd59 	bl	80096e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2201      	movs	r2, #1
 8008c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2201      	movs	r2, #1
 8008c82:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3708      	adds	r7, #8
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d101      	bne.n	8008cbe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e049      	b.n	8008d52 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d106      	bne.n	8008cd8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f841 	bl	8008d5a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2202      	movs	r2, #2
 8008cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	4619      	mov	r1, r3
 8008cea:	4610      	mov	r0, r2
 8008cec:	f000 fcf8 	bl	80096e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3708      	adds	r7, #8
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b083      	sub	sp, #12
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008d62:	bf00      	nop
 8008d64:	370c      	adds	r7, #12
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr

08008d6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b082      	sub	sp, #8
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	f003 0302 	and.w	r3, r3, #2
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	d122      	bne.n	8008dca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	f003 0302 	and.w	r3, r3, #2
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d11b      	bne.n	8008dca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f06f 0202 	mvn.w	r2, #2
 8008d9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	699b      	ldr	r3, [r3, #24]
 8008da8:	f003 0303 	and.w	r3, r3, #3
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d003      	beq.n	8008db8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 fc77 	bl	80096a4 <HAL_TIM_IC_CaptureCallback>
 8008db6:	e005      	b.n	8008dc4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 fc69 	bl	8009690 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fc7a 	bl	80096b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	f003 0304 	and.w	r3, r3, #4
 8008dd4:	2b04      	cmp	r3, #4
 8008dd6:	d122      	bne.n	8008e1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	f003 0304 	and.w	r3, r3, #4
 8008de2:	2b04      	cmp	r3, #4
 8008de4:	d11b      	bne.n	8008e1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f06f 0204 	mvn.w	r2, #4
 8008dee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2202      	movs	r2, #2
 8008df4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d003      	beq.n	8008e0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fc4d 	bl	80096a4 <HAL_TIM_IC_CaptureCallback>
 8008e0a:	e005      	b.n	8008e18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fc3f 	bl	8009690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fc50 	bl	80096b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	f003 0308 	and.w	r3, r3, #8
 8008e28:	2b08      	cmp	r3, #8
 8008e2a:	d122      	bne.n	8008e72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	f003 0308 	and.w	r3, r3, #8
 8008e36:	2b08      	cmp	r3, #8
 8008e38:	d11b      	bne.n	8008e72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f06f 0208 	mvn.w	r2, #8
 8008e42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2204      	movs	r2, #4
 8008e48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	69db      	ldr	r3, [r3, #28]
 8008e50:	f003 0303 	and.w	r3, r3, #3
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d003      	beq.n	8008e60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fc23 	bl	80096a4 <HAL_TIM_IC_CaptureCallback>
 8008e5e:	e005      	b.n	8008e6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fc15 	bl	8009690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fc26 	bl	80096b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	f003 0310 	and.w	r3, r3, #16
 8008e7c:	2b10      	cmp	r3, #16
 8008e7e:	d122      	bne.n	8008ec6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	f003 0310 	and.w	r3, r3, #16
 8008e8a:	2b10      	cmp	r3, #16
 8008e8c:	d11b      	bne.n	8008ec6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f06f 0210 	mvn.w	r2, #16
 8008e96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2208      	movs	r2, #8
 8008e9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	69db      	ldr	r3, [r3, #28]
 8008ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d003      	beq.n	8008eb4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fbf9 	bl	80096a4 <HAL_TIM_IC_CaptureCallback>
 8008eb2:	e005      	b.n	8008ec0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fbeb 	bl	8009690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fbfc 	bl	80096b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	f003 0301 	and.w	r3, r3, #1
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d10e      	bne.n	8008ef2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d107      	bne.n	8008ef2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f06f 0201 	mvn.w	r2, #1
 8008eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fbc5 	bl	800967c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008efc:	2b80      	cmp	r3, #128	; 0x80
 8008efe:	d10e      	bne.n	8008f1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f0a:	2b80      	cmp	r3, #128	; 0x80
 8008f0c:	d107      	bne.n	8008f1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f001 faf9 	bl	800a510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f2c:	d10e      	bne.n	8008f4c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f38:	2b80      	cmp	r3, #128	; 0x80
 8008f3a:	d107      	bne.n	8008f4c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f001 faec 	bl	800a524 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f56:	2b40      	cmp	r3, #64	; 0x40
 8008f58:	d10e      	bne.n	8008f78 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f64:	2b40      	cmp	r3, #64	; 0x40
 8008f66:	d107      	bne.n	8008f78 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fbaa 	bl	80096cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	f003 0320 	and.w	r3, r3, #32
 8008f82:	2b20      	cmp	r3, #32
 8008f84:	d10e      	bne.n	8008fa4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	f003 0320 	and.w	r3, r3, #32
 8008f90:	2b20      	cmp	r3, #32
 8008f92:	d107      	bne.n	8008fa4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f06f 0220 	mvn.w	r2, #32
 8008f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f001 faac 	bl	800a4fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fb2:	d10f      	bne.n	8008fd4 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fc2:	d107      	bne.n	8008fd4 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f001 fab2 	bl	800a538 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fe2:	d10f      	bne.n	8009004 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ff2:	d107      	bne.n	8009004 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f001 faa4 	bl	800a54c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800900e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009012:	d10f      	bne.n	8009034 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800901e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009022:	d107      	bne.n	8009034 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800902c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f001 fa96 	bl	800a560 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800903e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009042:	d10f      	bne.n	8009064 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800904e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009052:	d107      	bne.n	8009064 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800905c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f001 fa88 	bl	800a574 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009064:	bf00      	nop
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009078:	2300      	movs	r3, #0
 800907a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009082:	2b01      	cmp	r3, #1
 8009084:	d101      	bne.n	800908a <HAL_TIM_IC_ConfigChannel+0x1e>
 8009086:	2302      	movs	r3, #2
 8009088:	e088      	b.n	800919c <HAL_TIM_IC_ConfigChannel+0x130>
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2201      	movs	r2, #1
 800908e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d11b      	bne.n	80090d0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6818      	ldr	r0, [r3, #0]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	6819      	ldr	r1, [r3, #0]
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	f000 ffcc 	bl	800a044 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	699a      	ldr	r2, [r3, #24]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f022 020c 	bic.w	r2, r2, #12
 80090ba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6999      	ldr	r1, [r3, #24]
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	689a      	ldr	r2, [r3, #8]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	430a      	orrs	r2, r1
 80090cc:	619a      	str	r2, [r3, #24]
 80090ce:	e060      	b.n	8009192 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2b04      	cmp	r3, #4
 80090d4:	d11c      	bne.n	8009110 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6818      	ldr	r0, [r3, #0]
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	6819      	ldr	r1, [r3, #0]
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	685a      	ldr	r2, [r3, #4]
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	f001 f850 	bl	800a18a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	699a      	ldr	r2, [r3, #24]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80090f8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	6999      	ldr	r1, [r3, #24]
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	021a      	lsls	r2, r3, #8
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	430a      	orrs	r2, r1
 800910c:	619a      	str	r2, [r3, #24]
 800910e:	e040      	b.n	8009192 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b08      	cmp	r3, #8
 8009114:	d11b      	bne.n	800914e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	6818      	ldr	r0, [r3, #0]
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	6819      	ldr	r1, [r3, #0]
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	685a      	ldr	r2, [r3, #4]
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	f001 f89d 	bl	800a264 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	69da      	ldr	r2, [r3, #28]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f022 020c 	bic.w	r2, r2, #12
 8009138:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	69d9      	ldr	r1, [r3, #28]
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	689a      	ldr	r2, [r3, #8]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	430a      	orrs	r2, r1
 800914a:	61da      	str	r2, [r3, #28]
 800914c:	e021      	b.n	8009192 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b0c      	cmp	r3, #12
 8009152:	d11c      	bne.n	800918e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6818      	ldr	r0, [r3, #0]
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	6819      	ldr	r1, [r3, #0]
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	685a      	ldr	r2, [r3, #4]
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	f001 f8ba 	bl	800a2dc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	69da      	ldr	r2, [r3, #28]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009176:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	69d9      	ldr	r1, [r3, #28]
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	021a      	lsls	r2, r3, #8
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	430a      	orrs	r2, r1
 800918a:	61da      	str	r2, [r3, #28]
 800918c:	e001      	b.n	8009192 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800919a:	7dfb      	ldrb	r3, [r7, #23]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3718      	adds	r7, #24
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d101      	bne.n	80091c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80091be:	2302      	movs	r3, #2
 80091c0:	e0ff      	b.n	80093c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2b14      	cmp	r3, #20
 80091ce:	f200 80f0 	bhi.w	80093b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80091d2:	a201      	add	r2, pc, #4	; (adr r2, 80091d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80091d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d8:	0800922d 	.word	0x0800922d
 80091dc:	080093b3 	.word	0x080093b3
 80091e0:	080093b3 	.word	0x080093b3
 80091e4:	080093b3 	.word	0x080093b3
 80091e8:	0800926d 	.word	0x0800926d
 80091ec:	080093b3 	.word	0x080093b3
 80091f0:	080093b3 	.word	0x080093b3
 80091f4:	080093b3 	.word	0x080093b3
 80091f8:	080092af 	.word	0x080092af
 80091fc:	080093b3 	.word	0x080093b3
 8009200:	080093b3 	.word	0x080093b3
 8009204:	080093b3 	.word	0x080093b3
 8009208:	080092ef 	.word	0x080092ef
 800920c:	080093b3 	.word	0x080093b3
 8009210:	080093b3 	.word	0x080093b3
 8009214:	080093b3 	.word	0x080093b3
 8009218:	08009331 	.word	0x08009331
 800921c:	080093b3 	.word	0x080093b3
 8009220:	080093b3 	.word	0x080093b3
 8009224:	080093b3 	.word	0x080093b3
 8009228:	08009371 	.word	0x08009371
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68b9      	ldr	r1, [r7, #8]
 8009232:	4618      	mov	r0, r3
 8009234:	f000 fafc 	bl	8009830 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	699a      	ldr	r2, [r3, #24]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f042 0208 	orr.w	r2, r2, #8
 8009246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	699a      	ldr	r2, [r3, #24]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f022 0204 	bic.w	r2, r2, #4
 8009256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	6999      	ldr	r1, [r3, #24]
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	691a      	ldr	r2, [r3, #16]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	430a      	orrs	r2, r1
 8009268:	619a      	str	r2, [r3, #24]
      break;
 800926a:	e0a5      	b.n	80093b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68b9      	ldr	r1, [r7, #8]
 8009272:	4618      	mov	r0, r3
 8009274:	f000 fb76 	bl	8009964 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	699a      	ldr	r2, [r3, #24]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	699a      	ldr	r2, [r3, #24]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6999      	ldr	r1, [r3, #24]
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	021a      	lsls	r2, r3, #8
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	430a      	orrs	r2, r1
 80092aa:	619a      	str	r2, [r3, #24]
      break;
 80092ac:	e084      	b.n	80093b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68b9      	ldr	r1, [r7, #8]
 80092b4:	4618      	mov	r0, r3
 80092b6:	f000 fbe9 	bl	8009a8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	69da      	ldr	r2, [r3, #28]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f042 0208 	orr.w	r2, r2, #8
 80092c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	69da      	ldr	r2, [r3, #28]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f022 0204 	bic.w	r2, r2, #4
 80092d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	69d9      	ldr	r1, [r3, #28]
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	691a      	ldr	r2, [r3, #16]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	430a      	orrs	r2, r1
 80092ea:	61da      	str	r2, [r3, #28]
      break;
 80092ec:	e064      	b.n	80093b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68b9      	ldr	r1, [r7, #8]
 80092f4:	4618      	mov	r0, r3
 80092f6:	f000 fc5b 	bl	8009bb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	69da      	ldr	r2, [r3, #28]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	69da      	ldr	r2, [r3, #28]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	69d9      	ldr	r1, [r3, #28]
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	021a      	lsls	r2, r3, #8
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	430a      	orrs	r2, r1
 800932c:	61da      	str	r2, [r3, #28]
      break;
 800932e:	e043      	b.n	80093b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68b9      	ldr	r1, [r7, #8]
 8009336:	4618      	mov	r0, r3
 8009338:	f000 fcce 	bl	8009cd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f042 0208 	orr.w	r2, r2, #8
 800934a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f022 0204 	bic.w	r2, r2, #4
 800935a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	691a      	ldr	r2, [r3, #16]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	430a      	orrs	r2, r1
 800936c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800936e:	e023      	b.n	80093b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68b9      	ldr	r1, [r7, #8]
 8009376:	4618      	mov	r0, r3
 8009378:	f000 fd18 	bl	8009dac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800938a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800939a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	021a      	lsls	r2, r3, #8
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	430a      	orrs	r2, r1
 80093ae:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80093b0:	e002      	b.n	80093b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	75fb      	strb	r3, [r7, #23]
      break;
 80093b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80093c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3718      	adds	r7, #24
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop

080093cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80093d6:	2300      	movs	r3, #0
 80093d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d101      	bne.n	80093e8 <HAL_TIM_ConfigClockSource+0x1c>
 80093e4:	2302      	movs	r3, #2
 80093e6:	e0f6      	b.n	80095d6 <HAL_TIM_ConfigClockSource+0x20a>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2202      	movs	r2, #2
 80093f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009406:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800940a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009412:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	68ba      	ldr	r2, [r7, #8]
 800941a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a6f      	ldr	r2, [pc, #444]	; (80095e0 <HAL_TIM_ConfigClockSource+0x214>)
 8009422:	4293      	cmp	r3, r2
 8009424:	f000 80c1 	beq.w	80095aa <HAL_TIM_ConfigClockSource+0x1de>
 8009428:	4a6d      	ldr	r2, [pc, #436]	; (80095e0 <HAL_TIM_ConfigClockSource+0x214>)
 800942a:	4293      	cmp	r3, r2
 800942c:	f200 80c6 	bhi.w	80095bc <HAL_TIM_ConfigClockSource+0x1f0>
 8009430:	4a6c      	ldr	r2, [pc, #432]	; (80095e4 <HAL_TIM_ConfigClockSource+0x218>)
 8009432:	4293      	cmp	r3, r2
 8009434:	f000 80b9 	beq.w	80095aa <HAL_TIM_ConfigClockSource+0x1de>
 8009438:	4a6a      	ldr	r2, [pc, #424]	; (80095e4 <HAL_TIM_ConfigClockSource+0x218>)
 800943a:	4293      	cmp	r3, r2
 800943c:	f200 80be 	bhi.w	80095bc <HAL_TIM_ConfigClockSource+0x1f0>
 8009440:	4a69      	ldr	r2, [pc, #420]	; (80095e8 <HAL_TIM_ConfigClockSource+0x21c>)
 8009442:	4293      	cmp	r3, r2
 8009444:	f000 80b1 	beq.w	80095aa <HAL_TIM_ConfigClockSource+0x1de>
 8009448:	4a67      	ldr	r2, [pc, #412]	; (80095e8 <HAL_TIM_ConfigClockSource+0x21c>)
 800944a:	4293      	cmp	r3, r2
 800944c:	f200 80b6 	bhi.w	80095bc <HAL_TIM_ConfigClockSource+0x1f0>
 8009450:	4a66      	ldr	r2, [pc, #408]	; (80095ec <HAL_TIM_ConfigClockSource+0x220>)
 8009452:	4293      	cmp	r3, r2
 8009454:	f000 80a9 	beq.w	80095aa <HAL_TIM_ConfigClockSource+0x1de>
 8009458:	4a64      	ldr	r2, [pc, #400]	; (80095ec <HAL_TIM_ConfigClockSource+0x220>)
 800945a:	4293      	cmp	r3, r2
 800945c:	f200 80ae 	bhi.w	80095bc <HAL_TIM_ConfigClockSource+0x1f0>
 8009460:	4a63      	ldr	r2, [pc, #396]	; (80095f0 <HAL_TIM_ConfigClockSource+0x224>)
 8009462:	4293      	cmp	r3, r2
 8009464:	f000 80a1 	beq.w	80095aa <HAL_TIM_ConfigClockSource+0x1de>
 8009468:	4a61      	ldr	r2, [pc, #388]	; (80095f0 <HAL_TIM_ConfigClockSource+0x224>)
 800946a:	4293      	cmp	r3, r2
 800946c:	f200 80a6 	bhi.w	80095bc <HAL_TIM_ConfigClockSource+0x1f0>
 8009470:	4a60      	ldr	r2, [pc, #384]	; (80095f4 <HAL_TIM_ConfigClockSource+0x228>)
 8009472:	4293      	cmp	r3, r2
 8009474:	f000 8099 	beq.w	80095aa <HAL_TIM_ConfigClockSource+0x1de>
 8009478:	4a5e      	ldr	r2, [pc, #376]	; (80095f4 <HAL_TIM_ConfigClockSource+0x228>)
 800947a:	4293      	cmp	r3, r2
 800947c:	f200 809e 	bhi.w	80095bc <HAL_TIM_ConfigClockSource+0x1f0>
 8009480:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009484:	f000 8091 	beq.w	80095aa <HAL_TIM_ConfigClockSource+0x1de>
 8009488:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800948c:	f200 8096 	bhi.w	80095bc <HAL_TIM_ConfigClockSource+0x1f0>
 8009490:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009494:	f000 8089 	beq.w	80095aa <HAL_TIM_ConfigClockSource+0x1de>
 8009498:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800949c:	f200 808e 	bhi.w	80095bc <HAL_TIM_ConfigClockSource+0x1f0>
 80094a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094a4:	d03e      	beq.n	8009524 <HAL_TIM_ConfigClockSource+0x158>
 80094a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094aa:	f200 8087 	bhi.w	80095bc <HAL_TIM_ConfigClockSource+0x1f0>
 80094ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094b2:	f000 8086 	beq.w	80095c2 <HAL_TIM_ConfigClockSource+0x1f6>
 80094b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ba:	d87f      	bhi.n	80095bc <HAL_TIM_ConfigClockSource+0x1f0>
 80094bc:	2b70      	cmp	r3, #112	; 0x70
 80094be:	d01a      	beq.n	80094f6 <HAL_TIM_ConfigClockSource+0x12a>
 80094c0:	2b70      	cmp	r3, #112	; 0x70
 80094c2:	d87b      	bhi.n	80095bc <HAL_TIM_ConfigClockSource+0x1f0>
 80094c4:	2b60      	cmp	r3, #96	; 0x60
 80094c6:	d050      	beq.n	800956a <HAL_TIM_ConfigClockSource+0x19e>
 80094c8:	2b60      	cmp	r3, #96	; 0x60
 80094ca:	d877      	bhi.n	80095bc <HAL_TIM_ConfigClockSource+0x1f0>
 80094cc:	2b50      	cmp	r3, #80	; 0x50
 80094ce:	d03c      	beq.n	800954a <HAL_TIM_ConfigClockSource+0x17e>
 80094d0:	2b50      	cmp	r3, #80	; 0x50
 80094d2:	d873      	bhi.n	80095bc <HAL_TIM_ConfigClockSource+0x1f0>
 80094d4:	2b40      	cmp	r3, #64	; 0x40
 80094d6:	d058      	beq.n	800958a <HAL_TIM_ConfigClockSource+0x1be>
 80094d8:	2b40      	cmp	r3, #64	; 0x40
 80094da:	d86f      	bhi.n	80095bc <HAL_TIM_ConfigClockSource+0x1f0>
 80094dc:	2b30      	cmp	r3, #48	; 0x30
 80094de:	d064      	beq.n	80095aa <HAL_TIM_ConfigClockSource+0x1de>
 80094e0:	2b30      	cmp	r3, #48	; 0x30
 80094e2:	d86b      	bhi.n	80095bc <HAL_TIM_ConfigClockSource+0x1f0>
 80094e4:	2b20      	cmp	r3, #32
 80094e6:	d060      	beq.n	80095aa <HAL_TIM_ConfigClockSource+0x1de>
 80094e8:	2b20      	cmp	r3, #32
 80094ea:	d867      	bhi.n	80095bc <HAL_TIM_ConfigClockSource+0x1f0>
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d05c      	beq.n	80095aa <HAL_TIM_ConfigClockSource+0x1de>
 80094f0:	2b10      	cmp	r3, #16
 80094f2:	d05a      	beq.n	80095aa <HAL_TIM_ConfigClockSource+0x1de>
 80094f4:	e062      	b.n	80095bc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6818      	ldr	r0, [r3, #0]
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	6899      	ldr	r1, [r3, #8]
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	685a      	ldr	r2, [r3, #4]
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	f000 ff43 	bl	800a390 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009518:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68ba      	ldr	r2, [r7, #8]
 8009520:	609a      	str	r2, [r3, #8]
      break;
 8009522:	e04f      	b.n	80095c4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6818      	ldr	r0, [r3, #0]
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	6899      	ldr	r1, [r3, #8]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	f000 ff2c 	bl	800a390 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	689a      	ldr	r2, [r3, #8]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009546:	609a      	str	r2, [r3, #8]
      break;
 8009548:	e03c      	b.n	80095c4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6818      	ldr	r0, [r3, #0]
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	6859      	ldr	r1, [r3, #4]
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	461a      	mov	r2, r3
 8009558:	f000 fde8 	bl	800a12c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2150      	movs	r1, #80	; 0x50
 8009562:	4618      	mov	r0, r3
 8009564:	f000 fef7 	bl	800a356 <TIM_ITRx_SetConfig>
      break;
 8009568:	e02c      	b.n	80095c4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6818      	ldr	r0, [r3, #0]
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	6859      	ldr	r1, [r3, #4]
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	461a      	mov	r2, r3
 8009578:	f000 fe44 	bl	800a204 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2160      	movs	r1, #96	; 0x60
 8009582:	4618      	mov	r0, r3
 8009584:	f000 fee7 	bl	800a356 <TIM_ITRx_SetConfig>
      break;
 8009588:	e01c      	b.n	80095c4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6818      	ldr	r0, [r3, #0]
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	6859      	ldr	r1, [r3, #4]
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	461a      	mov	r2, r3
 8009598:	f000 fdc8 	bl	800a12c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2140      	movs	r1, #64	; 0x40
 80095a2:	4618      	mov	r0, r3
 80095a4:	f000 fed7 	bl	800a356 <TIM_ITRx_SetConfig>
      break;
 80095a8:	e00c      	b.n	80095c4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4619      	mov	r1, r3
 80095b4:	4610      	mov	r0, r2
 80095b6:	f000 fece 	bl	800a356 <TIM_ITRx_SetConfig>
      break;
 80095ba:	e003      	b.n	80095c4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	73fb      	strb	r3, [r7, #15]
      break;
 80095c0:	e000      	b.n	80095c4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80095c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80095d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	00100070 	.word	0x00100070
 80095e4:	00100060 	.word	0x00100060
 80095e8:	00100050 	.word	0x00100050
 80095ec:	00100040 	.word	0x00100040
 80095f0:	00100030 	.word	0x00100030
 80095f4:	00100020 	.word	0x00100020

080095f8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009608:	2b01      	cmp	r3, #1
 800960a:	d101      	bne.n	8009610 <HAL_TIM_SlaveConfigSynchro+0x18>
 800960c:	2302      	movs	r3, #2
 800960e:	e031      	b.n	8009674 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2201      	movs	r2, #1
 8009614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2202      	movs	r2, #2
 800961c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009620:	6839      	ldr	r1, [r7, #0]
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 fc2e 	bl	8009e84 <TIM_SlaveTimer_SetConfig>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d009      	beq.n	8009642 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2201      	movs	r2, #1
 8009632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	e018      	b.n	8009674 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	68da      	ldr	r2, [r3, #12]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009650:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68da      	ldr	r2, [r3, #12]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009660:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009684:	bf00      	nop
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009698:	bf00      	nop
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80096c0:	bf00      	nop
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4a46      	ldr	r2, [pc, #280]	; (800980c <TIM_Base_SetConfig+0x12c>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d017      	beq.n	8009728 <TIM_Base_SetConfig+0x48>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096fe:	d013      	beq.n	8009728 <TIM_Base_SetConfig+0x48>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4a43      	ldr	r2, [pc, #268]	; (8009810 <TIM_Base_SetConfig+0x130>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d00f      	beq.n	8009728 <TIM_Base_SetConfig+0x48>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a42      	ldr	r2, [pc, #264]	; (8009814 <TIM_Base_SetConfig+0x134>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d00b      	beq.n	8009728 <TIM_Base_SetConfig+0x48>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4a41      	ldr	r2, [pc, #260]	; (8009818 <TIM_Base_SetConfig+0x138>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d007      	beq.n	8009728 <TIM_Base_SetConfig+0x48>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a40      	ldr	r2, [pc, #256]	; (800981c <TIM_Base_SetConfig+0x13c>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d003      	beq.n	8009728 <TIM_Base_SetConfig+0x48>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a3f      	ldr	r2, [pc, #252]	; (8009820 <TIM_Base_SetConfig+0x140>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d108      	bne.n	800973a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800972e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	4313      	orrs	r3, r2
 8009738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a33      	ldr	r2, [pc, #204]	; (800980c <TIM_Base_SetConfig+0x12c>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d023      	beq.n	800978a <TIM_Base_SetConfig+0xaa>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009748:	d01f      	beq.n	800978a <TIM_Base_SetConfig+0xaa>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a30      	ldr	r2, [pc, #192]	; (8009810 <TIM_Base_SetConfig+0x130>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d01b      	beq.n	800978a <TIM_Base_SetConfig+0xaa>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a2f      	ldr	r2, [pc, #188]	; (8009814 <TIM_Base_SetConfig+0x134>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d017      	beq.n	800978a <TIM_Base_SetConfig+0xaa>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4a2e      	ldr	r2, [pc, #184]	; (8009818 <TIM_Base_SetConfig+0x138>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d013      	beq.n	800978a <TIM_Base_SetConfig+0xaa>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4a2d      	ldr	r2, [pc, #180]	; (800981c <TIM_Base_SetConfig+0x13c>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d00f      	beq.n	800978a <TIM_Base_SetConfig+0xaa>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4a2d      	ldr	r2, [pc, #180]	; (8009824 <TIM_Base_SetConfig+0x144>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d00b      	beq.n	800978a <TIM_Base_SetConfig+0xaa>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4a2c      	ldr	r2, [pc, #176]	; (8009828 <TIM_Base_SetConfig+0x148>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d007      	beq.n	800978a <TIM_Base_SetConfig+0xaa>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4a2b      	ldr	r2, [pc, #172]	; (800982c <TIM_Base_SetConfig+0x14c>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d003      	beq.n	800978a <TIM_Base_SetConfig+0xaa>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4a26      	ldr	r2, [pc, #152]	; (8009820 <TIM_Base_SetConfig+0x140>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d108      	bne.n	800979c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	4313      	orrs	r3, r2
 800979a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	695b      	ldr	r3, [r3, #20]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	689a      	ldr	r2, [r3, #8]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a12      	ldr	r2, [pc, #72]	; (800980c <TIM_Base_SetConfig+0x12c>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d013      	beq.n	80097f0 <TIM_Base_SetConfig+0x110>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a14      	ldr	r2, [pc, #80]	; (800981c <TIM_Base_SetConfig+0x13c>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d00f      	beq.n	80097f0 <TIM_Base_SetConfig+0x110>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a14      	ldr	r2, [pc, #80]	; (8009824 <TIM_Base_SetConfig+0x144>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d00b      	beq.n	80097f0 <TIM_Base_SetConfig+0x110>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a13      	ldr	r2, [pc, #76]	; (8009828 <TIM_Base_SetConfig+0x148>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d007      	beq.n	80097f0 <TIM_Base_SetConfig+0x110>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a12      	ldr	r2, [pc, #72]	; (800982c <TIM_Base_SetConfig+0x14c>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d003      	beq.n	80097f0 <TIM_Base_SetConfig+0x110>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4a0d      	ldr	r2, [pc, #52]	; (8009820 <TIM_Base_SetConfig+0x140>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d103      	bne.n	80097f8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	691a      	ldr	r2, [r3, #16]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	615a      	str	r2, [r3, #20]
}
 80097fe:	bf00      	nop
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	40012c00 	.word	0x40012c00
 8009810:	40000400 	.word	0x40000400
 8009814:	40000800 	.word	0x40000800
 8009818:	40000c00 	.word	0x40000c00
 800981c:	40013400 	.word	0x40013400
 8009820:	40015000 	.word	0x40015000
 8009824:	40014000 	.word	0x40014000
 8009828:	40014400 	.word	0x40014400
 800982c:	40014800 	.word	0x40014800

08009830 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009830:	b480      	push	{r7}
 8009832:	b087      	sub	sp, #28
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a1b      	ldr	r3, [r3, #32]
 800983e:	f023 0201 	bic.w	r2, r3, #1
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6a1b      	ldr	r3, [r3, #32]
 800984a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	699b      	ldr	r3, [r3, #24]
 8009856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800985e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f023 0303 	bic.w	r3, r3, #3
 800986a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	4313      	orrs	r3, r2
 8009874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f023 0302 	bic.w	r3, r3, #2
 800987c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	4313      	orrs	r3, r2
 8009886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a30      	ldr	r2, [pc, #192]	; (800994c <TIM_OC1_SetConfig+0x11c>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d013      	beq.n	80098b8 <TIM_OC1_SetConfig+0x88>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a2f      	ldr	r2, [pc, #188]	; (8009950 <TIM_OC1_SetConfig+0x120>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d00f      	beq.n	80098b8 <TIM_OC1_SetConfig+0x88>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a2e      	ldr	r2, [pc, #184]	; (8009954 <TIM_OC1_SetConfig+0x124>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d00b      	beq.n	80098b8 <TIM_OC1_SetConfig+0x88>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a2d      	ldr	r2, [pc, #180]	; (8009958 <TIM_OC1_SetConfig+0x128>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d007      	beq.n	80098b8 <TIM_OC1_SetConfig+0x88>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a2c      	ldr	r2, [pc, #176]	; (800995c <TIM_OC1_SetConfig+0x12c>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d003      	beq.n	80098b8 <TIM_OC1_SetConfig+0x88>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4a2b      	ldr	r2, [pc, #172]	; (8009960 <TIM_OC1_SetConfig+0x130>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d10c      	bne.n	80098d2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	f023 0308 	bic.w	r3, r3, #8
 80098be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	f023 0304 	bic.w	r3, r3, #4
 80098d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a1d      	ldr	r2, [pc, #116]	; (800994c <TIM_OC1_SetConfig+0x11c>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d013      	beq.n	8009902 <TIM_OC1_SetConfig+0xd2>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a1c      	ldr	r2, [pc, #112]	; (8009950 <TIM_OC1_SetConfig+0x120>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d00f      	beq.n	8009902 <TIM_OC1_SetConfig+0xd2>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a1b      	ldr	r2, [pc, #108]	; (8009954 <TIM_OC1_SetConfig+0x124>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d00b      	beq.n	8009902 <TIM_OC1_SetConfig+0xd2>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a1a      	ldr	r2, [pc, #104]	; (8009958 <TIM_OC1_SetConfig+0x128>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d007      	beq.n	8009902 <TIM_OC1_SetConfig+0xd2>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a19      	ldr	r2, [pc, #100]	; (800995c <TIM_OC1_SetConfig+0x12c>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d003      	beq.n	8009902 <TIM_OC1_SetConfig+0xd2>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a18      	ldr	r2, [pc, #96]	; (8009960 <TIM_OC1_SetConfig+0x130>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d111      	bne.n	8009926 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	695b      	ldr	r3, [r3, #20]
 8009916:	693a      	ldr	r2, [r7, #16]
 8009918:	4313      	orrs	r3, r2
 800991a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	693a      	ldr	r2, [r7, #16]
 8009922:	4313      	orrs	r3, r2
 8009924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	693a      	ldr	r2, [r7, #16]
 800992a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	68fa      	ldr	r2, [r7, #12]
 8009930:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	685a      	ldr	r2, [r3, #4]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	697a      	ldr	r2, [r7, #20]
 800993e:	621a      	str	r2, [r3, #32]
}
 8009940:	bf00      	nop
 8009942:	371c      	adds	r7, #28
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr
 800994c:	40012c00 	.word	0x40012c00
 8009950:	40013400 	.word	0x40013400
 8009954:	40014000 	.word	0x40014000
 8009958:	40014400 	.word	0x40014400
 800995c:	40014800 	.word	0x40014800
 8009960:	40015000 	.word	0x40015000

08009964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009964:	b480      	push	{r7}
 8009966:	b087      	sub	sp, #28
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a1b      	ldr	r3, [r3, #32]
 8009972:	f023 0210 	bic.w	r2, r3, #16
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800999e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	021b      	lsls	r3, r3, #8
 80099a6:	68fa      	ldr	r2, [r7, #12]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	f023 0320 	bic.w	r3, r3, #32
 80099b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	011b      	lsls	r3, r3, #4
 80099ba:	697a      	ldr	r2, [r7, #20]
 80099bc:	4313      	orrs	r3, r2
 80099be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a2c      	ldr	r2, [pc, #176]	; (8009a74 <TIM_OC2_SetConfig+0x110>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d007      	beq.n	80099d8 <TIM_OC2_SetConfig+0x74>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a2b      	ldr	r2, [pc, #172]	; (8009a78 <TIM_OC2_SetConfig+0x114>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d003      	beq.n	80099d8 <TIM_OC2_SetConfig+0x74>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a2a      	ldr	r2, [pc, #168]	; (8009a7c <TIM_OC2_SetConfig+0x118>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d10d      	bne.n	80099f4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	011b      	lsls	r3, r3, #4
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a1f      	ldr	r2, [pc, #124]	; (8009a74 <TIM_OC2_SetConfig+0x110>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d013      	beq.n	8009a24 <TIM_OC2_SetConfig+0xc0>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4a1e      	ldr	r2, [pc, #120]	; (8009a78 <TIM_OC2_SetConfig+0x114>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d00f      	beq.n	8009a24 <TIM_OC2_SetConfig+0xc0>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a1e      	ldr	r2, [pc, #120]	; (8009a80 <TIM_OC2_SetConfig+0x11c>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d00b      	beq.n	8009a24 <TIM_OC2_SetConfig+0xc0>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a1d      	ldr	r2, [pc, #116]	; (8009a84 <TIM_OC2_SetConfig+0x120>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d007      	beq.n	8009a24 <TIM_OC2_SetConfig+0xc0>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4a1c      	ldr	r2, [pc, #112]	; (8009a88 <TIM_OC2_SetConfig+0x124>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d003      	beq.n	8009a24 <TIM_OC2_SetConfig+0xc0>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4a17      	ldr	r2, [pc, #92]	; (8009a7c <TIM_OC2_SetConfig+0x118>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d113      	bne.n	8009a4c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	695b      	ldr	r3, [r3, #20]
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	693a      	ldr	r2, [r7, #16]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	693a      	ldr	r2, [r7, #16]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	693a      	ldr	r2, [r7, #16]
 8009a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	685a      	ldr	r2, [r3, #4]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	697a      	ldr	r2, [r7, #20]
 8009a64:	621a      	str	r2, [r3, #32]
}
 8009a66:	bf00      	nop
 8009a68:	371c      	adds	r7, #28
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	40012c00 	.word	0x40012c00
 8009a78:	40013400 	.word	0x40013400
 8009a7c:	40015000 	.word	0x40015000
 8009a80:	40014000 	.word	0x40014000
 8009a84:	40014400 	.word	0x40014400
 8009a88:	40014800 	.word	0x40014800

08009a8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b087      	sub	sp, #28
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a1b      	ldr	r3, [r3, #32]
 8009a9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6a1b      	ldr	r3, [r3, #32]
 8009aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	69db      	ldr	r3, [r3, #28]
 8009ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f023 0303 	bic.w	r3, r3, #3
 8009ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	021b      	lsls	r3, r3, #8
 8009ae0:	697a      	ldr	r2, [r7, #20]
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4a2b      	ldr	r2, [pc, #172]	; (8009b98 <TIM_OC3_SetConfig+0x10c>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d007      	beq.n	8009afe <TIM_OC3_SetConfig+0x72>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a2a      	ldr	r2, [pc, #168]	; (8009b9c <TIM_OC3_SetConfig+0x110>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d003      	beq.n	8009afe <TIM_OC3_SetConfig+0x72>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4a29      	ldr	r2, [pc, #164]	; (8009ba0 <TIM_OC3_SetConfig+0x114>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d10d      	bne.n	8009b1a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	021b      	lsls	r3, r3, #8
 8009b0c:	697a      	ldr	r2, [r7, #20]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a1e      	ldr	r2, [pc, #120]	; (8009b98 <TIM_OC3_SetConfig+0x10c>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d013      	beq.n	8009b4a <TIM_OC3_SetConfig+0xbe>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4a1d      	ldr	r2, [pc, #116]	; (8009b9c <TIM_OC3_SetConfig+0x110>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d00f      	beq.n	8009b4a <TIM_OC3_SetConfig+0xbe>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4a1d      	ldr	r2, [pc, #116]	; (8009ba4 <TIM_OC3_SetConfig+0x118>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d00b      	beq.n	8009b4a <TIM_OC3_SetConfig+0xbe>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4a1c      	ldr	r2, [pc, #112]	; (8009ba8 <TIM_OC3_SetConfig+0x11c>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d007      	beq.n	8009b4a <TIM_OC3_SetConfig+0xbe>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4a1b      	ldr	r2, [pc, #108]	; (8009bac <TIM_OC3_SetConfig+0x120>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d003      	beq.n	8009b4a <TIM_OC3_SetConfig+0xbe>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4a16      	ldr	r2, [pc, #88]	; (8009ba0 <TIM_OC3_SetConfig+0x114>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d113      	bne.n	8009b72 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	695b      	ldr	r3, [r3, #20]
 8009b5e:	011b      	lsls	r3, r3, #4
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	4313      	orrs	r3, r2
 8009b64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	011b      	lsls	r3, r3, #4
 8009b6c:	693a      	ldr	r2, [r7, #16]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	685a      	ldr	r2, [r3, #4]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	697a      	ldr	r2, [r7, #20]
 8009b8a:	621a      	str	r2, [r3, #32]
}
 8009b8c:	bf00      	nop
 8009b8e:	371c      	adds	r7, #28
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr
 8009b98:	40012c00 	.word	0x40012c00
 8009b9c:	40013400 	.word	0x40013400
 8009ba0:	40015000 	.word	0x40015000
 8009ba4:	40014000 	.word	0x40014000
 8009ba8:	40014400 	.word	0x40014400
 8009bac:	40014800 	.word	0x40014800

08009bb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b087      	sub	sp, #28
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a1b      	ldr	r3, [r3, #32]
 8009bbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a1b      	ldr	r3, [r3, #32]
 8009bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	69db      	ldr	r3, [r3, #28]
 8009bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	021b      	lsls	r3, r3, #8
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009bfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	031b      	lsls	r3, r3, #12
 8009c06:	697a      	ldr	r2, [r7, #20]
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a2c      	ldr	r2, [pc, #176]	; (8009cc0 <TIM_OC4_SetConfig+0x110>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d007      	beq.n	8009c24 <TIM_OC4_SetConfig+0x74>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a2b      	ldr	r2, [pc, #172]	; (8009cc4 <TIM_OC4_SetConfig+0x114>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d003      	beq.n	8009c24 <TIM_OC4_SetConfig+0x74>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a2a      	ldr	r2, [pc, #168]	; (8009cc8 <TIM_OC4_SetConfig+0x118>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d10d      	bne.n	8009c40 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	031b      	lsls	r3, r3, #12
 8009c32:	697a      	ldr	r2, [r7, #20]
 8009c34:	4313      	orrs	r3, r2
 8009c36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a1f      	ldr	r2, [pc, #124]	; (8009cc0 <TIM_OC4_SetConfig+0x110>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d013      	beq.n	8009c70 <TIM_OC4_SetConfig+0xc0>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a1e      	ldr	r2, [pc, #120]	; (8009cc4 <TIM_OC4_SetConfig+0x114>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d00f      	beq.n	8009c70 <TIM_OC4_SetConfig+0xc0>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a1e      	ldr	r2, [pc, #120]	; (8009ccc <TIM_OC4_SetConfig+0x11c>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d00b      	beq.n	8009c70 <TIM_OC4_SetConfig+0xc0>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a1d      	ldr	r2, [pc, #116]	; (8009cd0 <TIM_OC4_SetConfig+0x120>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d007      	beq.n	8009c70 <TIM_OC4_SetConfig+0xc0>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a1c      	ldr	r2, [pc, #112]	; (8009cd4 <TIM_OC4_SetConfig+0x124>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d003      	beq.n	8009c70 <TIM_OC4_SetConfig+0xc0>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a17      	ldr	r2, [pc, #92]	; (8009cc8 <TIM_OC4_SetConfig+0x118>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d113      	bne.n	8009c98 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c76:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009c7e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	695b      	ldr	r3, [r3, #20]
 8009c84:	019b      	lsls	r3, r3, #6
 8009c86:	693a      	ldr	r2, [r7, #16]
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	699b      	ldr	r3, [r3, #24]
 8009c90:	019b      	lsls	r3, r3, #6
 8009c92:	693a      	ldr	r2, [r7, #16]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	693a      	ldr	r2, [r7, #16]
 8009c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	685a      	ldr	r2, [r3, #4]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	697a      	ldr	r2, [r7, #20]
 8009cb0:	621a      	str	r2, [r3, #32]
}
 8009cb2:	bf00      	nop
 8009cb4:	371c      	adds	r7, #28
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	40012c00 	.word	0x40012c00
 8009cc4:	40013400 	.word	0x40013400
 8009cc8:	40015000 	.word	0x40015000
 8009ccc:	40014000 	.word	0x40014000
 8009cd0:	40014400 	.word	0x40014400
 8009cd4:	40014800 	.word	0x40014800

08009cd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b087      	sub	sp, #28
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a1b      	ldr	r3, [r3, #32]
 8009cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009d1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	041b      	lsls	r3, r3, #16
 8009d24:	693a      	ldr	r2, [r7, #16]
 8009d26:	4313      	orrs	r3, r2
 8009d28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a19      	ldr	r2, [pc, #100]	; (8009d94 <TIM_OC5_SetConfig+0xbc>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d013      	beq.n	8009d5a <TIM_OC5_SetConfig+0x82>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4a18      	ldr	r2, [pc, #96]	; (8009d98 <TIM_OC5_SetConfig+0xc0>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d00f      	beq.n	8009d5a <TIM_OC5_SetConfig+0x82>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a17      	ldr	r2, [pc, #92]	; (8009d9c <TIM_OC5_SetConfig+0xc4>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d00b      	beq.n	8009d5a <TIM_OC5_SetConfig+0x82>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a16      	ldr	r2, [pc, #88]	; (8009da0 <TIM_OC5_SetConfig+0xc8>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d007      	beq.n	8009d5a <TIM_OC5_SetConfig+0x82>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a15      	ldr	r2, [pc, #84]	; (8009da4 <TIM_OC5_SetConfig+0xcc>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d003      	beq.n	8009d5a <TIM_OC5_SetConfig+0x82>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a14      	ldr	r2, [pc, #80]	; (8009da8 <TIM_OC5_SetConfig+0xd0>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d109      	bne.n	8009d6e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	695b      	ldr	r3, [r3, #20]
 8009d66:	021b      	lsls	r3, r3, #8
 8009d68:	697a      	ldr	r2, [r7, #20]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	697a      	ldr	r2, [r7, #20]
 8009d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	685a      	ldr	r2, [r3, #4]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	693a      	ldr	r2, [r7, #16]
 8009d86:	621a      	str	r2, [r3, #32]
}
 8009d88:	bf00      	nop
 8009d8a:	371c      	adds	r7, #28
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	40012c00 	.word	0x40012c00
 8009d98:	40013400 	.word	0x40013400
 8009d9c:	40014000 	.word	0x40014000
 8009da0:	40014400 	.word	0x40014400
 8009da4:	40014800 	.word	0x40014800
 8009da8:	40015000 	.word	0x40015000

08009dac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b087      	sub	sp, #28
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a1b      	ldr	r3, [r3, #32]
 8009dc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	021b      	lsls	r3, r3, #8
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	4313      	orrs	r3, r2
 8009dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009df2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	051b      	lsls	r3, r3, #20
 8009dfa:	693a      	ldr	r2, [r7, #16]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a1a      	ldr	r2, [pc, #104]	; (8009e6c <TIM_OC6_SetConfig+0xc0>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d013      	beq.n	8009e30 <TIM_OC6_SetConfig+0x84>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a19      	ldr	r2, [pc, #100]	; (8009e70 <TIM_OC6_SetConfig+0xc4>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d00f      	beq.n	8009e30 <TIM_OC6_SetConfig+0x84>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a18      	ldr	r2, [pc, #96]	; (8009e74 <TIM_OC6_SetConfig+0xc8>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d00b      	beq.n	8009e30 <TIM_OC6_SetConfig+0x84>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a17      	ldr	r2, [pc, #92]	; (8009e78 <TIM_OC6_SetConfig+0xcc>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d007      	beq.n	8009e30 <TIM_OC6_SetConfig+0x84>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a16      	ldr	r2, [pc, #88]	; (8009e7c <TIM_OC6_SetConfig+0xd0>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d003      	beq.n	8009e30 <TIM_OC6_SetConfig+0x84>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a15      	ldr	r2, [pc, #84]	; (8009e80 <TIM_OC6_SetConfig+0xd4>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d109      	bne.n	8009e44 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	695b      	ldr	r3, [r3, #20]
 8009e3c:	029b      	lsls	r3, r3, #10
 8009e3e:	697a      	ldr	r2, [r7, #20]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	697a      	ldr	r2, [r7, #20]
 8009e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	685a      	ldr	r2, [r3, #4]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	693a      	ldr	r2, [r7, #16]
 8009e5c:	621a      	str	r2, [r3, #32]
}
 8009e5e:	bf00      	nop
 8009e60:	371c      	adds	r7, #28
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	40012c00 	.word	0x40012c00
 8009e70:	40013400 	.word	0x40013400
 8009e74:	40014000 	.word	0x40014000
 8009e78:	40014400 	.word	0x40014400
 8009e7c:	40014800 	.word	0x40014800
 8009e80:	40015000 	.word	0x40015000

08009e84 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b086      	sub	sp, #24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ea4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	693a      	ldr	r2, [r7, #16]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009eb6:	f023 0307 	bic.w	r3, r3, #7
 8009eba:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	693a      	ldr	r2, [r7, #16]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	693a      	ldr	r2, [r7, #16]
 8009ecc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	4a56      	ldr	r2, [pc, #344]	; (800a02c <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	f000 80a2 	beq.w	800a01e <TIM_SlaveTimer_SetConfig+0x19a>
 8009eda:	4a54      	ldr	r2, [pc, #336]	; (800a02c <TIM_SlaveTimer_SetConfig+0x1a8>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	f200 809b 	bhi.w	800a018 <TIM_SlaveTimer_SetConfig+0x194>
 8009ee2:	4a53      	ldr	r2, [pc, #332]	; (800a030 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	f000 809a 	beq.w	800a01e <TIM_SlaveTimer_SetConfig+0x19a>
 8009eea:	4a51      	ldr	r2, [pc, #324]	; (800a030 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	f200 8093 	bhi.w	800a018 <TIM_SlaveTimer_SetConfig+0x194>
 8009ef2:	4a50      	ldr	r2, [pc, #320]	; (800a034 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	f000 8092 	beq.w	800a01e <TIM_SlaveTimer_SetConfig+0x19a>
 8009efa:	4a4e      	ldr	r2, [pc, #312]	; (800a034 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	f200 808b 	bhi.w	800a018 <TIM_SlaveTimer_SetConfig+0x194>
 8009f02:	4a4d      	ldr	r2, [pc, #308]	; (800a038 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	f000 808a 	beq.w	800a01e <TIM_SlaveTimer_SetConfig+0x19a>
 8009f0a:	4a4b      	ldr	r2, [pc, #300]	; (800a038 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	f200 8083 	bhi.w	800a018 <TIM_SlaveTimer_SetConfig+0x194>
 8009f12:	4a4a      	ldr	r2, [pc, #296]	; (800a03c <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	f000 8082 	beq.w	800a01e <TIM_SlaveTimer_SetConfig+0x19a>
 8009f1a:	4a48      	ldr	r2, [pc, #288]	; (800a03c <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d87b      	bhi.n	800a018 <TIM_SlaveTimer_SetConfig+0x194>
 8009f20:	4a47      	ldr	r2, [pc, #284]	; (800a040 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d07b      	beq.n	800a01e <TIM_SlaveTimer_SetConfig+0x19a>
 8009f26:	4a46      	ldr	r2, [pc, #280]	; (800a040 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d875      	bhi.n	800a018 <TIM_SlaveTimer_SetConfig+0x194>
 8009f2c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009f30:	d075      	beq.n	800a01e <TIM_SlaveTimer_SetConfig+0x19a>
 8009f32:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009f36:	d86f      	bhi.n	800a018 <TIM_SlaveTimer_SetConfig+0x194>
 8009f38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f3c:	d06f      	beq.n	800a01e <TIM_SlaveTimer_SetConfig+0x19a>
 8009f3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f42:	d869      	bhi.n	800a018 <TIM_SlaveTimer_SetConfig+0x194>
 8009f44:	2b70      	cmp	r3, #112	; 0x70
 8009f46:	d01a      	beq.n	8009f7e <TIM_SlaveTimer_SetConfig+0xfa>
 8009f48:	2b70      	cmp	r3, #112	; 0x70
 8009f4a:	d865      	bhi.n	800a018 <TIM_SlaveTimer_SetConfig+0x194>
 8009f4c:	2b60      	cmp	r3, #96	; 0x60
 8009f4e:	d059      	beq.n	800a004 <TIM_SlaveTimer_SetConfig+0x180>
 8009f50:	2b60      	cmp	r3, #96	; 0x60
 8009f52:	d861      	bhi.n	800a018 <TIM_SlaveTimer_SetConfig+0x194>
 8009f54:	2b50      	cmp	r3, #80	; 0x50
 8009f56:	d04b      	beq.n	8009ff0 <TIM_SlaveTimer_SetConfig+0x16c>
 8009f58:	2b50      	cmp	r3, #80	; 0x50
 8009f5a:	d85d      	bhi.n	800a018 <TIM_SlaveTimer_SetConfig+0x194>
 8009f5c:	2b40      	cmp	r3, #64	; 0x40
 8009f5e:	d019      	beq.n	8009f94 <TIM_SlaveTimer_SetConfig+0x110>
 8009f60:	2b40      	cmp	r3, #64	; 0x40
 8009f62:	d859      	bhi.n	800a018 <TIM_SlaveTimer_SetConfig+0x194>
 8009f64:	2b30      	cmp	r3, #48	; 0x30
 8009f66:	d05a      	beq.n	800a01e <TIM_SlaveTimer_SetConfig+0x19a>
 8009f68:	2b30      	cmp	r3, #48	; 0x30
 8009f6a:	d855      	bhi.n	800a018 <TIM_SlaveTimer_SetConfig+0x194>
 8009f6c:	2b20      	cmp	r3, #32
 8009f6e:	d056      	beq.n	800a01e <TIM_SlaveTimer_SetConfig+0x19a>
 8009f70:	2b20      	cmp	r3, #32
 8009f72:	d851      	bhi.n	800a018 <TIM_SlaveTimer_SetConfig+0x194>
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d052      	beq.n	800a01e <TIM_SlaveTimer_SetConfig+0x19a>
 8009f78:	2b10      	cmp	r3, #16
 8009f7a:	d050      	beq.n	800a01e <TIM_SlaveTimer_SetConfig+0x19a>
 8009f7c:	e04c      	b.n	800a018 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6818      	ldr	r0, [r3, #0]
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	68d9      	ldr	r1, [r3, #12]
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	689a      	ldr	r2, [r3, #8]
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	f000 f9ff 	bl	800a390 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8009f92:	e045      	b.n	800a020 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2b05      	cmp	r3, #5
 8009f9a:	d004      	beq.n	8009fa6 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8009fa0:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8009fa4:	d101      	bne.n	8009faa <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e03b      	b.n	800a022 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	6a1b      	ldr	r3, [r3, #32]
 8009fb0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	6a1a      	ldr	r2, [r3, #32]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f022 0201 	bic.w	r2, r2, #1
 8009fc0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	699b      	ldr	r3, [r3, #24]
 8009fc8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009fd0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	011b      	lsls	r3, r3, #4
 8009fd8:	68ba      	ldr	r2, [r7, #8]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68ba      	ldr	r2, [r7, #8]
 8009fe4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	621a      	str	r2, [r3, #32]
      break;
 8009fee:	e017      	b.n	800a020 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6818      	ldr	r0, [r3, #0]
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	6899      	ldr	r1, [r3, #8]
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	691b      	ldr	r3, [r3, #16]
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	f000 f895 	bl	800a12c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800a002:	e00d      	b.n	800a020 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6818      	ldr	r0, [r3, #0]
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	6899      	ldr	r1, [r3, #8]
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	691b      	ldr	r3, [r3, #16]
 800a010:	461a      	mov	r2, r3
 800a012:	f000 f8f7 	bl	800a204 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800a016:	e003      	b.n	800a020 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	75fb      	strb	r3, [r7, #23]
      break;
 800a01c:	e000      	b.n	800a020 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 800a01e:	bf00      	nop
  }

  return status;
 800a020:	7dfb      	ldrb	r3, [r7, #23]
}
 800a022:	4618      	mov	r0, r3
 800a024:	3718      	adds	r7, #24
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	00100070 	.word	0x00100070
 800a030:	00100060 	.word	0x00100060
 800a034:	00100050 	.word	0x00100050
 800a038:	00100040 	.word	0x00100040
 800a03c:	00100030 	.word	0x00100030
 800a040:	00100020 	.word	0x00100020

0800a044 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a044:	b480      	push	{r7}
 800a046:	b087      	sub	sp, #28
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
 800a050:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	f023 0201 	bic.w	r2, r3, #1
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	699b      	ldr	r3, [r3, #24]
 800a062:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6a1b      	ldr	r3, [r3, #32]
 800a068:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	4a28      	ldr	r2, [pc, #160]	; (800a110 <TIM_TI1_SetConfig+0xcc>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d01b      	beq.n	800a0aa <TIM_TI1_SetConfig+0x66>
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a078:	d017      	beq.n	800a0aa <TIM_TI1_SetConfig+0x66>
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	4a25      	ldr	r2, [pc, #148]	; (800a114 <TIM_TI1_SetConfig+0xd0>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d013      	beq.n	800a0aa <TIM_TI1_SetConfig+0x66>
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	4a24      	ldr	r2, [pc, #144]	; (800a118 <TIM_TI1_SetConfig+0xd4>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d00f      	beq.n	800a0aa <TIM_TI1_SetConfig+0x66>
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	4a23      	ldr	r2, [pc, #140]	; (800a11c <TIM_TI1_SetConfig+0xd8>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d00b      	beq.n	800a0aa <TIM_TI1_SetConfig+0x66>
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	4a22      	ldr	r2, [pc, #136]	; (800a120 <TIM_TI1_SetConfig+0xdc>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d007      	beq.n	800a0aa <TIM_TI1_SetConfig+0x66>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	4a21      	ldr	r2, [pc, #132]	; (800a124 <TIM_TI1_SetConfig+0xe0>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d003      	beq.n	800a0aa <TIM_TI1_SetConfig+0x66>
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	4a20      	ldr	r2, [pc, #128]	; (800a128 <TIM_TI1_SetConfig+0xe4>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d101      	bne.n	800a0ae <TIM_TI1_SetConfig+0x6a>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e000      	b.n	800a0b0 <TIM_TI1_SetConfig+0x6c>
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d008      	beq.n	800a0c6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	f023 0303 	bic.w	r3, r3, #3
 800a0ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a0bc:	697a      	ldr	r2, [r7, #20]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	617b      	str	r3, [r7, #20]
 800a0c4:	e003      	b.n	800a0ce <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	f043 0301 	orr.w	r3, r3, #1
 800a0cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	011b      	lsls	r3, r3, #4
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	697a      	ldr	r2, [r7, #20]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	f023 030a 	bic.w	r3, r3, #10
 800a0e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	f003 030a 	and.w	r3, r3, #10
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	697a      	ldr	r2, [r7, #20]
 800a0fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	693a      	ldr	r2, [r7, #16]
 800a100:	621a      	str	r2, [r3, #32]
}
 800a102:	bf00      	nop
 800a104:	371c      	adds	r7, #28
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr
 800a10e:	bf00      	nop
 800a110:	40012c00 	.word	0x40012c00
 800a114:	40000400 	.word	0x40000400
 800a118:	40000800 	.word	0x40000800
 800a11c:	40000c00 	.word	0x40000c00
 800a120:	40013400 	.word	0x40013400
 800a124:	40014000 	.word	0x40014000
 800a128:	40015000 	.word	0x40015000

0800a12c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b087      	sub	sp, #28
 800a130:	af00      	add	r7, sp, #0
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	60b9      	str	r1, [r7, #8]
 800a136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6a1b      	ldr	r3, [r3, #32]
 800a13c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6a1b      	ldr	r3, [r3, #32]
 800a142:	f023 0201 	bic.w	r2, r3, #1
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	699b      	ldr	r3, [r3, #24]
 800a14e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	011b      	lsls	r3, r3, #4
 800a15c:	693a      	ldr	r2, [r7, #16]
 800a15e:	4313      	orrs	r3, r2
 800a160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	f023 030a 	bic.w	r3, r3, #10
 800a168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a16a:	697a      	ldr	r2, [r7, #20]
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	4313      	orrs	r3, r2
 800a170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	693a      	ldr	r2, [r7, #16]
 800a176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	697a      	ldr	r2, [r7, #20]
 800a17c:	621a      	str	r2, [r3, #32]
}
 800a17e:	bf00      	nop
 800a180:	371c      	adds	r7, #28
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr

0800a18a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a18a:	b480      	push	{r7}
 800a18c:	b087      	sub	sp, #28
 800a18e:	af00      	add	r7, sp, #0
 800a190:	60f8      	str	r0, [r7, #12]
 800a192:	60b9      	str	r1, [r7, #8]
 800a194:	607a      	str	r2, [r7, #4]
 800a196:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6a1b      	ldr	r3, [r3, #32]
 800a19c:	f023 0210 	bic.w	r2, r3, #16
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	699b      	ldr	r3, [r3, #24]
 800a1a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6a1b      	ldr	r3, [r3, #32]
 800a1ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	021b      	lsls	r3, r3, #8
 800a1bc:	697a      	ldr	r2, [r7, #20]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a1c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	031b      	lsls	r3, r3, #12
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	697a      	ldr	r2, [r7, #20]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a1dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	011b      	lsls	r3, r3, #4
 800a1e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a1e6:	693a      	ldr	r2, [r7, #16]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	697a      	ldr	r2, [r7, #20]
 800a1f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	621a      	str	r2, [r3, #32]
}
 800a1f8:	bf00      	nop
 800a1fa:	371c      	adds	r7, #28
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a204:	b480      	push	{r7}
 800a206:	b087      	sub	sp, #28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6a1b      	ldr	r3, [r3, #32]
 800a214:	f023 0210 	bic.w	r2, r3, #16
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	699b      	ldr	r3, [r3, #24]
 800a220:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6a1b      	ldr	r3, [r3, #32]
 800a226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a22e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	031b      	lsls	r3, r3, #12
 800a234:	697a      	ldr	r2, [r7, #20]
 800a236:	4313      	orrs	r3, r2
 800a238:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a240:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	011b      	lsls	r3, r3, #4
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	4313      	orrs	r3, r2
 800a24a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	697a      	ldr	r2, [r7, #20]
 800a250:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	621a      	str	r2, [r3, #32]
}
 800a258:	bf00      	nop
 800a25a:	371c      	adds	r7, #28
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a264:	b480      	push	{r7}
 800a266:	b087      	sub	sp, #28
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
 800a270:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6a1b      	ldr	r3, [r3, #32]
 800a276:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	69db      	ldr	r3, [r3, #28]
 800a282:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6a1b      	ldr	r3, [r3, #32]
 800a288:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	f023 0303 	bic.w	r3, r3, #3
 800a290:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a292:	697a      	ldr	r2, [r7, #20]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4313      	orrs	r3, r2
 800a298:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	011b      	lsls	r3, r3, #4
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	697a      	ldr	r2, [r7, #20]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a2b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	021b      	lsls	r3, r3, #8
 800a2ba:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a2be:	693a      	ldr	r2, [r7, #16]
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	697a      	ldr	r2, [r7, #20]
 800a2c8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	693a      	ldr	r2, [r7, #16]
 800a2ce:	621a      	str	r2, [r3, #32]
}
 800a2d0:	bf00      	nop
 800a2d2:	371c      	adds	r7, #28
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b087      	sub	sp, #28
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
 800a2e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6a1b      	ldr	r3, [r3, #32]
 800a2ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	69db      	ldr	r3, [r3, #28]
 800a2fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6a1b      	ldr	r3, [r3, #32]
 800a300:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a308:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	021b      	lsls	r3, r3, #8
 800a30e:	697a      	ldr	r2, [r7, #20]
 800a310:	4313      	orrs	r3, r2
 800a312:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a31a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	031b      	lsls	r3, r3, #12
 800a320:	b29b      	uxth	r3, r3
 800a322:	697a      	ldr	r2, [r7, #20]
 800a324:	4313      	orrs	r3, r2
 800a326:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a32e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	031b      	lsls	r3, r3, #12
 800a334:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a338:	693a      	ldr	r2, [r7, #16]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	697a      	ldr	r2, [r7, #20]
 800a342:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	693a      	ldr	r2, [r7, #16]
 800a348:	621a      	str	r2, [r3, #32]
}
 800a34a:	bf00      	nop
 800a34c:	371c      	adds	r7, #28
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a356:	b480      	push	{r7}
 800a358:	b085      	sub	sp, #20
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a36c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a370:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a372:	683a      	ldr	r2, [r7, #0]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	4313      	orrs	r3, r2
 800a378:	f043 0307 	orr.w	r3, r3, #7
 800a37c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	609a      	str	r2, [r3, #8]
}
 800a384:	bf00      	nop
 800a386:	3714      	adds	r7, #20
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a390:	b480      	push	{r7}
 800a392:	b087      	sub	sp, #28
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
 800a39c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	021a      	lsls	r2, r3, #8
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	431a      	orrs	r2, r3
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	697a      	ldr	r2, [r7, #20]
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	697a      	ldr	r2, [r7, #20]
 800a3c2:	609a      	str	r2, [r3, #8]
}
 800a3c4:	bf00      	nop
 800a3c6:	371c      	adds	r7, #28
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b085      	sub	sp, #20
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d101      	bne.n	800a3e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3e4:	2302      	movs	r3, #2
 800a3e6:	e074      	b.n	800a4d2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2202      	movs	r2, #2
 800a3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a34      	ldr	r2, [pc, #208]	; (800a4e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d009      	beq.n	800a426 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a33      	ldr	r2, [pc, #204]	; (800a4e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d004      	beq.n	800a426 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a31      	ldr	r2, [pc, #196]	; (800a4e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d108      	bne.n	800a438 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a42c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	4313      	orrs	r3, r2
 800a436:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a43e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a442:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	68fa      	ldr	r2, [r7, #12]
 800a454:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a21      	ldr	r2, [pc, #132]	; (800a4e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d022      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a468:	d01d      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a1f      	ldr	r2, [pc, #124]	; (800a4ec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d018      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a1d      	ldr	r2, [pc, #116]	; (800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d013      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a1c      	ldr	r2, [pc, #112]	; (800a4f4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d00e      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a15      	ldr	r2, [pc, #84]	; (800a4e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d009      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a18      	ldr	r2, [pc, #96]	; (800a4f8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d004      	beq.n	800a4a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a11      	ldr	r2, [pc, #68]	; (800a4e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d10c      	bne.n	800a4c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	68ba      	ldr	r2, [r7, #8]
 800a4be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3714      	adds	r7, #20
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	40012c00 	.word	0x40012c00
 800a4e4:	40013400 	.word	0x40013400
 800a4e8:	40015000 	.word	0x40015000
 800a4ec:	40000400 	.word	0x40000400
 800a4f0:	40000800 	.word	0x40000800
 800a4f4:	40000c00 	.word	0x40000c00
 800a4f8:	40014000 	.word	0x40014000

0800a4fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a504:	bf00      	nop
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a518:	bf00      	nop
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a52c:	bf00      	nop
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a540:	bf00      	nop
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a554:	bf00      	nop
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a568:	bf00      	nop
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a57c:	bf00      	nop
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <__errno>:
 800a588:	4b01      	ldr	r3, [pc, #4]	; (800a590 <__errno+0x8>)
 800a58a:	6818      	ldr	r0, [r3, #0]
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	2000000c 	.word	0x2000000c

0800a594 <__libc_init_array>:
 800a594:	b570      	push	{r4, r5, r6, lr}
 800a596:	4d0d      	ldr	r5, [pc, #52]	; (800a5cc <__libc_init_array+0x38>)
 800a598:	4c0d      	ldr	r4, [pc, #52]	; (800a5d0 <__libc_init_array+0x3c>)
 800a59a:	1b64      	subs	r4, r4, r5
 800a59c:	10a4      	asrs	r4, r4, #2
 800a59e:	2600      	movs	r6, #0
 800a5a0:	42a6      	cmp	r6, r4
 800a5a2:	d109      	bne.n	800a5b8 <__libc_init_array+0x24>
 800a5a4:	4d0b      	ldr	r5, [pc, #44]	; (800a5d4 <__libc_init_array+0x40>)
 800a5a6:	4c0c      	ldr	r4, [pc, #48]	; (800a5d8 <__libc_init_array+0x44>)
 800a5a8:	f000 fa26 	bl	800a9f8 <_init>
 800a5ac:	1b64      	subs	r4, r4, r5
 800a5ae:	10a4      	asrs	r4, r4, #2
 800a5b0:	2600      	movs	r6, #0
 800a5b2:	42a6      	cmp	r6, r4
 800a5b4:	d105      	bne.n	800a5c2 <__libc_init_array+0x2e>
 800a5b6:	bd70      	pop	{r4, r5, r6, pc}
 800a5b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5bc:	4798      	blx	r3
 800a5be:	3601      	adds	r6, #1
 800a5c0:	e7ee      	b.n	800a5a0 <__libc_init_array+0xc>
 800a5c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5c6:	4798      	blx	r3
 800a5c8:	3601      	adds	r6, #1
 800a5ca:	e7f2      	b.n	800a5b2 <__libc_init_array+0x1e>
 800a5cc:	0800aa34 	.word	0x0800aa34
 800a5d0:	0800aa34 	.word	0x0800aa34
 800a5d4:	0800aa34 	.word	0x0800aa34
 800a5d8:	0800aa38 	.word	0x0800aa38

0800a5dc <memset>:
 800a5dc:	4402      	add	r2, r0
 800a5de:	4603      	mov	r3, r0
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d100      	bne.n	800a5e6 <memset+0xa>
 800a5e4:	4770      	bx	lr
 800a5e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a5ea:	e7f9      	b.n	800a5e0 <memset+0x4>
 800a5ec:	0000      	movs	r0, r0
	...

0800a5f0 <log>:
 800a5f0:	b538      	push	{r3, r4, r5, lr}
 800a5f2:	ed2d 8b02 	vpush	{d8}
 800a5f6:	ec55 4b10 	vmov	r4, r5, d0
 800a5fa:	f000 f839 	bl	800a670 <__ieee754_log>
 800a5fe:	4622      	mov	r2, r4
 800a600:	462b      	mov	r3, r5
 800a602:	4620      	mov	r0, r4
 800a604:	4629      	mov	r1, r5
 800a606:	eeb0 8a40 	vmov.f32	s16, s0
 800a60a:	eef0 8a60 	vmov.f32	s17, s1
 800a60e:	f7f6 fa59 	bl	8000ac4 <__aeabi_dcmpun>
 800a612:	b998      	cbnz	r0, 800a63c <log+0x4c>
 800a614:	2200      	movs	r2, #0
 800a616:	2300      	movs	r3, #0
 800a618:	4620      	mov	r0, r4
 800a61a:	4629      	mov	r1, r5
 800a61c:	f7f6 fa48 	bl	8000ab0 <__aeabi_dcmpgt>
 800a620:	b960      	cbnz	r0, 800a63c <log+0x4c>
 800a622:	2200      	movs	r2, #0
 800a624:	2300      	movs	r3, #0
 800a626:	4620      	mov	r0, r4
 800a628:	4629      	mov	r1, r5
 800a62a:	f7f6 fa19 	bl	8000a60 <__aeabi_dcmpeq>
 800a62e:	b160      	cbz	r0, 800a64a <log+0x5a>
 800a630:	f7ff ffaa 	bl	800a588 <__errno>
 800a634:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800a660 <log+0x70>
 800a638:	2322      	movs	r3, #34	; 0x22
 800a63a:	6003      	str	r3, [r0, #0]
 800a63c:	eeb0 0a48 	vmov.f32	s0, s16
 800a640:	eef0 0a68 	vmov.f32	s1, s17
 800a644:	ecbd 8b02 	vpop	{d8}
 800a648:	bd38      	pop	{r3, r4, r5, pc}
 800a64a:	f7ff ff9d 	bl	800a588 <__errno>
 800a64e:	ecbd 8b02 	vpop	{d8}
 800a652:	2321      	movs	r3, #33	; 0x21
 800a654:	6003      	str	r3, [r0, #0]
 800a656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a65a:	4803      	ldr	r0, [pc, #12]	; (800a668 <log+0x78>)
 800a65c:	f000 b9c4 	b.w	800a9e8 <nan>
 800a660:	00000000 	.word	0x00000000
 800a664:	fff00000 	.word	0xfff00000
 800a668:	0800aa30 	.word	0x0800aa30
 800a66c:	00000000 	.word	0x00000000

0800a670 <__ieee754_log>:
 800a670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	ec51 0b10 	vmov	r0, r1, d0
 800a678:	ed2d 8b04 	vpush	{d8-d9}
 800a67c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a680:	b083      	sub	sp, #12
 800a682:	460d      	mov	r5, r1
 800a684:	da29      	bge.n	800a6da <__ieee754_log+0x6a>
 800a686:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a68a:	4303      	orrs	r3, r0
 800a68c:	ee10 2a10 	vmov	r2, s0
 800a690:	d10c      	bne.n	800a6ac <__ieee754_log+0x3c>
 800a692:	49cf      	ldr	r1, [pc, #828]	; (800a9d0 <__ieee754_log+0x360>)
 800a694:	2200      	movs	r2, #0
 800a696:	2300      	movs	r3, #0
 800a698:	2000      	movs	r0, #0
 800a69a:	f7f6 f8a3 	bl	80007e4 <__aeabi_ddiv>
 800a69e:	ec41 0b10 	vmov	d0, r0, r1
 800a6a2:	b003      	add	sp, #12
 800a6a4:	ecbd 8b04 	vpop	{d8-d9}
 800a6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ac:	2900      	cmp	r1, #0
 800a6ae:	da05      	bge.n	800a6bc <__ieee754_log+0x4c>
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	f7f5 fdb5 	bl	8000220 <__aeabi_dsub>
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	e7ee      	b.n	800a69a <__ieee754_log+0x2a>
 800a6bc:	4bc5      	ldr	r3, [pc, #788]	; (800a9d4 <__ieee754_log+0x364>)
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f7f5 ff66 	bl	8000590 <__aeabi_dmul>
 800a6c4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800a6c8:	460d      	mov	r5, r1
 800a6ca:	4ac3      	ldr	r2, [pc, #780]	; (800a9d8 <__ieee754_log+0x368>)
 800a6cc:	4295      	cmp	r5, r2
 800a6ce:	dd06      	ble.n	800a6de <__ieee754_log+0x6e>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	f7f5 fda6 	bl	8000224 <__adddf3>
 800a6d8:	e7e1      	b.n	800a69e <__ieee754_log+0x2e>
 800a6da:	2300      	movs	r3, #0
 800a6dc:	e7f5      	b.n	800a6ca <__ieee754_log+0x5a>
 800a6de:	152c      	asrs	r4, r5, #20
 800a6e0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a6e4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a6e8:	441c      	add	r4, r3
 800a6ea:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800a6ee:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800a6f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a6f6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800a6fa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800a6fe:	ea42 0105 	orr.w	r1, r2, r5
 800a702:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800a706:	2200      	movs	r2, #0
 800a708:	4bb4      	ldr	r3, [pc, #720]	; (800a9dc <__ieee754_log+0x36c>)
 800a70a:	f7f5 fd89 	bl	8000220 <__aeabi_dsub>
 800a70e:	1cab      	adds	r3, r5, #2
 800a710:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a714:	2b02      	cmp	r3, #2
 800a716:	4682      	mov	sl, r0
 800a718:	468b      	mov	fp, r1
 800a71a:	f04f 0200 	mov.w	r2, #0
 800a71e:	dc53      	bgt.n	800a7c8 <__ieee754_log+0x158>
 800a720:	2300      	movs	r3, #0
 800a722:	f7f6 f99d 	bl	8000a60 <__aeabi_dcmpeq>
 800a726:	b1d0      	cbz	r0, 800a75e <__ieee754_log+0xee>
 800a728:	2c00      	cmp	r4, #0
 800a72a:	f000 8122 	beq.w	800a972 <__ieee754_log+0x302>
 800a72e:	4620      	mov	r0, r4
 800a730:	f7f5 fec4 	bl	80004bc <__aeabi_i2d>
 800a734:	a390      	add	r3, pc, #576	; (adr r3, 800a978 <__ieee754_log+0x308>)
 800a736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73a:	4606      	mov	r6, r0
 800a73c:	460f      	mov	r7, r1
 800a73e:	f7f5 ff27 	bl	8000590 <__aeabi_dmul>
 800a742:	a38f      	add	r3, pc, #572	; (adr r3, 800a980 <__ieee754_log+0x310>)
 800a744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a748:	4604      	mov	r4, r0
 800a74a:	460d      	mov	r5, r1
 800a74c:	4630      	mov	r0, r6
 800a74e:	4639      	mov	r1, r7
 800a750:	f7f5 ff1e 	bl	8000590 <__aeabi_dmul>
 800a754:	4602      	mov	r2, r0
 800a756:	460b      	mov	r3, r1
 800a758:	4620      	mov	r0, r4
 800a75a:	4629      	mov	r1, r5
 800a75c:	e7ba      	b.n	800a6d4 <__ieee754_log+0x64>
 800a75e:	a38a      	add	r3, pc, #552	; (adr r3, 800a988 <__ieee754_log+0x318>)
 800a760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a764:	4650      	mov	r0, sl
 800a766:	4659      	mov	r1, fp
 800a768:	f7f5 ff12 	bl	8000590 <__aeabi_dmul>
 800a76c:	4602      	mov	r2, r0
 800a76e:	460b      	mov	r3, r1
 800a770:	2000      	movs	r0, #0
 800a772:	499b      	ldr	r1, [pc, #620]	; (800a9e0 <__ieee754_log+0x370>)
 800a774:	f7f5 fd54 	bl	8000220 <__aeabi_dsub>
 800a778:	4652      	mov	r2, sl
 800a77a:	4606      	mov	r6, r0
 800a77c:	460f      	mov	r7, r1
 800a77e:	465b      	mov	r3, fp
 800a780:	4650      	mov	r0, sl
 800a782:	4659      	mov	r1, fp
 800a784:	f7f5 ff04 	bl	8000590 <__aeabi_dmul>
 800a788:	4602      	mov	r2, r0
 800a78a:	460b      	mov	r3, r1
 800a78c:	4630      	mov	r0, r6
 800a78e:	4639      	mov	r1, r7
 800a790:	f7f5 fefe 	bl	8000590 <__aeabi_dmul>
 800a794:	4606      	mov	r6, r0
 800a796:	460f      	mov	r7, r1
 800a798:	b914      	cbnz	r4, 800a7a0 <__ieee754_log+0x130>
 800a79a:	4632      	mov	r2, r6
 800a79c:	463b      	mov	r3, r7
 800a79e:	e0a2      	b.n	800a8e6 <__ieee754_log+0x276>
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	f7f5 fe8b 	bl	80004bc <__aeabi_i2d>
 800a7a6:	a374      	add	r3, pc, #464	; (adr r3, 800a978 <__ieee754_log+0x308>)
 800a7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ac:	4680      	mov	r8, r0
 800a7ae:	4689      	mov	r9, r1
 800a7b0:	f7f5 feee 	bl	8000590 <__aeabi_dmul>
 800a7b4:	a372      	add	r3, pc, #456	; (adr r3, 800a980 <__ieee754_log+0x310>)
 800a7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	460d      	mov	r5, r1
 800a7be:	4640      	mov	r0, r8
 800a7c0:	4649      	mov	r1, r9
 800a7c2:	f7f5 fee5 	bl	8000590 <__aeabi_dmul>
 800a7c6:	e0a7      	b.n	800a918 <__ieee754_log+0x2a8>
 800a7c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a7cc:	f7f5 fd2a 	bl	8000224 <__adddf3>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	4650      	mov	r0, sl
 800a7d6:	4659      	mov	r1, fp
 800a7d8:	f7f6 f804 	bl	80007e4 <__aeabi_ddiv>
 800a7dc:	ec41 0b18 	vmov	d8, r0, r1
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	f7f5 fe6b 	bl	80004bc <__aeabi_i2d>
 800a7e6:	ec53 2b18 	vmov	r2, r3, d8
 800a7ea:	ec41 0b19 	vmov	d9, r0, r1
 800a7ee:	ec51 0b18 	vmov	r0, r1, d8
 800a7f2:	f7f5 fecd 	bl	8000590 <__aeabi_dmul>
 800a7f6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800a7fa:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800a7fe:	9301      	str	r3, [sp, #4]
 800a800:	4602      	mov	r2, r0
 800a802:	460b      	mov	r3, r1
 800a804:	4680      	mov	r8, r0
 800a806:	4689      	mov	r9, r1
 800a808:	f7f5 fec2 	bl	8000590 <__aeabi_dmul>
 800a80c:	a360      	add	r3, pc, #384	; (adr r3, 800a990 <__ieee754_log+0x320>)
 800a80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a812:	4606      	mov	r6, r0
 800a814:	460f      	mov	r7, r1
 800a816:	f7f5 febb 	bl	8000590 <__aeabi_dmul>
 800a81a:	a35f      	add	r3, pc, #380	; (adr r3, 800a998 <__ieee754_log+0x328>)
 800a81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a820:	f7f5 fd00 	bl	8000224 <__adddf3>
 800a824:	4632      	mov	r2, r6
 800a826:	463b      	mov	r3, r7
 800a828:	f7f5 feb2 	bl	8000590 <__aeabi_dmul>
 800a82c:	a35c      	add	r3, pc, #368	; (adr r3, 800a9a0 <__ieee754_log+0x330>)
 800a82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a832:	f7f5 fcf7 	bl	8000224 <__adddf3>
 800a836:	4632      	mov	r2, r6
 800a838:	463b      	mov	r3, r7
 800a83a:	f7f5 fea9 	bl	8000590 <__aeabi_dmul>
 800a83e:	a35a      	add	r3, pc, #360	; (adr r3, 800a9a8 <__ieee754_log+0x338>)
 800a840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a844:	f7f5 fcee 	bl	8000224 <__adddf3>
 800a848:	4642      	mov	r2, r8
 800a84a:	464b      	mov	r3, r9
 800a84c:	f7f5 fea0 	bl	8000590 <__aeabi_dmul>
 800a850:	a357      	add	r3, pc, #348	; (adr r3, 800a9b0 <__ieee754_log+0x340>)
 800a852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a856:	4680      	mov	r8, r0
 800a858:	4689      	mov	r9, r1
 800a85a:	4630      	mov	r0, r6
 800a85c:	4639      	mov	r1, r7
 800a85e:	f7f5 fe97 	bl	8000590 <__aeabi_dmul>
 800a862:	a355      	add	r3, pc, #340	; (adr r3, 800a9b8 <__ieee754_log+0x348>)
 800a864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a868:	f7f5 fcdc 	bl	8000224 <__adddf3>
 800a86c:	4632      	mov	r2, r6
 800a86e:	463b      	mov	r3, r7
 800a870:	f7f5 fe8e 	bl	8000590 <__aeabi_dmul>
 800a874:	a352      	add	r3, pc, #328	; (adr r3, 800a9c0 <__ieee754_log+0x350>)
 800a876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87a:	f7f5 fcd3 	bl	8000224 <__adddf3>
 800a87e:	4632      	mov	r2, r6
 800a880:	463b      	mov	r3, r7
 800a882:	f7f5 fe85 	bl	8000590 <__aeabi_dmul>
 800a886:	460b      	mov	r3, r1
 800a888:	4602      	mov	r2, r0
 800a88a:	4649      	mov	r1, r9
 800a88c:	4640      	mov	r0, r8
 800a88e:	f7f5 fcc9 	bl	8000224 <__adddf3>
 800a892:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800a896:	9b01      	ldr	r3, [sp, #4]
 800a898:	3551      	adds	r5, #81	; 0x51
 800a89a:	431d      	orrs	r5, r3
 800a89c:	2d00      	cmp	r5, #0
 800a89e:	4680      	mov	r8, r0
 800a8a0:	4689      	mov	r9, r1
 800a8a2:	dd48      	ble.n	800a936 <__ieee754_log+0x2c6>
 800a8a4:	4b4e      	ldr	r3, [pc, #312]	; (800a9e0 <__ieee754_log+0x370>)
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	4650      	mov	r0, sl
 800a8aa:	4659      	mov	r1, fp
 800a8ac:	f7f5 fe70 	bl	8000590 <__aeabi_dmul>
 800a8b0:	4652      	mov	r2, sl
 800a8b2:	465b      	mov	r3, fp
 800a8b4:	f7f5 fe6c 	bl	8000590 <__aeabi_dmul>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	4606      	mov	r6, r0
 800a8be:	460f      	mov	r7, r1
 800a8c0:	4640      	mov	r0, r8
 800a8c2:	4649      	mov	r1, r9
 800a8c4:	f7f5 fcae 	bl	8000224 <__adddf3>
 800a8c8:	ec53 2b18 	vmov	r2, r3, d8
 800a8cc:	f7f5 fe60 	bl	8000590 <__aeabi_dmul>
 800a8d0:	4680      	mov	r8, r0
 800a8d2:	4689      	mov	r9, r1
 800a8d4:	b964      	cbnz	r4, 800a8f0 <__ieee754_log+0x280>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	460b      	mov	r3, r1
 800a8da:	4630      	mov	r0, r6
 800a8dc:	4639      	mov	r1, r7
 800a8de:	f7f5 fc9f 	bl	8000220 <__aeabi_dsub>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	4650      	mov	r0, sl
 800a8e8:	4659      	mov	r1, fp
 800a8ea:	f7f5 fc99 	bl	8000220 <__aeabi_dsub>
 800a8ee:	e6d6      	b.n	800a69e <__ieee754_log+0x2e>
 800a8f0:	a321      	add	r3, pc, #132	; (adr r3, 800a978 <__ieee754_log+0x308>)
 800a8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f6:	ec51 0b19 	vmov	r0, r1, d9
 800a8fa:	f7f5 fe49 	bl	8000590 <__aeabi_dmul>
 800a8fe:	a320      	add	r3, pc, #128	; (adr r3, 800a980 <__ieee754_log+0x310>)
 800a900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a904:	4604      	mov	r4, r0
 800a906:	460d      	mov	r5, r1
 800a908:	ec51 0b19 	vmov	r0, r1, d9
 800a90c:	f7f5 fe40 	bl	8000590 <__aeabi_dmul>
 800a910:	4642      	mov	r2, r8
 800a912:	464b      	mov	r3, r9
 800a914:	f7f5 fc86 	bl	8000224 <__adddf3>
 800a918:	4602      	mov	r2, r0
 800a91a:	460b      	mov	r3, r1
 800a91c:	4630      	mov	r0, r6
 800a91e:	4639      	mov	r1, r7
 800a920:	f7f5 fc7e 	bl	8000220 <__aeabi_dsub>
 800a924:	4652      	mov	r2, sl
 800a926:	465b      	mov	r3, fp
 800a928:	f7f5 fc7a 	bl	8000220 <__aeabi_dsub>
 800a92c:	4602      	mov	r2, r0
 800a92e:	460b      	mov	r3, r1
 800a930:	4620      	mov	r0, r4
 800a932:	4629      	mov	r1, r5
 800a934:	e7d9      	b.n	800a8ea <__ieee754_log+0x27a>
 800a936:	4602      	mov	r2, r0
 800a938:	460b      	mov	r3, r1
 800a93a:	4650      	mov	r0, sl
 800a93c:	4659      	mov	r1, fp
 800a93e:	f7f5 fc6f 	bl	8000220 <__aeabi_dsub>
 800a942:	ec53 2b18 	vmov	r2, r3, d8
 800a946:	f7f5 fe23 	bl	8000590 <__aeabi_dmul>
 800a94a:	4606      	mov	r6, r0
 800a94c:	460f      	mov	r7, r1
 800a94e:	2c00      	cmp	r4, #0
 800a950:	f43f af23 	beq.w	800a79a <__ieee754_log+0x12a>
 800a954:	a308      	add	r3, pc, #32	; (adr r3, 800a978 <__ieee754_log+0x308>)
 800a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95a:	ec51 0b19 	vmov	r0, r1, d9
 800a95e:	f7f5 fe17 	bl	8000590 <__aeabi_dmul>
 800a962:	a307      	add	r3, pc, #28	; (adr r3, 800a980 <__ieee754_log+0x310>)
 800a964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a968:	4604      	mov	r4, r0
 800a96a:	460d      	mov	r5, r1
 800a96c:	ec51 0b19 	vmov	r0, r1, d9
 800a970:	e727      	b.n	800a7c2 <__ieee754_log+0x152>
 800a972:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800a9c8 <__ieee754_log+0x358>
 800a976:	e694      	b.n	800a6a2 <__ieee754_log+0x32>
 800a978:	fee00000 	.word	0xfee00000
 800a97c:	3fe62e42 	.word	0x3fe62e42
 800a980:	35793c76 	.word	0x35793c76
 800a984:	3dea39ef 	.word	0x3dea39ef
 800a988:	55555555 	.word	0x55555555
 800a98c:	3fd55555 	.word	0x3fd55555
 800a990:	df3e5244 	.word	0xdf3e5244
 800a994:	3fc2f112 	.word	0x3fc2f112
 800a998:	96cb03de 	.word	0x96cb03de
 800a99c:	3fc74664 	.word	0x3fc74664
 800a9a0:	94229359 	.word	0x94229359
 800a9a4:	3fd24924 	.word	0x3fd24924
 800a9a8:	55555593 	.word	0x55555593
 800a9ac:	3fe55555 	.word	0x3fe55555
 800a9b0:	d078c69f 	.word	0xd078c69f
 800a9b4:	3fc39a09 	.word	0x3fc39a09
 800a9b8:	1d8e78af 	.word	0x1d8e78af
 800a9bc:	3fcc71c5 	.word	0x3fcc71c5
 800a9c0:	9997fa04 	.word	0x9997fa04
 800a9c4:	3fd99999 	.word	0x3fd99999
	...
 800a9d0:	c3500000 	.word	0xc3500000
 800a9d4:	43500000 	.word	0x43500000
 800a9d8:	7fefffff 	.word	0x7fefffff
 800a9dc:	3ff00000 	.word	0x3ff00000
 800a9e0:	3fe00000 	.word	0x3fe00000
 800a9e4:	00000000 	.word	0x00000000

0800a9e8 <nan>:
 800a9e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a9f0 <nan+0x8>
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	00000000 	.word	0x00000000
 800a9f4:	7ff80000 	.word	0x7ff80000

0800a9f8 <_init>:
 800a9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9fa:	bf00      	nop
 800a9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9fe:	bc08      	pop	{r3}
 800aa00:	469e      	mov	lr, r3
 800aa02:	4770      	bx	lr

0800aa04 <_fini>:
 800aa04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa06:	bf00      	nop
 800aa08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa0a:	bc08      	pop	{r3}
 800aa0c:	469e      	mov	lr, r3
 800aa0e:	4770      	bx	lr
