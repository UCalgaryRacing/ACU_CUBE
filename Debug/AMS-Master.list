
AMS-Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079f8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08007bd0  08007bd0  00017bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007be4  08007be4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007be4  08007be4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007be4  08007be4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007be4  08007be4  00017be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007be8  08007be8  00017be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  20000078  08007c60  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  08007c60  000205c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133b4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002754  00000000  00000000  00033458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00035bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  00036ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028655  00000000  00000000  00037c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a75  00000000  00000000  000602cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010908d  00000000  00000000  00071d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017adcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ad4  00000000  00000000  0017ae20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000078 	.word	0x20000078
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007bb8 	.word	0x08007bb8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000007c 	.word	0x2000007c
 8000214:	08007bb8 	.word	0x08007bb8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <init_PEC15_Table>:

int16_t pec15Table[256];
const int16_t CRC15_POLY = 0x4599;

void init_PEC15_Table(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
    int16_t remainder;

    for (int i = 0; i < 256; i++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	e026      	b.n	8000bea <init_PEC15_Table+0x5a>
    {
        remainder = i << 7;
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	01db      	lsls	r3, r3, #7
 8000ba0:	81fb      	strh	r3, [r7, #14]
        for (int bit = 8; bit > 0; --bit)
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	e015      	b.n	8000bd4 <init_PEC15_Table+0x44>
        {
            if (remainder & 0x4000)
 8000ba8:	89fb      	ldrh	r3, [r7, #14]
 8000baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d009      	beq.n	8000bc6 <init_PEC15_Table+0x36>
            {
                remainder = ((remainder << 1));
 8000bb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	81fb      	strh	r3, [r7, #14]
                remainder = (remainder ^ CRC15_POLY);
 8000bba:	f244 5299 	movw	r2, #17817	; 0x4599
 8000bbe:	89fb      	ldrh	r3, [r7, #14]
 8000bc0:	4053      	eors	r3, r2
 8000bc2:	81fb      	strh	r3, [r7, #14]
 8000bc4:	e003      	b.n	8000bce <init_PEC15_Table+0x3e>
            }
            else
            {
                remainder = ((remainder << 1));
 8000bc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	81fb      	strh	r3, [r7, #14]
        for (int bit = 8; bit > 0; --bit)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	dce6      	bgt.n	8000ba8 <init_PEC15_Table+0x18>
            }
        }
        pec15Table[i] = remainder & 0xFFFF;
 8000bda:	4909      	ldr	r1, [pc, #36]	; (8000c00 <init_PEC15_Table+0x70>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	89fa      	ldrh	r2, [r7, #14]
 8000be0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int i = 0; i < 256; i++)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	3301      	adds	r3, #1
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	2bff      	cmp	r3, #255	; 0xff
 8000bee:	ddd5      	ble.n	8000b9c <init_PEC15_Table+0xc>
    }
}
 8000bf0:	bf00      	nop
 8000bf2:	bf00      	nop
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000094 	.word	0x20000094

08000c04 <pec15>:


uint16_t pec15(uint8_t *data, int len)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b087      	sub	sp, #28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
    int16_t remainder, address;

    remainder = 16; // PEC seed
 8000c0e:	2310      	movs	r3, #16
 8000c10:	82fb      	strh	r3, [r7, #22]

    for (int i = 0; i < len; i++)
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	e01a      	b.n	8000c4e <pec15+0x4a>
    {
        address = ((remainder >> 7) ^ data[i]) & 0xff; // calculate PEC table address
 8000c18:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c1c:	11db      	asrs	r3, r3, #7
 8000c1e:	b21a      	sxth	r2, r3
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	440b      	add	r3, r1
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	4053      	eors	r3, r2
 8000c2c:	b21b      	sxth	r3, r3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	81fb      	strh	r3, [r7, #14]
        remainder = (remainder << 8) ^ pec15Table[address];
 8000c32:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c36:	021b      	lsls	r3, r3, #8
 8000c38:	b21a      	sxth	r2, r3
 8000c3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c3e:	490a      	ldr	r1, [pc, #40]	; (8000c68 <pec15+0x64>)
 8000c40:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000c44:	4053      	eors	r3, r2
 8000c46:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < len; i++)
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	dbe0      	blt.n	8000c18 <pec15+0x14>
    }
    return (remainder * 2); // The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 8000c56:	8afb      	ldrh	r3, [r7, #22]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	b29b      	uxth	r3, r3
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	371c      	adds	r7, #28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	20000094 	.word	0x20000094

08000c6c <init_LTC6811>:


void init_LTC6811(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
    init_PEC15_Table();
 8000c70:	f7ff ff8e 	bl	8000b90 <init_PEC15_Table>
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <update_config>:


void update_config(ltc6811_config *config)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
    uint8_t cfgr[6] = {0};
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	2300      	movs	r3, #0
 8000c86:	81bb      	strh	r3, [r7, #12]

    cfgr[0] = config->gpio_pulldowns << 3;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	723b      	strb	r3, [r7, #8]
    cfgr[0] |= config->refon << 2;
 8000c92:	7a3b      	ldrb	r3, [r7, #8]
 8000c94:	b25a      	sxtb	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	785b      	ldrb	r3, [r3, #1]
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	b25b      	sxtb	r3, r3
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	b25b      	sxtb	r3, r3
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	723b      	strb	r3, [r7, #8]
    cfgr[0] |= config->adcopt;
 8000ca6:	7a3b      	ldrb	r3, [r7, #8]
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	7892      	ldrb	r2, [r2, #2]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	723b      	strb	r3, [r7, #8]

    cfgr[1] = config->vuv;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	889b      	ldrh	r3, [r3, #4]
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	727b      	strb	r3, [r7, #9]

    cfgr[2] = config->vuv >> 8;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	889b      	ldrh	r3, [r3, #4]
 8000cbe:	0a1b      	lsrs	r3, r3, #8
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	72bb      	strb	r3, [r7, #10]
    cfgr[2] |= config->vov << 4;
 8000cc6:	7abb      	ldrb	r3, [r7, #10]
 8000cc8:	b25a      	sxtb	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	88db      	ldrh	r3, [r3, #6]
 8000cce:	011b      	lsls	r3, r3, #4
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b25b      	sxtb	r3, r3
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	72bb      	strb	r3, [r7, #10]

    cfgr[3] = config->vov >> 4;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	88db      	ldrh	r3, [r3, #6]
 8000cde:	091b      	lsrs	r3, r3, #4
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	72fb      	strb	r3, [r7, #11]

    cfgr[4] = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	733b      	strb	r3, [r7, #12]

    cfgr[5] = config->dcto << 4;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	7a1b      	ldrb	r3, [r3, #8]
 8000cee:	011b      	lsls	r3, r3, #4
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	737b      	strb	r3, [r7, #13]

    wake_sleep();
 8000cf4:	f000 f80a 	bl	8000d0c <wake_sleep>

    broadcast_write(WRCFGA, cfgr);
 8000cf8:	f107 0308 	add.w	r3, r7, #8
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f000 f878 	bl	8000df4 <broadcast_write>
}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <wake_sleep>:

////NEED TO CHANGE TO HAL
void wake_sleep()
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1a:	f004 fb77 	bl	800540c <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f001 fc4c 	bl	80025bc <HAL_Delay>

    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2e:	f004 fb6d 	bl	800540c <HAL_GPIO_WritePin>

    HAL_Delay(1);
 8000d32:	2001      	movs	r0, #1
 8000d34:	f001 fc42 	bl	80025bc <HAL_Delay>
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <wake_standby>:


void wake_standby()
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4a:	f004 fb5f 	bl	800540c <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000d4e:	2001      	movs	r0, #1
 8000d50:	f001 fc34 	bl	80025bc <HAL_Delay>

    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5e:	f004 fb55 	bl	800540c <HAL_GPIO_WritePin>

    HAL_Delay(1);
 8000d62:	2001      	movs	r0, #1
 8000d64:	f001 fc2a 	bl	80025bc <HAL_Delay>
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <broadcast_command>:


void broadcast_command(uint16_t command_code)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	80fb      	strh	r3, [r7, #6]
    uint8_t CMD[2];

    // see Table 36 (Broadcast Command Format) in LTC6811 datasheet
    CMD[0] = 0;                  // CMD0 bits 3 thru 7  = 0
 8000d76:	2300      	movs	r3, #0
 8000d78:	733b      	strb	r3, [r7, #12]
    CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 8000d7a:	7b3a      	ldrb	r2, [r7, #12]
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	0a1b      	lsrs	r3, r3, #8
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	4313      	orrs	r3, r2
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	733b      	strb	r3, [r7, #12]
    CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	737b      	strb	r3, [r7, #13]

    uint16_t crc = pec15(CMD, 2); // CRC for CMD
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2102      	movs	r1, #2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ff34 	bl	8000c04 <pec15>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	81fb      	strh	r3, [r7, #14]

    uint8_t tx_msg[4];

    // Send 2-byte CMD and 2-byte PEC15.

    tx_msg[0] = CMD[0];
 8000da0:	7b3b      	ldrb	r3, [r7, #12]
 8000da2:	723b      	strb	r3, [r7, #8]
    tx_msg[1] = CMD[1];
 8000da4:	7b7b      	ldrb	r3, [r7, #13]
 8000da6:	727b      	strb	r3, [r7, #9]
    tx_msg[2] = crc >> 8;
 8000da8:	89fb      	ldrh	r3, [r7, #14]
 8000daa:	0a1b      	lsrs	r3, r3, #8
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	72bb      	strb	r3, [r7, #10]
    tx_msg[3] = crc;
 8000db2:	89fb      	ldrh	r3, [r7, #14]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	72fb      	strb	r3, [r7, #11]




#ifdef ALWAYS_STANDBY_WAKE
    wake_standby();
 8000db8:	f7ff ffc0 	bl	8000d3c <wake_standby>
#endif
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc6:	f004 fb21 	bl	800540c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, tx_msg, 4, 1000);
 8000dca:	f107 0108 	add.w	r1, r7, #8
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	4806      	ldr	r0, [pc, #24]	; (8000df0 <broadcast_command+0x84>)
 8000dd6:	f005 fe4c 	bl	8006a72 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de4:	f004 fb12 	bl	800540c <HAL_GPIO_WritePin>
}
 8000de8:	bf00      	nop
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000450 	.word	0x20000450

08000df4 <broadcast_write>:


void broadcast_write(uint16_t command_code, uint8_t *tx_reg)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	80fb      	strh	r3, [r7, #6]
    uint8_t CMD[2];

    // see Table 36 (Broadcast Command Format) in LTC6811 datasheet
    CMD[0] = 0;                  // CMD0 bits 3 thru 7  = 0
 8000e00:	2300      	movs	r3, #0
 8000e02:	753b      	strb	r3, [r7, #20]
    CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 8000e04:	7d3a      	ldrb	r2, [r7, #20]
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	753b      	strb	r3, [r7, #20]
    CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	757b      	strb	r3, [r7, #21]

    uint16_t crc = pec15(CMD, 2); // CRC for CMD
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	2102      	movs	r1, #2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff feef 	bl	8000c04 <pec15>
 8000e26:	4603      	mov	r3, r0
 8000e28:	82fb      	strh	r3, [r7, #22]

    uint8_t tx_msg[12];

    // Send 2-byte CMD and 2-byte PEC15, then 6-byte register and 2-byte PEC15. No shift bytes.

    tx_msg[0] = CMD[0];
 8000e2a:	7d3b      	ldrb	r3, [r7, #20]
 8000e2c:	723b      	strb	r3, [r7, #8]
    tx_msg[1] = CMD[1];
 8000e2e:	7d7b      	ldrb	r3, [r7, #21]
 8000e30:	727b      	strb	r3, [r7, #9]
    tx_msg[2] = crc >> 8;
 8000e32:	8afb      	ldrh	r3, [r7, #22]
 8000e34:	0a1b      	lsrs	r3, r3, #8
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	72bb      	strb	r3, [r7, #10]
    tx_msg[3] = crc;
 8000e3c:	8afb      	ldrh	r3, [r7, #22]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	72fb      	strb	r3, [r7, #11]

    crc = pec15(tx_reg, 6); // CRC for register value
 8000e42:	2106      	movs	r1, #6
 8000e44:	6838      	ldr	r0, [r7, #0]
 8000e46:	f7ff fedd 	bl	8000c04 <pec15>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	82fb      	strh	r3, [r7, #22]

    tx_msg[4] = tx_reg[0];
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	733b      	strb	r3, [r7, #12]
    tx_msg[5] = tx_reg[1];
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	785b      	ldrb	r3, [r3, #1]
 8000e58:	737b      	strb	r3, [r7, #13]
    tx_msg[6] = tx_reg[2];
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	789b      	ldrb	r3, [r3, #2]
 8000e5e:	73bb      	strb	r3, [r7, #14]
    tx_msg[7] = tx_reg[3];
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	78db      	ldrb	r3, [r3, #3]
 8000e64:	73fb      	strb	r3, [r7, #15]
    tx_msg[8] = tx_reg[4];
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	791b      	ldrb	r3, [r3, #4]
 8000e6a:	743b      	strb	r3, [r7, #16]
    tx_msg[9] = tx_reg[5];
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	795b      	ldrb	r3, [r3, #5]
 8000e70:	747b      	strb	r3, [r7, #17]
    tx_msg[10] = crc >> 8;
 8000e72:	8afb      	ldrh	r3, [r7, #22]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	74bb      	strb	r3, [r7, #18]
    tx_msg[11] = crc;
 8000e7c:	8afb      	ldrh	r3, [r7, #22]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	74fb      	strb	r3, [r7, #19]




#ifdef ALWAYS_STANDBY_WAKE
    wake_standby();
 8000e82:	f7ff ff5b 	bl	8000d3c <wake_standby>
#endif
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e90:	f004 fabc 	bl	800540c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, tx_msg, 12, 1000);
 8000e94:	f107 0108 	add.w	r1, r7, #8
 8000e98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9c:	220c      	movs	r2, #12
 8000e9e:	4807      	ldr	r0, [pc, #28]	; (8000ebc <broadcast_write+0xc8>)
 8000ea0:	f005 fde7 	bl	8006a72 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eae:	f004 faad 	bl	800540c <HAL_GPIO_WritePin>
}
 8000eb2:	bf00      	nop
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000450 	.word	0x20000450

08000ec0 <address_write>:


void address_write(uint8_t address, uint16_t command_code, uint8_t *tx_reg)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	603a      	str	r2, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	80bb      	strh	r3, [r7, #4]
    uint8_t CMD[2];

    // see Table 37 (Address Command Format) in LTC6811 datasheet
    CMD[0] = 0x80;               // CMD0 bit 7          = 1
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	753b      	strb	r3, [r7, #20]
    CMD[0] |= address << 3;      // CMD0 bits 3 thu 6   = address
 8000ed4:	7d3b      	ldrb	r3, [r7, #20]
 8000ed6:	b25a      	sxtb	r2, r3
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	753b      	strb	r3, [r7, #20]
    CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 8000ee6:	7d3a      	ldrb	r2, [r7, #20]
 8000ee8:	88bb      	ldrh	r3, [r7, #4]
 8000eea:	0a1b      	lsrs	r3, r3, #8
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	753b      	strb	r3, [r7, #20]
    CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 8000ef6:	88bb      	ldrh	r3, [r7, #4]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	757b      	strb	r3, [r7, #21]

    uint16_t crc = pec15(CMD, 2); // CRC for CMD
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2102      	movs	r1, #2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fe7e 	bl	8000c04 <pec15>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	82fb      	strh	r3, [r7, #22]
    uint8_t tx_msg[12];

    // See Table 33 (Address Write Command) in LTC6811 datasheet.
    // Send 2-byte CMD and 2-byte PEC15, then 6-byte register and 2-byte PEC15

    tx_msg[0] = CMD[0];
 8000f0c:	7d3b      	ldrb	r3, [r7, #20]
 8000f0e:	723b      	strb	r3, [r7, #8]
    tx_msg[1] = CMD[1];
 8000f10:	7d7b      	ldrb	r3, [r7, #21]
 8000f12:	727b      	strb	r3, [r7, #9]
    tx_msg[2] = crc >> 8;
 8000f14:	8afb      	ldrh	r3, [r7, #22]
 8000f16:	0a1b      	lsrs	r3, r3, #8
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	72bb      	strb	r3, [r7, #10]
    tx_msg[3] = crc;
 8000f1e:	8afb      	ldrh	r3, [r7, #22]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	72fb      	strb	r3, [r7, #11]

    crc = pec15(tx_reg, 6); // CRC for register value
 8000f24:	2106      	movs	r1, #6
 8000f26:	6838      	ldr	r0, [r7, #0]
 8000f28:	f7ff fe6c 	bl	8000c04 <pec15>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	82fb      	strh	r3, [r7, #22]

    tx_msg[4] = tx_reg[0];
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	733b      	strb	r3, [r7, #12]
    tx_msg[5] = tx_reg[1];
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	785b      	ldrb	r3, [r3, #1]
 8000f3a:	737b      	strb	r3, [r7, #13]
    tx_msg[6] = tx_reg[2];
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	789b      	ldrb	r3, [r3, #2]
 8000f40:	73bb      	strb	r3, [r7, #14]
    tx_msg[7] = tx_reg[3];
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	78db      	ldrb	r3, [r3, #3]
 8000f46:	73fb      	strb	r3, [r7, #15]
    tx_msg[8] = tx_reg[4];
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	791b      	ldrb	r3, [r3, #4]
 8000f4c:	743b      	strb	r3, [r7, #16]
    tx_msg[9] = tx_reg[5];
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	795b      	ldrb	r3, [r3, #5]
 8000f52:	747b      	strb	r3, [r7, #17]
    tx_msg[10] = crc >> 8;
 8000f54:	8afb      	ldrh	r3, [r7, #22]
 8000f56:	0a1b      	lsrs	r3, r3, #8
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	74bb      	strb	r3, [r7, #18]
    tx_msg[11] = crc;
 8000f5e:	8afb      	ldrh	r3, [r7, #22]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	74fb      	strb	r3, [r7, #19]


#ifdef ALWAYS_STANDBY_WAKE
    wake_standby();
 8000f64:	f7ff feea 	bl	8000d3c <wake_standby>
#endif
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f72:	f004 fa4b 	bl	800540c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, tx_msg, 12, 1000);
 8000f76:	f107 0108 	add.w	r1, r7, #8
 8000f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7e:	220c      	movs	r2, #12
 8000f80:	4806      	ldr	r0, [pc, #24]	; (8000f9c <address_write+0xdc>)
 8000f82:	f005 fd76 	bl	8006a72 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 8000f86:	2201      	movs	r2, #1
 8000f88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f90:	f004 fa3c 	bl	800540c <HAL_GPIO_WritePin>
}
 8000f94:	bf00      	nop
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000450 	.word	0x20000450

08000fa0 <address_read>:



void address_read(uint8_t address, uint16_t command_code, uint8_t *rx_reg)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	603a      	str	r2, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
 8000fac:	460b      	mov	r3, r1
 8000fae:	80bb      	strh	r3, [r7, #4]
    uint8_t CMD[2];

    // see Table 37 (Address Command Format) in LTC6811 datasheet
    CMD[0] = 0x80;               // CMD0 bit 7          = 1
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	773b      	strb	r3, [r7, #28]
    CMD[0] |= address << 3;      // CMD0 bits 3 thu 6   = address
 8000fb4:	7f3b      	ldrb	r3, [r7, #28]
 8000fb6:	b25a      	sxtb	r2, r3
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	b25b      	sxtb	r3, r3
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	773b      	strb	r3, [r7, #28]
    CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 8000fc6:	7f3a      	ldrb	r2, [r7, #28]
 8000fc8:	88bb      	ldrh	r3, [r7, #4]
 8000fca:	0a1b      	lsrs	r3, r3, #8
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	773b      	strb	r3, [r7, #28]
    CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 8000fd6:	88bb      	ldrh	r3, [r7, #4]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	777b      	strb	r3, [r7, #29]

    uint16_t crc = pec15(CMD, 2);
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fe0e 	bl	8000c04 <pec15>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	847b      	strh	r3, [r7, #34]	; 0x22

    uint8_t tx_msg[12];

    // Send 2-byte CMD and PEC15, then read 6-byte register and 2-byte PEC15

    tx_msg[0] = CMD[0];
 8000fec:	7f3b      	ldrb	r3, [r7, #28]
 8000fee:	743b      	strb	r3, [r7, #16]
    tx_msg[1] = CMD[1];
 8000ff0:	7f7b      	ldrb	r3, [r7, #29]
 8000ff2:	747b      	strb	r3, [r7, #17]
    tx_msg[2] = crc >> 8;
 8000ff4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ff6:	0a1b      	lsrs	r3, r3, #8
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	74bb      	strb	r3, [r7, #18]
    tx_msg[3] = crc;
 8000ffe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001000:	b2db      	uxtb	r3, r3
 8001002:	74fb      	strb	r3, [r7, #19]
    tx_msg[4] = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	753b      	strb	r3, [r7, #20]
    tx_msg[5] = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	757b      	strb	r3, [r7, #21]
    tx_msg[6] = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	75bb      	strb	r3, [r7, #22]
    tx_msg[7] = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	75fb      	strb	r3, [r7, #23]
    tx_msg[8] = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	763b      	strb	r3, [r7, #24]
    tx_msg[9] = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	767b      	strb	r3, [r7, #25]
    tx_msg[10] = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	76bb      	strb	r3, [r7, #26]
    tx_msg[11] = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	76fb      	strb	r3, [r7, #27]

    uint8_t rx_msg[8] = {0};
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]

	#ifdef ALWAYS_STANDBY_WAKE
		wake_standby();
 800102c:	f7ff fe86 	bl	8000d3c <wake_standby>
	#endif
	HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103a:	f004 f9e7 	bl	800540c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, tx_msg, 4, 1000);
 800103e:	f107 0110 	add.w	r1, r7, #16
 8001042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001046:	2204      	movs	r2, #4
 8001048:	481d      	ldr	r0, [pc, #116]	; (80010c0 <address_read+0x120>)
 800104a:	f005 fd12 	bl	8006a72 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, rx_msg, 8, 1000);
 800104e:	f107 0108 	add.w	r1, r7, #8
 8001052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001056:	2208      	movs	r2, #8
 8001058:	4819      	ldr	r0, [pc, #100]	; (80010c0 <address_read+0x120>)
 800105a:	f005 fe78 	bl	8006d4e <HAL_SPI_Receive>
    HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 800105e:	2201      	movs	r2, #1
 8001060:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001068:	f004 f9d0 	bl	800540c <HAL_GPIO_WritePin>
        crc = pec15(rx_msg, 6); // calculate PEC15 for received message (first 6 bytes)
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	2106      	movs	r1, #6
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fdc6 	bl	8000c04 <pec15>
 8001078:	4603      	mov	r3, r0
 800107a:	847b      	strh	r3, [r7, #34]	; 0x22

        uint16_t rx_crc = (rx_msg[6] << 8) + rx_msg[7]; // received PEC15
 800107c:	7bbb      	ldrb	r3, [r7, #14]
 800107e:	b29b      	uxth	r3, r3
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	b29a      	uxth	r2, r3
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	b29b      	uxth	r3, r3
 8001088:	4413      	add	r3, r2
 800108a:	843b      	strh	r3, [r7, #32]

        if (crc == rx_crc)
 800108c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800108e:	8c3b      	ldrh	r3, [r7, #32]
 8001090:	429a      	cmp	r2, r3
 8001092:	d111      	bne.n	80010b8 <address_read+0x118>
        {
            for (int i = 0; i < 6; i++)
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
 8001098:	e00b      	b.n	80010b2 <address_read+0x112>
            {
                rx_reg[i] = rx_msg[i];
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109c:	683a      	ldr	r2, [r7, #0]
 800109e:	4413      	add	r3, r2
 80010a0:	f107 0108 	add.w	r1, r7, #8
 80010a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010a6:	440a      	add	r2, r1
 80010a8:	7812      	ldrb	r2, [r2, #0]
 80010aa:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 6; i++)
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	3301      	adds	r3, #1
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	2b05      	cmp	r3, #5
 80010b6:	ddf0      	ble.n	800109a <address_read+0xfa>
            }
        }
}
 80010b8:	bf00      	nop
 80010ba:	3728      	adds	r7, #40	; 0x28
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000450 	.word	0x20000450

080010c4 <extract_voltage_reg>:



void extract_voltage_reg(uint8_t *voltage_reg, float *voltages)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	e036      	b.n	8001142 <extract_voltage_reg+0x7e>
    {
        if (voltage_reg[i * 2] == 0xFF && voltage_reg[(i * 2) + 1] == 0xFF)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	461a      	mov	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2bff      	cmp	r3, #255	; 0xff
 80010e2:	d10e      	bne.n	8001102 <extract_voltage_reg+0x3e>
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	3301      	adds	r3, #1
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2bff      	cmp	r3, #255	; 0xff
 80010f2:	d106      	bne.n	8001102 <extract_voltage_reg+0x3e>
        {
#ifdef NAN
            voltages[i] = NAN;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a16      	ldr	r2, [pc, #88]	; (8001158 <extract_voltage_reg+0x94>)
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	e01c      	b.n	800113c <extract_voltage_reg+0x78>
#endif
        }
        else
        {
            voltages[i] = (float)(voltage_reg[i * 2] + (voltage_reg[(i * 2) + 1] << 8)) * 0.0001f;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	461a      	mov	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4413      	add	r3, r2
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	4619      	mov	r1, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	3301      	adds	r3, #1
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	021b      	lsls	r3, r3, #8
 800111e:	440b      	add	r3, r1
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	4413      	add	r3, r2
 8001130:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800115c <extract_voltage_reg+0x98>
 8001134:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001138:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3301      	adds	r3, #1
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2b02      	cmp	r3, #2
 8001146:	ddc5      	ble.n	80010d4 <extract_voltage_reg+0x10>
        }
    }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	7fc00000 	.word	0x7fc00000
 800115c:	38d1b717 	.word	0x38d1b717

08001160 <extract_all_voltages>:


void extract_all_voltages(ltc6811 *ltc6811, float *cell_voltage, int slave_num)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b094      	sub	sp, #80	; 0x50
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]

    int cell = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	64fb      	str	r3, [r7, #76]	; 0x4c

    for (int slave = 0; slave < slave_num; slave++)
 8001170:	2300      	movs	r3, #0
 8001172:	64bb      	str	r3, [r7, #72]	; 0x48
 8001174:	e066      	b.n	8001244 <extract_all_voltages+0xe4>
    {
        int i_max = ltc6811[slave].cell_count;
 8001176:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001178:	4613      	mov	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	461a      	mov	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4413      	add	r3, r2
 8001186:	785b      	ldrb	r3, [r3, #1]
 8001188:	643b      	str	r3, [r7, #64]	; 0x40

        float reg_voltages[12];

        extract_voltage_reg(ltc6811[slave].cva_reg, &reg_voltages[0]);
 800118a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800118c:	4613      	mov	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4413      	add	r3, r2
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	461a      	mov	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4413      	add	r3, r2
 800119a:	3302      	adds	r3, #2
 800119c:	f107 0210 	add.w	r2, r7, #16
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ff8e 	bl	80010c4 <extract_voltage_reg>
        extract_voltage_reg(ltc6811[slave].cvb_reg, &reg_voltages[3]);
 80011a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80011aa:	4613      	mov	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	461a      	mov	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4413      	add	r3, r2
 80011b8:	f103 0208 	add.w	r2, r3, #8
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	330c      	adds	r3, #12
 80011c2:	4619      	mov	r1, r3
 80011c4:	4610      	mov	r0, r2
 80011c6:	f7ff ff7d 	bl	80010c4 <extract_voltage_reg>
        extract_voltage_reg(ltc6811[slave].cvc_reg, &reg_voltages[6]);
 80011ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80011cc:	4613      	mov	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	461a      	mov	r2, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4413      	add	r3, r2
 80011da:	f103 020e 	add.w	r2, r3, #14
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	3318      	adds	r3, #24
 80011e4:	4619      	mov	r1, r3
 80011e6:	4610      	mov	r0, r2
 80011e8:	f7ff ff6c 	bl	80010c4 <extract_voltage_reg>
        extract_voltage_reg(ltc6811[slave].cvd_reg, &reg_voltages[9]);
 80011ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	461a      	mov	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	f103 0214 	add.w	r2, r3, #20
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	3324      	adds	r3, #36	; 0x24
 8001206:	4619      	mov	r1, r3
 8001208:	4610      	mov	r0, r2
 800120a:	f7ff ff5b 	bl	80010c4 <extract_voltage_reg>

        for (int i = 0; i < i_max; i++)
 800120e:	2300      	movs	r3, #0
 8001210:	647b      	str	r3, [r7, #68]	; 0x44
 8001212:	e010      	b.n	8001236 <extract_all_voltages+0xd6>
        {
            cell_voltage[cell] = reg_voltages[i];
 8001214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	68ba      	ldr	r2, [r7, #8]
 800121a:	4413      	add	r3, r2
 800121c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800121e:	0092      	lsls	r2, r2, #2
 8001220:	3250      	adds	r2, #80	; 0x50
 8001222:	443a      	add	r2, r7
 8001224:	3a40      	subs	r2, #64	; 0x40
 8001226:	6812      	ldr	r2, [r2, #0]
 8001228:	601a      	str	r2, [r3, #0]
            cell++;
 800122a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800122c:	3301      	adds	r3, #1
 800122e:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (int i = 0; i < i_max; i++)
 8001230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001232:	3301      	adds	r3, #1
 8001234:	647b      	str	r3, [r7, #68]	; 0x44
 8001236:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800123a:	429a      	cmp	r2, r3
 800123c:	dbea      	blt.n	8001214 <extract_all_voltages+0xb4>
    for (int slave = 0; slave < slave_num; slave++)
 800123e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001240:	3301      	adds	r3, #1
 8001242:	64bb      	str	r3, [r7, #72]	; 0x48
 8001244:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	429a      	cmp	r2, r3
 800124a:	db94      	blt.n	8001176 <extract_all_voltages+0x16>
        }
    }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3750      	adds	r7, #80	; 0x50
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <read_all_voltages>:


void read_all_voltages(ltc6811 *ltc6811, int slave_num)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b084      	sub	sp, #16
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	6039      	str	r1, [r7, #0]

    for (int slave = 0; slave < slave_num; slave++)
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	e05a      	b.n	800131c <read_all_voltages+0xc6>
    {
        address_read(ltc6811[slave].address, RDCVA, ltc6811[slave].cva_reg);
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	461a      	mov	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	7818      	ldrb	r0, [r3, #0]
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	4613      	mov	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	461a      	mov	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4413      	add	r3, r2
 8001288:	3302      	adds	r3, #2
 800128a:	461a      	mov	r2, r3
 800128c:	2104      	movs	r1, #4
 800128e:	f7ff fe87 	bl	8000fa0 <address_read>
        address_read(ltc6811[slave].address, RDCVB, ltc6811[slave].cvb_reg);
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	461a      	mov	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	7818      	ldrb	r0, [r3, #0]
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	461a      	mov	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4413      	add	r3, r2
 80012b4:	3308      	adds	r3, #8
 80012b6:	461a      	mov	r2, r3
 80012b8:	2106      	movs	r1, #6
 80012ba:	f7ff fe71 	bl	8000fa0 <address_read>
        address_read(ltc6811[slave].address, RDCVC, ltc6811[slave].cvc_reg);
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	461a      	mov	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	7818      	ldrb	r0, [r3, #0]
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	461a      	mov	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	330e      	adds	r3, #14
 80012e2:	461a      	mov	r2, r3
 80012e4:	2108      	movs	r1, #8
 80012e6:	f7ff fe5b 	bl	8000fa0 <address_read>
        address_read(ltc6811[slave].address, RDCVD, ltc6811[slave].cvd_reg);
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	461a      	mov	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	7818      	ldrb	r0, [r3, #0]
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	461a      	mov	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4413      	add	r3, r2
 800130c:	3314      	adds	r3, #20
 800130e:	461a      	mov	r2, r3
 8001310:	210a      	movs	r1, #10
 8001312:	f7ff fe45 	bl	8000fa0 <address_read>
    for (int slave = 0; slave < slave_num; slave++)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	3301      	adds	r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	429a      	cmp	r2, r3
 8001322:	dba0      	blt.n	8001266 <read_all_voltages+0x10>
    }
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <generate_i2c>:

void generate_i2c(uint8_t * comm_reg, uint8_t *comm_data, uint8_t len)
// comm_data is an array with maximum 3 bytes to be written to COMM register
// len is number of bytes to be written (how many are in comm_data)

{
 800132e:	b480      	push	{r7}
 8001330:	b085      	sub	sp, #20
 8001332:	af00      	add	r7, sp, #0
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	4613      	mov	r3, r2
 800133a:	71fb      	strb	r3, [r7, #7]

	switch (len) {
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d002      	beq.n	8001348 <generate_i2c+0x1a>
 8001342:	2b03      	cmp	r3, #3
 8001344:	d02f      	beq.n	80013a6 <generate_i2c+0x78>
	    comm_reg[5] = ((comm_data[2] << 4) & 0b1111) | 0b00001001; //mask with lower half data byte and master ack bits

		//how to send stop bits (does it automatically if using all 5 bytes?)
	    break;
    }
}
 8001346:	e05d      	b.n	8001404 <generate_i2c+0xd6>
        comm_reg[0] = ((comm_data[0] >> 4) & 0b00001111) | 0b01100000; //mask with upper half data bit and start bits
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	091b      	lsrs	r3, r3, #4
 800134e:	b2db      	uxtb	r3, r3
 8001350:	b25b      	sxtb	r3, r3
 8001352:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001356:	b25b      	sxtb	r3, r3
 8001358:	b2da      	uxtb	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	701a      	strb	r2, [r3, #0]
	    comm_reg[1] = (comm_data[0] << 4) & 0b11110000; //mask with lower half data byte and master ack bits
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	011a      	lsls	r2, r3, #4
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	3301      	adds	r3, #1
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	701a      	strb	r2, [r3, #0]
	    comm_reg[2] = (comm_data[1] >> 4) & 0b00001111; //mask with upper half data bit and blank bits
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	3301      	adds	r3, #1
 8001370:	781a      	ldrb	r2, [r3, #0]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3302      	adds	r3, #2
 8001376:	0912      	lsrs	r2, r2, #4
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	701a      	strb	r2, [r3, #0]
	    comm_reg[3] = ((comm_data[1] << 4) & 0b11110000) | 0b00001001; //mask with lower half data byte and master ack bits
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	3301      	adds	r3, #1
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	b25b      	sxtb	r3, r3
 8001386:	f043 0309 	orr.w	r3, r3, #9
 800138a:	b25a      	sxtb	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	3303      	adds	r3, #3
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	701a      	strb	r2, [r3, #0]
	    comm_reg[4] = 0x00;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	3304      	adds	r3, #4
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
	    comm_reg[5] = 0x00;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3305      	adds	r3, #5
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
	    break;
 80013a4:	e02e      	b.n	8001404 <generate_i2c+0xd6>
	    comm_reg[0] = ((comm_data[0] >> 4) & 0b00001111) | 0b01100000; //mask with upper half data bit and start bits
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	091b      	lsrs	r3, r3, #4
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	701a      	strb	r2, [r3, #0]
	    comm_reg[1] = (comm_data[0] << 4) & 0b11110000; //mask with lower half data byte and master ack bits
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	011a      	lsls	r2, r3, #4
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	3301      	adds	r3, #1
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	701a      	strb	r2, [r3, #0]
	    comm_reg[2] = (comm_data[1] >> 4) & 0b00001111; //mask with upper half data bit and blank bits
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	3301      	adds	r3, #1
 80013ce:	781a      	ldrb	r2, [r3, #0]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	3302      	adds	r3, #2
 80013d4:	0912      	lsrs	r2, r2, #4
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	701a      	strb	r2, [r3, #0]
	    comm_reg[3] = (comm_data[1] << 4) & 0b11110000; //mask with lower half data byte and master ack bits
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	3301      	adds	r3, #1
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	011a      	lsls	r2, r3, #4
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3303      	adds	r3, #3
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	701a      	strb	r2, [r3, #0]
	    comm_reg[4] = (comm_data[2] >> 4) & 0b00001111; //mask with upper half data bit and blank bits
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	3302      	adds	r3, #2
 80013ee:	781a      	ldrb	r2, [r3, #0]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3304      	adds	r3, #4
 80013f4:	0912      	lsrs	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	701a      	strb	r2, [r3, #0]
	    comm_reg[5] = ((comm_data[2] << 4) & 0b1111) | 0b00001001; //mask with lower half data byte and master ack bits
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	3305      	adds	r3, #5
 80013fe:	2209      	movs	r2, #9
 8001400:	701a      	strb	r2, [r3, #0]
	    break;
 8001402:	bf00      	nop
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <send_comm>:


void send_comm(ltc6811 slave, uint8_t *i2c_message, uint8_t len) {
 8001410:	b084      	sub	sp, #16
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	f107 0c10 	add.w	ip, r7, #16
 800141c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    uint8_t comm_reg[6];

    generate_i2c(comm_reg, i2c_message, len);
 8001420:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001424:	463b      	mov	r3, r7
 8001426:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff80 	bl	800132e <generate_i2c>

    comm_reg[1] |= 0b00100000;
 800142e:	787b      	ldrb	r3, [r7, #1]
 8001430:	f043 0320 	orr.w	r3, r3, #32
 8001434:	b2db      	uxtb	r3, r3
 8001436:	707b      	strb	r3, [r7, #1]

    wake_sleep();
 8001438:	f7ff fc68 	bl	8000d0c <wake_sleep>

    address_write(slave.address, WRCOMM, comm_reg);
 800143c:	7c3b      	ldrb	r3, [r7, #16]
 800143e:	463a      	mov	r2, r7
 8001440:	f240 7121 	movw	r1, #1825	; 0x721
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fd3b 	bl	8000ec0 <address_write>

    broadcast_command_stcomm(STCOMM);
 800144a:	f240 7023 	movw	r0, #1827	; 0x723
 800144e:	f000 f807 	bl	8001460 <broadcast_command_stcomm>


}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800145c:	b004      	add	sp, #16
 800145e:	4770      	bx	lr

08001460 <broadcast_command_stcomm>:


void broadcast_command_stcomm(uint16_t command_code)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	80fb      	strh	r3, [r7, #6]
uint8_t CMD[2];

// see Table 36 (Broadcast Command Format) in LTC6811 datasheet
CMD[0] = 0;                  // CMD0 bits 3 thru 7  = 0
 800146a:	2300      	movs	r3, #0
 800146c:	773b      	strb	r3, [r7, #28]
CMD[0] |= command_code >> 8; // CMD0 bits 0 thru 2  = top 3 bits of command code
 800146e:	7f3a      	ldrb	r2, [r7, #28]
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	0a1b      	lsrs	r3, r3, #8
 8001474:	b29b      	uxth	r3, r3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	b2db      	uxtb	r3, r3
 800147c:	773b      	strb	r3, [r7, #28]
CMD[1] = command_code;       // CMD1                = bottom 8 bits of command code
 800147e:	88fb      	ldrh	r3, [r7, #6]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	777b      	strb	r3, [r7, #29]

uint16_t crc = pec15(CMD, 2); // CRC for CMD
 8001484:	f107 031c 	add.w	r3, r7, #28
 8001488:	2102      	movs	r1, #2
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fbba 	bl	8000c04 <pec15>
 8001490:	4603      	mov	r3, r0
 8001492:	83fb      	strh	r3, [r7, #30]





uint8_t tx_msg[13] = {CMD[0], CMD[1], crc >> 8, crc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001494:	7f3b      	ldrb	r3, [r7, #28]
 8001496:	733b      	strb	r3, [r7, #12]
 8001498:	7f7b      	ldrb	r3, [r7, #29]
 800149a:	737b      	strb	r3, [r7, #13]
 800149c:	8bfb      	ldrh	r3, [r7, #30]
 800149e:	0a1b      	lsrs	r3, r3, #8
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	73bb      	strb	r3, [r7, #14]
 80014a6:	8bfb      	ldrh	r3, [r7, #30]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	2300      	movs	r3, #0
 80014ae:	743b      	strb	r3, [r7, #16]
 80014b0:	2300      	movs	r3, #0
 80014b2:	747b      	strb	r3, [r7, #17]
 80014b4:	2300      	movs	r3, #0
 80014b6:	74bb      	strb	r3, [r7, #18]
 80014b8:	2300      	movs	r3, #0
 80014ba:	74fb      	strb	r3, [r7, #19]
 80014bc:	2300      	movs	r3, #0
 80014be:	753b      	strb	r3, [r7, #20]
 80014c0:	2300      	movs	r3, #0
 80014c2:	757b      	strb	r3, [r7, #21]
 80014c4:	2300      	movs	r3, #0
 80014c6:	75bb      	strb	r3, [r7, #22]
 80014c8:	2300      	movs	r3, #0
 80014ca:	75fb      	strb	r3, [r7, #23]
 80014cc:	2300      	movs	r3, #0
 80014ce:	763b      	strb	r3, [r7, #24]



#ifdef ALWAYS_STANDBY_WAKE
wake_standby();
 80014d0:	f7ff fc34 	bl	8000d3c <wake_standby>
#endif

HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014de:	f003 ff95 	bl	800540c <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi3, tx_msg, 13, 1000);
 80014e2:	f107 010c 	add.w	r1, r7, #12
 80014e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ea:	220d      	movs	r2, #13
 80014ec:	4806      	ldr	r0, [pc, #24]	; (8001508 <broadcast_command_stcomm+0xa8>)
 80014ee:	f005 fac0 	bl	8006a72 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LTC6820_CS, GPIO_PIN_SET);
 80014f2:	2201      	movs	r2, #1
 80014f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fc:	f003 ff86 	bl	800540c <HAL_GPIO_WritePin>
}
 8001500:	bf00      	nop
 8001502:	3720      	adds	r7, #32
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000450 	.word	0x20000450
 800150c:	00000000 	.word	0x00000000

08001510 <calc_temp>:


double calc_temp(double adc_voltage) {
 8001510:	b5b0      	push	{r4, r5, r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	ed87 0b00 	vstr	d0, [r7]
	//stole this shit from arduino forum!!!
  double steinhart;
  double resistance = 10000 * adc_voltage / (3 - adc_voltage);
 800151a:	a333      	add	r3, pc, #204	; (adr r3, 80015e8 <calc_temp+0xd8>)
 800151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001520:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001524:	f7ff f834 	bl	8000590 <__aeabi_dmul>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4614      	mov	r4, r2
 800152e:	461d      	mov	r5, r3
 8001530:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001534:	f04f 0000 	mov.w	r0, #0
 8001538:	4933      	ldr	r1, [pc, #204]	; (8001608 <calc_temp+0xf8>)
 800153a:	f7fe fe71 	bl	8000220 <__aeabi_dsub>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4620      	mov	r0, r4
 8001544:	4629      	mov	r1, r5
 8001546:	f7ff f94d 	bl	80007e4 <__aeabi_ddiv>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  steinhart = resistance / 10000;     // (R/Ro)
 8001552:	a325      	add	r3, pc, #148	; (adr r3, 80015e8 <calc_temp+0xd8>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800155c:	f7ff f942 	bl	80007e4 <__aeabi_ddiv>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	e9c7 2302 	strd	r2, r3, [r7, #8]
  steinhart = log(steinhart);                  // ln(R/Ro)
 8001568:	ed97 0b02 	vldr	d0, [r7, #8]
 800156c:	f006 f920 	bl	80077b0 <log>
 8001570:	ed87 0b02 	vstr	d0, [r7, #8]
  steinhart /= 3950;                   // 1/B * ln(R/Ro)
 8001574:	a31e      	add	r3, pc, #120	; (adr r3, 80015f0 <calc_temp+0xe0>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800157e:	f7ff f931 	bl	80007e4 <__aeabi_ddiv>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	e9c7 2302 	strd	r2, r3, [r7, #8]
  steinhart += 1.0 / (25 + 273.15); // + (1/To)
 800158a:	a31b      	add	r3, pc, #108	; (adr r3, 80015f8 <calc_temp+0xe8>)
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001594:	f7fe fe46 	bl	8000224 <__adddf3>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  steinhart = 1.0 / steinhart;                 // Invert
 80015a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015a4:	f04f 0000 	mov.w	r0, #0
 80015a8:	4918      	ldr	r1, [pc, #96]	; (800160c <calc_temp+0xfc>)
 80015aa:	f7ff f91b 	bl	80007e4 <__aeabi_ddiv>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  steinhart -= 273.15;
 80015b6:	a312      	add	r3, pc, #72	; (adr r3, 8001600 <calc_temp+0xf0>)
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015c0:	f7fe fe2e 	bl	8000220 <__aeabi_dsub>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	e9c7 2302 	strd	r2, r3, [r7, #8]

  return steinhart;
 80015cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015d0:	ec43 2b17 	vmov	d7, r2, r3
}
 80015d4:	eeb0 0a47 	vmov.f32	s0, s14
 80015d8:	eef0 0a67 	vmov.f32	s1, s15
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bdb0      	pop	{r4, r5, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	f3af 8000 	nop.w
 80015e8:	00000000 	.word	0x00000000
 80015ec:	40c38800 	.word	0x40c38800
 80015f0:	00000000 	.word	0x00000000
 80015f4:	40aedc00 	.word	0x40aedc00
 80015f8:	dcb5db83 	.word	0xdcb5db83
 80015fc:	3f6b79e1 	.word	0x3f6b79e1
 8001600:	66666666 	.word	0x66666666
 8001604:	40711266 	.word	0x40711266
 8001608:	40080000 	.word	0x40080000
 800160c:	3ff00000 	.word	0x3ff00000

08001610 <read_all_temps>:


int read_all_temps(ltc6811 *ltc6811_arr, float *thermistor_temps, uint8_t mux_channels, int slave_num)
{
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001612:	b0a1      	sub	sp, #132	; 0x84
 8001614:	af08      	add	r7, sp, #32
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	4613      	mov	r3, r2
 800161e:	71fb      	strb	r3, [r7, #7]
	double thermistor_temp;
	double thermistor_voltage;
	int thermistor_num = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	65fb      	str	r3, [r7, #92]	; 0x5c
	int overtemp_limit = 60;
 8001624:	233c      	movs	r3, #60	; 0x3c
 8001626:	653b      	str	r3, [r7, #80]	; 0x50
	for(int slave = 0; slave < slave_num; slave++)
 8001628:	2300      	movs	r3, #0
 800162a:	65bb      	str	r3, [r7, #88]	; 0x58
 800162c:	e0ec      	b.n	8001808 <read_all_temps+0x1f8>
	{
		ltc6811 selected_slave = ltc6811_arr[slave]; //increment over all slaves
 800162e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	461a      	mov	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4413      	add	r3, r2
 800163e:	461c      	mov	r4, r3
 8001640:	f107 0614 	add.w	r6, r7, #20
 8001644:	f104 0c20 	add.w	ip, r4, #32
 8001648:	4635      	mov	r5, r6
 800164a:	4623      	mov	r3, r4
 800164c:	6818      	ldr	r0, [r3, #0]
 800164e:	6859      	ldr	r1, [r3, #4]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001656:	3410      	adds	r4, #16
 8001658:	3610      	adds	r6, #16
 800165a:	4564      	cmp	r4, ip
 800165c:	d1f4      	bne.n	8001648 <read_all_temps+0x38>
 800165e:	4633      	mov	r3, r6
 8001660:	4622      	mov	r2, r4
 8001662:	6810      	ldr	r0, [r2, #0]
 8001664:	6851      	ldr	r1, [r2, #4]
 8001666:	c303      	stmia	r3!, {r0, r1}

		uint8_t i2c_data[2] = {0b10010000, 0b00001000};	//bits 4 - 7 are address bits for the mux IC, bits 11 - 15 are the address bits for the mux channel, start with channel 0
 8001668:	f44f 6309 	mov.w	r3, #2192	; 0x890
 800166c:	87bb      	strh	r3, [r7, #60]	; 0x3c


		for (int i = 0;  i < mux_channels+1; i++)
 800166e:	2300      	movs	r3, #0
 8001670:	657b      	str	r3, [r7, #84]	; 0x54
 8001672:	e05e      	b.n	8001732 <read_all_temps+0x122>
		{

		  wake_sleep(); // wake LTC6811 from sleep
 8001674:	f7ff fb4a 	bl	8000d0c <wake_sleep>
		  send_comm(selected_slave, i2c_data, 2);
 8001678:	2302      	movs	r3, #2
 800167a:	9307      	str	r3, [sp, #28]
 800167c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001680:	9306      	str	r3, [sp, #24]
 8001682:	466d      	mov	r5, sp
 8001684:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800168a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800168c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001690:	e885 0003 	stmia.w	r5, {r0, r1}
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800169a:	f7ff feb9 	bl	8001410 <send_comm>


		  broadcast_command(ADAX(MD_27k_14k, CHG_GPIO_1)); //measure gpio 1 (mux output)
 800169e:	f240 40e1 	movw	r0, #1249	; 0x4e1
 80016a2:	f7ff fb63 	bl	8000d6c <broadcast_command>


		  address_read(selected_slave.address, RDAUXA, selected_slave.auxa_reg); //read auxa_reg where adc value was stored
 80016a6:	7d38      	ldrb	r0, [r7, #20]
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	331a      	adds	r3, #26
 80016ae:	461a      	mov	r2, r3
 80016b0:	210c      	movs	r1, #12
 80016b2:	f7ff fc75 	bl	8000fa0 <address_read>


		  thermistor_voltage = ((selected_slave.auxa_reg[1] << 8) | selected_slave.auxa_reg[0]) * 0.0001;
 80016b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80016c0:	4313      	orrs	r3, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fefa 	bl	80004bc <__aeabi_i2d>
 80016c8:	a355      	add	r3, pc, #340	; (adr r3, 8001820 <read_all_temps+0x210>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	f7fe ff5f 	bl	8000590 <__aeabi_dmul>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		  thermistor_temps[thermistor_num] = calc_temp(thermistor_voltage); //convert voltage to temperature in degrees celcius
 80016da:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80016de:	f7ff ff17 	bl	8001510 <calc_temp>
 80016e2:	ec51 0b10 	vmov	r0, r1, d0
 80016e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	18d4      	adds	r4, r2, r3
 80016ee:	f7ff f9ff 	bl	8000af0 <__aeabi_d2f>
 80016f2:	4603      	mov	r3, r0
 80016f4:	6023      	str	r3, [r4, #0]


		  if(thermistor_temps[thermistor_num] > overtemp_limit) //if overtemp, trigger shutdown
 80016f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	4413      	add	r3, r2
 80016fe:	ed93 7a00 	vldr	s14, [r3]
 8001702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001704:	ee07 3a90 	vmov	s15, r3
 8001708:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800170c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001714:	dd01      	ble.n	800171a <read_all_temps+0x10a>
		  {
			  return 1; //AMS_OK fault
 8001716:	2301      	movs	r3, #1
 8001718:	e07c      	b.n	8001814 <read_all_temps+0x204>
		  }

		  thermistor_num++;
 800171a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800171c:	3301      	adds	r3, #1
 800171e:	65fb      	str	r3, [r7, #92]	; 0x5c

		  i2c_data[1]++;
 8001720:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001724:	3301      	adds	r3, #1
 8001726:	b2db      	uxtb	r3, r3
 8001728:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		for (int i = 0;  i < mux_channels+1; i++)
 800172c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800172e:	3301      	adds	r3, #1
 8001730:	657b      	str	r3, [r7, #84]	; 0x54
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001736:	429a      	cmp	r2, r3
 8001738:	dd9c      	ble.n	8001674 <read_all_temps+0x64>



		}

		  broadcast_command(ADAX(MD_27k_14k, CHG_GPIO_2)); //measure gpio 2 (non mux'd thermistor)
 800173a:	f240 40e2 	movw	r0, #1250	; 0x4e2
 800173e:	f7ff fb15 	bl	8000d6c <broadcast_command>

		  address_read(selected_slave.address, RDAUXA, selected_slave.auxa_reg);
 8001742:	7d38      	ldrb	r0, [r7, #20]
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	331a      	adds	r3, #26
 800174a:	461a      	mov	r2, r3
 800174c:	210c      	movs	r1, #12
 800174e:	f7ff fc27 	bl	8000fa0 <address_read>

		  thermistor_voltage = ((selected_slave.auxa_reg[3] << 8) | selected_slave.auxa_reg[2]) * 0.0001;
 8001752:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800175c:	4313      	orrs	r3, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe feac 	bl	80004bc <__aeabi_i2d>
 8001764:	a32e      	add	r3, pc, #184	; (adr r3, 8001820 <read_all_temps+0x210>)
 8001766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176a:	f7fe ff11 	bl	8000590 <__aeabi_dmul>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		  thermistor_temp = calc_temp(thermistor_voltage); //convert voltage to temperature in degrees celcius
 8001776:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 800177a:	f7ff fec9 	bl	8001510 <calc_temp>
 800177e:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

		  if(thermistor_temp > overtemp_limit) //if overtemp, trigger shutdown
 8001782:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001784:	f7fe fe9a 	bl	80004bc <__aeabi_i2d>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001790:	f7ff f98e 	bl	8000ab0 <__aeabi_dcmpgt>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <read_all_temps+0x18e>
		  {
			  return 1; //ADD SDC
 800179a:	2301      	movs	r3, #1
 800179c:	e03a      	b.n	8001814 <read_all_temps+0x204>
		  }

		  broadcast_command(ADAX(MD_27k_14k, CHG_GPIO_3)); //measure gpio 3 (non mux'd thermistor)
 800179e:	f240 40e3 	movw	r0, #1251	; 0x4e3
 80017a2:	f7ff fae3 	bl	8000d6c <broadcast_command>

		  address_read(selected_slave.address, RDAUXA, selected_slave.auxa_reg);
 80017a6:	7d38      	ldrb	r0, [r7, #20]
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	331a      	adds	r3, #26
 80017ae:	461a      	mov	r2, r3
 80017b0:	210c      	movs	r1, #12
 80017b2:	f7ff fbf5 	bl	8000fa0 <address_read>

		  thermistor_voltage = ((selected_slave.auxa_reg[5] << 8) | selected_slave.auxa_reg[4]) * 0.0001;
 80017b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80017c0:	4313      	orrs	r3, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fe7a 	bl	80004bc <__aeabi_i2d>
 80017c8:	a315      	add	r3, pc, #84	; (adr r3, 8001820 <read_all_temps+0x210>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe fedf 	bl	8000590 <__aeabi_dmul>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		  thermistor_temp = calc_temp(thermistor_voltage); //convert voltage to temperature in degrees celcius
 80017da:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80017de:	f7ff fe97 	bl	8001510 <calc_temp>
 80017e2:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40

		  if(thermistor_temp > overtemp_limit) //if overtemp, trigger shutdown
 80017e6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80017e8:	f7fe fe68 	bl	80004bc <__aeabi_i2d>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80017f4:	f7ff f95c 	bl	8000ab0 <__aeabi_dcmpgt>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <read_all_temps+0x1f2>
		  {
			  return 1; //ADD SDC
 80017fe:	2301      	movs	r3, #1
 8001800:	e008      	b.n	8001814 <read_all_temps+0x204>
	for(int slave = 0; slave < slave_num; slave++)
 8001802:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001804:	3301      	adds	r3, #1
 8001806:	65bb      	str	r3, [r7, #88]	; 0x58
 8001808:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	f6ff af0e 	blt.w	800162e <read_all_temps+0x1e>
		  }

	}

	  return 0;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3764      	adds	r7, #100	; 0x64
 8001818:	46bd      	mov	sp, r7
 800181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800181c:	f3af 8000 	nop.w
 8001820:	eb1c432d 	.word	0xeb1c432d
 8001824:	3f1a36e2 	.word	0x3f1a36e2

08001828 <reset_SOC>:


//once battery is charged, reset SOC value
//use lookup table / formula to measure pack voltage and estimate SOC
void reset_SOC()
{
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	af00      	add	r7, sp, #0
last_SOC_update_ms = HAL_GetTick();
 800182c:	f000 feba 	bl	80025a4 <HAL_GetTick>
 8001830:	4603      	mov	r3, r0
 8001832:	2200      	movs	r2, #0
 8001834:	461c      	mov	r4, r3
 8001836:	4615      	mov	r5, r2
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <reset_SOC+0x28>)
 800183a:	e9c3 4500 	strd	r4, r5, [r3]
SOC = 100;
 800183e:	4905      	ldr	r1, [pc, #20]	; (8001854 <reset_SOC+0x2c>)
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <reset_SOC+0x30>)
 8001846:	e9c1 2300 	strd	r2, r3, [r1]
}
 800184a:	bf00      	nop
 800184c:	bdb0      	pop	{r4, r5, r7, pc}
 800184e:	bf00      	nop
 8001850:	200004c0 	.word	0x200004c0
 8001854:	200004b8 	.word	0x200004b8
 8001858:	40590000 	.word	0x40590000

0800185c <update_moving_average>:
SOC -= current * time_since_last_update / BATTERY_CAPCITY;

}

void update_moving_average(float *current_avg, float new_sample)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	ed87 0a00 	vstr	s0, [r7]

	*current_avg = ((MOVING_AVERAGE_SAMPLES - 1) * *current_avg + new_sample) / MOVING_AVERAGE_SAMPLES;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	edd3 7a00 	vldr	s15, [r3]
 800186e:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001872:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001876:	edd7 7a00 	vldr	s15, [r7]
 800187a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800187e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001882:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	edc3 7a00 	vstr	s15, [r3]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <check_fusable_link>:

int check_fusable_link(float ma, float cell_voltage)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	ed87 0a01 	vstr	s0, [r7, #4]
 80018a2:	edc7 0a00 	vstr	s1, [r7]

	if(cell_voltage < ma * voltage_sag_allowed_float)
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <check_fusable_link+0x3c>)
 80018a8:	ed93 7a00 	vldr	s14, [r3]
 80018ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80018b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b4:	ed97 7a00 	vldr	s14, [r7]
 80018b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c0:	d501      	bpl.n	80018c6 <check_fusable_link+0x2e>
	{
		return 1; //ADD SDC?
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <check_fusable_link+0x30>
	}
	return 0;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	20000000 	.word	0x20000000

080018d8 <set_moving_average>:

void set_moving_average(float *cell_voltage_ma, float *cell_voltage)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
	for (int cell = 0; cell < NUM_OF_CELLS; cell++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	e00c      	b.n	8001902 <set_moving_average+0x2a>
	{
		cell_voltage_ma[cell] = cell_voltage[cell];
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	441a      	add	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	440b      	add	r3, r1
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	601a      	str	r2, [r3, #0]
	for (int cell = 0; cell < NUM_OF_CELLS; cell++)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	3301      	adds	r3, #1
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2b05      	cmp	r3, #5
 8001906:	ddef      	ble.n	80018e8 <set_moving_average+0x10>
	}
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800191e:	f000 fddc 	bl	80024da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001922:	f000 f8f3 	bl	8001b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001926:	f000 fb0d 	bl	8001f44 <MX_GPIO_Init>
  MX_DMA_Init();
 800192a:	f000 fae1 	bl	8001ef0 <MX_DMA_Init>
  MX_RTC_Init();
 800192e:	f000 fa3f 	bl	8001db0 <MX_RTC_Init>
  MX_FDCAN1_Init();
 8001932:	f000 f9b1 	bl	8001c98 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001936:	f000 f9f5 	bl	8001d24 <MX_FDCAN2_Init>
  MX_SPI3_Init();
 800193a:	f000 fa9b 	bl	8001e74 <MX_SPI3_Init>
  MX_ADC1_Init();
 800193e:	f000 f933 	bl	8001ba8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001942:	217f      	movs	r1, #127	; 0x7f
 8001944:	4869      	ldr	r0, [pc, #420]	; (8001aec <main+0x1d4>)
 8001946:	f002 fcfb 	bl	8004340 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA (&hadc1, (uint32_t*)adc_val, 1);
 800194a:	2201      	movs	r2, #1
 800194c:	4968      	ldr	r1, [pc, #416]	; (8001af0 <main+0x1d8>)
 800194e:	4867      	ldr	r0, [pc, #412]	; (8001aec <main+0x1d4>)
 8001950:	f001 fbb2 	bl	80030b8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start(&hadc1);
 8001954:	4865      	ldr	r0, [pc, #404]	; (8001aec <main+0x1d4>)
 8001956:	f001 facb 	bl	8002ef0 <HAL_ADC_Start>

  HAL_Delay(100); // 100ms should allow all relevant power circuitry to stabilize
 800195a:	2064      	movs	r0, #100	; 0x64
 800195c:	f000 fe2e 	bl	80025bc <HAL_Delay>

  //reset_SOC();

  init_LTC6811();
 8001960:	f7ff f984 	bl	8000c6c <init_LTC6811>

  wake_sleep(); // wake LTC6811 from sleep
 8001964:	f7ff f9d2 	bl	8000d0c <wake_sleep>

  // Configuration for all LTC6811s
  struct ltc6811_config ltc6811_config;
  ltc6811_config.gpio_pulldowns = GPIO1_NO_PULLDOWN | GPIO2_NO_PULLDOWN | GPIO3_NO_PULLDOWN | GPIO4_NO_PULLDOWN | GPIO5_NO_PULLDOWN;
 8001968:	231f      	movs	r3, #31
 800196a:	703b      	strb	r3, [r7, #0]
  ltc6811_config.refon = REFON_STAY_POWERED;
 800196c:	2301      	movs	r3, #1
 800196e:	707b      	strb	r3, [r7, #1]
  ltc6811_config.adcopt = ADCOPT_MODE_0;
 8001970:	2300      	movs	r3, #0
 8001972:	70bb      	strb	r3, [r7, #2]
  ltc6811_config.vuv = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	80bb      	strh	r3, [r7, #4]
  ltc6811_config.vov = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	80fb      	strh	r3, [r7, #6]
  ltc6811_config.dcto = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	723b      	strb	r3, [r7, #8]
  update_config(&ltc6811_config);
 8001980:	463b      	mov	r3, r7
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f978 	bl	8000c78 <update_config>


  // configure LTC6811 structs to match real life setup
  for (int i = 0; i < NUM_OF_SLAVES; i++)
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
 800198c:	e017      	b.n	80019be <main+0xa6>
  {
      ltc6811_arr[i].address = i;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	b2d8      	uxtb	r0, r3
 8001992:	4958      	ldr	r1, [pc, #352]	; (8001af4 <main+0x1dc>)
 8001994:	69fa      	ldr	r2, [r7, #28]
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	440b      	add	r3, r1
 80019a0:	4602      	mov	r2, r0
 80019a2:	701a      	strb	r2, [r3, #0]
      ltc6811_arr[i].cell_count = (i % 2 == 0) ? EVEN_SLAVE_CELLS : ODD_SLAVE_CELLS;
 80019a4:	4953      	ldr	r1, [pc, #332]	; (8001af4 <main+0x1dc>)
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	440b      	add	r3, r1
 80019b2:	3301      	adds	r3, #1
 80019b4:	2206      	movs	r2, #6
 80019b6:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < NUM_OF_SLAVES; i++)
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	3301      	adds	r3, #1
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	dde4      	ble.n	800198e <main+0x76>
  }

  reset_SOC();
 80019c4:	f7ff ff30 	bl	8001828 <reset_SOC>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);	//set AMS_OK
 80019c8:	2200      	movs	r2, #0
 80019ca:	2104      	movs	r1, #4
 80019cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d0:	f003 fd1c 	bl	800540c <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  wake_sleep(); // wake LTC6811 from sleep
 80019d4:	f7ff f99a 	bl	8000d0c <wake_sleep>
  // send command to read cell voltages
  broadcast_command(ADCV(MD_27k_14k, DCP_NOT_PERMITTED, CH_ALL));
 80019d8:	f44f 7038 	mov.w	r0, #736	; 0x2e0
 80019dc:	f7ff f9c6 	bl	8000d6c <broadcast_command>

  HAL_Delay(1); // reading all cell voltages @ "26Hz" should take 210ms
 80019e0:	2001      	movs	r0, #1
 80019e2:	f000 fdeb 	bl	80025bc <HAL_Delay>

  // read cell voltage registers from all slaves on the bus
  read_all_voltages(ltc6811_arr, NUM_OF_SLAVES);
 80019e6:	2101      	movs	r1, #1
 80019e8:	4842      	ldr	r0, [pc, #264]	; (8001af4 <main+0x1dc>)
 80019ea:	f7ff fc34 	bl	8001256 <read_all_voltages>


  // calculate actual voltage values
  extract_all_voltages(ltc6811_arr, cell_voltage, NUM_OF_SLAVES);
 80019ee:	2201      	movs	r2, #1
 80019f0:	4941      	ldr	r1, [pc, #260]	; (8001af8 <main+0x1e0>)
 80019f2:	4840      	ldr	r0, [pc, #256]	; (8001af4 <main+0x1dc>)
 80019f4:	f7ff fbb4 	bl	8001160 <extract_all_voltages>

  set_moving_average(cell_voltage_ma, cell_voltage);
 80019f8:	493f      	ldr	r1, [pc, #252]	; (8001af8 <main+0x1e0>)
 80019fa:	4840      	ldr	r0, [pc, #256]	; (8001afc <main+0x1e4>)
 80019fc:	f7ff ff6c 	bl	80018d8 <set_moving_average>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      wake_sleep(); // wake LTC6811 from sleep
 8001a00:	f7ff f984 	bl	8000d0c <wake_sleep>
      // send command to read cell voltages
      broadcast_command(ADCV(MD_27k_14k, DCP_NOT_PERMITTED, CH_ALL));
 8001a04:	f44f 7038 	mov.w	r0, #736	; 0x2e0
 8001a08:	f7ff f9b0 	bl	8000d6c <broadcast_command>

      HAL_Delay(1); // reading all cell voltages @ "27kHz" should take 1ms
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f000 fdd5 	bl	80025bc <HAL_Delay>

      // read cell voltage registers from all slaves on the bus
      read_all_voltages(ltc6811_arr, NUM_OF_SLAVES);
 8001a12:	2101      	movs	r1, #1
 8001a14:	4837      	ldr	r0, [pc, #220]	; (8001af4 <main+0x1dc>)
 8001a16:	f7ff fc1e 	bl	8001256 <read_all_voltages>

      // calculate actual voltage values
      extract_all_voltages(ltc6811_arr, cell_voltage, NUM_OF_SLAVES);
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	4936      	ldr	r1, [pc, #216]	; (8001af8 <main+0x1e0>)
 8001a1e:	4835      	ldr	r0, [pc, #212]	; (8001af4 <main+0x1dc>)
 8001a20:	f7ff fb9e 	bl	8001160 <extract_all_voltages>
      float sum_voltage = 0;
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
      for(int i = 0; i < NUM_OF_CELLS; i++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	e01d      	b.n	8001a6c <main+0x154>
      {
      update_moving_average(&cell_voltage_ma[i], cell_voltage[i]);
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4a31      	ldr	r2, [pc, #196]	; (8001afc <main+0x1e4>)
 8001a36:	441a      	add	r2, r3
 8001a38:	492f      	ldr	r1, [pc, #188]	; (8001af8 <main+0x1e0>)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	eeb0 0a67 	vmov.f32	s0, s15
 8001a48:	4610      	mov	r0, r2
 8001a4a:	f7ff ff07 	bl	800185c <update_moving_average>
      sum_voltage += cell_voltage_ma[i];
 8001a4e:	4a2b      	ldr	r2, [pc, #172]	; (8001afc <main+0x1e4>)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	edd3 7a00 	vldr	s15, [r3]
 8001a5a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a62:	edc7 7a06 	vstr	s15, [r7, #24]
      for(int i = 0; i < NUM_OF_CELLS; i++)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b05      	cmp	r3, #5
 8001a70:	ddde      	ble.n	8001a30 <main+0x118>
      }
      float average_voltage = sum_voltage / NUM_OF_CELLS;
 8001a72:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a76:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001a7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a7e:	edc7 7a03 	vstr	s15, [r7, #12]

      for(int i = 0; i < NUM_OF_CELLS; i++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	e014      	b.n	8001ab2 <main+0x19a>
      {
      if(check_fusable_link(average_voltage, cell_voltage[i]))
 8001a88:	4a1b      	ldr	r2, [pc, #108]	; (8001af8 <main+0x1e0>)
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	eef0 0a67 	vmov.f32	s1, s15
 8001a98:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a9c:	f7ff fefc 	bl	8001898 <check_fusable_link>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <main+0x194>
      {
    	  fuse_pop = 1;
 8001aa6:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <main+0x1e8>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
      for(int i = 0; i < NUM_OF_CELLS; i++)
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	2b05      	cmp	r3, #5
 8001ab6:	dde7      	ble.n	8001a88 <main+0x170>
      }
      }


	  if(read_all_temps(ltc6811_arr, thermistor_temps, NUM_OF_MUX_CHANNELS, NUM_OF_SLAVES)) //0 = no fault, 1 = fault
 8001ab8:	2301      	movs	r3, #1
 8001aba:	2208      	movs	r2, #8
 8001abc:	4911      	ldr	r1, [pc, #68]	; (8001b04 <main+0x1ec>)
 8001abe:	480d      	ldr	r0, [pc, #52]	; (8001af4 <main+0x1dc>)
 8001ac0:	f7ff fda6 	bl	8001610 <read_all_temps>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d002      	beq.n	8001ad0 <main+0x1b8>
	  {
		  AMS_OK = 1;
 8001aca:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <main+0x1f0>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]
	  }

	  if (AMS_OK || fuse_pop)
 8001ad0:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <main+0x1f0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d103      	bne.n	8001ae0 <main+0x1c8>
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <main+0x1e8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d08f      	beq.n	8001a00 <main+0xe8>
	  {
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8001ae0:	2104      	movs	r1, #4
 8001ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae6:	f003 fca9 	bl	800543c <HAL_GPIO_TogglePin>
  {
 8001aea:	e789      	b.n	8001a00 <main+0xe8>
 8001aec:	20000294 	.word	0x20000294
 8001af0:	200004c8 	.word	0x200004c8
 8001af4:	200004fc 	.word	0x200004fc
 8001af8:	200004cc 	.word	0x200004cc
 8001afc:	200004e4 	.word	0x200004e4
 8001b00:	200005b4 	.word	0x200005b4
 8001b04:	20000524 	.word	0x20000524
 8001b08:	200005b8 	.word	0x200005b8

08001b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b094      	sub	sp, #80	; 0x50
 8001b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b12:	f107 0318 	add.w	r3, r7, #24
 8001b16:	2238      	movs	r2, #56	; 0x38
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f005 fe40 	bl	80077a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
 8001b2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f003 fc9e 	bl	8005470 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001b34:	230a      	movs	r3, #10
 8001b36:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b3e:	2340      	movs	r3, #64	; 0x40
 8001b40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b42:	2301      	movs	r3, #1
 8001b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b46:	2302      	movs	r3, #2
 8001b48:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001b4e:	2304      	movs	r3, #4
 8001b50:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001b52:	2355      	movs	r3, #85	; 0x55
 8001b54:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b56:	2302      	movs	r3, #2
 8001b58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b62:	f107 0318 	add.w	r3, r7, #24
 8001b66:	4618      	mov	r0, r3
 8001b68:	f003 fd36 	bl	80055d8 <HAL_RCC_OscConfig>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001b72:	f000 fa4b 	bl	800200c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b76:	230f      	movs	r3, #15
 8001b78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b82:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001b86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	2104      	movs	r1, #4
 8001b90:	4618      	mov	r0, r3
 8001b92:	f004 f839 	bl	8005c08 <HAL_RCC_ClockConfig>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b9c:	f000 fa36 	bl	800200c <Error_Handler>
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	3750      	adds	r7, #80	; 0x50
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08c      	sub	sp, #48	; 0x30
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f005 fded 	bl	80077a0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bc6:	4b32      	ldr	r3, [pc, #200]	; (8001c90 <MX_ADC1_Init+0xe8>)
 8001bc8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001bcc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bce:	4b30      	ldr	r3, [pc, #192]	; (8001c90 <MX_ADC1_Init+0xe8>)
 8001bd0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001bd4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bd6:	4b2e      	ldr	r3, [pc, #184]	; (8001c90 <MX_ADC1_Init+0xe8>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bdc:	4b2c      	ldr	r3, [pc, #176]	; (8001c90 <MX_ADC1_Init+0xe8>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001be2:	4b2b      	ldr	r3, [pc, #172]	; (8001c90 <MX_ADC1_Init+0xe8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001be8:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <MX_ADC1_Init+0xe8>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bee:	4b28      	ldr	r3, [pc, #160]	; (8001c90 <MX_ADC1_Init+0xe8>)
 8001bf0:	2204      	movs	r2, #4
 8001bf2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001bf4:	4b26      	ldr	r3, [pc, #152]	; (8001c90 <MX_ADC1_Init+0xe8>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001bfa:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <MX_ADC1_Init+0xe8>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001c00:	4b23      	ldr	r3, [pc, #140]	; (8001c90 <MX_ADC1_Init+0xe8>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c06:	4b22      	ldr	r3, [pc, #136]	; (8001c90 <MX_ADC1_Init+0xe8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c0e:	4b20      	ldr	r3, [pc, #128]	; (8001c90 <MX_ADC1_Init+0xe8>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c14:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <MX_ADC1_Init+0xe8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c1a:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <MX_ADC1_Init+0xe8>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001c22:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <MX_ADC1_Init+0xe8>)
 8001c24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c28:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001c2a:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <MX_ADC1_Init+0xe8>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c32:	4817      	ldr	r0, [pc, #92]	; (8001c90 <MX_ADC1_Init+0xe8>)
 8001c34:	f000 ff9a 	bl	8002b6c <HAL_ADC_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8001c3e:	f000 f9e5 	bl	800200c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c42:	2300      	movs	r3, #0
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4810      	ldr	r0, [pc, #64]	; (8001c90 <MX_ADC1_Init+0xe8>)
 8001c4e:	f002 fc0b 	bl	8004468 <HAL_ADCEx_MultiModeConfigChannel>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001c58:	f000 f9d8 	bl	800200c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001c5c:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <MX_ADC1_Init+0xec>)
 8001c5e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c60:	2306      	movs	r3, #6
 8001c62:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001c64:	2307      	movs	r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c68:	237f      	movs	r3, #127	; 0x7f
 8001c6a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	4619      	mov	r1, r3
 8001c78:	4805      	ldr	r0, [pc, #20]	; (8001c90 <MX_ADC1_Init+0xe8>)
 8001c7a:	f001 fd79 	bl	8003770 <HAL_ADC_ConfigChannel>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001c84:	f000 f9c2 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c88:	bf00      	nop
 8001c8a:	3730      	adds	r7, #48	; 0x30
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000294 	.word	0x20000294
 8001c94:	10c00010 	.word	0x10c00010

08001c98 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001c9c:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <MX_FDCAN1_Init+0x84>)
 8001c9e:	4a20      	ldr	r2, [pc, #128]	; (8001d20 <MX_FDCAN1_Init+0x88>)
 8001ca0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001ca2:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <MX_FDCAN1_Init+0x84>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <MX_FDCAN1_Init+0x84>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001cae:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <MX_FDCAN1_Init+0x84>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001cb4:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <MX_FDCAN1_Init+0x84>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <MX_FDCAN1_Init+0x84>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001cc0:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <MX_FDCAN1_Init+0x84>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <MX_FDCAN1_Init+0x84>)
 8001cc8:	2210      	movs	r2, #16
 8001cca:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001ccc:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <MX_FDCAN1_Init+0x84>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001cd2:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <MX_FDCAN1_Init+0x84>)
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001cd8:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <MX_FDCAN1_Init+0x84>)
 8001cda:	2202      	movs	r2, #2
 8001cdc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001cde:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <MX_FDCAN1_Init+0x84>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001ce4:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <MX_FDCAN1_Init+0x84>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001cea:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <MX_FDCAN1_Init+0x84>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <MX_FDCAN1_Init+0x84>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <MX_FDCAN1_Init+0x84>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001cfc:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <MX_FDCAN1_Init+0x84>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <MX_FDCAN1_Init+0x84>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001d08:	4804      	ldr	r0, [pc, #16]	; (8001d1c <MX_FDCAN1_Init+0x84>)
 8001d0a:	f003 f837 	bl	8004d7c <HAL_FDCAN_Init>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001d14:	f000 f97a 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000360 	.word	0x20000360
 8001d20:	40006400 	.word	0x40006400

08001d24 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001d28:	4b1f      	ldr	r3, [pc, #124]	; (8001da8 <MX_FDCAN2_Init+0x84>)
 8001d2a:	4a20      	ldr	r2, [pc, #128]	; (8001dac <MX_FDCAN2_Init+0x88>)
 8001d2c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <MX_FDCAN2_Init+0x84>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001d34:	4b1c      	ldr	r3, [pc, #112]	; (8001da8 <MX_FDCAN2_Init+0x84>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001d3a:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <MX_FDCAN2_Init+0x84>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001d40:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <MX_FDCAN2_Init+0x84>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001d46:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <MX_FDCAN2_Init+0x84>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001d4c:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <MX_FDCAN2_Init+0x84>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <MX_FDCAN2_Init+0x84>)
 8001d54:	2210      	movs	r2, #16
 8001d56:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001d58:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <MX_FDCAN2_Init+0x84>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <MX_FDCAN2_Init+0x84>)
 8001d60:	2202      	movs	r2, #2
 8001d62:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001d64:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <MX_FDCAN2_Init+0x84>)
 8001d66:	2202      	movs	r2, #2
 8001d68:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001d6a:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <MX_FDCAN2_Init+0x84>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001d70:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <MX_FDCAN2_Init+0x84>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001d76:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <MX_FDCAN2_Init+0x84>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <MX_FDCAN2_Init+0x84>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <MX_FDCAN2_Init+0x84>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001d88:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <MX_FDCAN2_Init+0x84>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <MX_FDCAN2_Init+0x84>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001d94:	4804      	ldr	r0, [pc, #16]	; (8001da8 <MX_FDCAN2_Init+0x84>)
 8001d96:	f002 fff1 	bl	8004d7c <HAL_FDCAN_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8001da0:	f000 f934 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	200003c4 	.word	0x200003c4
 8001dac:	40006800 	.word	0x40006800

08001db0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001dc8:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <MX_RTC_Init+0xbc>)
 8001dca:	4a29      	ldr	r2, [pc, #164]	; (8001e70 <MX_RTC_Init+0xc0>)
 8001dcc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001dce:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <MX_RTC_Init+0xbc>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001dd4:	4b25      	ldr	r3, [pc, #148]	; (8001e6c <MX_RTC_Init+0xbc>)
 8001dd6:	227f      	movs	r2, #127	; 0x7f
 8001dd8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001dda:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <MX_RTC_Init+0xbc>)
 8001ddc:	22ff      	movs	r2, #255	; 0xff
 8001dde:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001de0:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <MX_RTC_Init+0xbc>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001de6:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <MX_RTC_Init+0xbc>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001dec:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <MX_RTC_Init+0xbc>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001df2:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <MX_RTC_Init+0xbc>)
 8001df4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001df8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001dfa:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <MX_RTC_Init+0xbc>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e00:	481a      	ldr	r0, [pc, #104]	; (8001e6c <MX_RTC_Init+0xbc>)
 8001e02:	f004 fb33 	bl	800646c <HAL_RTC_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001e0c:	f000 f8fe 	bl	800200c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	480f      	ldr	r0, [pc, #60]	; (8001e6c <MX_RTC_Init+0xbc>)
 8001e30:	f004 fb91 	bl	8006556 <HAL_RTC_SetTime>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_RTC_Init+0x8e>
  {
    Error_Handler();
 8001e3a:	f000 f8e7 	bl	800200c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001e42:	2301      	movs	r3, #1
 8001e44:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001e46:	2301      	movs	r3, #1
 8001e48:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001e4e:	463b      	mov	r3, r7
 8001e50:	2201      	movs	r2, #1
 8001e52:	4619      	mov	r1, r3
 8001e54:	4805      	ldr	r0, [pc, #20]	; (8001e6c <MX_RTC_Init+0xbc>)
 8001e56:	f004 fc1b 	bl	8006690 <HAL_RTC_SetDate>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8001e60:	f000 f8d4 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e64:	bf00      	nop
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000428 	.word	0x20000428
 8001e70:	40002800 	.word	0x40002800

08001e74 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001e78:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <MX_SPI3_Init+0x74>)
 8001e7a:	4a1c      	ldr	r2, [pc, #112]	; (8001eec <MX_SPI3_Init+0x78>)
 8001e7c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <MX_SPI3_Init+0x74>)
 8001e80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e84:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001e86:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <MX_SPI3_Init+0x74>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e8c:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <MX_SPI3_Init+0x74>)
 8001e8e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e92:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_SPI3_Init+0x74>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <MX_SPI3_Init+0x74>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_SPI3_Init+0x74>)
 8001ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ea6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <MX_SPI3_Init+0x74>)
 8001eaa:	2238      	movs	r2, #56	; 0x38
 8001eac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_SPI3_Init+0x74>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_SPI3_Init+0x74>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <MX_SPI3_Init+0x74>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_SPI3_Init+0x74>)
 8001ec2:	2207      	movs	r2, #7
 8001ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <MX_SPI3_Init+0x74>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_SPI3_Init+0x74>)
 8001ece:	2208      	movs	r2, #8
 8001ed0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_SPI3_Init+0x74>)
 8001ed4:	f004 fd22 	bl	800691c <HAL_SPI_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001ede:	f000 f895 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000450 	.word	0x20000450
 8001eec:	40003c00 	.word	0x40003c00

08001ef0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <MX_DMA_Init+0x50>)
 8001ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001efa:	4a11      	ldr	r2, [pc, #68]	; (8001f40 <MX_DMA_Init+0x50>)
 8001efc:	f043 0304 	orr.w	r3, r3, #4
 8001f00:	6493      	str	r3, [r2, #72]	; 0x48
 8001f02:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <MX_DMA_Init+0x50>)
 8001f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <MX_DMA_Init+0x50>)
 8001f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f12:	4a0b      	ldr	r2, [pc, #44]	; (8001f40 <MX_DMA_Init+0x50>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	6493      	str	r3, [r2, #72]	; 0x48
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <MX_DMA_Init+0x50>)
 8001f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2100      	movs	r1, #0
 8001f2a:	200b      	movs	r0, #11
 8001f2c:	f002 fc7f 	bl	800482e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f30:	200b      	movs	r0, #11
 8001f32:	f002 fc96 	bl	8004862 <HAL_NVIC_EnableIRQ>

}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000

08001f44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4a:	f107 030c 	add.w	r3, r7, #12
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
 8001f58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <MX_GPIO_Init+0xc0>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	4a29      	ldr	r2, [pc, #164]	; (8002004 <MX_GPIO_Init+0xc0>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f66:	4b27      	ldr	r3, [pc, #156]	; (8002004 <MX_GPIO_Init+0xc0>)
 8001f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f72:	4b24      	ldr	r3, [pc, #144]	; (8002004 <MX_GPIO_Init+0xc0>)
 8001f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f76:	4a23      	ldr	r2, [pc, #140]	; (8002004 <MX_GPIO_Init+0xc0>)
 8001f78:	f043 0302 	orr.w	r3, r3, #2
 8001f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f7e:	4b21      	ldr	r3, [pc, #132]	; (8002004 <MX_GPIO_Init+0xc0>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8a:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <MX_GPIO_Init+0xc0>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8e:	4a1d      	ldr	r2, [pc, #116]	; (8002004 <MX_GPIO_Init+0xc0>)
 8001f90:	f043 0304 	orr.w	r3, r3, #4
 8001f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f96:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <MX_GPIO_Init+0xc0>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_15, GPIO_PIN_RESET);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f248 0104 	movw	r1, #32772	; 0x8004
 8001fa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fac:	f003 fa2e 	bl	800540c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001fb6:	4814      	ldr	r0, [pc, #80]	; (8002008 <MX_GPIO_Init+0xc4>)
 8001fb8:	f003 fa28 	bl	800540c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001fbc:	f248 0304 	movw	r3, #32772	; 0x8004
 8001fc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 030c 	add.w	r3, r7, #12
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd8:	f003 f896 	bl	8005108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001fdc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001fe0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fee:	f107 030c 	add.w	r3, r7, #12
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4804      	ldr	r0, [pc, #16]	; (8002008 <MX_GPIO_Init+0xc4>)
 8001ff6:	f003 f887 	bl	8005108 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ffa:	bf00      	nop
 8001ffc:	3720      	adds	r7, #32
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000
 8002008:	48000400 	.word	0x48000400

0800200c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002010:	b672      	cpsid	i
}
 8002012:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002014:	e7fe      	b.n	8002014 <Error_Handler+0x8>
	...

08002018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201e:	4b13      	ldr	r3, [pc, #76]	; (800206c <HAL_MspInit+0x54>)
 8002020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002022:	4a12      	ldr	r2, [pc, #72]	; (800206c <HAL_MspInit+0x54>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6613      	str	r3, [r2, #96]	; 0x60
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <HAL_MspInit+0x54>)
 800202c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002036:	4b0d      	ldr	r3, [pc, #52]	; (800206c <HAL_MspInit+0x54>)
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203a:	4a0c      	ldr	r2, [pc, #48]	; (800206c <HAL_MspInit+0x54>)
 800203c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002040:	6593      	str	r3, [r2, #88]	; 0x58
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_MspInit+0x54>)
 8002044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 800204e:	2020      	movs	r0, #32
 8002050:	f000 fad6 	bl	8002600 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8002054:	f000 fafc 	bl	8002650 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8002058:	2000      	movs	r0, #0
 800205a:	f000 fae5 	bl	8002628 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800205e:	f003 faab 	bl	80055b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000

08002070 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b09e      	sub	sp, #120	; 0x78
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002088:	f107 0310 	add.w	r3, r7, #16
 800208c:	2254      	movs	r2, #84	; 0x54
 800208e:	2100      	movs	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f005 fb85 	bl	80077a0 <memset>
  if(hadc->Instance==ADC1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800209e:	d167      	bne.n	8002170 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80020a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020a4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80020a6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80020aa:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020ac:	f107 0310 	add.w	r3, r7, #16
 80020b0:	4618      	mov	r0, r3
 80020b2:	f003 ff8d 	bl	8005fd0 <HAL_RCCEx_PeriphCLKConfig>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80020bc:	f7ff ffa6 	bl	800200c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80020c0:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <HAL_ADC_MspInit+0x108>)
 80020c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c4:	4a2c      	ldr	r2, [pc, #176]	; (8002178 <HAL_ADC_MspInit+0x108>)
 80020c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020cc:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <HAL_ADC_MspInit+0x108>)
 80020ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d8:	4b27      	ldr	r3, [pc, #156]	; (8002178 <HAL_ADC_MspInit+0x108>)
 80020da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020dc:	4a26      	ldr	r2, [pc, #152]	; (8002178 <HAL_ADC_MspInit+0x108>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020e4:	4b24      	ldr	r3, [pc, #144]	; (8002178 <HAL_ADC_MspInit+0x108>)
 80020e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020f0:	2308      	movs	r3, #8
 80020f2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020f4:	2303      	movs	r3, #3
 80020f6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002100:	4619      	mov	r1, r3
 8002102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002106:	f002 ffff 	bl	8005108 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <HAL_ADC_MspInit+0x10c>)
 800210c:	4a1c      	ldr	r2, [pc, #112]	; (8002180 <HAL_ADC_MspInit+0x110>)
 800210e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <HAL_ADC_MspInit+0x10c>)
 8002112:	2205      	movs	r2, #5
 8002114:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <HAL_ADC_MspInit+0x10c>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800211c:	4b17      	ldr	r3, [pc, #92]	; (800217c <HAL_ADC_MspInit+0x10c>)
 800211e:	2200      	movs	r2, #0
 8002120:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002122:	4b16      	ldr	r3, [pc, #88]	; (800217c <HAL_ADC_MspInit+0x10c>)
 8002124:	2280      	movs	r2, #128	; 0x80
 8002126:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002128:	4b14      	ldr	r3, [pc, #80]	; (800217c <HAL_ADC_MspInit+0x10c>)
 800212a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800212e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002130:	4b12      	ldr	r3, [pc, #72]	; (800217c <HAL_ADC_MspInit+0x10c>)
 8002132:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002136:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002138:	4b10      	ldr	r3, [pc, #64]	; (800217c <HAL_ADC_MspInit+0x10c>)
 800213a:	2220      	movs	r2, #32
 800213c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <HAL_ADC_MspInit+0x10c>)
 8002140:	2200      	movs	r2, #0
 8002142:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002144:	480d      	ldr	r0, [pc, #52]	; (800217c <HAL_ADC_MspInit+0x10c>)
 8002146:	f002 fba7 	bl	8004898 <HAL_DMA_Init>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002150:	f7ff ff5c 	bl	800200c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a09      	ldr	r2, [pc, #36]	; (800217c <HAL_ADC_MspInit+0x10c>)
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
 800215a:	4a08      	ldr	r2, [pc, #32]	; (800217c <HAL_ADC_MspInit+0x10c>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002160:	2200      	movs	r2, #0
 8002162:	2100      	movs	r1, #0
 8002164:	2012      	movs	r0, #18
 8002166:	f002 fb62 	bl	800482e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800216a:	2012      	movs	r0, #18
 800216c:	f002 fb79 	bl	8004862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002170:	bf00      	nop
 8002172:	3778      	adds	r7, #120	; 0x78
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000
 800217c:	20000300 	.word	0x20000300
 8002180:	40020008 	.word	0x40020008

08002184 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b0a0      	sub	sp, #128	; 0x80
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800219c:	f107 0318 	add.w	r3, r7, #24
 80021a0:	2254      	movs	r2, #84	; 0x54
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f005 fafb 	bl	80077a0 <memset>
  if(hfdcan->Instance==FDCAN1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a49      	ldr	r2, [pc, #292]	; (80022d4 <HAL_FDCAN_MspInit+0x150>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d143      	bne.n	800223c <HAL_FDCAN_MspInit+0xb8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80021b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80021ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021be:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021c0:	f107 0318 	add.w	r3, r7, #24
 80021c4:	4618      	mov	r0, r3
 80021c6:	f003 ff03 	bl	8005fd0 <HAL_RCCEx_PeriphCLKConfig>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80021d0:	f7ff ff1c 	bl	800200c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80021d4:	4b40      	ldr	r3, [pc, #256]	; (80022d8 <HAL_FDCAN_MspInit+0x154>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	3301      	adds	r3, #1
 80021da:	4a3f      	ldr	r2, [pc, #252]	; (80022d8 <HAL_FDCAN_MspInit+0x154>)
 80021dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80021de:	4b3e      	ldr	r3, [pc, #248]	; (80022d8 <HAL_FDCAN_MspInit+0x154>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d10b      	bne.n	80021fe <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80021e6:	4b3d      	ldr	r3, [pc, #244]	; (80022dc <HAL_FDCAN_MspInit+0x158>)
 80021e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ea:	4a3c      	ldr	r2, [pc, #240]	; (80022dc <HAL_FDCAN_MspInit+0x158>)
 80021ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021f0:	6593      	str	r3, [r2, #88]	; 0x58
 80021f2:	4b3a      	ldr	r3, [pc, #232]	; (80022dc <HAL_FDCAN_MspInit+0x158>)
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fe:	4b37      	ldr	r3, [pc, #220]	; (80022dc <HAL_FDCAN_MspInit+0x158>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002202:	4a36      	ldr	r2, [pc, #216]	; (80022dc <HAL_FDCAN_MspInit+0x158>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800220a:	4b34      	ldr	r3, [pc, #208]	; (80022dc <HAL_FDCAN_MspInit+0x158>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002216:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800221a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2300      	movs	r3, #0
 8002226:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002228:	2309      	movs	r3, #9
 800222a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002230:	4619      	mov	r1, r3
 8002232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002236:	f002 ff67 	bl	8005108 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800223a:	e046      	b.n	80022ca <HAL_FDCAN_MspInit+0x146>
  else if(hfdcan->Instance==FDCAN2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a27      	ldr	r2, [pc, #156]	; (80022e0 <HAL_FDCAN_MspInit+0x15c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d141      	bne.n	80022ca <HAL_FDCAN_MspInit+0x146>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800224a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800224c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002250:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002252:	f107 0318 	add.w	r3, r7, #24
 8002256:	4618      	mov	r0, r3
 8002258:	f003 feba 	bl	8005fd0 <HAL_RCCEx_PeriphCLKConfig>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_FDCAN_MspInit+0xe2>
      Error_Handler();
 8002262:	f7ff fed3 	bl	800200c <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002266:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <HAL_FDCAN_MspInit+0x154>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	3301      	adds	r3, #1
 800226c:	4a1a      	ldr	r2, [pc, #104]	; (80022d8 <HAL_FDCAN_MspInit+0x154>)
 800226e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002270:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_FDCAN_MspInit+0x154>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d10b      	bne.n	8002290 <HAL_FDCAN_MspInit+0x10c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002278:	4b18      	ldr	r3, [pc, #96]	; (80022dc <HAL_FDCAN_MspInit+0x158>)
 800227a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227c:	4a17      	ldr	r2, [pc, #92]	; (80022dc <HAL_FDCAN_MspInit+0x158>)
 800227e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002282:	6593      	str	r3, [r2, #88]	; 0x58
 8002284:	4b15      	ldr	r3, [pc, #84]	; (80022dc <HAL_FDCAN_MspInit+0x158>)
 8002286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_FDCAN_MspInit+0x158>)
 8002292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002294:	4a11      	ldr	r2, [pc, #68]	; (80022dc <HAL_FDCAN_MspInit+0x158>)
 8002296:	f043 0302 	orr.w	r3, r3, #2
 800229a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <HAL_FDCAN_MspInit+0x158>)
 800229e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80022a8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80022ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2300      	movs	r3, #0
 80022b8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80022ba:	2309      	movs	r3, #9
 80022bc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022c2:	4619      	mov	r1, r3
 80022c4:	4807      	ldr	r0, [pc, #28]	; (80022e4 <HAL_FDCAN_MspInit+0x160>)
 80022c6:	f002 ff1f 	bl	8005108 <HAL_GPIO_Init>
}
 80022ca:	bf00      	nop
 80022cc:	3780      	adds	r7, #128	; 0x80
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40006400 	.word	0x40006400
 80022d8:	200005bc 	.word	0x200005bc
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40006800 	.word	0x40006800
 80022e4:	48000400 	.word	0x48000400

080022e8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b098      	sub	sp, #96	; 0x60
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022f0:	f107 030c 	add.w	r3, r7, #12
 80022f4:	2254      	movs	r2, #84	; 0x54
 80022f6:	2100      	movs	r1, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f005 fa51 	bl	80077a0 <memset>
  if(hrtc->Instance==RTC)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a15      	ldr	r2, [pc, #84]	; (8002358 <HAL_RTC_MspInit+0x70>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d123      	bne.n	8002350 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002308:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800230c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800230e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002312:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002314:	f107 030c 	add.w	r3, r7, #12
 8002318:	4618      	mov	r0, r3
 800231a:	f003 fe59 	bl	8005fd0 <HAL_RCCEx_PeriphCLKConfig>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002324:	f7ff fe72 	bl	800200c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <HAL_RTC_MspInit+0x74>)
 800232a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232e:	4a0b      	ldr	r2, [pc, #44]	; (800235c <HAL_RTC_MspInit+0x74>)
 8002330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <HAL_RTC_MspInit+0x74>)
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	4a07      	ldr	r2, [pc, #28]	; (800235c <HAL_RTC_MspInit+0x74>)
 800233e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002342:	6593      	str	r3, [r2, #88]	; 0x58
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_RTC_MspInit+0x74>)
 8002346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002350:	bf00      	nop
 8002352:	3760      	adds	r7, #96	; 0x60
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40002800 	.word	0x40002800
 800235c:	40021000 	.word	0x40021000

08002360 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08a      	sub	sp, #40	; 0x28
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a17      	ldr	r2, [pc, #92]	; (80023dc <HAL_SPI_MspInit+0x7c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d128      	bne.n	80023d4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002382:	4b17      	ldr	r3, [pc, #92]	; (80023e0 <HAL_SPI_MspInit+0x80>)
 8002384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002386:	4a16      	ldr	r2, [pc, #88]	; (80023e0 <HAL_SPI_MspInit+0x80>)
 8002388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800238c:	6593      	str	r3, [r2, #88]	; 0x58
 800238e:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <HAL_SPI_MspInit+0x80>)
 8002390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002392:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800239a:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_SPI_MspInit+0x80>)
 800239c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239e:	4a10      	ldr	r2, [pc, #64]	; (80023e0 <HAL_SPI_MspInit+0x80>)
 80023a0:	f043 0304 	orr.w	r3, r3, #4
 80023a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023a6:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <HAL_SPI_MspInit+0x80>)
 80023a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80023b2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80023b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	2302      	movs	r3, #2
 80023ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c0:	2300      	movs	r3, #0
 80023c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80023c4:	2306      	movs	r3, #6
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	4619      	mov	r1, r3
 80023ce:	4805      	ldr	r0, [pc, #20]	; (80023e4 <HAL_SPI_MspInit+0x84>)
 80023d0:	f002 fe9a 	bl	8005108 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80023d4:	bf00      	nop
 80023d6:	3728      	adds	r7, #40	; 0x28
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40003c00 	.word	0x40003c00
 80023e0:	40021000 	.word	0x40021000
 80023e4:	48000800 	.word	0x48000800

080023e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023ec:	e7fe      	b.n	80023ec <NMI_Handler+0x4>

080023ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f2:	e7fe      	b.n	80023f2 <HardFault_Handler+0x4>

080023f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f8:	e7fe      	b.n	80023f8 <MemManage_Handler+0x4>

080023fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023fe:	e7fe      	b.n	80023fe <BusFault_Handler+0x4>

08002400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002404:	e7fe      	b.n	8002404 <UsageFault_Handler+0x4>

08002406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002434:	f000 f8a4 	bl	8002580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}

0800243c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002440:	4802      	ldr	r0, [pc, #8]	; (800244c <DMA1_Channel1_IRQHandler+0x10>)
 8002442:	f002 fb4c 	bl	8004ade <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000300 	.word	0x20000300

08002450 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002454:	4802      	ldr	r0, [pc, #8]	; (8002460 <ADC1_2_IRQHandler+0x10>)
 8002456:	f000 ff03 	bl	8003260 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000294 	.word	0x20000294

08002464 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <SystemInit+0x20>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	4a05      	ldr	r2, [pc, #20]	; (8002484 <SystemInit+0x20>)
 8002470:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002474:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002488:	480d      	ldr	r0, [pc, #52]	; (80024c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800248a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800248c:	480d      	ldr	r0, [pc, #52]	; (80024c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800248e:	490e      	ldr	r1, [pc, #56]	; (80024c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002490:	4a0e      	ldr	r2, [pc, #56]	; (80024cc <LoopForever+0xe>)
  movs r3, #0
 8002492:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002494:	e002      	b.n	800249c <LoopCopyDataInit>

08002496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800249a:	3304      	adds	r3, #4

0800249c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800249c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800249e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024a0:	d3f9      	bcc.n	8002496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024a2:	4a0b      	ldr	r2, [pc, #44]	; (80024d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024a4:	4c0b      	ldr	r4, [pc, #44]	; (80024d4 <LoopForever+0x16>)
  movs r3, #0
 80024a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024a8:	e001      	b.n	80024ae <LoopFillZerobss>

080024aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024ac:	3204      	adds	r2, #4

080024ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024b0:	d3fb      	bcc.n	80024aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024b2:	f7ff ffd7 	bl	8002464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024b6:	f005 f94f 	bl	8007758 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024ba:	f7ff fa2d 	bl	8001918 <main>

080024be <LoopForever>:

LoopForever:
    b LoopForever
 80024be:	e7fe      	b.n	80024be <LoopForever>
  ldr   r0, =_estack
 80024c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024c8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80024cc:	08007bec 	.word	0x08007bec
  ldr r2, =_sbss
 80024d0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80024d4:	200005c4 	.word	0x200005c4

080024d8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024d8:	e7fe      	b.n	80024d8 <ADC3_IRQHandler>

080024da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e4:	2003      	movs	r0, #3
 80024e6:	f002 f997 	bl	8004818 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024ea:	2000      	movs	r0, #0
 80024ec:	f000 f80e 	bl	800250c <HAL_InitTick>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	71fb      	strb	r3, [r7, #7]
 80024fa:	e001      	b.n	8002500 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024fc:	f7ff fd8c 	bl	8002018 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002500:	79fb      	ldrb	r3, [r7, #7]

}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002518:	4b16      	ldr	r3, [pc, #88]	; (8002574 <HAL_InitTick+0x68>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d022      	beq.n	8002566 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002520:	4b15      	ldr	r3, [pc, #84]	; (8002578 <HAL_InitTick+0x6c>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4b13      	ldr	r3, [pc, #76]	; (8002574 <HAL_InitTick+0x68>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800252c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002530:	fbb2 f3f3 	udiv	r3, r2, r3
 8002534:	4618      	mov	r0, r3
 8002536:	f002 f9a2 	bl	800487e <HAL_SYSTICK_Config>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10f      	bne.n	8002560 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b0f      	cmp	r3, #15
 8002544:	d809      	bhi.n	800255a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002546:	2200      	movs	r2, #0
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	f04f 30ff 	mov.w	r0, #4294967295
 800254e:	f002 f96e 	bl	800482e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002552:	4a0a      	ldr	r2, [pc, #40]	; (800257c <HAL_InitTick+0x70>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	e007      	b.n	800256a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	e004      	b.n	800256a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
 8002564:	e001      	b.n	800256a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800256a:	7bfb      	ldrb	r3, [r7, #15]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	2000000c 	.word	0x2000000c
 8002578:	20000004 	.word	0x20000004
 800257c:	20000008 	.word	0x20000008

08002580 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002584:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_IncTick+0x1c>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <HAL_IncTick+0x20>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4413      	add	r3, r2
 800258e:	4a03      	ldr	r2, [pc, #12]	; (800259c <HAL_IncTick+0x1c>)
 8002590:	6013      	str	r3, [r2, #0]
}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	200005c0 	.word	0x200005c0
 80025a0:	2000000c 	.word	0x2000000c

080025a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return uwTick;
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <HAL_GetTick+0x14>)
 80025aa:	681b      	ldr	r3, [r3, #0]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	200005c0 	.word	0x200005c0

080025bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c4:	f7ff ffee 	bl	80025a4 <HAL_GetTick>
 80025c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d4:	d004      	beq.n	80025e0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80025d6:	4b09      	ldr	r3, [pc, #36]	; (80025fc <HAL_Delay+0x40>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4413      	add	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025e0:	bf00      	nop
 80025e2:	f7ff ffdf 	bl	80025a4 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d8f7      	bhi.n	80025e2 <HAL_Delay+0x26>
  {
  }
}
 80025f2:	bf00      	nop
 80025f4:	bf00      	nop
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	2000000c 	.word	0x2000000c

08002600 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002610:	4904      	ldr	r1, [pc, #16]	; (8002624 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4313      	orrs	r3, r2
 8002616:	600b      	str	r3, [r1, #0]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	40010030 	.word	0x40010030

08002628 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f023 0202 	bic.w	r2, r3, #2
 8002638:	4904      	ldr	r1, [pc, #16]	; (800264c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4313      	orrs	r3, r2
 800263e:	600b      	str	r3, [r1, #0]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	40010030 	.word	0x40010030

08002650 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002656:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a0e      	ldr	r2, [pc, #56]	; (8002694 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002662:	f7ff ff9f 	bl	80025a4 <HAL_GetTick>
 8002666:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8002668:	e008      	b.n	800267c <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 800266a:	f7ff ff9b 	bl	80025a4 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b0a      	cmp	r3, #10
 8002676:	d901      	bls.n	800267c <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e006      	b.n	800268a <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40010030 	.word	0x40010030

08002698 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	609a      	str	r2, [r3, #8]
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	609a      	str	r2, [r3, #8]
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	3360      	adds	r3, #96	; 0x60
 8002712:	461a      	mov	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4b08      	ldr	r3, [pc, #32]	; (8002744 <LL_ADC_SetOffset+0x44>)
 8002722:	4013      	ands	r3, r2
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	4313      	orrs	r3, r2
 8002730:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002738:	bf00      	nop
 800273a:	371c      	adds	r7, #28
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	03fff000 	.word	0x03fff000

08002748 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3360      	adds	r3, #96	; 0x60
 8002756:	461a      	mov	r2, r3
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002768:	4618      	mov	r0, r3
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3360      	adds	r3, #96	; 0x60
 8002784:	461a      	mov	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	431a      	orrs	r2, r3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b087      	sub	sp, #28
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	60f8      	str	r0, [r7, #12]
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	3360      	adds	r3, #96	; 0x60
 80027ba:	461a      	mov	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80027d4:	bf00      	nop
 80027d6:	371c      	adds	r7, #28
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3360      	adds	r3, #96	; 0x60
 80027f0:	461a      	mov	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	431a      	orrs	r2, r3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800280a:	bf00      	nop
 800280c:	371c      	adds	r7, #28
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	615a      	str	r2, [r3, #20]
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002862:	b480      	push	{r7}
 8002864:	b087      	sub	sp, #28
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	3330      	adds	r3, #48	; 0x30
 8002872:	461a      	mov	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	0a1b      	lsrs	r3, r3, #8
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	f003 030c 	and.w	r3, r3, #12
 800287e:	4413      	add	r3, r2
 8002880:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	f003 031f 	and.w	r3, r3, #31
 800288c:	211f      	movs	r1, #31
 800288e:	fa01 f303 	lsl.w	r3, r1, r3
 8002892:	43db      	mvns	r3, r3
 8002894:	401a      	ands	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	0e9b      	lsrs	r3, r3, #26
 800289a:	f003 011f 	and.w	r1, r3, #31
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	fa01 f303 	lsl.w	r3, r1, r3
 80028a8:	431a      	orrs	r2, r3
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028ae:	bf00      	nop
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	3314      	adds	r3, #20
 80028f0:	461a      	mov	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	0e5b      	lsrs	r3, r3, #25
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	4413      	add	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	0d1b      	lsrs	r3, r3, #20
 8002908:	f003 031f 	and.w	r3, r3, #31
 800290c:	2107      	movs	r1, #7
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	401a      	ands	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	0d1b      	lsrs	r3, r3, #20
 800291a:	f003 031f 	and.w	r3, r3, #31
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	fa01 f303 	lsl.w	r3, r1, r3
 8002924:	431a      	orrs	r2, r3
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800292a:	bf00      	nop
 800292c:	371c      	adds	r7, #28
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a0f      	ldr	r2, [pc, #60]	; (8002984 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d10a      	bne.n	8002962 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002958:	431a      	orrs	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002960:	e00a      	b.n	8002978 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296e:	43db      	mvns	r3, r3
 8002970:	401a      	ands	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002978:	bf00      	nop
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	407f0000 	.word	0x407f0000

08002988 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 031f 	and.w	r3, r3, #31
}
 8002998:	4618      	mov	r0, r3
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80029d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6093      	str	r3, [r2, #8]
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029f8:	d101      	bne.n	80029fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a48:	d101      	bne.n	8002a4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a70:	f043 0201 	orr.w	r2, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a98:	f043 0202 	orr.w	r2, r3, #2
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <LL_ADC_IsEnabled+0x18>
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <LL_ADC_IsEnabled+0x1a>
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d101      	bne.n	8002aea <LL_ADC_IsDisableOngoing+0x18>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <LL_ADC_IsDisableOngoing+0x1a>
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b0c:	f043 0204 	orr.w	r2, r3, #4
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d101      	bne.n	8002b38 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d101      	bne.n	8002b5e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b6c:	b590      	push	{r4, r7, lr}
 8002b6e:	b089      	sub	sp, #36	; 0x24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e1af      	b.n	8002ee6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d109      	bne.n	8002ba8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff fa6b 	bl	8002070 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff19 	bl	80029e4 <LL_ADC_IsDeepPowerDownEnabled>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d004      	beq.n	8002bc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff feff 	bl	80029c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff ff34 	bl	8002a34 <LL_ADC_IsInternalRegulatorEnabled>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d115      	bne.n	8002bfe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff ff18 	bl	8002a0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bdc:	4b9f      	ldr	r3, [pc, #636]	; (8002e5c <HAL_ADC_Init+0x2f0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	099b      	lsrs	r3, r3, #6
 8002be2:	4a9f      	ldr	r2, [pc, #636]	; (8002e60 <HAL_ADC_Init+0x2f4>)
 8002be4:	fba2 2303 	umull	r2, r3, r2, r3
 8002be8:	099b      	lsrs	r3, r3, #6
 8002bea:	3301      	adds	r3, #1
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bf0:	e002      	b.n	8002bf8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f9      	bne.n	8002bf2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff ff16 	bl	8002a34 <LL_ADC_IsInternalRegulatorEnabled>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10d      	bne.n	8002c2a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c12:	f043 0210 	orr.w	r2, r3, #16
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1e:	f043 0201 	orr.w	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff ff76 	bl	8002b20 <LL_ADC_REG_IsConversionOngoing>
 8002c34:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3a:	f003 0310 	and.w	r3, r3, #16
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f040 8148 	bne.w	8002ed4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f040 8144 	bne.w	8002ed4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c50:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c54:	f043 0202 	orr.w	r2, r3, #2
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff23 	bl	8002aac <LL_ADC_IsEnabled>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d141      	bne.n	8002cf0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c74:	d004      	beq.n	8002c80 <HAL_ADC_Init+0x114>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a7a      	ldr	r2, [pc, #488]	; (8002e64 <HAL_ADC_Init+0x2f8>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d10f      	bne.n	8002ca0 <HAL_ADC_Init+0x134>
 8002c80:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c84:	f7ff ff12 	bl	8002aac <LL_ADC_IsEnabled>
 8002c88:	4604      	mov	r4, r0
 8002c8a:	4876      	ldr	r0, [pc, #472]	; (8002e64 <HAL_ADC_Init+0x2f8>)
 8002c8c:	f7ff ff0e 	bl	8002aac <LL_ADC_IsEnabled>
 8002c90:	4603      	mov	r3, r0
 8002c92:	4323      	orrs	r3, r4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf0c      	ite	eq
 8002c98:	2301      	moveq	r3, #1
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	e012      	b.n	8002cc6 <HAL_ADC_Init+0x15a>
 8002ca0:	4871      	ldr	r0, [pc, #452]	; (8002e68 <HAL_ADC_Init+0x2fc>)
 8002ca2:	f7ff ff03 	bl	8002aac <LL_ADC_IsEnabled>
 8002ca6:	4604      	mov	r4, r0
 8002ca8:	4870      	ldr	r0, [pc, #448]	; (8002e6c <HAL_ADC_Init+0x300>)
 8002caa:	f7ff feff 	bl	8002aac <LL_ADC_IsEnabled>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	431c      	orrs	r4, r3
 8002cb2:	486f      	ldr	r0, [pc, #444]	; (8002e70 <HAL_ADC_Init+0x304>)
 8002cb4:	f7ff fefa 	bl	8002aac <LL_ADC_IsEnabled>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	4323      	orrs	r3, r4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	bf0c      	ite	eq
 8002cc0:	2301      	moveq	r3, #1
 8002cc2:	2300      	movne	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d012      	beq.n	8002cf0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cd2:	d004      	beq.n	8002cde <HAL_ADC_Init+0x172>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a62      	ldr	r2, [pc, #392]	; (8002e64 <HAL_ADC_Init+0x2f8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADC_Init+0x176>
 8002cde:	4a65      	ldr	r2, [pc, #404]	; (8002e74 <HAL_ADC_Init+0x308>)
 8002ce0:	e000      	b.n	8002ce4 <HAL_ADC_Init+0x178>
 8002ce2:	4a65      	ldr	r2, [pc, #404]	; (8002e78 <HAL_ADC_Init+0x30c>)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4610      	mov	r0, r2
 8002cec:	f7ff fcd4 	bl	8002698 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	7f5b      	ldrb	r3, [r3, #29]
 8002cf4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cfa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002d00:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d06:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d0e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d106      	bne.n	8002d2c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d22:	3b01      	subs	r3, #1
 8002d24:	045b      	lsls	r3, r3, #17
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d009      	beq.n	8002d48 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	4b4b      	ldr	r3, [pc, #300]	; (8002e7c <HAL_ADC_Init+0x310>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6812      	ldr	r2, [r2, #0]
 8002d56:	69b9      	ldr	r1, [r7, #24]
 8002d58:	430b      	orrs	r3, r1
 8002d5a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fed2 	bl	8002b20 <LL_ADC_REG_IsConversionOngoing>
 8002d7c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fedf 	bl	8002b46 <LL_ADC_INJ_IsConversionOngoing>
 8002d88:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d17f      	bne.n	8002e90 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d17c      	bne.n	8002e90 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d9a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002da2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002db2:	f023 0302 	bic.w	r3, r3, #2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	69b9      	ldr	r1, [r7, #24]
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d017      	beq.n	8002df8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691a      	ldr	r2, [r3, #16]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002dd6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002de0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002de4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6911      	ldr	r1, [r2, #16]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	430b      	orrs	r3, r1
 8002df2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002df6:	e013      	b.n	8002e20 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e06:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e1c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d12a      	bne.n	8002e80 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e34:	f023 0304 	bic.w	r3, r3, #4
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e40:	4311      	orrs	r1, r2
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002e46:	4311      	orrs	r1, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0201 	orr.w	r2, r2, #1
 8002e58:	611a      	str	r2, [r3, #16]
 8002e5a:	e019      	b.n	8002e90 <HAL_ADC_Init+0x324>
 8002e5c:	20000004 	.word	0x20000004
 8002e60:	053e2d63 	.word	0x053e2d63
 8002e64:	50000100 	.word	0x50000100
 8002e68:	50000400 	.word	0x50000400
 8002e6c:	50000500 	.word	0x50000500
 8002e70:	50000600 	.word	0x50000600
 8002e74:	50000300 	.word	0x50000300
 8002e78:	50000700 	.word	0x50000700
 8002e7c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691a      	ldr	r2, [r3, #16]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0201 	bic.w	r2, r2, #1
 8002e8e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d10c      	bne.n	8002eb2 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	f023 010f 	bic.w	r1, r3, #15
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	1e5a      	subs	r2, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	631a      	str	r2, [r3, #48]	; 0x30
 8002eb0:	e007      	b.n	8002ec2 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 020f 	bic.w	r2, r2, #15
 8002ec0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec6:	f023 0303 	bic.w	r3, r3, #3
 8002eca:	f043 0201 	orr.w	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ed2:	e007      	b.n	8002ee4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed8:	f043 0210 	orr.w	r2, r3, #16
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ee4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3724      	adds	r7, #36	; 0x24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd90      	pop	{r4, r7, pc}
 8002eee:	bf00      	nop

08002ef0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f00:	d004      	beq.n	8002f0c <HAL_ADC_Start+0x1c>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a67      	ldr	r2, [pc, #412]	; (80030a4 <HAL_ADC_Start+0x1b4>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d101      	bne.n	8002f10 <HAL_ADC_Start+0x20>
 8002f0c:	4b66      	ldr	r3, [pc, #408]	; (80030a8 <HAL_ADC_Start+0x1b8>)
 8002f0e:	e000      	b.n	8002f12 <HAL_ADC_Start+0x22>
 8002f10:	4b66      	ldr	r3, [pc, #408]	; (80030ac <HAL_ADC_Start+0x1bc>)
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff fd38 	bl	8002988 <LL_ADC_GetMultimode>
 8002f18:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fdfe 	bl	8002b20 <LL_ADC_REG_IsConversionOngoing>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f040 80b4 	bne.w	8003094 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_ADC_Start+0x4a>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e0af      	b.n	800309a <HAL_ADC_Start+0x1aa>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f001 f854 	bl	8003ff0 <ADC_Enable>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f040 809b 	bne.w	800308a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f5c:	f023 0301 	bic.w	r3, r3, #1
 8002f60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a4d      	ldr	r2, [pc, #308]	; (80030a4 <HAL_ADC_Start+0x1b4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d009      	beq.n	8002f86 <HAL_ADC_Start+0x96>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a4e      	ldr	r2, [pc, #312]	; (80030b0 <HAL_ADC_Start+0x1c0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d002      	beq.n	8002f82 <HAL_ADC_Start+0x92>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	e003      	b.n	8002f8a <HAL_ADC_Start+0x9a>
 8002f82:	4b4c      	ldr	r3, [pc, #304]	; (80030b4 <HAL_ADC_Start+0x1c4>)
 8002f84:	e001      	b.n	8002f8a <HAL_ADC_Start+0x9a>
 8002f86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d002      	beq.n	8002f98 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d105      	bne.n	8002fa4 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb0:	d106      	bne.n	8002fc0 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb6:	f023 0206 	bic.w	r2, r3, #6
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	661a      	str	r2, [r3, #96]	; 0x60
 8002fbe:	e002      	b.n	8002fc6 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	221c      	movs	r2, #28
 8002fcc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a32      	ldr	r2, [pc, #200]	; (80030a4 <HAL_ADC_Start+0x1b4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d009      	beq.n	8002ff4 <HAL_ADC_Start+0x104>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a32      	ldr	r2, [pc, #200]	; (80030b0 <HAL_ADC_Start+0x1c0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d002      	beq.n	8002ff0 <HAL_ADC_Start+0x100>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	e003      	b.n	8002ff8 <HAL_ADC_Start+0x108>
 8002ff0:	4b30      	ldr	r3, [pc, #192]	; (80030b4 <HAL_ADC_Start+0x1c4>)
 8002ff2:	e001      	b.n	8002ff8 <HAL_ADC_Start+0x108>
 8002ff4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d008      	beq.n	8003012 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	2b05      	cmp	r3, #5
 800300a:	d002      	beq.n	8003012 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b09      	cmp	r3, #9
 8003010:	d114      	bne.n	800303c <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d007      	beq.n	8003030 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003024:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003028:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fd5f 	bl	8002af8 <LL_ADC_REG_StartConversion>
 800303a:	e02d      	b.n	8003098 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003040:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a15      	ldr	r2, [pc, #84]	; (80030a4 <HAL_ADC_Start+0x1b4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d009      	beq.n	8003066 <HAL_ADC_Start+0x176>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a16      	ldr	r2, [pc, #88]	; (80030b0 <HAL_ADC_Start+0x1c0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d002      	beq.n	8003062 <HAL_ADC_Start+0x172>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	e003      	b.n	800306a <HAL_ADC_Start+0x17a>
 8003062:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <HAL_ADC_Start+0x1c4>)
 8003064:	e001      	b.n	800306a <HAL_ADC_Start+0x17a>
 8003066:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800306a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00f      	beq.n	8003098 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003080:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	65da      	str	r2, [r3, #92]	; 0x5c
 8003088:	e006      	b.n	8003098 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003092:	e001      	b.n	8003098 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003094:	2302      	movs	r3, #2
 8003096:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003098:	7dfb      	ldrb	r3, [r7, #23]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	50000100 	.word	0x50000100
 80030a8:	50000300 	.word	0x50000300
 80030ac:	50000700 	.word	0x50000700
 80030b0:	50000500 	.word	0x50000500
 80030b4:	50000400 	.word	0x50000400

080030b8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030cc:	d004      	beq.n	80030d8 <HAL_ADC_Start_DMA+0x20>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a5a      	ldr	r2, [pc, #360]	; (800323c <HAL_ADC_Start_DMA+0x184>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d101      	bne.n	80030dc <HAL_ADC_Start_DMA+0x24>
 80030d8:	4b59      	ldr	r3, [pc, #356]	; (8003240 <HAL_ADC_Start_DMA+0x188>)
 80030da:	e000      	b.n	80030de <HAL_ADC_Start_DMA+0x26>
 80030dc:	4b59      	ldr	r3, [pc, #356]	; (8003244 <HAL_ADC_Start_DMA+0x18c>)
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff fc52 	bl	8002988 <LL_ADC_GetMultimode>
 80030e4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff fd18 	bl	8002b20 <LL_ADC_REG_IsConversionOngoing>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f040 809b 	bne.w	800322e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_ADC_Start_DMA+0x4e>
 8003102:	2302      	movs	r3, #2
 8003104:	e096      	b.n	8003234 <HAL_ADC_Start_DMA+0x17c>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a4d      	ldr	r2, [pc, #308]	; (8003248 <HAL_ADC_Start_DMA+0x190>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d008      	beq.n	800312a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d005      	beq.n	800312a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	2b05      	cmp	r3, #5
 8003122:	d002      	beq.n	800312a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	2b09      	cmp	r3, #9
 8003128:	d17a      	bne.n	8003220 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 ff60 	bl	8003ff0 <ADC_Enable>
 8003130:	4603      	mov	r3, r0
 8003132:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003134:	7dfb      	ldrb	r3, [r7, #23]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d16d      	bne.n	8003216 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003142:	f023 0301 	bic.w	r3, r3, #1
 8003146:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a3a      	ldr	r2, [pc, #232]	; (800323c <HAL_ADC_Start_DMA+0x184>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d009      	beq.n	800316c <HAL_ADC_Start_DMA+0xb4>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a3b      	ldr	r2, [pc, #236]	; (800324c <HAL_ADC_Start_DMA+0x194>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d002      	beq.n	8003168 <HAL_ADC_Start_DMA+0xb0>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	e003      	b.n	8003170 <HAL_ADC_Start_DMA+0xb8>
 8003168:	4b39      	ldr	r3, [pc, #228]	; (8003250 <HAL_ADC_Start_DMA+0x198>)
 800316a:	e001      	b.n	8003170 <HAL_ADC_Start_DMA+0xb8>
 800316c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	4293      	cmp	r3, r2
 8003176:	d002      	beq.n	800317e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d105      	bne.n	800318a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003182:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d006      	beq.n	80031a4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319a:	f023 0206 	bic.w	r2, r3, #6
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	661a      	str	r2, [r3, #96]	; 0x60
 80031a2:	e002      	b.n	80031aa <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ae:	4a29      	ldr	r2, [pc, #164]	; (8003254 <HAL_ADC_Start_DMA+0x19c>)
 80031b0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b6:	4a28      	ldr	r2, [pc, #160]	; (8003258 <HAL_ADC_Start_DMA+0x1a0>)
 80031b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031be:	4a27      	ldr	r2, [pc, #156]	; (800325c <HAL_ADC_Start_DMA+0x1a4>)
 80031c0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	221c      	movs	r2, #28
 80031c8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0210 	orr.w	r2, r2, #16
 80031e0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0201 	orr.w	r2, r2, #1
 80031f0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	3340      	adds	r3, #64	; 0x40
 80031fc:	4619      	mov	r1, r3
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f001 fbf1 	bl	80049e8 <HAL_DMA_Start_IT>
 8003206:	4603      	mov	r3, r0
 8003208:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff fc72 	bl	8002af8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003214:	e00d      	b.n	8003232 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800321e:	e008      	b.n	8003232 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800322c:	e001      	b.n	8003232 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800322e:	2302      	movs	r3, #2
 8003230:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003232:	7dfb      	ldrb	r3, [r7, #23]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	50000100 	.word	0x50000100
 8003240:	50000300 	.word	0x50000300
 8003244:	50000700 	.word	0x50000700
 8003248:	50000600 	.word	0x50000600
 800324c:	50000500 	.word	0x50000500
 8003250:	50000400 	.word	0x50000400
 8003254:	08004173 	.word	0x08004173
 8003258:	0800424b 	.word	0x0800424b
 800325c:	08004267 	.word	0x08004267

08003260 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08a      	sub	sp, #40	; 0x28
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003268:	2300      	movs	r3, #0
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003284:	d004      	beq.n	8003290 <HAL_ADC_IRQHandler+0x30>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a8e      	ldr	r2, [pc, #568]	; (80034c4 <HAL_ADC_IRQHandler+0x264>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d101      	bne.n	8003294 <HAL_ADC_IRQHandler+0x34>
 8003290:	4b8d      	ldr	r3, [pc, #564]	; (80034c8 <HAL_ADC_IRQHandler+0x268>)
 8003292:	e000      	b.n	8003296 <HAL_ADC_IRQHandler+0x36>
 8003294:	4b8d      	ldr	r3, [pc, #564]	; (80034cc <HAL_ADC_IRQHandler+0x26c>)
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff fb76 	bl	8002988 <LL_ADC_GetMultimode>
 800329c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d017      	beq.n	80032d8 <HAL_ADC_IRQHandler+0x78>
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d012      	beq.n	80032d8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d105      	bne.n	80032ca <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f001 f8c2 	bl	8004454 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2202      	movs	r2, #2
 80032d6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d004      	beq.n	80032ec <HAL_ADC_IRQHandler+0x8c>
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10b      	bne.n	8003304 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8094 	beq.w	8003420 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 808e 	beq.w	8003420 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b00      	cmp	r3, #0
 800330e:	d105      	bne.n	800331c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003314:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fa8b 	bl	800283c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d072      	beq.n	8003412 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a64      	ldr	r2, [pc, #400]	; (80034c4 <HAL_ADC_IRQHandler+0x264>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d009      	beq.n	800334a <HAL_ADC_IRQHandler+0xea>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a65      	ldr	r2, [pc, #404]	; (80034d0 <HAL_ADC_IRQHandler+0x270>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d002      	beq.n	8003346 <HAL_ADC_IRQHandler+0xe6>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	e003      	b.n	800334e <HAL_ADC_IRQHandler+0xee>
 8003346:	4b63      	ldr	r3, [pc, #396]	; (80034d4 <HAL_ADC_IRQHandler+0x274>)
 8003348:	e001      	b.n	800334e <HAL_ADC_IRQHandler+0xee>
 800334a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6812      	ldr	r2, [r2, #0]
 8003352:	4293      	cmp	r3, r2
 8003354:	d008      	beq.n	8003368 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	2b05      	cmp	r3, #5
 8003360:	d002      	beq.n	8003368 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2b09      	cmp	r3, #9
 8003366:	d104      	bne.n	8003372 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	623b      	str	r3, [r7, #32]
 8003370:	e014      	b.n	800339c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a53      	ldr	r2, [pc, #332]	; (80034c4 <HAL_ADC_IRQHandler+0x264>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d009      	beq.n	8003390 <HAL_ADC_IRQHandler+0x130>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a53      	ldr	r2, [pc, #332]	; (80034d0 <HAL_ADC_IRQHandler+0x270>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d002      	beq.n	800338c <HAL_ADC_IRQHandler+0x12c>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	e003      	b.n	8003394 <HAL_ADC_IRQHandler+0x134>
 800338c:	4b51      	ldr	r3, [pc, #324]	; (80034d4 <HAL_ADC_IRQHandler+0x274>)
 800338e:	e001      	b.n	8003394 <HAL_ADC_IRQHandler+0x134>
 8003390:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003394:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d135      	bne.n	8003412 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d12e      	bne.n	8003412 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fbb1 	bl	8002b20 <LL_ADC_REG_IsConversionOngoing>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d11a      	bne.n	80033fa <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 020c 	bic.w	r2, r2, #12
 80033d2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d112      	bne.n	8003412 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f0:	f043 0201 	orr.w	r2, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80033f8:	e00b      	b.n	8003412 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fe:	f043 0210 	orr.w	r2, r3, #16
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340a:	f043 0201 	orr.w	r2, r3, #1
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f984 	bl	8003720 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	220c      	movs	r2, #12
 800341e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b00      	cmp	r3, #0
 8003428:	d004      	beq.n	8003434 <HAL_ADC_IRQHandler+0x1d4>
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10b      	bne.n	800344c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 80b3 	beq.w	80035a6 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 80ad 	beq.w	80035a6 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b00      	cmp	r3, #0
 8003456:	d105      	bne.n	8003464 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff fa26 	bl	80028ba <LL_ADC_INJ_IsTriggerSourceSWStart>
 800346e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff f9e1 	bl	800283c <LL_ADC_REG_IsTriggerSourceSWStart>
 800347a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a10      	ldr	r2, [pc, #64]	; (80034c4 <HAL_ADC_IRQHandler+0x264>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d009      	beq.n	800349a <HAL_ADC_IRQHandler+0x23a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a11      	ldr	r2, [pc, #68]	; (80034d0 <HAL_ADC_IRQHandler+0x270>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d002      	beq.n	8003496 <HAL_ADC_IRQHandler+0x236>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	e003      	b.n	800349e <HAL_ADC_IRQHandler+0x23e>
 8003496:	4b0f      	ldr	r3, [pc, #60]	; (80034d4 <HAL_ADC_IRQHandler+0x274>)
 8003498:	e001      	b.n	800349e <HAL_ADC_IRQHandler+0x23e>
 800349a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6812      	ldr	r2, [r2, #0]
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d008      	beq.n	80034b8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2b06      	cmp	r3, #6
 80034b0:	d002      	beq.n	80034b8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b07      	cmp	r3, #7
 80034b6:	d10f      	bne.n	80034d8 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	623b      	str	r3, [r7, #32]
 80034c0:	e01f      	b.n	8003502 <HAL_ADC_IRQHandler+0x2a2>
 80034c2:	bf00      	nop
 80034c4:	50000100 	.word	0x50000100
 80034c8:	50000300 	.word	0x50000300
 80034cc:	50000700 	.word	0x50000700
 80034d0:	50000500 	.word	0x50000500
 80034d4:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a8b      	ldr	r2, [pc, #556]	; (800370c <HAL_ADC_IRQHandler+0x4ac>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d009      	beq.n	80034f6 <HAL_ADC_IRQHandler+0x296>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a8a      	ldr	r2, [pc, #552]	; (8003710 <HAL_ADC_IRQHandler+0x4b0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d002      	beq.n	80034f2 <HAL_ADC_IRQHandler+0x292>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	e003      	b.n	80034fa <HAL_ADC_IRQHandler+0x29a>
 80034f2:	4b88      	ldr	r3, [pc, #544]	; (8003714 <HAL_ADC_IRQHandler+0x4b4>)
 80034f4:	e001      	b.n	80034fa <HAL_ADC_IRQHandler+0x29a>
 80034f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034fa:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d047      	beq.n	8003598 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d007      	beq.n	8003522 <HAL_ADC_IRQHandler+0x2c2>
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d03f      	beq.n	8003598 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800351e:	2b00      	cmp	r3, #0
 8003520:	d13a      	bne.n	8003598 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352c:	2b40      	cmp	r3, #64	; 0x40
 800352e:	d133      	bne.n	8003598 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d12e      	bne.n	8003598 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff fb01 	bl	8002b46 <LL_ADC_INJ_IsConversionOngoing>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d11a      	bne.n	8003580 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003558:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356e:	2b00      	cmp	r3, #0
 8003570:	d112      	bne.n	8003598 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003576:	f043 0201 	orr.w	r2, r3, #1
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	65da      	str	r2, [r3, #92]	; 0x5c
 800357e:	e00b      	b.n	8003598 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003584:	f043 0210 	orr.w	r2, r3, #16
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003590:	f043 0201 	orr.w	r2, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 ff33 	bl	8004404 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2260      	movs	r2, #96	; 0x60
 80035a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d011      	beq.n	80035d4 <HAL_ADC_IRQHandler+0x374>
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00c      	beq.n	80035d4 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f8be 	bl	8003748 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2280      	movs	r2, #128	; 0x80
 80035d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d012      	beq.n	8003604 <HAL_ADC_IRQHandler+0x3a4>
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00d      	beq.n	8003604 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ec:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 ff19 	bl	800442c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003602:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800360a:	2b00      	cmp	r3, #0
 800360c:	d012      	beq.n	8003634 <HAL_ADC_IRQHandler+0x3d4>
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00d      	beq.n	8003634 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 ff0b 	bl	8004440 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003632:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f003 0310 	and.w	r3, r3, #16
 800363a:	2b00      	cmp	r3, #0
 800363c:	d043      	beq.n	80036c6 <HAL_ADC_IRQHandler+0x466>
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b00      	cmp	r3, #0
 8003646:	d03e      	beq.n	80036c6 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d102      	bne.n	8003656 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003650:	2301      	movs	r3, #1
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
 8003654:	e021      	b.n	800369a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d015      	beq.n	8003688 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003664:	d004      	beq.n	8003670 <HAL_ADC_IRQHandler+0x410>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a28      	ldr	r2, [pc, #160]	; (800370c <HAL_ADC_IRQHandler+0x4ac>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d101      	bne.n	8003674 <HAL_ADC_IRQHandler+0x414>
 8003670:	4b29      	ldr	r3, [pc, #164]	; (8003718 <HAL_ADC_IRQHandler+0x4b8>)
 8003672:	e000      	b.n	8003676 <HAL_ADC_IRQHandler+0x416>
 8003674:	4b29      	ldr	r3, [pc, #164]	; (800371c <HAL_ADC_IRQHandler+0x4bc>)
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff f994 	bl	80029a4 <LL_ADC_GetMultiDMATransfer>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00b      	beq.n	800369a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003682:	2301      	movs	r3, #1
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
 8003686:	e008      	b.n	800369a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003696:	2301      	movs	r3, #1
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	2b01      	cmp	r3, #1
 800369e:	d10e      	bne.n	80036be <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b0:	f043 0202 	orr.w	r2, r3, #2
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 f84f 	bl	800375c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2210      	movs	r2, #16
 80036c4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d018      	beq.n	8003702 <HAL_ADC_IRQHandler+0x4a2>
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d013      	beq.n	8003702 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036de:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ea:	f043 0208 	orr.w	r2, r3, #8
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036fa:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 fe8b 	bl	8004418 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003702:	bf00      	nop
 8003704:	3728      	adds	r7, #40	; 0x28
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	50000100 	.word	0x50000100
 8003710:	50000500 	.word	0x50000500
 8003714:	50000400 	.word	0x50000400
 8003718:	50000300 	.word	0x50000300
 800371c:	50000700 	.word	0x50000700

08003720 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b0b6      	sub	sp, #216	; 0xd8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003780:	2300      	movs	r3, #0
 8003782:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800378a:	2b01      	cmp	r3, #1
 800378c:	d102      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x24>
 800378e:	2302      	movs	r3, #2
 8003790:	f000 bc13 	b.w	8003fba <HAL_ADC_ConfigChannel+0x84a>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff f9bd 	bl	8002b20 <LL_ADC_REG_IsConversionOngoing>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f040 83f3 	bne.w	8003f94 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6859      	ldr	r1, [r3, #4]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	f7ff f851 	bl	8002862 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff f9ab 	bl	8002b20 <LL_ADC_REG_IsConversionOngoing>
 80037ca:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff f9b7 	bl	8002b46 <LL_ADC_INJ_IsConversionOngoing>
 80037d8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f040 81d9 	bne.w	8003b98 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f040 81d4 	bne.w	8003b98 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037f8:	d10f      	bne.n	800381a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2200      	movs	r2, #0
 8003804:	4619      	mov	r1, r3
 8003806:	f7ff f86b 	bl	80028e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003812:	4618      	mov	r0, r3
 8003814:	f7fe ffff 	bl	8002816 <LL_ADC_SetSamplingTimeCommonConfig>
 8003818:	e00e      	b.n	8003838 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6819      	ldr	r1, [r3, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	461a      	mov	r2, r3
 8003828:	f7ff f85a 	bl	80028e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2100      	movs	r1, #0
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe ffef 	bl	8002816 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	695a      	ldr	r2, [r3, #20]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	08db      	lsrs	r3, r3, #3
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b04      	cmp	r3, #4
 8003858:	d022      	beq.n	80038a0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6818      	ldr	r0, [r3, #0]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	6919      	ldr	r1, [r3, #16]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800386a:	f7fe ff49 	bl	8002700 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6818      	ldr	r0, [r3, #0]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6919      	ldr	r1, [r3, #16]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	461a      	mov	r2, r3
 800387c:	f7fe ff95 	bl	80027aa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6818      	ldr	r0, [r3, #0]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	6919      	ldr	r1, [r3, #16]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	7f1b      	ldrb	r3, [r3, #28]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d102      	bne.n	8003896 <HAL_ADC_ConfigChannel+0x126>
 8003890:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003894:	e000      	b.n	8003898 <HAL_ADC_ConfigChannel+0x128>
 8003896:	2300      	movs	r3, #0
 8003898:	461a      	mov	r2, r3
 800389a:	f7fe ffa1 	bl	80027e0 <LL_ADC_SetOffsetSaturation>
 800389e:	e17b      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2100      	movs	r1, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fe ff4e 	bl	8002748 <LL_ADC_GetOffsetChannel>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10a      	bne.n	80038cc <HAL_ADC_ConfigChannel+0x15c>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2100      	movs	r1, #0
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fe ff43 	bl	8002748 <LL_ADC_GetOffsetChannel>
 80038c2:	4603      	mov	r3, r0
 80038c4:	0e9b      	lsrs	r3, r3, #26
 80038c6:	f003 021f 	and.w	r2, r3, #31
 80038ca:	e01e      	b.n	800390a <HAL_ADC_ConfigChannel+0x19a>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2100      	movs	r1, #0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fe ff38 	bl	8002748 <LL_ADC_GetOffsetChannel>
 80038d8:	4603      	mov	r3, r0
 80038da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80038fa:	2320      	movs	r3, #32
 80038fc:	e004      	b.n	8003908 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80038fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003902:	fab3 f383 	clz	r3, r3
 8003906:	b2db      	uxtb	r3, r3
 8003908:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003912:	2b00      	cmp	r3, #0
 8003914:	d105      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x1b2>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	0e9b      	lsrs	r3, r3, #26
 800391c:	f003 031f 	and.w	r3, r3, #31
 8003920:	e018      	b.n	8003954 <HAL_ADC_ConfigChannel+0x1e4>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800392e:	fa93 f3a3 	rbit	r3, r3
 8003932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800393a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800393e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003946:	2320      	movs	r3, #32
 8003948:	e004      	b.n	8003954 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800394a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800394e:	fab3 f383 	clz	r3, r3
 8003952:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003954:	429a      	cmp	r2, r3
 8003956:	d106      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2200      	movs	r2, #0
 800395e:	2100      	movs	r1, #0
 8003960:	4618      	mov	r0, r3
 8003962:	f7fe ff07 	bl	8002774 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2101      	movs	r1, #1
 800396c:	4618      	mov	r0, r3
 800396e:	f7fe feeb 	bl	8002748 <LL_ADC_GetOffsetChannel>
 8003972:	4603      	mov	r3, r0
 8003974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10a      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x222>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2101      	movs	r1, #1
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe fee0 	bl	8002748 <LL_ADC_GetOffsetChannel>
 8003988:	4603      	mov	r3, r0
 800398a:	0e9b      	lsrs	r3, r3, #26
 800398c:	f003 021f 	and.w	r2, r3, #31
 8003990:	e01e      	b.n	80039d0 <HAL_ADC_ConfigChannel+0x260>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2101      	movs	r1, #1
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe fed5 	bl	8002748 <LL_ADC_GetOffsetChannel>
 800399e:	4603      	mov	r3, r0
 80039a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80039a8:	fa93 f3a3 	rbit	r3, r3
 80039ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80039b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80039b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80039c0:	2320      	movs	r3, #32
 80039c2:	e004      	b.n	80039ce <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80039c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80039c8:	fab3 f383 	clz	r3, r3
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d105      	bne.n	80039e8 <HAL_ADC_ConfigChannel+0x278>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	0e9b      	lsrs	r3, r3, #26
 80039e2:	f003 031f 	and.w	r3, r3, #31
 80039e6:	e018      	b.n	8003a1a <HAL_ADC_ConfigChannel+0x2aa>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039f4:	fa93 f3a3 	rbit	r3, r3
 80039f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80039fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003a00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003a04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003a0c:	2320      	movs	r3, #32
 8003a0e:	e004      	b.n	8003a1a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003a10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a14:	fab3 f383 	clz	r3, r3
 8003a18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d106      	bne.n	8003a2c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2200      	movs	r2, #0
 8003a24:	2101      	movs	r1, #1
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe fea4 	bl	8002774 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2102      	movs	r1, #2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe fe88 	bl	8002748 <LL_ADC_GetOffsetChannel>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10a      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x2e8>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2102      	movs	r1, #2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fe fe7d 	bl	8002748 <LL_ADC_GetOffsetChannel>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	0e9b      	lsrs	r3, r3, #26
 8003a52:	f003 021f 	and.w	r2, r3, #31
 8003a56:	e01e      	b.n	8003a96 <HAL_ADC_ConfigChannel+0x326>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2102      	movs	r1, #2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe fe72 	bl	8002748 <LL_ADC_GetOffsetChannel>
 8003a64:	4603      	mov	r3, r0
 8003a66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a6e:	fa93 f3a3 	rbit	r3, r3
 8003a72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003a76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003a7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003a86:	2320      	movs	r3, #32
 8003a88:	e004      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003a8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a8e:	fab3 f383 	clz	r3, r3
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d105      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x33e>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	0e9b      	lsrs	r3, r3, #26
 8003aa8:	f003 031f 	and.w	r3, r3, #31
 8003aac:	e016      	b.n	8003adc <HAL_ADC_ConfigChannel+0x36c>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003aba:	fa93 f3a3 	rbit	r3, r3
 8003abe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003ac0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ac2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003ac6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003ace:	2320      	movs	r3, #32
 8003ad0:	e004      	b.n	8003adc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003ad2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ad6:	fab3 f383 	clz	r3, r3
 8003ada:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d106      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2102      	movs	r1, #2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fe fe43 	bl	8002774 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2103      	movs	r1, #3
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fe fe27 	bl	8002748 <LL_ADC_GetOffsetChannel>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10a      	bne.n	8003b1a <HAL_ADC_ConfigChannel+0x3aa>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2103      	movs	r1, #3
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fe fe1c 	bl	8002748 <LL_ADC_GetOffsetChannel>
 8003b10:	4603      	mov	r3, r0
 8003b12:	0e9b      	lsrs	r3, r3, #26
 8003b14:	f003 021f 	and.w	r2, r3, #31
 8003b18:	e017      	b.n	8003b4a <HAL_ADC_ConfigChannel+0x3da>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2103      	movs	r1, #3
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fe fe11 	bl	8002748 <LL_ADC_GetOffsetChannel>
 8003b26:	4603      	mov	r3, r0
 8003b28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b2c:	fa93 f3a3 	rbit	r3, r3
 8003b30:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003b32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b34:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003b36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003b3c:	2320      	movs	r3, #32
 8003b3e:	e003      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b42:	fab3 f383 	clz	r3, r3
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d105      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x3f2>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	0e9b      	lsrs	r3, r3, #26
 8003b5c:	f003 031f 	and.w	r3, r3, #31
 8003b60:	e011      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x416>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b6a:	fa93 f3a3 	rbit	r3, r3
 8003b6e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b72:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003b7a:	2320      	movs	r3, #32
 8003b7c:	e003      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b80:	fab3 f383 	clz	r3, r3
 8003b84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d106      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2103      	movs	r1, #3
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe fdee 	bl	8002774 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fe ff85 	bl	8002aac <LL_ADC_IsEnabled>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f040 813d 	bne.w	8003e24 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6818      	ldr	r0, [r3, #0]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	6819      	ldr	r1, [r3, #0]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f7fe febe 	bl	8002938 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	4aa2      	ldr	r2, [pc, #648]	; (8003e4c <HAL_ADC_ConfigChannel+0x6dc>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	f040 812e 	bne.w	8003e24 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10b      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x480>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	0e9b      	lsrs	r3, r3, #26
 8003bde:	3301      	adds	r3, #1
 8003be0:	f003 031f 	and.w	r3, r3, #31
 8003be4:	2b09      	cmp	r3, #9
 8003be6:	bf94      	ite	ls
 8003be8:	2301      	movls	r3, #1
 8003bea:	2300      	movhi	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	e019      	b.n	8003c24 <HAL_ADC_ConfigChannel+0x4b4>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bf8:	fa93 f3a3 	rbit	r3, r3
 8003bfc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c00:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003c08:	2320      	movs	r3, #32
 8003c0a:	e003      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003c0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c0e:	fab3 f383 	clz	r3, r3
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	3301      	adds	r3, #1
 8003c16:	f003 031f 	and.w	r3, r3, #31
 8003c1a:	2b09      	cmp	r3, #9
 8003c1c:	bf94      	ite	ls
 8003c1e:	2301      	movls	r3, #1
 8003c20:	2300      	movhi	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d079      	beq.n	8003d1c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d107      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x4d4>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	0e9b      	lsrs	r3, r3, #26
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	069b      	lsls	r3, r3, #26
 8003c3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c42:	e015      	b.n	8003c70 <HAL_ADC_ConfigChannel+0x500>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c4c:	fa93 f3a3 	rbit	r3, r3
 8003c50:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c54:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	e003      	b.n	8003c68 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c62:	fab3 f383 	clz	r3, r3
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	3301      	adds	r3, #1
 8003c6a:	069b      	lsls	r3, r3, #26
 8003c6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d109      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x520>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	0e9b      	lsrs	r3, r3, #26
 8003c82:	3301      	adds	r3, #1
 8003c84:	f003 031f 	and.w	r3, r3, #31
 8003c88:	2101      	movs	r1, #1
 8003c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8e:	e017      	b.n	8003cc0 <HAL_ADC_ConfigChannel+0x550>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c98:	fa93 f3a3 	rbit	r3, r3
 8003c9c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003ca8:	2320      	movs	r3, #32
 8003caa:	e003      	b.n	8003cb4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cae:	fab3 f383 	clz	r3, r3
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	2101      	movs	r1, #1
 8003cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc0:	ea42 0103 	orr.w	r1, r2, r3
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10a      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x576>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	0e9b      	lsrs	r3, r3, #26
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	f003 021f 	and.w	r2, r3, #31
 8003cdc:	4613      	mov	r3, r2
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	4413      	add	r3, r2
 8003ce2:	051b      	lsls	r3, r3, #20
 8003ce4:	e018      	b.n	8003d18 <HAL_ADC_ConfigChannel+0x5a8>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cee:	fa93 f3a3 	rbit	r3, r3
 8003cf2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003cfe:	2320      	movs	r3, #32
 8003d00:	e003      	b.n	8003d0a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d04:	fab3 f383 	clz	r3, r3
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	f003 021f 	and.w	r2, r3, #31
 8003d10:	4613      	mov	r3, r2
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	4413      	add	r3, r2
 8003d16:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	e07e      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d107      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x5c8>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	0e9b      	lsrs	r3, r3, #26
 8003d2e:	3301      	adds	r3, #1
 8003d30:	069b      	lsls	r3, r3, #26
 8003d32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d36:	e015      	b.n	8003d64 <HAL_ADC_ConfigChannel+0x5f4>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d40:	fa93 f3a3 	rbit	r3, r3
 8003d44:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d48:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003d50:	2320      	movs	r3, #32
 8003d52:	e003      	b.n	8003d5c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d56:	fab3 f383 	clz	r3, r3
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	069b      	lsls	r3, r3, #26
 8003d60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d109      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x614>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	0e9b      	lsrs	r3, r3, #26
 8003d76:	3301      	adds	r3, #1
 8003d78:	f003 031f 	and.w	r3, r3, #31
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d82:	e017      	b.n	8003db4 <HAL_ADC_ConfigChannel+0x644>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	fa93 f3a3 	rbit	r3, r3
 8003d90:	61fb      	str	r3, [r7, #28]
  return result;
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003d9c:	2320      	movs	r3, #32
 8003d9e:	e003      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	fab3 f383 	clz	r3, r3
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	3301      	adds	r3, #1
 8003daa:	f003 031f 	and.w	r3, r3, #31
 8003dae:	2101      	movs	r1, #1
 8003db0:	fa01 f303 	lsl.w	r3, r1, r3
 8003db4:	ea42 0103 	orr.w	r1, r2, r3
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10d      	bne.n	8003de0 <HAL_ADC_ConfigChannel+0x670>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	0e9b      	lsrs	r3, r3, #26
 8003dca:	3301      	adds	r3, #1
 8003dcc:	f003 021f 	and.w	r2, r3, #31
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	4413      	add	r3, r2
 8003dd6:	3b1e      	subs	r3, #30
 8003dd8:	051b      	lsls	r3, r3, #20
 8003dda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dde:	e01b      	b.n	8003e18 <HAL_ADC_ConfigChannel+0x6a8>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	fa93 f3a3 	rbit	r3, r3
 8003dec:	613b      	str	r3, [r7, #16]
  return result;
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003df8:	2320      	movs	r3, #32
 8003dfa:	e003      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	fab3 f383 	clz	r3, r3
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	3301      	adds	r3, #1
 8003e06:	f003 021f 	and.w	r2, r3, #31
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	4413      	add	r3, r2
 8003e10:	3b1e      	subs	r3, #30
 8003e12:	051b      	lsls	r3, r3, #20
 8003e14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	6892      	ldr	r2, [r2, #8]
 8003e1e:	4619      	mov	r1, r3
 8003e20:	f7fe fd5e 	bl	80028e0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <HAL_ADC_ConfigChannel+0x6e0>)
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80be 	beq.w	8003fae <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e3a:	d004      	beq.n	8003e46 <HAL_ADC_ConfigChannel+0x6d6>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a04      	ldr	r2, [pc, #16]	; (8003e54 <HAL_ADC_ConfigChannel+0x6e4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d10a      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x6ec>
 8003e46:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <HAL_ADC_ConfigChannel+0x6e8>)
 8003e48:	e009      	b.n	8003e5e <HAL_ADC_ConfigChannel+0x6ee>
 8003e4a:	bf00      	nop
 8003e4c:	407f0000 	.word	0x407f0000
 8003e50:	80080000 	.word	0x80080000
 8003e54:	50000100 	.word	0x50000100
 8003e58:	50000300 	.word	0x50000300
 8003e5c:	4b59      	ldr	r3, [pc, #356]	; (8003fc4 <HAL_ADC_ConfigChannel+0x854>)
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fe fc40 	bl	80026e4 <LL_ADC_GetCommonPathInternalCh>
 8003e64:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a56      	ldr	r2, [pc, #344]	; (8003fc8 <HAL_ADC_ConfigChannel+0x858>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d004      	beq.n	8003e7c <HAL_ADC_ConfigChannel+0x70c>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a55      	ldr	r2, [pc, #340]	; (8003fcc <HAL_ADC_ConfigChannel+0x85c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d13a      	bne.n	8003ef2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d134      	bne.n	8003ef2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e90:	d005      	beq.n	8003e9e <HAL_ADC_ConfigChannel+0x72e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a4e      	ldr	r2, [pc, #312]	; (8003fd0 <HAL_ADC_ConfigChannel+0x860>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	f040 8085 	bne.w	8003fa8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ea6:	d004      	beq.n	8003eb2 <HAL_ADC_ConfigChannel+0x742>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a49      	ldr	r2, [pc, #292]	; (8003fd4 <HAL_ADC_ConfigChannel+0x864>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d101      	bne.n	8003eb6 <HAL_ADC_ConfigChannel+0x746>
 8003eb2:	4a49      	ldr	r2, [pc, #292]	; (8003fd8 <HAL_ADC_ConfigChannel+0x868>)
 8003eb4:	e000      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x748>
 8003eb6:	4a43      	ldr	r2, [pc, #268]	; (8003fc4 <HAL_ADC_ConfigChannel+0x854>)
 8003eb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ebc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	f7fe fbfb 	bl	80026be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ec8:	4b44      	ldr	r3, [pc, #272]	; (8003fdc <HAL_ADC_ConfigChannel+0x86c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	099b      	lsrs	r3, r3, #6
 8003ece:	4a44      	ldr	r2, [pc, #272]	; (8003fe0 <HAL_ADC_ConfigChannel+0x870>)
 8003ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed4:	099b      	lsrs	r3, r3, #6
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	4613      	mov	r3, r2
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ee2:	e002      	b.n	8003eea <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f9      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ef0:	e05a      	b.n	8003fa8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a3b      	ldr	r2, [pc, #236]	; (8003fe4 <HAL_ADC_ConfigChannel+0x874>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d125      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x7d8>
 8003efc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d11f      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a31      	ldr	r2, [pc, #196]	; (8003fd4 <HAL_ADC_ConfigChannel+0x864>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d104      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x7ac>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a34      	ldr	r2, [pc, #208]	; (8003fe8 <HAL_ADC_ConfigChannel+0x878>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d047      	beq.n	8003fac <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f24:	d004      	beq.n	8003f30 <HAL_ADC_ConfigChannel+0x7c0>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a2a      	ldr	r2, [pc, #168]	; (8003fd4 <HAL_ADC_ConfigChannel+0x864>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d101      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x7c4>
 8003f30:	4a29      	ldr	r2, [pc, #164]	; (8003fd8 <HAL_ADC_ConfigChannel+0x868>)
 8003f32:	e000      	b.n	8003f36 <HAL_ADC_ConfigChannel+0x7c6>
 8003f34:	4a23      	ldr	r2, [pc, #140]	; (8003fc4 <HAL_ADC_ConfigChannel+0x854>)
 8003f36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4610      	mov	r0, r2
 8003f42:	f7fe fbbc 	bl	80026be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f46:	e031      	b.n	8003fac <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a27      	ldr	r2, [pc, #156]	; (8003fec <HAL_ADC_ConfigChannel+0x87c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d12d      	bne.n	8003fae <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d127      	bne.n	8003fae <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1c      	ldr	r2, [pc, #112]	; (8003fd4 <HAL_ADC_ConfigChannel+0x864>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d022      	beq.n	8003fae <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f70:	d004      	beq.n	8003f7c <HAL_ADC_ConfigChannel+0x80c>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a17      	ldr	r2, [pc, #92]	; (8003fd4 <HAL_ADC_ConfigChannel+0x864>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d101      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x810>
 8003f7c:	4a16      	ldr	r2, [pc, #88]	; (8003fd8 <HAL_ADC_ConfigChannel+0x868>)
 8003f7e:	e000      	b.n	8003f82 <HAL_ADC_ConfigChannel+0x812>
 8003f80:	4a10      	ldr	r2, [pc, #64]	; (8003fc4 <HAL_ADC_ConfigChannel+0x854>)
 8003f82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	f7fe fb96 	bl	80026be <LL_ADC_SetCommonPathInternalCh>
 8003f92:	e00c      	b.n	8003fae <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f98:	f043 0220 	orr.w	r2, r3, #32
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003fa6:	e002      	b.n	8003fae <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fa8:	bf00      	nop
 8003faa:	e000      	b.n	8003fae <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003fb6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	37d8      	adds	r7, #216	; 0xd8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	50000700 	.word	0x50000700
 8003fc8:	c3210000 	.word	0xc3210000
 8003fcc:	90c00010 	.word	0x90c00010
 8003fd0:	50000600 	.word	0x50000600
 8003fd4:	50000100 	.word	0x50000100
 8003fd8:	50000300 	.word	0x50000300
 8003fdc:	20000004 	.word	0x20000004
 8003fe0:	053e2d63 	.word	0x053e2d63
 8003fe4:	c7520000 	.word	0xc7520000
 8003fe8:	50000500 	.word	0x50000500
 8003fec:	cb840000 	.word	0xcb840000

08003ff0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fe fd55 	bl	8002aac <LL_ADC_IsEnabled>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d14d      	bne.n	80040a4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	4b28      	ldr	r3, [pc, #160]	; (80040b0 <ADC_Enable+0xc0>)
 8004010:	4013      	ands	r3, r2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00d      	beq.n	8004032 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401a:	f043 0210 	orr.w	r2, r3, #16
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004026:	f043 0201 	orr.w	r2, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e039      	b.n	80040a6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe fd10 	bl	8002a5c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800403c:	f7fe fab2 	bl	80025a4 <HAL_GetTick>
 8004040:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004042:	e028      	b.n	8004096 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f7fe fd2f 	bl	8002aac <LL_ADC_IsEnabled>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d104      	bne.n	800405e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f7fe fcff 	bl	8002a5c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800405e:	f7fe faa1 	bl	80025a4 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d914      	bls.n	8004096 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b01      	cmp	r3, #1
 8004078:	d00d      	beq.n	8004096 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407e:	f043 0210 	orr.w	r2, r3, #16
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408a:	f043 0201 	orr.w	r2, r3, #1
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e007      	b.n	80040a6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d1cf      	bne.n	8004044 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	8000003f 	.word	0x8000003f

080040b4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fe fd06 	bl	8002ad2 <LL_ADC_IsDisableOngoing>
 80040c6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fe fced 	bl	8002aac <LL_ADC_IsEnabled>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d047      	beq.n	8004168 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d144      	bne.n	8004168 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 030d 	and.w	r3, r3, #13
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d10c      	bne.n	8004106 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fe fcc7 	bl	8002a84 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2203      	movs	r2, #3
 80040fc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80040fe:	f7fe fa51 	bl	80025a4 <HAL_GetTick>
 8004102:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004104:	e029      	b.n	800415a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410a:	f043 0210 	orr.w	r2, r3, #16
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004116:	f043 0201 	orr.w	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e023      	b.n	800416a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004122:	f7fe fa3f 	bl	80025a4 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d914      	bls.n	800415a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00d      	beq.n	800415a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004142:	f043 0210 	orr.w	r2, r3, #16
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800414e:	f043 0201 	orr.w	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e007      	b.n	800416a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1dc      	bne.n	8004122 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004188:	2b00      	cmp	r3, #0
 800418a:	d14b      	bne.n	8004224 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004190:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d021      	beq.n	80041ea <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fe fb46 	bl	800283c <LL_ADC_REG_IsTriggerSourceSWStart>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d032      	beq.n	800421c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d12b      	bne.n	800421c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d11f      	bne.n	800421c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e0:	f043 0201 	orr.w	r2, r3, #1
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80041e8:	e018      	b.n	800421c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d111      	bne.n	800421c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004208:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d105      	bne.n	800421c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004214:	f043 0201 	orr.w	r2, r3, #1
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7ff fa7f 	bl	8003720 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004222:	e00e      	b.n	8004242 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f7ff fa93 	bl	800375c <HAL_ADC_ErrorCallback>
}
 8004236:	e004      	b.n	8004242 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	4798      	blx	r3
}
 8004242:	bf00      	nop
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b084      	sub	sp, #16
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004256:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f7ff fa6b 	bl	8003734 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800425e:	bf00      	nop
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b084      	sub	sp, #16
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004278:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004284:	f043 0204 	orr.w	r2, r3, #4
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f7ff fa65 	bl	800375c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004292:	bf00      	nop
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <LL_ADC_IsEnabled>:
{
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <LL_ADC_IsEnabled+0x18>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <LL_ADC_IsEnabled+0x1a>
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <LL_ADC_StartCalibration>:
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80042d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80042dc:	4313      	orrs	r3, r2
 80042de:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	609a      	str	r2, [r3, #8]
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <LL_ADC_IsCalibrationOnGoing>:
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004302:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004306:	d101      	bne.n	800430c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004308:	2301      	movs	r3, #1
 800430a:	e000      	b.n	800430e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <LL_ADC_REG_IsConversionOngoing>:
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	2b04      	cmp	r3, #4
 800432c:	d101      	bne.n	8004332 <LL_ADC_REG_IsConversionOngoing+0x18>
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800434a:	2300      	movs	r3, #0
 800434c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_ADCEx_Calibration_Start+0x1c>
 8004358:	2302      	movs	r3, #2
 800435a:	e04d      	b.n	80043f8 <HAL_ADCEx_Calibration_Start+0xb8>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7ff fea5 	bl	80040b4 <ADC_Disable>
 800436a:	4603      	mov	r3, r0
 800436c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800436e:	7bfb      	ldrb	r3, [r7, #15]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d136      	bne.n	80043e2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004378:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800437c:	f023 0302 	bic.w	r3, r3, #2
 8004380:	f043 0202 	orr.w	r2, r3, #2
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6839      	ldr	r1, [r7, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff ff96 	bl	80042c0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004394:	e014      	b.n	80043c0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	3301      	adds	r3, #1
 800439a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4a18      	ldr	r2, [pc, #96]	; (8004400 <HAL_ADCEx_Calibration_Start+0xc0>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d90d      	bls.n	80043c0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a8:	f023 0312 	bic.w	r3, r3, #18
 80043ac:	f043 0210 	orr.w	r2, r3, #16
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e01b      	b.n	80043f8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff ff94 	bl	80042f2 <LL_ADC_IsCalibrationOnGoing>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e2      	bne.n	8004396 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d4:	f023 0303 	bic.w	r3, r3, #3
 80043d8:	f043 0201 	orr.w	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	65da      	str	r2, [r3, #92]	; 0x5c
 80043e0:	e005      	b.n	80043ee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e6:	f043 0210 	orr.w	r2, r3, #16
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	0004de01 	.word	0x0004de01

08004404 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004468:	b590      	push	{r4, r7, lr}
 800446a:	b0a1      	sub	sp, #132	; 0x84
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004482:	2302      	movs	r3, #2
 8004484:	e0e7      	b.n	8004656 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800448e:	2300      	movs	r3, #0
 8004490:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004492:	2300      	movs	r3, #0
 8004494:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800449e:	d102      	bne.n	80044a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80044a0:	4b6f      	ldr	r3, [pc, #444]	; (8004660 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80044a2:	60bb      	str	r3, [r7, #8]
 80044a4:	e009      	b.n	80044ba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a6e      	ldr	r2, [pc, #440]	; (8004664 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d102      	bne.n	80044b6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80044b0:	4b6d      	ldr	r3, [pc, #436]	; (8004668 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80044b2:	60bb      	str	r3, [r7, #8]
 80044b4:	e001      	b.n	80044ba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80044b6:	2300      	movs	r3, #0
 80044b8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10b      	bne.n	80044d8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c4:	f043 0220 	orr.w	r2, r3, #32
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0be      	b.n	8004656 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff ff1d 	bl	800431a <LL_ADC_REG_IsConversionOngoing>
 80044e0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff ff17 	bl	800431a <LL_ADC_REG_IsConversionOngoing>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f040 80a0 	bne.w	8004634 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80044f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f040 809c 	bne.w	8004634 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004504:	d004      	beq.n	8004510 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a55      	ldr	r2, [pc, #340]	; (8004660 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d101      	bne.n	8004514 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004510:	4b56      	ldr	r3, [pc, #344]	; (800466c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004512:	e000      	b.n	8004516 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004514:	4b56      	ldr	r3, [pc, #344]	; (8004670 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004516:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d04b      	beq.n	80045b8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004520:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	6859      	ldr	r1, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004532:	035b      	lsls	r3, r3, #13
 8004534:	430b      	orrs	r3, r1
 8004536:	431a      	orrs	r2, r3
 8004538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800453a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004544:	d004      	beq.n	8004550 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a45      	ldr	r2, [pc, #276]	; (8004660 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d10f      	bne.n	8004570 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004550:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004554:	f7ff fea1 	bl	800429a <LL_ADC_IsEnabled>
 8004558:	4604      	mov	r4, r0
 800455a:	4841      	ldr	r0, [pc, #260]	; (8004660 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800455c:	f7ff fe9d 	bl	800429a <LL_ADC_IsEnabled>
 8004560:	4603      	mov	r3, r0
 8004562:	4323      	orrs	r3, r4
 8004564:	2b00      	cmp	r3, #0
 8004566:	bf0c      	ite	eq
 8004568:	2301      	moveq	r3, #1
 800456a:	2300      	movne	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	e012      	b.n	8004596 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004570:	483c      	ldr	r0, [pc, #240]	; (8004664 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004572:	f7ff fe92 	bl	800429a <LL_ADC_IsEnabled>
 8004576:	4604      	mov	r4, r0
 8004578:	483b      	ldr	r0, [pc, #236]	; (8004668 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800457a:	f7ff fe8e 	bl	800429a <LL_ADC_IsEnabled>
 800457e:	4603      	mov	r3, r0
 8004580:	431c      	orrs	r4, r3
 8004582:	483c      	ldr	r0, [pc, #240]	; (8004674 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004584:	f7ff fe89 	bl	800429a <LL_ADC_IsEnabled>
 8004588:	4603      	mov	r3, r0
 800458a:	4323      	orrs	r3, r4
 800458c:	2b00      	cmp	r3, #0
 800458e:	bf0c      	ite	eq
 8004590:	2301      	moveq	r3, #1
 8004592:	2300      	movne	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d056      	beq.n	8004648 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800459a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80045a2:	f023 030f 	bic.w	r3, r3, #15
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	6811      	ldr	r1, [r2, #0]
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	6892      	ldr	r2, [r2, #8]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	431a      	orrs	r2, r3
 80045b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045b4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045b6:	e047      	b.n	8004648 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80045b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045cc:	d004      	beq.n	80045d8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a23      	ldr	r2, [pc, #140]	; (8004660 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d10f      	bne.n	80045f8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80045d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80045dc:	f7ff fe5d 	bl	800429a <LL_ADC_IsEnabled>
 80045e0:	4604      	mov	r4, r0
 80045e2:	481f      	ldr	r0, [pc, #124]	; (8004660 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045e4:	f7ff fe59 	bl	800429a <LL_ADC_IsEnabled>
 80045e8:	4603      	mov	r3, r0
 80045ea:	4323      	orrs	r3, r4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bf0c      	ite	eq
 80045f0:	2301      	moveq	r3, #1
 80045f2:	2300      	movne	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	e012      	b.n	800461e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80045f8:	481a      	ldr	r0, [pc, #104]	; (8004664 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80045fa:	f7ff fe4e 	bl	800429a <LL_ADC_IsEnabled>
 80045fe:	4604      	mov	r4, r0
 8004600:	4819      	ldr	r0, [pc, #100]	; (8004668 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004602:	f7ff fe4a 	bl	800429a <LL_ADC_IsEnabled>
 8004606:	4603      	mov	r3, r0
 8004608:	431c      	orrs	r4, r3
 800460a:	481a      	ldr	r0, [pc, #104]	; (8004674 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800460c:	f7ff fe45 	bl	800429a <LL_ADC_IsEnabled>
 8004610:	4603      	mov	r3, r0
 8004612:	4323      	orrs	r3, r4
 8004614:	2b00      	cmp	r3, #0
 8004616:	bf0c      	ite	eq
 8004618:	2301      	moveq	r3, #1
 800461a:	2300      	movne	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d012      	beq.n	8004648 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800462a:	f023 030f 	bic.w	r3, r3, #15
 800462e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004630:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004632:	e009      	b.n	8004648 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004638:	f043 0220 	orr.w	r2, r3, #32
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004646:	e000      	b.n	800464a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004648:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004652:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004656:	4618      	mov	r0, r3
 8004658:	3784      	adds	r7, #132	; 0x84
 800465a:	46bd      	mov	sp, r7
 800465c:	bd90      	pop	{r4, r7, pc}
 800465e:	bf00      	nop
 8004660:	50000100 	.word	0x50000100
 8004664:	50000400 	.word	0x50000400
 8004668:	50000500 	.word	0x50000500
 800466c:	50000300 	.word	0x50000300
 8004670:	50000700 	.word	0x50000700
 8004674:	50000600 	.word	0x50000600

08004678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004688:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <__NVIC_SetPriorityGrouping+0x44>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004694:	4013      	ands	r3, r2
 8004696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046aa:	4a04      	ldr	r2, [pc, #16]	; (80046bc <__NVIC_SetPriorityGrouping+0x44>)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	60d3      	str	r3, [r2, #12]
}
 80046b0:	bf00      	nop
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	e000ed00 	.word	0xe000ed00

080046c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046c4:	4b04      	ldr	r3, [pc, #16]	; (80046d8 <__NVIC_GetPriorityGrouping+0x18>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	0a1b      	lsrs	r3, r3, #8
 80046ca:	f003 0307 	and.w	r3, r3, #7
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	e000ed00 	.word	0xe000ed00

080046dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	db0b      	blt.n	8004706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046ee:	79fb      	ldrb	r3, [r7, #7]
 80046f0:	f003 021f 	and.w	r2, r3, #31
 80046f4:	4907      	ldr	r1, [pc, #28]	; (8004714 <__NVIC_EnableIRQ+0x38>)
 80046f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046fa:	095b      	lsrs	r3, r3, #5
 80046fc:	2001      	movs	r0, #1
 80046fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	e000e100 	.word	0xe000e100

08004718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	4603      	mov	r3, r0
 8004720:	6039      	str	r1, [r7, #0]
 8004722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004728:	2b00      	cmp	r3, #0
 800472a:	db0a      	blt.n	8004742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	b2da      	uxtb	r2, r3
 8004730:	490c      	ldr	r1, [pc, #48]	; (8004764 <__NVIC_SetPriority+0x4c>)
 8004732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004736:	0112      	lsls	r2, r2, #4
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	440b      	add	r3, r1
 800473c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004740:	e00a      	b.n	8004758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	b2da      	uxtb	r2, r3
 8004746:	4908      	ldr	r1, [pc, #32]	; (8004768 <__NVIC_SetPriority+0x50>)
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	f003 030f 	and.w	r3, r3, #15
 800474e:	3b04      	subs	r3, #4
 8004750:	0112      	lsls	r2, r2, #4
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	440b      	add	r3, r1
 8004756:	761a      	strb	r2, [r3, #24]
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	e000e100 	.word	0xe000e100
 8004768:	e000ed00 	.word	0xe000ed00

0800476c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800476c:	b480      	push	{r7}
 800476e:	b089      	sub	sp, #36	; 0x24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f1c3 0307 	rsb	r3, r3, #7
 8004786:	2b04      	cmp	r3, #4
 8004788:	bf28      	it	cs
 800478a:	2304      	movcs	r3, #4
 800478c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	3304      	adds	r3, #4
 8004792:	2b06      	cmp	r3, #6
 8004794:	d902      	bls.n	800479c <NVIC_EncodePriority+0x30>
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	3b03      	subs	r3, #3
 800479a:	e000      	b.n	800479e <NVIC_EncodePriority+0x32>
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047a0:	f04f 32ff 	mov.w	r2, #4294967295
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	43da      	mvns	r2, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	401a      	ands	r2, r3
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047b4:	f04f 31ff 	mov.w	r1, #4294967295
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	fa01 f303 	lsl.w	r3, r1, r3
 80047be:	43d9      	mvns	r1, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047c4:	4313      	orrs	r3, r2
         );
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3724      	adds	r7, #36	; 0x24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
	...

080047d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3b01      	subs	r3, #1
 80047e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047e4:	d301      	bcc.n	80047ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047e6:	2301      	movs	r3, #1
 80047e8:	e00f      	b.n	800480a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047ea:	4a0a      	ldr	r2, [pc, #40]	; (8004814 <SysTick_Config+0x40>)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047f2:	210f      	movs	r1, #15
 80047f4:	f04f 30ff 	mov.w	r0, #4294967295
 80047f8:	f7ff ff8e 	bl	8004718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047fc:	4b05      	ldr	r3, [pc, #20]	; (8004814 <SysTick_Config+0x40>)
 80047fe:	2200      	movs	r2, #0
 8004800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004802:	4b04      	ldr	r3, [pc, #16]	; (8004814 <SysTick_Config+0x40>)
 8004804:	2207      	movs	r2, #7
 8004806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	e000e010 	.word	0xe000e010

08004818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7ff ff29 	bl	8004678 <__NVIC_SetPriorityGrouping>
}
 8004826:	bf00      	nop
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b086      	sub	sp, #24
 8004832:	af00      	add	r7, sp, #0
 8004834:	4603      	mov	r3, r0
 8004836:	60b9      	str	r1, [r7, #8]
 8004838:	607a      	str	r2, [r7, #4]
 800483a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800483c:	f7ff ff40 	bl	80046c0 <__NVIC_GetPriorityGrouping>
 8004840:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	68b9      	ldr	r1, [r7, #8]
 8004846:	6978      	ldr	r0, [r7, #20]
 8004848:	f7ff ff90 	bl	800476c <NVIC_EncodePriority>
 800484c:	4602      	mov	r2, r0
 800484e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004852:	4611      	mov	r1, r2
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff ff5f 	bl	8004718 <__NVIC_SetPriority>
}
 800485a:	bf00      	nop
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b082      	sub	sp, #8
 8004866:	af00      	add	r7, sp, #0
 8004868:	4603      	mov	r3, r0
 800486a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800486c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff ff33 	bl	80046dc <__NVIC_EnableIRQ>
}
 8004876:	bf00      	nop
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b082      	sub	sp, #8
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff ffa4 	bl	80047d4 <SysTick_Config>
 800488c:	4603      	mov	r3, r0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
	...

08004898 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e08d      	b.n	80049c6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	4b47      	ldr	r3, [pc, #284]	; (80049d0 <HAL_DMA_Init+0x138>)
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d80f      	bhi.n	80048d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	4b45      	ldr	r3, [pc, #276]	; (80049d4 <HAL_DMA_Init+0x13c>)
 80048be:	4413      	add	r3, r2
 80048c0:	4a45      	ldr	r2, [pc, #276]	; (80049d8 <HAL_DMA_Init+0x140>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	091b      	lsrs	r3, r3, #4
 80048c8:	009a      	lsls	r2, r3, #2
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a42      	ldr	r2, [pc, #264]	; (80049dc <HAL_DMA_Init+0x144>)
 80048d2:	641a      	str	r2, [r3, #64]	; 0x40
 80048d4:	e00e      	b.n	80048f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	4b40      	ldr	r3, [pc, #256]	; (80049e0 <HAL_DMA_Init+0x148>)
 80048de:	4413      	add	r3, r2
 80048e0:	4a3d      	ldr	r2, [pc, #244]	; (80049d8 <HAL_DMA_Init+0x140>)
 80048e2:	fba2 2303 	umull	r2, r3, r2, r3
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	009a      	lsls	r2, r3, #2
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a3c      	ldr	r2, [pc, #240]	; (80049e4 <HAL_DMA_Init+0x14c>)
 80048f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800490a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004918:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004924:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004930:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f9b6 	bl	8004cb8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004954:	d102      	bne.n	800495c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004964:	b2d2      	uxtb	r2, r2
 8004966:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004970:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d010      	beq.n	800499c <HAL_DMA_Init+0x104>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b04      	cmp	r3, #4
 8004980:	d80c      	bhi.n	800499c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f9d6 	bl	8004d34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004998:	605a      	str	r2, [r3, #4]
 800499a:	e008      	b.n	80049ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40020407 	.word	0x40020407
 80049d4:	bffdfff8 	.word	0xbffdfff8
 80049d8:	cccccccd 	.word	0xcccccccd
 80049dc:	40020000 	.word	0x40020000
 80049e0:	bffdfbf8 	.word	0xbffdfbf8
 80049e4:	40020400 	.word	0x40020400

080049e8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <HAL_DMA_Start_IT+0x20>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e066      	b.n	8004ad6 <HAL_DMA_Start_IT+0xee>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d155      	bne.n	8004ac8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0201 	bic.w	r2, r2, #1
 8004a38:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	68b9      	ldr	r1, [r7, #8]
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 f8fb 	bl	8004c3c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d008      	beq.n	8004a60 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 020e 	orr.w	r2, r2, #14
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	e00f      	b.n	8004a80 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0204 	bic.w	r2, r2, #4
 8004a6e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 020a 	orr.w	r2, r2, #10
 8004a7e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d007      	beq.n	8004a9e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a9c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d007      	beq.n	8004ab6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ab4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f042 0201 	orr.w	r2, r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	e005      	b.n	8004ad4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3718      	adds	r7, #24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b084      	sub	sp, #16
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	2204      	movs	r2, #4
 8004b00:	409a      	lsls	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d026      	beq.n	8004b58 <HAL_DMA_IRQHandler+0x7a>
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d021      	beq.n	8004b58 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d107      	bne.n	8004b32 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0204 	bic.w	r2, r2, #4
 8004b30:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b36:	f003 021f 	and.w	r2, r3, #31
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	2104      	movs	r1, #4
 8004b40:	fa01 f202 	lsl.w	r2, r1, r2
 8004b44:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d071      	beq.n	8004c32 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004b56:	e06c      	b.n	8004c32 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5c:	f003 031f 	and.w	r3, r3, #31
 8004b60:	2202      	movs	r2, #2
 8004b62:	409a      	lsls	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4013      	ands	r3, r2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d02e      	beq.n	8004bca <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d029      	beq.n	8004bca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10b      	bne.n	8004b9c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 020a 	bic.w	r2, r2, #10
 8004b92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba0:	f003 021f 	and.w	r2, r3, #31
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	2102      	movs	r1, #2
 8004baa:	fa01 f202 	lsl.w	r2, r1, r2
 8004bae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d038      	beq.n	8004c32 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004bc8:	e033      	b.n	8004c32 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bce:	f003 031f 	and.w	r3, r3, #31
 8004bd2:	2208      	movs	r2, #8
 8004bd4:	409a      	lsls	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d02a      	beq.n	8004c34 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d025      	beq.n	8004c34 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 020e 	bic.w	r2, r2, #14
 8004bf6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfc:	f003 021f 	and.w	r2, r3, #31
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	2101      	movs	r1, #1
 8004c06:	fa01 f202 	lsl.w	r2, r1, r2
 8004c0a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d004      	beq.n	8004c34 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004c32:	bf00      	nop
 8004c34:	bf00      	nop
}
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c52:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d004      	beq.n	8004c66 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c64:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6a:	f003 021f 	and.w	r2, r3, #31
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	2101      	movs	r1, #1
 8004c74:	fa01 f202 	lsl.w	r2, r1, r2
 8004c78:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	2b10      	cmp	r3, #16
 8004c88:	d108      	bne.n	8004c9c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c9a:	e007      	b.n	8004cac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	60da      	str	r2, [r3, #12]
}
 8004cac:	bf00      	nop
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	4b16      	ldr	r3, [pc, #88]	; (8004d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d802      	bhi.n	8004cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004ccc:	4b15      	ldr	r3, [pc, #84]	; (8004d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	e001      	b.n	8004cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004cd2:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004cd4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	3b08      	subs	r3, #8
 8004ce2:	4a12      	ldr	r2, [pc, #72]	; (8004d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce8:	091b      	lsrs	r3, r3, #4
 8004cea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf0:	089b      	lsrs	r3, r3, #2
 8004cf2:	009a      	lsls	r2, r3, #2
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a0b      	ldr	r2, [pc, #44]	; (8004d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004d02:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f003 031f 	and.w	r3, r3, #31
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	409a      	lsls	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d12:	bf00      	nop
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40020407 	.word	0x40020407
 8004d24:	40020800 	.word	0x40020800
 8004d28:	40020820 	.word	0x40020820
 8004d2c:	cccccccd 	.word	0xcccccccd
 8004d30:	40020880 	.word	0x40020880

08004d34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a08      	ldr	r2, [pc, #32]	; (8004d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004d56:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	f003 031f 	and.w	r3, r3, #31
 8004d60:	2201      	movs	r2, #1
 8004d62:	409a      	lsls	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004d68:	bf00      	nop
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	1000823f 	.word	0x1000823f
 8004d78:	40020940 	.word	0x40020940

08004d7c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e147      	b.n	800501e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d106      	bne.n	8004da8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7fd f9ee 	bl	8002184 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699a      	ldr	r2, [r3, #24]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0210 	bic.w	r2, r2, #16
 8004db6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004db8:	f7fd fbf4 	bl	80025a4 <HAL_GetTick>
 8004dbc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004dbe:	e012      	b.n	8004de6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004dc0:	f7fd fbf0 	bl	80025a4 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b0a      	cmp	r3, #10
 8004dcc:	d90b      	bls.n	8004de6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd2:	f043 0201 	orr.w	r2, r3, #1
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2203      	movs	r2, #3
 8004dde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e11b      	b.n	800501e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	f003 0308 	and.w	r3, r3, #8
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d0e5      	beq.n	8004dc0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699a      	ldr	r2, [r3, #24]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 0201 	orr.w	r2, r2, #1
 8004e02:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e04:	f7fd fbce 	bl	80025a4 <HAL_GetTick>
 8004e08:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004e0a:	e012      	b.n	8004e32 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004e0c:	f7fd fbca 	bl	80025a4 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b0a      	cmp	r3, #10
 8004e18:	d90b      	bls.n	8004e32 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e1e:	f043 0201 	orr.w	r2, r3, #1
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2203      	movs	r2, #3
 8004e2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e0f5      	b.n	800501e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0e5      	beq.n	8004e0c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699a      	ldr	r2, [r3, #24]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f042 0202 	orr.w	r2, r2, #2
 8004e4e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a74      	ldr	r2, [pc, #464]	; (8005028 <HAL_FDCAN_Init+0x2ac>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d103      	bne.n	8004e62 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004e5a:	4a74      	ldr	r2, [pc, #464]	; (800502c <HAL_FDCAN_Init+0x2b0>)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	7c1b      	ldrb	r3, [r3, #16]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d108      	bne.n	8004e7c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	699a      	ldr	r2, [r3, #24]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e78:	619a      	str	r2, [r3, #24]
 8004e7a:	e007      	b.n	8004e8c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699a      	ldr	r2, [r3, #24]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e8a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	7c5b      	ldrb	r3, [r3, #17]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d108      	bne.n	8004ea6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699a      	ldr	r2, [r3, #24]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ea2:	619a      	str	r2, [r3, #24]
 8004ea4:	e007      	b.n	8004eb6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	699a      	ldr	r2, [r3, #24]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004eb4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	7c9b      	ldrb	r3, [r3, #18]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d108      	bne.n	8004ed0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	699a      	ldr	r2, [r3, #24]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ecc:	619a      	str	r2, [r3, #24]
 8004ece:	e007      	b.n	8004ee0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699a      	ldr	r2, [r3, #24]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ede:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	699a      	ldr	r2, [r3, #24]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004f04:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0210 	bic.w	r2, r2, #16
 8004f14:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d108      	bne.n	8004f30 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	699a      	ldr	r2, [r3, #24]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0204 	orr.w	r2, r2, #4
 8004f2c:	619a      	str	r2, [r3, #24]
 8004f2e:	e02c      	b.n	8004f8a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d028      	beq.n	8004f8a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d01c      	beq.n	8004f7a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f4e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	691a      	ldr	r2, [r3, #16]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0210 	orr.w	r2, r2, #16
 8004f5e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	2b03      	cmp	r3, #3
 8004f66:	d110      	bne.n	8004f8a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699a      	ldr	r2, [r3, #24]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 0220 	orr.w	r2, r2, #32
 8004f76:	619a      	str	r2, [r3, #24]
 8004f78:	e007      	b.n	8004f8a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	699a      	ldr	r2, [r3, #24]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f042 0220 	orr.w	r2, r2, #32
 8004f88:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f9a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004fa2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004fb2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004fb4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fbe:	d115      	bne.n	8004fec <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004fce:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004fd8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004fe8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004fea:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f814 	bl	8005030 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	40006400 	.word	0x40006400
 800502c:	40006500 	.word	0x40006500

08005030 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005038:	4b30      	ldr	r3, [pc, #192]	; (80050fc <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800503a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a2f      	ldr	r2, [pc, #188]	; (8005100 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d103      	bne.n	800504e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800504c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a2c      	ldr	r2, [pc, #176]	; (8005104 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d103      	bne.n	8005060 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800505e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800506e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005076:	041a      	lsls	r2, r3, #16
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	430a      	orrs	r2, r1
 800507e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005094:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	061a      	lsls	r2, r3, #24
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	e005      	b.n	80050e2 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	3304      	adds	r3, #4
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d3f3      	bcc.n	80050d6 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80050ee:	bf00      	nop
 80050f0:	bf00      	nop
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	4000a400 	.word	0x4000a400
 8005100:	40006800 	.word	0x40006800
 8005104:	40006c00 	.word	0x40006c00

08005108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005112:	2300      	movs	r3, #0
 8005114:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005116:	e15a      	b.n	80053ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	2101      	movs	r1, #1
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	fa01 f303 	lsl.w	r3, r1, r3
 8005124:	4013      	ands	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 814c 	beq.w	80053c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f003 0303 	and.w	r3, r3, #3
 8005138:	2b01      	cmp	r3, #1
 800513a:	d005      	beq.n	8005148 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005144:	2b02      	cmp	r3, #2
 8005146:	d130      	bne.n	80051aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	2203      	movs	r2, #3
 8005154:	fa02 f303 	lsl.w	r3, r2, r3
 8005158:	43db      	mvns	r3, r3
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	4013      	ands	r3, r2
 800515e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	fa02 f303 	lsl.w	r3, r2, r3
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800517e:	2201      	movs	r2, #1
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	fa02 f303 	lsl.w	r3, r2, r3
 8005186:	43db      	mvns	r3, r3
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4013      	ands	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	091b      	lsrs	r3, r3, #4
 8005194:	f003 0201 	and.w	r2, r3, #1
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	fa02 f303 	lsl.w	r3, r2, r3
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f003 0303 	and.w	r3, r3, #3
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d017      	beq.n	80051e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	2203      	movs	r2, #3
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	43db      	mvns	r3, r3
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4013      	ands	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	fa02 f303 	lsl.w	r3, r2, r3
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d123      	bne.n	800523a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	08da      	lsrs	r2, r3, #3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	3208      	adds	r2, #8
 80051fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	220f      	movs	r2, #15
 800520a:	fa02 f303 	lsl.w	r3, r2, r3
 800520e:	43db      	mvns	r3, r3
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	4013      	ands	r3, r2
 8005214:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	691a      	ldr	r2, [r3, #16]
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	fa02 f303 	lsl.w	r3, r2, r3
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	4313      	orrs	r3, r2
 800522a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	08da      	lsrs	r2, r3, #3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3208      	adds	r2, #8
 8005234:	6939      	ldr	r1, [r7, #16]
 8005236:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	2203      	movs	r2, #3
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	43db      	mvns	r3, r3
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	4013      	ands	r3, r2
 8005250:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f003 0203 	and.w	r2, r3, #3
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	fa02 f303 	lsl.w	r3, r2, r3
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 80a6 	beq.w	80053c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800527c:	4b5b      	ldr	r3, [pc, #364]	; (80053ec <HAL_GPIO_Init+0x2e4>)
 800527e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005280:	4a5a      	ldr	r2, [pc, #360]	; (80053ec <HAL_GPIO_Init+0x2e4>)
 8005282:	f043 0301 	orr.w	r3, r3, #1
 8005286:	6613      	str	r3, [r2, #96]	; 0x60
 8005288:	4b58      	ldr	r3, [pc, #352]	; (80053ec <HAL_GPIO_Init+0x2e4>)
 800528a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	60bb      	str	r3, [r7, #8]
 8005292:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005294:	4a56      	ldr	r2, [pc, #344]	; (80053f0 <HAL_GPIO_Init+0x2e8>)
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	089b      	lsrs	r3, r3, #2
 800529a:	3302      	adds	r3, #2
 800529c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f003 0303 	and.w	r3, r3, #3
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	220f      	movs	r2, #15
 80052ac:	fa02 f303 	lsl.w	r3, r2, r3
 80052b0:	43db      	mvns	r3, r3
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	4013      	ands	r3, r2
 80052b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80052be:	d01f      	beq.n	8005300 <HAL_GPIO_Init+0x1f8>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a4c      	ldr	r2, [pc, #304]	; (80053f4 <HAL_GPIO_Init+0x2ec>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d019      	beq.n	80052fc <HAL_GPIO_Init+0x1f4>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a4b      	ldr	r2, [pc, #300]	; (80053f8 <HAL_GPIO_Init+0x2f0>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d013      	beq.n	80052f8 <HAL_GPIO_Init+0x1f0>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a4a      	ldr	r2, [pc, #296]	; (80053fc <HAL_GPIO_Init+0x2f4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00d      	beq.n	80052f4 <HAL_GPIO_Init+0x1ec>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a49      	ldr	r2, [pc, #292]	; (8005400 <HAL_GPIO_Init+0x2f8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d007      	beq.n	80052f0 <HAL_GPIO_Init+0x1e8>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a48      	ldr	r2, [pc, #288]	; (8005404 <HAL_GPIO_Init+0x2fc>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d101      	bne.n	80052ec <HAL_GPIO_Init+0x1e4>
 80052e8:	2305      	movs	r3, #5
 80052ea:	e00a      	b.n	8005302 <HAL_GPIO_Init+0x1fa>
 80052ec:	2306      	movs	r3, #6
 80052ee:	e008      	b.n	8005302 <HAL_GPIO_Init+0x1fa>
 80052f0:	2304      	movs	r3, #4
 80052f2:	e006      	b.n	8005302 <HAL_GPIO_Init+0x1fa>
 80052f4:	2303      	movs	r3, #3
 80052f6:	e004      	b.n	8005302 <HAL_GPIO_Init+0x1fa>
 80052f8:	2302      	movs	r3, #2
 80052fa:	e002      	b.n	8005302 <HAL_GPIO_Init+0x1fa>
 80052fc:	2301      	movs	r3, #1
 80052fe:	e000      	b.n	8005302 <HAL_GPIO_Init+0x1fa>
 8005300:	2300      	movs	r3, #0
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	f002 0203 	and.w	r2, r2, #3
 8005308:	0092      	lsls	r2, r2, #2
 800530a:	4093      	lsls	r3, r2
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005312:	4937      	ldr	r1, [pc, #220]	; (80053f0 <HAL_GPIO_Init+0x2e8>)
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	089b      	lsrs	r3, r3, #2
 8005318:	3302      	adds	r3, #2
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005320:	4b39      	ldr	r3, [pc, #228]	; (8005408 <HAL_GPIO_Init+0x300>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	43db      	mvns	r3, r3
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	4013      	ands	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005344:	4a30      	ldr	r2, [pc, #192]	; (8005408 <HAL_GPIO_Init+0x300>)
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800534a:	4b2f      	ldr	r3, [pc, #188]	; (8005408 <HAL_GPIO_Init+0x300>)
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	43db      	mvns	r3, r3
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	4013      	ands	r3, r2
 8005358:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4313      	orrs	r3, r2
 800536c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800536e:	4a26      	ldr	r2, [pc, #152]	; (8005408 <HAL_GPIO_Init+0x300>)
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005374:	4b24      	ldr	r3, [pc, #144]	; (8005408 <HAL_GPIO_Init+0x300>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	43db      	mvns	r3, r3
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	4013      	ands	r3, r2
 8005382:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005398:	4a1b      	ldr	r2, [pc, #108]	; (8005408 <HAL_GPIO_Init+0x300>)
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800539e:	4b1a      	ldr	r3, [pc, #104]	; (8005408 <HAL_GPIO_Init+0x300>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	43db      	mvns	r3, r3
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	4013      	ands	r3, r2
 80053ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80053c2:	4a11      	ldr	r2, [pc, #68]	; (8005408 <HAL_GPIO_Init+0x300>)
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	3301      	adds	r3, #1
 80053cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	fa22 f303 	lsr.w	r3, r2, r3
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f47f ae9d 	bne.w	8005118 <HAL_GPIO_Init+0x10>
  }
}
 80053de:	bf00      	nop
 80053e0:	bf00      	nop
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	40021000 	.word	0x40021000
 80053f0:	40010000 	.word	0x40010000
 80053f4:	48000400 	.word	0x48000400
 80053f8:	48000800 	.word	0x48000800
 80053fc:	48000c00 	.word	0x48000c00
 8005400:	48001000 	.word	0x48001000
 8005404:	48001400 	.word	0x48001400
 8005408:	40010400 	.word	0x40010400

0800540c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	460b      	mov	r3, r1
 8005416:	807b      	strh	r3, [r7, #2]
 8005418:	4613      	mov	r3, r2
 800541a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800541c:	787b      	ldrb	r3, [r7, #1]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005422:	887a      	ldrh	r2, [r7, #2]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005428:	e002      	b.n	8005430 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800542a:	887a      	ldrh	r2, [r7, #2]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800544e:	887a      	ldrh	r2, [r7, #2]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4013      	ands	r3, r2
 8005454:	041a      	lsls	r2, r3, #16
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	43d9      	mvns	r1, r3
 800545a:	887b      	ldrh	r3, [r7, #2]
 800545c:	400b      	ands	r3, r1
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	619a      	str	r2, [r3, #24]
}
 8005464:	bf00      	nop
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d141      	bne.n	8005502 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800547e:	4b4b      	ldr	r3, [pc, #300]	; (80055ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548a:	d131      	bne.n	80054f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800548c:	4b47      	ldr	r3, [pc, #284]	; (80055ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800548e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005492:	4a46      	ldr	r2, [pc, #280]	; (80055ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005498:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800549c:	4b43      	ldr	r3, [pc, #268]	; (80055ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80054a4:	4a41      	ldr	r2, [pc, #260]	; (80055ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054ac:	4b40      	ldr	r3, [pc, #256]	; (80055b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2232      	movs	r2, #50	; 0x32
 80054b2:	fb02 f303 	mul.w	r3, r2, r3
 80054b6:	4a3f      	ldr	r2, [pc, #252]	; (80055b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80054b8:	fba2 2303 	umull	r2, r3, r2, r3
 80054bc:	0c9b      	lsrs	r3, r3, #18
 80054be:	3301      	adds	r3, #1
 80054c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054c2:	e002      	b.n	80054ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054ca:	4b38      	ldr	r3, [pc, #224]	; (80055ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d6:	d102      	bne.n	80054de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1f2      	bne.n	80054c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054de:	4b33      	ldr	r3, [pc, #204]	; (80055ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ea:	d158      	bne.n	800559e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e057      	b.n	80055a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054f0:	4b2e      	ldr	r3, [pc, #184]	; (80055ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f6:	4a2d      	ldr	r2, [pc, #180]	; (80055ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005500:	e04d      	b.n	800559e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005508:	d141      	bne.n	800558e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800550a:	4b28      	ldr	r3, [pc, #160]	; (80055ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005516:	d131      	bne.n	800557c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005518:	4b24      	ldr	r3, [pc, #144]	; (80055ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800551a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800551e:	4a23      	ldr	r2, [pc, #140]	; (80055ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005524:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005528:	4b20      	ldr	r3, [pc, #128]	; (80055ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005530:	4a1e      	ldr	r2, [pc, #120]	; (80055ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005536:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005538:	4b1d      	ldr	r3, [pc, #116]	; (80055b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2232      	movs	r2, #50	; 0x32
 800553e:	fb02 f303 	mul.w	r3, r2, r3
 8005542:	4a1c      	ldr	r2, [pc, #112]	; (80055b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005544:	fba2 2303 	umull	r2, r3, r2, r3
 8005548:	0c9b      	lsrs	r3, r3, #18
 800554a:	3301      	adds	r3, #1
 800554c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800554e:	e002      	b.n	8005556 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3b01      	subs	r3, #1
 8005554:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005556:	4b15      	ldr	r3, [pc, #84]	; (80055ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800555e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005562:	d102      	bne.n	800556a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f2      	bne.n	8005550 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800556a:	4b10      	ldr	r3, [pc, #64]	; (80055ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005576:	d112      	bne.n	800559e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e011      	b.n	80055a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800557c:	4b0b      	ldr	r3, [pc, #44]	; (80055ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800557e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005582:	4a0a      	ldr	r2, [pc, #40]	; (80055ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005588:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800558c:	e007      	b.n	800559e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800558e:	4b07      	ldr	r3, [pc, #28]	; (80055ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005596:	4a05      	ldr	r2, [pc, #20]	; (80055ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005598:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800559c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	40007000 	.word	0x40007000
 80055b0:	20000004 	.word	0x20000004
 80055b4:	431bde83 	.word	0x431bde83

080055b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80055b8:	b480      	push	{r7}
 80055ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80055bc:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	4a04      	ldr	r2, [pc, #16]	; (80055d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80055c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055c6:	6093      	str	r3, [r2, #8]
}
 80055c8:	bf00      	nop
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	40007000 	.word	0x40007000

080055d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b088      	sub	sp, #32
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e306      	b.n	8005bf8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d075      	beq.n	80056e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055f6:	4b97      	ldr	r3, [pc, #604]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 030c 	and.w	r3, r3, #12
 80055fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005600:	4b94      	ldr	r3, [pc, #592]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f003 0303 	and.w	r3, r3, #3
 8005608:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	2b0c      	cmp	r3, #12
 800560e:	d102      	bne.n	8005616 <HAL_RCC_OscConfig+0x3e>
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	2b03      	cmp	r3, #3
 8005614:	d002      	beq.n	800561c <HAL_RCC_OscConfig+0x44>
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	2b08      	cmp	r3, #8
 800561a:	d10b      	bne.n	8005634 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800561c:	4b8d      	ldr	r3, [pc, #564]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d05b      	beq.n	80056e0 <HAL_RCC_OscConfig+0x108>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d157      	bne.n	80056e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e2e1      	b.n	8005bf8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800563c:	d106      	bne.n	800564c <HAL_RCC_OscConfig+0x74>
 800563e:	4b85      	ldr	r3, [pc, #532]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a84      	ldr	r2, [pc, #528]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 8005644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005648:	6013      	str	r3, [r2, #0]
 800564a:	e01d      	b.n	8005688 <HAL_RCC_OscConfig+0xb0>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005654:	d10c      	bne.n	8005670 <HAL_RCC_OscConfig+0x98>
 8005656:	4b7f      	ldr	r3, [pc, #508]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a7e      	ldr	r2, [pc, #504]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 800565c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	4b7c      	ldr	r3, [pc, #496]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a7b      	ldr	r2, [pc, #492]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 8005668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	e00b      	b.n	8005688 <HAL_RCC_OscConfig+0xb0>
 8005670:	4b78      	ldr	r3, [pc, #480]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a77      	ldr	r2, [pc, #476]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 8005676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800567a:	6013      	str	r3, [r2, #0]
 800567c:	4b75      	ldr	r3, [pc, #468]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a74      	ldr	r2, [pc, #464]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 8005682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d013      	beq.n	80056b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005690:	f7fc ff88 	bl	80025a4 <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005698:	f7fc ff84 	bl	80025a4 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b64      	cmp	r3, #100	; 0x64
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e2a6      	b.n	8005bf8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056aa:	4b6a      	ldr	r3, [pc, #424]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0f0      	beq.n	8005698 <HAL_RCC_OscConfig+0xc0>
 80056b6:	e014      	b.n	80056e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b8:	f7fc ff74 	bl	80025a4 <HAL_GetTick>
 80056bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056be:	e008      	b.n	80056d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056c0:	f7fc ff70 	bl	80025a4 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b64      	cmp	r3, #100	; 0x64
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e292      	b.n	8005bf8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056d2:	4b60      	ldr	r3, [pc, #384]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1f0      	bne.n	80056c0 <HAL_RCC_OscConfig+0xe8>
 80056de:	e000      	b.n	80056e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d075      	beq.n	80057da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056ee:	4b59      	ldr	r3, [pc, #356]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 030c 	and.w	r3, r3, #12
 80056f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056f8:	4b56      	ldr	r3, [pc, #344]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f003 0303 	and.w	r3, r3, #3
 8005700:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	2b0c      	cmp	r3, #12
 8005706:	d102      	bne.n	800570e <HAL_RCC_OscConfig+0x136>
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d002      	beq.n	8005714 <HAL_RCC_OscConfig+0x13c>
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	2b04      	cmp	r3, #4
 8005712:	d11f      	bne.n	8005754 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005714:	4b4f      	ldr	r3, [pc, #316]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800571c:	2b00      	cmp	r3, #0
 800571e:	d005      	beq.n	800572c <HAL_RCC_OscConfig+0x154>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e265      	b.n	8005bf8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800572c:	4b49      	ldr	r3, [pc, #292]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	061b      	lsls	r3, r3, #24
 800573a:	4946      	ldr	r1, [pc, #280]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 800573c:	4313      	orrs	r3, r2
 800573e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005740:	4b45      	ldr	r3, [pc, #276]	; (8005858 <HAL_RCC_OscConfig+0x280>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4618      	mov	r0, r3
 8005746:	f7fc fee1 	bl	800250c <HAL_InitTick>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d043      	beq.n	80057d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e251      	b.n	8005bf8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d023      	beq.n	80057a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800575c:	4b3d      	ldr	r3, [pc, #244]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a3c      	ldr	r2, [pc, #240]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 8005762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005768:	f7fc ff1c 	bl	80025a4 <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800576e:	e008      	b.n	8005782 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005770:	f7fc ff18 	bl	80025a4 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b02      	cmp	r3, #2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e23a      	b.n	8005bf8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005782:	4b34      	ldr	r3, [pc, #208]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0f0      	beq.n	8005770 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800578e:	4b31      	ldr	r3, [pc, #196]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	061b      	lsls	r3, r3, #24
 800579c:	492d      	ldr	r1, [pc, #180]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	604b      	str	r3, [r1, #4]
 80057a2:	e01a      	b.n	80057da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057a4:	4b2b      	ldr	r3, [pc, #172]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a2a      	ldr	r2, [pc, #168]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 80057aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b0:	f7fc fef8 	bl	80025a4 <HAL_GetTick>
 80057b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057b8:	f7fc fef4 	bl	80025a4 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e216      	b.n	8005bf8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057ca:	4b22      	ldr	r3, [pc, #136]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1f0      	bne.n	80057b8 <HAL_RCC_OscConfig+0x1e0>
 80057d6:	e000      	b.n	80057da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0308 	and.w	r3, r3, #8
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d041      	beq.n	800586a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d01c      	beq.n	8005828 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057ee:	4b19      	ldr	r3, [pc, #100]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 80057f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057f4:	4a17      	ldr	r2, [pc, #92]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 80057f6:	f043 0301 	orr.w	r3, r3, #1
 80057fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057fe:	f7fc fed1 	bl	80025a4 <HAL_GetTick>
 8005802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005804:	e008      	b.n	8005818 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005806:	f7fc fecd 	bl	80025a4 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d901      	bls.n	8005818 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e1ef      	b.n	8005bf8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005818:	4b0e      	ldr	r3, [pc, #56]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 800581a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0ef      	beq.n	8005806 <HAL_RCC_OscConfig+0x22e>
 8005826:	e020      	b.n	800586a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005828:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 800582a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800582e:	4a09      	ldr	r2, [pc, #36]	; (8005854 <HAL_RCC_OscConfig+0x27c>)
 8005830:	f023 0301 	bic.w	r3, r3, #1
 8005834:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005838:	f7fc feb4 	bl	80025a4 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800583e:	e00d      	b.n	800585c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005840:	f7fc feb0 	bl	80025a4 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d906      	bls.n	800585c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e1d2      	b.n	8005bf8 <HAL_RCC_OscConfig+0x620>
 8005852:	bf00      	nop
 8005854:	40021000 	.word	0x40021000
 8005858:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800585c:	4b8c      	ldr	r3, [pc, #560]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 800585e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1ea      	bne.n	8005840 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0304 	and.w	r3, r3, #4
 8005872:	2b00      	cmp	r3, #0
 8005874:	f000 80a6 	beq.w	80059c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005878:	2300      	movs	r3, #0
 800587a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800587c:	4b84      	ldr	r3, [pc, #528]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 800587e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_RCC_OscConfig+0x2b4>
 8005888:	2301      	movs	r3, #1
 800588a:	e000      	b.n	800588e <HAL_RCC_OscConfig+0x2b6>
 800588c:	2300      	movs	r3, #0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00d      	beq.n	80058ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005892:	4b7f      	ldr	r3, [pc, #508]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 8005894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005896:	4a7e      	ldr	r2, [pc, #504]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 8005898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800589c:	6593      	str	r3, [r2, #88]	; 0x58
 800589e:	4b7c      	ldr	r3, [pc, #496]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 80058a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80058aa:	2301      	movs	r3, #1
 80058ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058ae:	4b79      	ldr	r3, [pc, #484]	; (8005a94 <HAL_RCC_OscConfig+0x4bc>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d118      	bne.n	80058ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058ba:	4b76      	ldr	r3, [pc, #472]	; (8005a94 <HAL_RCC_OscConfig+0x4bc>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a75      	ldr	r2, [pc, #468]	; (8005a94 <HAL_RCC_OscConfig+0x4bc>)
 80058c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058c6:	f7fc fe6d 	bl	80025a4 <HAL_GetTick>
 80058ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058cc:	e008      	b.n	80058e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ce:	f7fc fe69 	bl	80025a4 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e18b      	b.n	8005bf8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058e0:	4b6c      	ldr	r3, [pc, #432]	; (8005a94 <HAL_RCC_OscConfig+0x4bc>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0f0      	beq.n	80058ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d108      	bne.n	8005906 <HAL_RCC_OscConfig+0x32e>
 80058f4:	4b66      	ldr	r3, [pc, #408]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 80058f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fa:	4a65      	ldr	r2, [pc, #404]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 80058fc:	f043 0301 	orr.w	r3, r3, #1
 8005900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005904:	e024      	b.n	8005950 <HAL_RCC_OscConfig+0x378>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	2b05      	cmp	r3, #5
 800590c:	d110      	bne.n	8005930 <HAL_RCC_OscConfig+0x358>
 800590e:	4b60      	ldr	r3, [pc, #384]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 8005910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005914:	4a5e      	ldr	r2, [pc, #376]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 8005916:	f043 0304 	orr.w	r3, r3, #4
 800591a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800591e:	4b5c      	ldr	r3, [pc, #368]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 8005920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005924:	4a5a      	ldr	r2, [pc, #360]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 8005926:	f043 0301 	orr.w	r3, r3, #1
 800592a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800592e:	e00f      	b.n	8005950 <HAL_RCC_OscConfig+0x378>
 8005930:	4b57      	ldr	r3, [pc, #348]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 8005932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005936:	4a56      	ldr	r2, [pc, #344]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005940:	4b53      	ldr	r3, [pc, #332]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 8005942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005946:	4a52      	ldr	r2, [pc, #328]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 8005948:	f023 0304 	bic.w	r3, r3, #4
 800594c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d016      	beq.n	8005986 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005958:	f7fc fe24 	bl	80025a4 <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800595e:	e00a      	b.n	8005976 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005960:	f7fc fe20 	bl	80025a4 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	f241 3288 	movw	r2, #5000	; 0x1388
 800596e:	4293      	cmp	r3, r2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e140      	b.n	8005bf8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005976:	4b46      	ldr	r3, [pc, #280]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 8005978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0ed      	beq.n	8005960 <HAL_RCC_OscConfig+0x388>
 8005984:	e015      	b.n	80059b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005986:	f7fc fe0d 	bl	80025a4 <HAL_GetTick>
 800598a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800598c:	e00a      	b.n	80059a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800598e:	f7fc fe09 	bl	80025a4 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	f241 3288 	movw	r2, #5000	; 0x1388
 800599c:	4293      	cmp	r3, r2
 800599e:	d901      	bls.n	80059a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e129      	b.n	8005bf8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059a4:	4b3a      	ldr	r3, [pc, #232]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 80059a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1ed      	bne.n	800598e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059b2:	7ffb      	ldrb	r3, [r7, #31]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d105      	bne.n	80059c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059b8:	4b35      	ldr	r3, [pc, #212]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 80059ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059bc:	4a34      	ldr	r2, [pc, #208]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 80059be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0320 	and.w	r3, r3, #32
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d03c      	beq.n	8005a4a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d01c      	beq.n	8005a12 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80059d8:	4b2d      	ldr	r3, [pc, #180]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 80059da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059de:	4a2c      	ldr	r2, [pc, #176]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 80059e0:	f043 0301 	orr.w	r3, r3, #1
 80059e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e8:	f7fc fddc 	bl	80025a4 <HAL_GetTick>
 80059ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059ee:	e008      	b.n	8005a02 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059f0:	f7fc fdd8 	bl	80025a4 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e0fa      	b.n	8005bf8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a02:	4b23      	ldr	r3, [pc, #140]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 8005a04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d0ef      	beq.n	80059f0 <HAL_RCC_OscConfig+0x418>
 8005a10:	e01b      	b.n	8005a4a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a12:	4b1f      	ldr	r3, [pc, #124]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 8005a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a18:	4a1d      	ldr	r2, [pc, #116]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 8005a1a:	f023 0301 	bic.w	r3, r3, #1
 8005a1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a22:	f7fc fdbf 	bl	80025a4 <HAL_GetTick>
 8005a26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a28:	e008      	b.n	8005a3c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a2a:	f7fc fdbb 	bl	80025a4 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e0dd      	b.n	8005bf8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a3c:	4b14      	ldr	r3, [pc, #80]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 8005a3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1ef      	bne.n	8005a2a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 80d1 	beq.w	8005bf6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a54:	4b0e      	ldr	r3, [pc, #56]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 030c 	and.w	r3, r3, #12
 8005a5c:	2b0c      	cmp	r3, #12
 8005a5e:	f000 808b 	beq.w	8005b78 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d15e      	bne.n	8005b28 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a6a:	4b09      	ldr	r3, [pc, #36]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a08      	ldr	r2, [pc, #32]	; (8005a90 <HAL_RCC_OscConfig+0x4b8>)
 8005a70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a76:	f7fc fd95 	bl	80025a4 <HAL_GetTick>
 8005a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a7c:	e00c      	b.n	8005a98 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a7e:	f7fc fd91 	bl	80025a4 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d905      	bls.n	8005a98 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e0b3      	b.n	8005bf8 <HAL_RCC_OscConfig+0x620>
 8005a90:	40021000 	.word	0x40021000
 8005a94:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a98:	4b59      	ldr	r3, [pc, #356]	; (8005c00 <HAL_RCC_OscConfig+0x628>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1ec      	bne.n	8005a7e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aa4:	4b56      	ldr	r3, [pc, #344]	; (8005c00 <HAL_RCC_OscConfig+0x628>)
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	4b56      	ldr	r3, [pc, #344]	; (8005c04 <HAL_RCC_OscConfig+0x62c>)
 8005aaa:	4013      	ands	r3, r2
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	6a11      	ldr	r1, [r2, #32]
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ab4:	3a01      	subs	r2, #1
 8005ab6:	0112      	lsls	r2, r2, #4
 8005ab8:	4311      	orrs	r1, r2
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005abe:	0212      	lsls	r2, r2, #8
 8005ac0:	4311      	orrs	r1, r2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ac6:	0852      	lsrs	r2, r2, #1
 8005ac8:	3a01      	subs	r2, #1
 8005aca:	0552      	lsls	r2, r2, #21
 8005acc:	4311      	orrs	r1, r2
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ad2:	0852      	lsrs	r2, r2, #1
 8005ad4:	3a01      	subs	r2, #1
 8005ad6:	0652      	lsls	r2, r2, #25
 8005ad8:	4311      	orrs	r1, r2
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005ade:	06d2      	lsls	r2, r2, #27
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	4947      	ldr	r1, [pc, #284]	; (8005c00 <HAL_RCC_OscConfig+0x628>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ae8:	4b45      	ldr	r3, [pc, #276]	; (8005c00 <HAL_RCC_OscConfig+0x628>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a44      	ldr	r2, [pc, #272]	; (8005c00 <HAL_RCC_OscConfig+0x628>)
 8005aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005af2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005af4:	4b42      	ldr	r3, [pc, #264]	; (8005c00 <HAL_RCC_OscConfig+0x628>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	4a41      	ldr	r2, [pc, #260]	; (8005c00 <HAL_RCC_OscConfig+0x628>)
 8005afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005afe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b00:	f7fc fd50 	bl	80025a4 <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b08:	f7fc fd4c 	bl	80025a4 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e06e      	b.n	8005bf8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b1a:	4b39      	ldr	r3, [pc, #228]	; (8005c00 <HAL_RCC_OscConfig+0x628>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0f0      	beq.n	8005b08 <HAL_RCC_OscConfig+0x530>
 8005b26:	e066      	b.n	8005bf6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b28:	4b35      	ldr	r3, [pc, #212]	; (8005c00 <HAL_RCC_OscConfig+0x628>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a34      	ldr	r2, [pc, #208]	; (8005c00 <HAL_RCC_OscConfig+0x628>)
 8005b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b32:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005b34:	4b32      	ldr	r3, [pc, #200]	; (8005c00 <HAL_RCC_OscConfig+0x628>)
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	4a31      	ldr	r2, [pc, #196]	; (8005c00 <HAL_RCC_OscConfig+0x628>)
 8005b3a:	f023 0303 	bic.w	r3, r3, #3
 8005b3e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005b40:	4b2f      	ldr	r3, [pc, #188]	; (8005c00 <HAL_RCC_OscConfig+0x628>)
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	4a2e      	ldr	r2, [pc, #184]	; (8005c00 <HAL_RCC_OscConfig+0x628>)
 8005b46:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b4e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b50:	f7fc fd28 	bl	80025a4 <HAL_GetTick>
 8005b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b56:	e008      	b.n	8005b6a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b58:	f7fc fd24 	bl	80025a4 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e046      	b.n	8005bf8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b6a:	4b25      	ldr	r3, [pc, #148]	; (8005c00 <HAL_RCC_OscConfig+0x628>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1f0      	bne.n	8005b58 <HAL_RCC_OscConfig+0x580>
 8005b76:	e03e      	b.n	8005bf6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	69db      	ldr	r3, [r3, #28]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d101      	bne.n	8005b84 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e039      	b.n	8005bf8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005b84:	4b1e      	ldr	r3, [pc, #120]	; (8005c00 <HAL_RCC_OscConfig+0x628>)
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f003 0203 	and.w	r2, r3, #3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d12c      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d123      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d11b      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d113      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd4:	085b      	lsrs	r3, r3, #1
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d109      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be8:	085b      	lsrs	r3, r3, #1
 8005bea:	3b01      	subs	r3, #1
 8005bec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d001      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e000      	b.n	8005bf8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3720      	adds	r7, #32
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	40021000 	.word	0x40021000
 8005c04:	019f800c 	.word	0x019f800c

08005c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005c12:	2300      	movs	r3, #0
 8005c14:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e11e      	b.n	8005e5e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c20:	4b91      	ldr	r3, [pc, #580]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 030f 	and.w	r3, r3, #15
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d910      	bls.n	8005c50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c2e:	4b8e      	ldr	r3, [pc, #568]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f023 020f 	bic.w	r2, r3, #15
 8005c36:	498c      	ldr	r1, [pc, #560]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c3e:	4b8a      	ldr	r3, [pc, #552]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 030f 	and.w	r3, r3, #15
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d001      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e106      	b.n	8005e5e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d073      	beq.n	8005d44 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d129      	bne.n	8005cb8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c64:	4b81      	ldr	r3, [pc, #516]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e0f4      	b.n	8005e5e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005c74:	f000 f966 	bl	8005f44 <RCC_GetSysClockFreqFromPLLSource>
 8005c78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	4a7c      	ldr	r2, [pc, #496]	; (8005e70 <HAL_RCC_ClockConfig+0x268>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d93f      	bls.n	8005d02 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c82:	4b7a      	ldr	r3, [pc, #488]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d009      	beq.n	8005ca2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d033      	beq.n	8005d02 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d12f      	bne.n	8005d02 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ca2:	4b72      	ldr	r3, [pc, #456]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005caa:	4a70      	ldr	r2, [pc, #448]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005cb2:	2380      	movs	r3, #128	; 0x80
 8005cb4:	617b      	str	r3, [r7, #20]
 8005cb6:	e024      	b.n	8005d02 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d107      	bne.n	8005cd0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cc0:	4b6a      	ldr	r3, [pc, #424]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d109      	bne.n	8005ce0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e0c6      	b.n	8005e5e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cd0:	4b66      	ldr	r3, [pc, #408]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e0be      	b.n	8005e5e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005ce0:	f000 f8ce 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8005ce4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	4a61      	ldr	r2, [pc, #388]	; (8005e70 <HAL_RCC_ClockConfig+0x268>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d909      	bls.n	8005d02 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005cee:	4b5f      	ldr	r3, [pc, #380]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cf6:	4a5d      	ldr	r2, [pc, #372]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cfc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005cfe:	2380      	movs	r3, #128	; 0x80
 8005d00:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d02:	4b5a      	ldr	r3, [pc, #360]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f023 0203 	bic.w	r2, r3, #3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	4957      	ldr	r1, [pc, #348]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d14:	f7fc fc46 	bl	80025a4 <HAL_GetTick>
 8005d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d1a:	e00a      	b.n	8005d32 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d1c:	f7fc fc42 	bl	80025a4 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e095      	b.n	8005e5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d32:	4b4e      	ldr	r3, [pc, #312]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f003 020c 	and.w	r2, r3, #12
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d1eb      	bne.n	8005d1c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d023      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0304 	and.w	r3, r3, #4
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d005      	beq.n	8005d68 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d5c:	4b43      	ldr	r3, [pc, #268]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	4a42      	ldr	r2, [pc, #264]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005d62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d66:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0308 	and.w	r3, r3, #8
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d007      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005d74:	4b3d      	ldr	r3, [pc, #244]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005d7c:	4a3b      	ldr	r2, [pc, #236]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005d7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d84:	4b39      	ldr	r3, [pc, #228]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	4936      	ldr	r1, [pc, #216]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	608b      	str	r3, [r1, #8]
 8005d96:	e008      	b.n	8005daa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	2b80      	cmp	r3, #128	; 0x80
 8005d9c:	d105      	bne.n	8005daa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d9e:	4b33      	ldr	r3, [pc, #204]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	4a32      	ldr	r2, [pc, #200]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005da4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005da8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005daa:	4b2f      	ldr	r3, [pc, #188]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d21d      	bcs.n	8005df4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005db8:	4b2b      	ldr	r3, [pc, #172]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f023 020f 	bic.w	r2, r3, #15
 8005dc0:	4929      	ldr	r1, [pc, #164]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005dc8:	f7fc fbec 	bl	80025a4 <HAL_GetTick>
 8005dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dce:	e00a      	b.n	8005de6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dd0:	f7fc fbe8 	bl	80025a4 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d901      	bls.n	8005de6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e03b      	b.n	8005e5e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de6:	4b20      	ldr	r3, [pc, #128]	; (8005e68 <HAL_RCC_ClockConfig+0x260>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d1ed      	bne.n	8005dd0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d008      	beq.n	8005e12 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e00:	4b1a      	ldr	r3, [pc, #104]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	4917      	ldr	r1, [pc, #92]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0308 	and.w	r3, r3, #8
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d009      	beq.n	8005e32 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e1e:	4b13      	ldr	r3, [pc, #76]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	490f      	ldr	r1, [pc, #60]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e32:	f000 f825 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8005e36:	4602      	mov	r2, r0
 8005e38:	4b0c      	ldr	r3, [pc, #48]	; (8005e6c <HAL_RCC_ClockConfig+0x264>)
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	091b      	lsrs	r3, r3, #4
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	490c      	ldr	r1, [pc, #48]	; (8005e74 <HAL_RCC_ClockConfig+0x26c>)
 8005e44:	5ccb      	ldrb	r3, [r1, r3]
 8005e46:	f003 031f 	and.w	r3, r3, #31
 8005e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e4e:	4a0a      	ldr	r2, [pc, #40]	; (8005e78 <HAL_RCC_ClockConfig+0x270>)
 8005e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005e52:	4b0a      	ldr	r3, [pc, #40]	; (8005e7c <HAL_RCC_ClockConfig+0x274>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fc fb58 	bl	800250c <HAL_InitTick>
 8005e5c:	4603      	mov	r3, r0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3718      	adds	r7, #24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	40022000 	.word	0x40022000
 8005e6c:	40021000 	.word	0x40021000
 8005e70:	04c4b400 	.word	0x04c4b400
 8005e74:	08007bd0 	.word	0x08007bd0
 8005e78:	20000004 	.word	0x20000004
 8005e7c:	20000008 	.word	0x20000008

08005e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005e86:	4b2c      	ldr	r3, [pc, #176]	; (8005f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f003 030c 	and.w	r3, r3, #12
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d102      	bne.n	8005e98 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e92:	4b2a      	ldr	r3, [pc, #168]	; (8005f3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e94:	613b      	str	r3, [r7, #16]
 8005e96:	e047      	b.n	8005f28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005e98:	4b27      	ldr	r3, [pc, #156]	; (8005f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f003 030c 	and.w	r3, r3, #12
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d102      	bne.n	8005eaa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ea4:	4b26      	ldr	r3, [pc, #152]	; (8005f40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ea6:	613b      	str	r3, [r7, #16]
 8005ea8:	e03e      	b.n	8005f28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005eaa:	4b23      	ldr	r3, [pc, #140]	; (8005f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f003 030c 	and.w	r3, r3, #12
 8005eb2:	2b0c      	cmp	r3, #12
 8005eb4:	d136      	bne.n	8005f24 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005eb6:	4b20      	ldr	r3, [pc, #128]	; (8005f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	f003 0303 	and.w	r3, r3, #3
 8005ebe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ec0:	4b1d      	ldr	r3, [pc, #116]	; (8005f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	091b      	lsrs	r3, r3, #4
 8005ec6:	f003 030f 	and.w	r3, r3, #15
 8005eca:	3301      	adds	r3, #1
 8005ecc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d10c      	bne.n	8005eee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ed4:	4a1a      	ldr	r2, [pc, #104]	; (8005f40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005edc:	4a16      	ldr	r2, [pc, #88]	; (8005f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ede:	68d2      	ldr	r2, [r2, #12]
 8005ee0:	0a12      	lsrs	r2, r2, #8
 8005ee2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ee6:	fb02 f303 	mul.w	r3, r2, r3
 8005eea:	617b      	str	r3, [r7, #20]
      break;
 8005eec:	e00c      	b.n	8005f08 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005eee:	4a13      	ldr	r2, [pc, #76]	; (8005f3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef6:	4a10      	ldr	r2, [pc, #64]	; (8005f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ef8:	68d2      	ldr	r2, [r2, #12]
 8005efa:	0a12      	lsrs	r2, r2, #8
 8005efc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f00:	fb02 f303 	mul.w	r3, r2, r3
 8005f04:	617b      	str	r3, [r7, #20]
      break;
 8005f06:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f08:	4b0b      	ldr	r3, [pc, #44]	; (8005f38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	0e5b      	lsrs	r3, r3, #25
 8005f0e:	f003 0303 	and.w	r3, r3, #3
 8005f12:	3301      	adds	r3, #1
 8005f14:	005b      	lsls	r3, r3, #1
 8005f16:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f20:	613b      	str	r3, [r7, #16]
 8005f22:	e001      	b.n	8005f28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005f28:	693b      	ldr	r3, [r7, #16]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	371c      	adds	r7, #28
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	40021000 	.word	0x40021000
 8005f3c:	00f42400 	.word	0x00f42400
 8005f40:	016e3600 	.word	0x016e3600

08005f44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f4a:	4b1e      	ldr	r3, [pc, #120]	; (8005fc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f54:	4b1b      	ldr	r3, [pc, #108]	; (8005fc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	091b      	lsrs	r3, r3, #4
 8005f5a:	f003 030f 	and.w	r3, r3, #15
 8005f5e:	3301      	adds	r3, #1
 8005f60:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	2b03      	cmp	r3, #3
 8005f66:	d10c      	bne.n	8005f82 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f68:	4a17      	ldr	r2, [pc, #92]	; (8005fc8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f70:	4a14      	ldr	r2, [pc, #80]	; (8005fc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f72:	68d2      	ldr	r2, [r2, #12]
 8005f74:	0a12      	lsrs	r2, r2, #8
 8005f76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f7a:	fb02 f303 	mul.w	r3, r2, r3
 8005f7e:	617b      	str	r3, [r7, #20]
    break;
 8005f80:	e00c      	b.n	8005f9c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f82:	4a12      	ldr	r2, [pc, #72]	; (8005fcc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f8a:	4a0e      	ldr	r2, [pc, #56]	; (8005fc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f8c:	68d2      	ldr	r2, [r2, #12]
 8005f8e:	0a12      	lsrs	r2, r2, #8
 8005f90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f94:	fb02 f303 	mul.w	r3, r2, r3
 8005f98:	617b      	str	r3, [r7, #20]
    break;
 8005f9a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f9c:	4b09      	ldr	r3, [pc, #36]	; (8005fc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	0e5b      	lsrs	r3, r3, #25
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005fb6:	687b      	ldr	r3, [r7, #4]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	371c      	adds	r7, #28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	40021000 	.word	0x40021000
 8005fc8:	016e3600 	.word	0x016e3600
 8005fcc:	00f42400 	.word	0x00f42400

08005fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fd8:	2300      	movs	r3, #0
 8005fda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fdc:	2300      	movs	r3, #0
 8005fde:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 8098 	beq.w	800611e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ff2:	4b43      	ldr	r3, [pc, #268]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d10d      	bne.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ffe:	4b40      	ldr	r3, [pc, #256]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006002:	4a3f      	ldr	r2, [pc, #252]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006008:	6593      	str	r3, [r2, #88]	; 0x58
 800600a:	4b3d      	ldr	r3, [pc, #244]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800600c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800600e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006012:	60bb      	str	r3, [r7, #8]
 8006014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006016:	2301      	movs	r3, #1
 8006018:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800601a:	4b3a      	ldr	r3, [pc, #232]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a39      	ldr	r2, [pc, #228]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006024:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006026:	f7fc fabd 	bl	80025a4 <HAL_GetTick>
 800602a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800602c:	e009      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800602e:	f7fc fab9 	bl	80025a4 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	2b02      	cmp	r3, #2
 800603a:	d902      	bls.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	74fb      	strb	r3, [r7, #19]
        break;
 8006040:	e005      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006042:	4b30      	ldr	r3, [pc, #192]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0ef      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800604e:	7cfb      	ldrb	r3, [r7, #19]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d159      	bne.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006054:	4b2a      	ldr	r3, [pc, #168]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800605a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800605e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d01e      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	429a      	cmp	r2, r3
 800606e:	d019      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006070:	4b23      	ldr	r3, [pc, #140]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800607a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800607c:	4b20      	ldr	r3, [pc, #128]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800607e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006082:	4a1f      	ldr	r2, [pc, #124]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800608c:	4b1c      	ldr	r3, [pc, #112]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800608e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006092:	4a1b      	ldr	r2, [pc, #108]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800609c:	4a18      	ldr	r2, [pc, #96]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d016      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ae:	f7fc fa79 	bl	80025a4 <HAL_GetTick>
 80060b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060b4:	e00b      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060b6:	f7fc fa75 	bl	80025a4 <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d902      	bls.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	74fb      	strb	r3, [r7, #19]
            break;
 80060cc:	e006      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060ce:	4b0c      	ldr	r3, [pc, #48]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0ec      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80060dc:	7cfb      	ldrb	r3, [r7, #19]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10b      	bne.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060e2:	4b07      	ldr	r3, [pc, #28]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f0:	4903      	ldr	r1, [pc, #12]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80060f8:	e008      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80060fa:	7cfb      	ldrb	r3, [r7, #19]
 80060fc:	74bb      	strb	r3, [r7, #18]
 80060fe:	e005      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006100:	40021000 	.word	0x40021000
 8006104:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006108:	7cfb      	ldrb	r3, [r7, #19]
 800610a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800610c:	7c7b      	ldrb	r3, [r7, #17]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d105      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006112:	4ba7      	ldr	r3, [pc, #668]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006116:	4aa6      	ldr	r2, [pc, #664]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800611c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800612a:	4ba1      	ldr	r3, [pc, #644]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800612c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006130:	f023 0203 	bic.w	r2, r3, #3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	499d      	ldr	r1, [pc, #628]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800613a:	4313      	orrs	r3, r2
 800613c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800614c:	4b98      	ldr	r3, [pc, #608]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800614e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006152:	f023 020c 	bic.w	r2, r3, #12
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	4995      	ldr	r1, [pc, #596]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800615c:	4313      	orrs	r3, r2
 800615e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0304 	and.w	r3, r3, #4
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800616e:	4b90      	ldr	r3, [pc, #576]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006174:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	498c      	ldr	r1, [pc, #560]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800617e:	4313      	orrs	r3, r2
 8006180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0308 	and.w	r3, r3, #8
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006190:	4b87      	ldr	r3, [pc, #540]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006196:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	4984      	ldr	r1, [pc, #528]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0310 	and.w	r3, r3, #16
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061b2:	4b7f      	ldr	r3, [pc, #508]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	497b      	ldr	r1, [pc, #492]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0320 	and.w	r3, r3, #32
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061d4:	4b76      	ldr	r3, [pc, #472]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	4973      	ldr	r1, [pc, #460]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061f6:	4b6e      	ldr	r3, [pc, #440]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	69db      	ldr	r3, [r3, #28]
 8006204:	496a      	ldr	r1, [pc, #424]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00a      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006218:	4b65      	ldr	r3, [pc, #404]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800621a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800621e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	4962      	ldr	r1, [pc, #392]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006228:	4313      	orrs	r3, r2
 800622a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800623a:	4b5d      	ldr	r3, [pc, #372]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800623c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006240:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	4959      	ldr	r1, [pc, #356]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800624a:	4313      	orrs	r3, r2
 800624c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00a      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800625c:	4b54      	ldr	r3, [pc, #336]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800625e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006262:	f023 0203 	bic.w	r2, r3, #3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626a:	4951      	ldr	r1, [pc, #324]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800626c:	4313      	orrs	r3, r2
 800626e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800627e:	4b4c      	ldr	r3, [pc, #304]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006284:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	4948      	ldr	r1, [pc, #288]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800628e:	4313      	orrs	r3, r2
 8006290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800629c:	2b00      	cmp	r3, #0
 800629e:	d015      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062a0:	4b43      	ldr	r3, [pc, #268]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ae:	4940      	ldr	r1, [pc, #256]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062be:	d105      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062c0:	4b3b      	ldr	r3, [pc, #236]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	4a3a      	ldr	r2, [pc, #232]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d015      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80062d8:	4b35      	ldr	r3, [pc, #212]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e6:	4932      	ldr	r1, [pc, #200]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062f6:	d105      	bne.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062f8:	4b2d      	ldr	r3, [pc, #180]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	4a2c      	ldr	r2, [pc, #176]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006302:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d015      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006310:	4b27      	ldr	r3, [pc, #156]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006316:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631e:	4924      	ldr	r1, [pc, #144]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006320:	4313      	orrs	r3, r2
 8006322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800632e:	d105      	bne.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006330:	4b1f      	ldr	r3, [pc, #124]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	4a1e      	ldr	r2, [pc, #120]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800633a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d015      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006348:	4b19      	ldr	r3, [pc, #100]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800634a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006356:	4916      	ldr	r1, [pc, #88]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006358:	4313      	orrs	r3, r2
 800635a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006362:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006366:	d105      	bne.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006368:	4b11      	ldr	r3, [pc, #68]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	4a10      	ldr	r2, [pc, #64]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800636e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006372:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d019      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006380:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006386:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	4908      	ldr	r1, [pc, #32]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006390:	4313      	orrs	r3, r2
 8006392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800639e:	d109      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063a0:	4b03      	ldr	r3, [pc, #12]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	4a02      	ldr	r2, [pc, #8]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063aa:	60d3      	str	r3, [r2, #12]
 80063ac:	e002      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80063ae:	bf00      	nop
 80063b0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d015      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80063c0:	4b29      	ldr	r3, [pc, #164]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ce:	4926      	ldr	r1, [pc, #152]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063de:	d105      	bne.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80063e0:	4b21      	ldr	r3, [pc, #132]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	4a20      	ldr	r2, [pc, #128]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d015      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80063f8:	4b1b      	ldr	r3, [pc, #108]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063fe:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006406:	4918      	ldr	r1, [pc, #96]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006408:	4313      	orrs	r3, r2
 800640a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006416:	d105      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006418:	4b13      	ldr	r3, [pc, #76]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	4a12      	ldr	r2, [pc, #72]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800641e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006422:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d015      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006430:	4b0d      	ldr	r3, [pc, #52]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006432:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006436:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800643e:	490a      	ldr	r1, [pc, #40]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006440:	4313      	orrs	r3, r2
 8006442:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800644a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800644e:	d105      	bne.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006450:	4b05      	ldr	r3, [pc, #20]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	4a04      	ldr	r2, [pc, #16]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006456:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800645a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800645c:	7cbb      	ldrb	r3, [r7, #18]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	40021000 	.word	0x40021000

0800646c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d066      	beq.n	800654c <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d106      	bne.n	8006498 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7fb ff28 	bl	80022e8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	22ca      	movs	r2, #202	; 0xca
 80064a6:	625a      	str	r2, [r3, #36]	; 0x24
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2253      	movs	r2, #83	; 0x53
 80064ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f99a 	bl	80067ea <RTC_EnterInitMode>
 80064b6:	4603      	mov	r3, r0
 80064b8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d13a      	bne.n	8006536 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	6812      	ldr	r2, [r2, #0]
 80064ca:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80064ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064d2:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6999      	ldr	r1, [r3, #24]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	431a      	orrs	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68d9      	ldr	r1, [r3, #12]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	041a      	lsls	r2, r3, #16
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f9a6 	bl	8006856 <RTC_ExitInitMode>
 800650a:	4603      	mov	r3, r0
 800650c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800650e:	7bfb      	ldrb	r3, [r7, #15]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d110      	bne.n	8006536 <HAL_RTC_Init+0xca>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1a      	ldr	r2, [r3, #32]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	431a      	orrs	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	430a      	orrs	r2, r1
 8006534:	619a      	str	r2, [r3, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	22ff      	movs	r2, #255	; 0xff
 800653c:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800653e:	7bfb      	ldrb	r3, [r7, #15]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d103      	bne.n	800654c <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800654c:	7bfb      	ldrb	r3, [r7, #15]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006556:	b590      	push	{r4, r7, lr}
 8006558:	b087      	sub	sp, #28
 800655a:	af00      	add	r7, sp, #0
 800655c:	60f8      	str	r0, [r7, #12]
 800655e:	60b9      	str	r1, [r7, #8]
 8006560:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006568:	2b01      	cmp	r3, #1
 800656a:	d101      	bne.n	8006570 <HAL_RTC_SetTime+0x1a>
 800656c:	2302      	movs	r3, #2
 800656e:	e08b      	b.n	8006688 <HAL_RTC_SetTime+0x132>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	22ca      	movs	r2, #202	; 0xca
 8006586:	625a      	str	r2, [r3, #36]	; 0x24
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2253      	movs	r2, #83	; 0x53
 800658e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 f92a 	bl	80067ea <RTC_EnterInitMode>
 8006596:	4603      	mov	r3, r0
 8006598:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800659a:	7cfb      	ldrb	r3, [r7, #19]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d163      	bne.n	8006668 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d126      	bne.n	80065f4 <HAL_RTC_SetTime+0x9e>
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d102      	bne.n	80065ba <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2200      	movs	r2, #0
 80065b8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 f98c 	bl	80068dc <RTC_ByteToBcd2>
 80065c4:	4603      	mov	r3, r0
 80065c6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	785b      	ldrb	r3, [r3, #1]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 f985 	bl	80068dc <RTC_ByteToBcd2>
 80065d2:	4603      	mov	r3, r0
 80065d4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80065d6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	789b      	ldrb	r3, [r3, #2]
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 f97d 	bl	80068dc <RTC_ByteToBcd2>
 80065e2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80065e4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	78db      	ldrb	r3, [r3, #3]
 80065ec:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80065ee:	4313      	orrs	r3, r2
 80065f0:	617b      	str	r3, [r7, #20]
 80065f2:	e018      	b.n	8006626 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d102      	bne.n	8006608 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2200      	movs	r2, #0
 8006606:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	785b      	ldrb	r3, [r3, #1]
 8006612:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006614:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800661a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	78db      	ldrb	r3, [r3, #3]
 8006620:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006622:	4313      	orrs	r3, r2
 8006624:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(hrtc->Instance->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006630:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006634:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BKP);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	699a      	ldr	r2, [r3, #24]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006644:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(hrtc->Instance->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6999      	ldr	r1, [r3, #24]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	68da      	ldr	r2, [r3, #12]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	431a      	orrs	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f000 f8f9 	bl	8006856 <RTC_ExitInitMode>
 8006664:	4603      	mov	r3, r0
 8006666:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	22ff      	movs	r2, #255	; 0xff
 800666e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006670:	7cfb      	ldrb	r3, [r7, #19]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d103      	bne.n	800667e <HAL_RTC_SetTime+0x128>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
    __HAL_UNLOCK(hrtc);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006686:	7cfb      	ldrb	r3, [r7, #19]
}
 8006688:	4618      	mov	r0, r3
 800668a:	371c      	adds	r7, #28
 800668c:	46bd      	mov	sp, r7
 800668e:	bd90      	pop	{r4, r7, pc}

08006690 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006690:	b590      	push	{r4, r7, lr}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d101      	bne.n	80066aa <HAL_RTC_SetDate+0x1a>
 80066a6:	2302      	movs	r3, #2
 80066a8:	e075      	b.n	8006796 <HAL_RTC_SetDate+0x106>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2202      	movs	r2, #2
 80066b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10e      	bne.n	80066de <HAL_RTC_SetDate+0x4e>
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	785b      	ldrb	r3, [r3, #1]
 80066c4:	f003 0310 	and.w	r3, r3, #16
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d008      	beq.n	80066de <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	785b      	ldrb	r3, [r3, #1]
 80066d0:	f023 0310 	bic.w	r3, r3, #16
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	330a      	adds	r3, #10
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d11c      	bne.n	800671e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	78db      	ldrb	r3, [r3, #3]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 f8f7 	bl	80068dc <RTC_ByteToBcd2>
 80066ee:	4603      	mov	r3, r0
 80066f0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	785b      	ldrb	r3, [r3, #1]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 f8f0 	bl	80068dc <RTC_ByteToBcd2>
 80066fc:	4603      	mov	r3, r0
 80066fe:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006700:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	789b      	ldrb	r3, [r3, #2]
 8006706:	4618      	mov	r0, r3
 8006708:	f000 f8e8 	bl	80068dc <RTC_ByteToBcd2>
 800670c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800670e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006718:	4313      	orrs	r3, r2
 800671a:	617b      	str	r3, [r7, #20]
 800671c:	e00e      	b.n	800673c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	78db      	ldrb	r3, [r3, #3]
 8006722:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	785b      	ldrb	r3, [r3, #1]
 8006728:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800672a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006730:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006738:	4313      	orrs	r3, r2
 800673a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	22ca      	movs	r2, #202	; 0xca
 8006742:	625a      	str	r2, [r3, #36]	; 0x24
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2253      	movs	r2, #83	; 0x53
 800674a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f000 f84c 	bl	80067ea <RTC_EnterInitMode>
 8006752:	4603      	mov	r3, r0
 8006754:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006756:	7cfb      	ldrb	r3, [r7, #19]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10c      	bne.n	8006776 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    WRITE_REG(hrtc->Instance->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006766:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800676a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 f872 	bl	8006856 <RTC_ExitInitMode>
 8006772:	4603      	mov	r3, r0
 8006774:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	22ff      	movs	r2, #255	; 0xff
 800677c:	625a      	str	r2, [r3, #36]	; 0x24
 
  if (status == HAL_OK)
 800677e:	7cfb      	ldrb	r3, [r7, #19]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d103      	bne.n	800678c <HAL_RTC_SetDate+0xfc>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006794:	7cfb      	ldrb	r3, [r7, #19]
}
 8006796:	4618      	mov	r0, r3
 8006798:	371c      	adds	r7, #28
 800679a:	46bd      	mov	sp, r7
 800679c:	bd90      	pop	{r4, r7, pc}

0800679e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b084      	sub	sp, #16
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68da      	ldr	r2, [r3, #12]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 0220 	bic.w	r2, r2, #32
 80067b4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80067b6:	f7fb fef5 	bl	80025a4 <HAL_GetTick>
 80067ba:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80067bc:	e009      	b.n	80067d2 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067be:	f7fb fef1 	bl	80025a4 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067cc:	d901      	bls.n	80067d2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e007      	b.n	80067e2 <HAL_RTC_WaitForSynchro+0x44>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	f003 0320 	and.w	r3, r3, #32
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0ee      	beq.n	80067be <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b084      	sub	sp, #16
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067f2:	2300      	movs	r3, #0
 80067f4:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006800:	2b00      	cmp	r3, #0
 8006802:	d123      	bne.n	800684c <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68da      	ldr	r2, [r3, #12]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006812:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006814:	f7fb fec6 	bl	80025a4 <HAL_GetTick>
 8006818:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800681a:	e00d      	b.n	8006838 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800681c:	f7fb fec2 	bl	80025a4 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800682a:	d905      	bls.n	8006838 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2203      	movs	r2, #3
 8006834:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006842:	2b00      	cmp	r3, #0
 8006844:	d102      	bne.n	800684c <RTC_EnterInitMode+0x62>
 8006846:	7bfb      	ldrb	r3, [r7, #15]
 8006848:	2b03      	cmp	r3, #3
 800684a:	d1e7      	bne.n	800681c <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800684c:	7bfb      	ldrb	r3, [r7, #15]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b084      	sub	sp, #16
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68da      	ldr	r2, [r3, #12]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006870:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	f003 0320 	and.w	r3, r3, #32
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10c      	bne.n	800689a <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7ff ff8c 	bl	800679e <HAL_RTC_WaitForSynchro>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d022      	beq.n	80068d2 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2203      	movs	r2, #3
 8006890:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	73fb      	strb	r3, [r7, #15]
 8006898:	e01b      	b.n	80068d2 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	699a      	ldr	r2, [r3, #24]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0220 	bic.w	r2, r2, #32
 80068a8:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f7ff ff77 	bl	800679e <HAL_RTC_WaitForSynchro>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d005      	beq.n	80068c2 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2203      	movs	r2, #3
 80068ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	699a      	ldr	r2, [r3, #24]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f042 0220 	orr.w	r2, r2, #32
 80068d0:	619a      	str	r2, [r3, #24]
  }

  return status;
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	4603      	mov	r3, r0
 80068e4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80068ea:	79fb      	ldrb	r3, [r7, #7]
 80068ec:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80068ee:	e005      	b.n	80068fc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3301      	adds	r3, #1
 80068f4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80068f6:	7afb      	ldrb	r3, [r7, #11]
 80068f8:	3b0a      	subs	r3, #10
 80068fa:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80068fc:	7afb      	ldrb	r3, [r7, #11]
 80068fe:	2b09      	cmp	r3, #9
 8006900:	d8f6      	bhi.n	80068f0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	b2db      	uxtb	r3, r3
 8006906:	011b      	lsls	r3, r3, #4
 8006908:	b2da      	uxtb	r2, r3
 800690a:	7afb      	ldrb	r3, [r7, #11]
 800690c:	4313      	orrs	r3, r2
 800690e:	b2db      	uxtb	r3, r3
}
 8006910:	4618      	mov	r0, r3
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e09d      	b.n	8006a6a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006932:	2b00      	cmp	r3, #0
 8006934:	d108      	bne.n	8006948 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800693e:	d009      	beq.n	8006954 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	61da      	str	r2, [r3, #28]
 8006946:	e005      	b.n	8006954 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d106      	bne.n	8006974 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7fb fcf6 	bl	8002360 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800698a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006994:	d902      	bls.n	800699c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006996:	2300      	movs	r3, #0
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	e002      	b.n	80069a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800699c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80069aa:	d007      	beq.n	80069bc <HAL_SPI_Init+0xa0>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069b4:	d002      	beq.n	80069bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80069cc:	431a      	orrs	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	431a      	orrs	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	431a      	orrs	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069ea:	431a      	orrs	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	69db      	ldr	r3, [r3, #28]
 80069f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069f4:	431a      	orrs	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069fe:	ea42 0103 	orr.w	r1, r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	0c1b      	lsrs	r3, r3, #16
 8006a18:	f003 0204 	and.w	r2, r3, #4
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a20:	f003 0310 	and.w	r3, r3, #16
 8006a24:	431a      	orrs	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a2a:	f003 0308 	and.w	r3, r3, #8
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006a38:	ea42 0103 	orr.w	r1, r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	69da      	ldr	r2, [r3, #28]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b088      	sub	sp, #32
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	60f8      	str	r0, [r7, #12]
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	603b      	str	r3, [r7, #0]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d101      	bne.n	8006a94 <HAL_SPI_Transmit+0x22>
 8006a90:	2302      	movs	r3, #2
 8006a92:	e158      	b.n	8006d46 <HAL_SPI_Transmit+0x2d4>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a9c:	f7fb fd82 	bl	80025a4 <HAL_GetTick>
 8006aa0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006aa2:	88fb      	ldrh	r3, [r7, #6]
 8006aa4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d002      	beq.n	8006ab8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ab6:	e13d      	b.n	8006d34 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d002      	beq.n	8006ac4 <HAL_SPI_Transmit+0x52>
 8006abe:	88fb      	ldrh	r3, [r7, #6]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d102      	bne.n	8006aca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ac8:	e134      	b.n	8006d34 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2203      	movs	r2, #3
 8006ace:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	88fa      	ldrh	r2, [r7, #6]
 8006ae2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	88fa      	ldrh	r2, [r7, #6]
 8006ae8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b14:	d10f      	bne.n	8006b36 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b40:	2b40      	cmp	r3, #64	; 0x40
 8006b42:	d007      	beq.n	8006b54 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b5c:	d94b      	bls.n	8006bf6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d002      	beq.n	8006b6c <HAL_SPI_Transmit+0xfa>
 8006b66:	8afb      	ldrh	r3, [r7, #22]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d13e      	bne.n	8006bea <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b70:	881a      	ldrh	r2, [r3, #0]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7c:	1c9a      	adds	r2, r3, #2
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006b90:	e02b      	b.n	8006bea <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f003 0302 	and.w	r3, r3, #2
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d112      	bne.n	8006bc6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba4:	881a      	ldrh	r2, [r3, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb0:	1c9a      	adds	r2, r3, #2
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006bc4:	e011      	b.n	8006bea <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bc6:	f7fb fced 	bl	80025a4 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d803      	bhi.n	8006bde <HAL_SPI_Transmit+0x16c>
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bdc:	d102      	bne.n	8006be4 <HAL_SPI_Transmit+0x172>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d102      	bne.n	8006bea <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006be8:	e0a4      	b.n	8006d34 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1ce      	bne.n	8006b92 <HAL_SPI_Transmit+0x120>
 8006bf4:	e07c      	b.n	8006cf0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <HAL_SPI_Transmit+0x192>
 8006bfe:	8afb      	ldrh	r3, [r7, #22]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d170      	bne.n	8006ce6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d912      	bls.n	8006c34 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c12:	881a      	ldrh	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1e:	1c9a      	adds	r2, r3, #2
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	3b02      	subs	r3, #2
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c32:	e058      	b.n	8006ce6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	330c      	adds	r3, #12
 8006c3e:	7812      	ldrb	r2, [r2, #0]
 8006c40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c46:	1c5a      	adds	r2, r3, #1
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	3b01      	subs	r3, #1
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006c5a:	e044      	b.n	8006ce6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f003 0302 	and.w	r3, r3, #2
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d12b      	bne.n	8006cc2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d912      	bls.n	8006c9a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c78:	881a      	ldrh	r2, [r3, #0]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c84:	1c9a      	adds	r2, r3, #2
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	3b02      	subs	r3, #2
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c98:	e025      	b.n	8006ce6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	330c      	adds	r3, #12
 8006ca4:	7812      	ldrb	r2, [r2, #0]
 8006ca6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006cc0:	e011      	b.n	8006ce6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cc2:	f7fb fc6f 	bl	80025a4 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d803      	bhi.n	8006cda <HAL_SPI_Transmit+0x268>
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd8:	d102      	bne.n	8006ce0 <HAL_SPI_Transmit+0x26e>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d102      	bne.n	8006ce6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ce4:	e026      	b.n	8006d34 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1b5      	bne.n	8006c5c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cf0:	69ba      	ldr	r2, [r7, #24]
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 fce3 	bl	80076c0 <SPI_EndRxTxTransaction>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2220      	movs	r2, #32
 8006d04:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10a      	bne.n	8006d24 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d0e:	2300      	movs	r3, #0
 8006d10:	613b      	str	r3, [r7, #16]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	613b      	str	r3, [r7, #16]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	613b      	str	r3, [r7, #16]
 8006d22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d002      	beq.n	8006d32 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	77fb      	strb	r3, [r7, #31]
 8006d30:	e000      	b.n	8006d34 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006d32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006d44:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3720      	adds	r7, #32
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b088      	sub	sp, #32
 8006d52:	af02      	add	r7, sp, #8
 8006d54:	60f8      	str	r0, [r7, #12]
 8006d56:	60b9      	str	r1, [r7, #8]
 8006d58:	603b      	str	r3, [r7, #0]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d6a:	d112      	bne.n	8006d92 <HAL_SPI_Receive+0x44>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10e      	bne.n	8006d92 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2204      	movs	r2, #4
 8006d78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006d7c:	88fa      	ldrh	r2, [r7, #6]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	4613      	mov	r3, r2
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	68b9      	ldr	r1, [r7, #8]
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 f910 	bl	8006fae <HAL_SPI_TransmitReceive>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	e109      	b.n	8006fa6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d101      	bne.n	8006da0 <HAL_SPI_Receive+0x52>
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	e102      	b.n	8006fa6 <HAL_SPI_Receive+0x258>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006da8:	f7fb fbfc 	bl	80025a4 <HAL_GetTick>
 8006dac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d002      	beq.n	8006dc0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006dba:	2302      	movs	r3, #2
 8006dbc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006dbe:	e0e9      	b.n	8006f94 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d002      	beq.n	8006dcc <HAL_SPI_Receive+0x7e>
 8006dc6:	88fb      	ldrh	r3, [r7, #6]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d102      	bne.n	8006dd2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006dd0:	e0e0      	b.n	8006f94 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2204      	movs	r2, #4
 8006dd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	88fa      	ldrh	r2, [r7, #6]
 8006dea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	88fa      	ldrh	r2, [r7, #6]
 8006df2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e1c:	d908      	bls.n	8006e30 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e2c:	605a      	str	r2, [r3, #4]
 8006e2e:	e007      	b.n	8006e40 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685a      	ldr	r2, [r3, #4]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e3e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e48:	d10f      	bne.n	8006e6a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e68:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e74:	2b40      	cmp	r3, #64	; 0x40
 8006e76:	d007      	beq.n	8006e88 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e86:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e90:	d867      	bhi.n	8006f62 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006e92:	e030      	b.n	8006ef6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d117      	bne.n	8006ed2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f103 020c 	add.w	r2, r3, #12
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eae:	7812      	ldrb	r2, [r2, #0]
 8006eb0:	b2d2      	uxtb	r2, r2
 8006eb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006ed0:	e011      	b.n	8006ef6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ed2:	f7fb fb67 	bl	80025a4 <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d803      	bhi.n	8006eea <HAL_SPI_Receive+0x19c>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee8:	d102      	bne.n	8006ef0 <HAL_SPI_Receive+0x1a2>
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d102      	bne.n	8006ef6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006ef4:	e04e      	b.n	8006f94 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1c8      	bne.n	8006e94 <HAL_SPI_Receive+0x146>
 8006f02:	e034      	b.n	8006f6e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d115      	bne.n	8006f3e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68da      	ldr	r2, [r3, #12]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1c:	b292      	uxth	r2, r2
 8006f1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f24:	1c9a      	adds	r2, r3, #2
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	3b01      	subs	r3, #1
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006f3c:	e011      	b.n	8006f62 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f3e:	f7fb fb31 	bl	80025a4 <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d803      	bhi.n	8006f56 <HAL_SPI_Receive+0x208>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f54:	d102      	bne.n	8006f5c <HAL_SPI_Receive+0x20e>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d102      	bne.n	8006f62 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006f60:	e018      	b.n	8006f94 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1ca      	bne.n	8006f04 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 fb4c 	bl	8007610 <SPI_EndRxTransaction>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2220      	movs	r2, #32
 8006f82:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	75fb      	strb	r3, [r7, #23]
 8006f90:	e000      	b.n	8006f94 <HAL_SPI_Receive+0x246>
  }

error :
 8006f92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b08a      	sub	sp, #40	; 0x28
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	60f8      	str	r0, [r7, #12]
 8006fb6:	60b9      	str	r1, [r7, #8]
 8006fb8:	607a      	str	r2, [r7, #4]
 8006fba:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d101      	bne.n	8006fd4 <HAL_SPI_TransmitReceive+0x26>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e1fb      	b.n	80073cc <HAL_SPI_TransmitReceive+0x41e>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fdc:	f7fb fae2 	bl	80025a4 <HAL_GetTick>
 8006fe0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006fe8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006ff0:	887b      	ldrh	r3, [r7, #2]
 8006ff2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006ff4:	887b      	ldrh	r3, [r7, #2]
 8006ff6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ff8:	7efb      	ldrb	r3, [r7, #27]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d00e      	beq.n	800701c <HAL_SPI_TransmitReceive+0x6e>
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007004:	d106      	bne.n	8007014 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d102      	bne.n	8007014 <HAL_SPI_TransmitReceive+0x66>
 800700e:	7efb      	ldrb	r3, [r7, #27]
 8007010:	2b04      	cmp	r3, #4
 8007012:	d003      	beq.n	800701c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007014:	2302      	movs	r3, #2
 8007016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800701a:	e1cd      	b.n	80073b8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d005      	beq.n	800702e <HAL_SPI_TransmitReceive+0x80>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <HAL_SPI_TransmitReceive+0x80>
 8007028:	887b      	ldrh	r3, [r7, #2]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d103      	bne.n	8007036 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007034:	e1c0      	b.n	80073b8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b04      	cmp	r3, #4
 8007040:	d003      	beq.n	800704a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2205      	movs	r2, #5
 8007046:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	887a      	ldrh	r2, [r7, #2]
 800705a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	887a      	ldrh	r2, [r7, #2]
 8007062:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	887a      	ldrh	r2, [r7, #2]
 8007070:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	887a      	ldrh	r2, [r7, #2]
 8007076:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800708c:	d802      	bhi.n	8007094 <HAL_SPI_TransmitReceive+0xe6>
 800708e:	8a3b      	ldrh	r3, [r7, #16]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d908      	bls.n	80070a6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070a2:	605a      	str	r2, [r3, #4]
 80070a4:	e007      	b.n	80070b6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070b4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c0:	2b40      	cmp	r3, #64	; 0x40
 80070c2:	d007      	beq.n	80070d4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070dc:	d97c      	bls.n	80071d8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <HAL_SPI_TransmitReceive+0x13e>
 80070e6:	8a7b      	ldrh	r3, [r7, #18]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d169      	bne.n	80071c0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f0:	881a      	ldrh	r2, [r3, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fc:	1c9a      	adds	r2, r3, #2
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007106:	b29b      	uxth	r3, r3
 8007108:	3b01      	subs	r3, #1
 800710a:	b29a      	uxth	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007110:	e056      	b.n	80071c0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b02      	cmp	r3, #2
 800711e:	d11b      	bne.n	8007158 <HAL_SPI_TransmitReceive+0x1aa>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007124:	b29b      	uxth	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d016      	beq.n	8007158 <HAL_SPI_TransmitReceive+0x1aa>
 800712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712c:	2b01      	cmp	r3, #1
 800712e:	d113      	bne.n	8007158 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007134:	881a      	ldrh	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007140:	1c9a      	adds	r2, r3, #2
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800714a:	b29b      	uxth	r3, r3
 800714c:	3b01      	subs	r3, #1
 800714e:	b29a      	uxth	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007154:	2300      	movs	r3, #0
 8007156:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b01      	cmp	r3, #1
 8007164:	d11c      	bne.n	80071a0 <HAL_SPI_TransmitReceive+0x1f2>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800716c:	b29b      	uxth	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d016      	beq.n	80071a0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717c:	b292      	uxth	r2, r2
 800717e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007184:	1c9a      	adds	r2, r3, #2
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007190:	b29b      	uxth	r3, r3
 8007192:	3b01      	subs	r3, #1
 8007194:	b29a      	uxth	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800719c:	2301      	movs	r3, #1
 800719e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80071a0:	f7fb fa00 	bl	80025a4 <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d807      	bhi.n	80071c0 <HAL_SPI_TransmitReceive+0x212>
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b6:	d003      	beq.n	80071c0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80071be:	e0fb      	b.n	80073b8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1a3      	bne.n	8007112 <HAL_SPI_TransmitReceive+0x164>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d19d      	bne.n	8007112 <HAL_SPI_TransmitReceive+0x164>
 80071d6:	e0df      	b.n	8007398 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d003      	beq.n	80071e8 <HAL_SPI_TransmitReceive+0x23a>
 80071e0:	8a7b      	ldrh	r3, [r7, #18]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	f040 80cb 	bne.w	800737e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d912      	bls.n	8007218 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f6:	881a      	ldrh	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007202:	1c9a      	adds	r2, r3, #2
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800720c:	b29b      	uxth	r3, r3
 800720e:	3b02      	subs	r3, #2
 8007210:	b29a      	uxth	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007216:	e0b2      	b.n	800737e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	330c      	adds	r3, #12
 8007222:	7812      	ldrb	r2, [r2, #0]
 8007224:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722a:	1c5a      	adds	r2, r3, #1
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007234:	b29b      	uxth	r3, r3
 8007236:	3b01      	subs	r3, #1
 8007238:	b29a      	uxth	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800723e:	e09e      	b.n	800737e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	2b02      	cmp	r3, #2
 800724c:	d134      	bne.n	80072b8 <HAL_SPI_TransmitReceive+0x30a>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007252:	b29b      	uxth	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	d02f      	beq.n	80072b8 <HAL_SPI_TransmitReceive+0x30a>
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	2b01      	cmp	r3, #1
 800725c:	d12c      	bne.n	80072b8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007262:	b29b      	uxth	r3, r3
 8007264:	2b01      	cmp	r3, #1
 8007266:	d912      	bls.n	800728e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726c:	881a      	ldrh	r2, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007278:	1c9a      	adds	r2, r3, #2
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007282:	b29b      	uxth	r3, r3
 8007284:	3b02      	subs	r3, #2
 8007286:	b29a      	uxth	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800728c:	e012      	b.n	80072b4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	330c      	adds	r3, #12
 8007298:	7812      	ldrb	r2, [r2, #0]
 800729a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	3b01      	subs	r3, #1
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d148      	bne.n	8007358 <HAL_SPI_TransmitReceive+0x3aa>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d042      	beq.n	8007358 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072d8:	b29b      	uxth	r3, r3
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d923      	bls.n	8007326 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68da      	ldr	r2, [r3, #12]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e8:	b292      	uxth	r2, r2
 80072ea:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f0:	1c9a      	adds	r2, r3, #2
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	3b02      	subs	r3, #2
 8007300:	b29a      	uxth	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800730e:	b29b      	uxth	r3, r3
 8007310:	2b01      	cmp	r3, #1
 8007312:	d81f      	bhi.n	8007354 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007322:	605a      	str	r2, [r3, #4]
 8007324:	e016      	b.n	8007354 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f103 020c 	add.w	r2, r3, #12
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007332:	7812      	ldrb	r2, [r2, #0]
 8007334:	b2d2      	uxtb	r2, r2
 8007336:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733c:	1c5a      	adds	r2, r3, #1
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007348:	b29b      	uxth	r3, r3
 800734a:	3b01      	subs	r3, #1
 800734c:	b29a      	uxth	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007354:	2301      	movs	r3, #1
 8007356:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007358:	f7fb f924 	bl	80025a4 <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007364:	429a      	cmp	r2, r3
 8007366:	d803      	bhi.n	8007370 <HAL_SPI_TransmitReceive+0x3c2>
 8007368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736e:	d102      	bne.n	8007376 <HAL_SPI_TransmitReceive+0x3c8>
 8007370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007372:	2b00      	cmp	r3, #0
 8007374:	d103      	bne.n	800737e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800737c:	e01c      	b.n	80073b8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007382:	b29b      	uxth	r3, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	f47f af5b 	bne.w	8007240 <HAL_SPI_TransmitReceive+0x292>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007390:	b29b      	uxth	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	f47f af54 	bne.w	8007240 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007398:	69fa      	ldr	r2, [r7, #28]
 800739a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 f98f 	bl	80076c0 <SPI_EndRxTxTransaction>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d006      	beq.n	80073b6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2220      	movs	r2, #32
 80073b2:	661a      	str	r2, [r3, #96]	; 0x60
 80073b4:	e000      	b.n	80073b8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80073b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80073c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3728      	adds	r7, #40	; 0x28
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b088      	sub	sp, #32
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	603b      	str	r3, [r7, #0]
 80073e0:	4613      	mov	r3, r2
 80073e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073e4:	f7fb f8de 	bl	80025a4 <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ec:	1a9b      	subs	r3, r3, r2
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	4413      	add	r3, r2
 80073f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80073f4:	f7fb f8d6 	bl	80025a4 <HAL_GetTick>
 80073f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073fa:	4b39      	ldr	r3, [pc, #228]	; (80074e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	015b      	lsls	r3, r3, #5
 8007400:	0d1b      	lsrs	r3, r3, #20
 8007402:	69fa      	ldr	r2, [r7, #28]
 8007404:	fb02 f303 	mul.w	r3, r2, r3
 8007408:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800740a:	e054      	b.n	80074b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007412:	d050      	beq.n	80074b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007414:	f7fb f8c6 	bl	80025a4 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	69fa      	ldr	r2, [r7, #28]
 8007420:	429a      	cmp	r2, r3
 8007422:	d902      	bls.n	800742a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d13d      	bne.n	80074a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007438:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007442:	d111      	bne.n	8007468 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800744c:	d004      	beq.n	8007458 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007456:	d107      	bne.n	8007468 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007466:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007470:	d10f      	bne.n	8007492 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007490:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e017      	b.n	80074d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d101      	bne.n	80074b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074ac:	2300      	movs	r3, #0
 80074ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	3b01      	subs	r3, #1
 80074b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	689a      	ldr	r2, [r3, #8]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	4013      	ands	r3, r2
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	bf0c      	ite	eq
 80074c6:	2301      	moveq	r3, #1
 80074c8:	2300      	movne	r3, #0
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	461a      	mov	r2, r3
 80074ce:	79fb      	ldrb	r3, [r7, #7]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d19b      	bne.n	800740c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3720      	adds	r7, #32
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	20000004 	.word	0x20000004

080074e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b08a      	sub	sp, #40	; 0x28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
 80074f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80074f2:	2300      	movs	r3, #0
 80074f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80074f6:	f7fb f855 	bl	80025a4 <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	1a9b      	subs	r3, r3, r2
 8007500:	683a      	ldr	r2, [r7, #0]
 8007502:	4413      	add	r3, r2
 8007504:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007506:	f7fb f84d 	bl	80025a4 <HAL_GetTick>
 800750a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	330c      	adds	r3, #12
 8007512:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007514:	4b3d      	ldr	r3, [pc, #244]	; (800760c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	4613      	mov	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	00da      	lsls	r2, r3, #3
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	0d1b      	lsrs	r3, r3, #20
 8007524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007526:	fb02 f303 	mul.w	r3, r2, r3
 800752a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800752c:	e060      	b.n	80075f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007534:	d107      	bne.n	8007546 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d104      	bne.n	8007546 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	b2db      	uxtb	r3, r3
 8007542:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007544:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754c:	d050      	beq.n	80075f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800754e:	f7fb f829 	bl	80025a4 <HAL_GetTick>
 8007552:	4602      	mov	r2, r0
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800755a:	429a      	cmp	r2, r3
 800755c:	d902      	bls.n	8007564 <SPI_WaitFifoStateUntilTimeout+0x80>
 800755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007560:	2b00      	cmp	r3, #0
 8007562:	d13d      	bne.n	80075e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007572:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800757c:	d111      	bne.n	80075a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007586:	d004      	beq.n	8007592 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007590:	d107      	bne.n	80075a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075aa:	d10f      	bne.n	80075cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e010      	b.n	8007602 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d101      	bne.n	80075ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	3b01      	subs	r3, #1
 80075ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689a      	ldr	r2, [r3, #8]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	4013      	ands	r3, r2
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d196      	bne.n	800752e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3728      	adds	r7, #40	; 0x28
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	20000004 	.word	0x20000004

08007610 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af02      	add	r7, sp, #8
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007624:	d111      	bne.n	800764a <SPI_EndRxTransaction+0x3a>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800762e:	d004      	beq.n	800763a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007638:	d107      	bne.n	800764a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007648:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2200      	movs	r2, #0
 8007652:	2180      	movs	r1, #128	; 0x80
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f7ff febd 	bl	80073d4 <SPI_WaitFlagStateUntilTimeout>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d007      	beq.n	8007670 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007664:	f043 0220 	orr.w	r2, r3, #32
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e023      	b.n	80076b8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007678:	d11d      	bne.n	80076b6 <SPI_EndRxTransaction+0xa6>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007682:	d004      	beq.n	800768e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800768c:	d113      	bne.n	80076b6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2200      	movs	r2, #0
 8007696:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f7ff ff22 	bl	80074e4 <SPI_WaitFifoStateUntilTimeout>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d007      	beq.n	80076b6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076aa:	f043 0220 	orr.w	r2, r3, #32
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e000      	b.n	80076b8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af02      	add	r7, sp, #8
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f7ff ff03 	bl	80074e4 <SPI_WaitFifoStateUntilTimeout>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d007      	beq.n	80076f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076e8:	f043 0220 	orr.w	r2, r3, #32
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e027      	b.n	8007744 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2200      	movs	r2, #0
 80076fc:	2180      	movs	r1, #128	; 0x80
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f7ff fe68 	bl	80073d4 <SPI_WaitFlagStateUntilTimeout>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d007      	beq.n	800771a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800770e:	f043 0220 	orr.w	r2, r3, #32
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e014      	b.n	8007744 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	2200      	movs	r2, #0
 8007722:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f7ff fedc 	bl	80074e4 <SPI_WaitFifoStateUntilTimeout>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d007      	beq.n	8007742 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007736:	f043 0220 	orr.w	r2, r3, #32
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e000      	b.n	8007744 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <__errno>:
 800774c:	4b01      	ldr	r3, [pc, #4]	; (8007754 <__errno+0x8>)
 800774e:	6818      	ldr	r0, [r3, #0]
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	20000010 	.word	0x20000010

08007758 <__libc_init_array>:
 8007758:	b570      	push	{r4, r5, r6, lr}
 800775a:	4d0d      	ldr	r5, [pc, #52]	; (8007790 <__libc_init_array+0x38>)
 800775c:	4c0d      	ldr	r4, [pc, #52]	; (8007794 <__libc_init_array+0x3c>)
 800775e:	1b64      	subs	r4, r4, r5
 8007760:	10a4      	asrs	r4, r4, #2
 8007762:	2600      	movs	r6, #0
 8007764:	42a6      	cmp	r6, r4
 8007766:	d109      	bne.n	800777c <__libc_init_array+0x24>
 8007768:	4d0b      	ldr	r5, [pc, #44]	; (8007798 <__libc_init_array+0x40>)
 800776a:	4c0c      	ldr	r4, [pc, #48]	; (800779c <__libc_init_array+0x44>)
 800776c:	f000 fa24 	bl	8007bb8 <_init>
 8007770:	1b64      	subs	r4, r4, r5
 8007772:	10a4      	asrs	r4, r4, #2
 8007774:	2600      	movs	r6, #0
 8007776:	42a6      	cmp	r6, r4
 8007778:	d105      	bne.n	8007786 <__libc_init_array+0x2e>
 800777a:	bd70      	pop	{r4, r5, r6, pc}
 800777c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007780:	4798      	blx	r3
 8007782:	3601      	adds	r6, #1
 8007784:	e7ee      	b.n	8007764 <__libc_init_array+0xc>
 8007786:	f855 3b04 	ldr.w	r3, [r5], #4
 800778a:	4798      	blx	r3
 800778c:	3601      	adds	r6, #1
 800778e:	e7f2      	b.n	8007776 <__libc_init_array+0x1e>
 8007790:	08007be4 	.word	0x08007be4
 8007794:	08007be4 	.word	0x08007be4
 8007798:	08007be4 	.word	0x08007be4
 800779c:	08007be8 	.word	0x08007be8

080077a0 <memset>:
 80077a0:	4402      	add	r2, r0
 80077a2:	4603      	mov	r3, r0
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d100      	bne.n	80077aa <memset+0xa>
 80077a8:	4770      	bx	lr
 80077aa:	f803 1b01 	strb.w	r1, [r3], #1
 80077ae:	e7f9      	b.n	80077a4 <memset+0x4>

080077b0 <log>:
 80077b0:	b538      	push	{r3, r4, r5, lr}
 80077b2:	ed2d 8b02 	vpush	{d8}
 80077b6:	ec55 4b10 	vmov	r4, r5, d0
 80077ba:	f000 f839 	bl	8007830 <__ieee754_log>
 80077be:	4622      	mov	r2, r4
 80077c0:	462b      	mov	r3, r5
 80077c2:	4620      	mov	r0, r4
 80077c4:	4629      	mov	r1, r5
 80077c6:	eeb0 8a40 	vmov.f32	s16, s0
 80077ca:	eef0 8a60 	vmov.f32	s17, s1
 80077ce:	f7f9 f979 	bl	8000ac4 <__aeabi_dcmpun>
 80077d2:	b998      	cbnz	r0, 80077fc <log+0x4c>
 80077d4:	2200      	movs	r2, #0
 80077d6:	2300      	movs	r3, #0
 80077d8:	4620      	mov	r0, r4
 80077da:	4629      	mov	r1, r5
 80077dc:	f7f9 f968 	bl	8000ab0 <__aeabi_dcmpgt>
 80077e0:	b960      	cbnz	r0, 80077fc <log+0x4c>
 80077e2:	2200      	movs	r2, #0
 80077e4:	2300      	movs	r3, #0
 80077e6:	4620      	mov	r0, r4
 80077e8:	4629      	mov	r1, r5
 80077ea:	f7f9 f939 	bl	8000a60 <__aeabi_dcmpeq>
 80077ee:	b160      	cbz	r0, 800780a <log+0x5a>
 80077f0:	f7ff ffac 	bl	800774c <__errno>
 80077f4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8007820 <log+0x70>
 80077f8:	2322      	movs	r3, #34	; 0x22
 80077fa:	6003      	str	r3, [r0, #0]
 80077fc:	eeb0 0a48 	vmov.f32	s0, s16
 8007800:	eef0 0a68 	vmov.f32	s1, s17
 8007804:	ecbd 8b02 	vpop	{d8}
 8007808:	bd38      	pop	{r3, r4, r5, pc}
 800780a:	f7ff ff9f 	bl	800774c <__errno>
 800780e:	ecbd 8b02 	vpop	{d8}
 8007812:	2321      	movs	r3, #33	; 0x21
 8007814:	6003      	str	r3, [r0, #0]
 8007816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800781a:	4803      	ldr	r0, [pc, #12]	; (8007828 <log+0x78>)
 800781c:	f000 b9c4 	b.w	8007ba8 <nan>
 8007820:	00000000 	.word	0x00000000
 8007824:	fff00000 	.word	0xfff00000
 8007828:	08007be0 	.word	0x08007be0
 800782c:	00000000 	.word	0x00000000

08007830 <__ieee754_log>:
 8007830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007834:	ec51 0b10 	vmov	r0, r1, d0
 8007838:	ed2d 8b04 	vpush	{d8-d9}
 800783c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007840:	b083      	sub	sp, #12
 8007842:	460d      	mov	r5, r1
 8007844:	da29      	bge.n	800789a <__ieee754_log+0x6a>
 8007846:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800784a:	4303      	orrs	r3, r0
 800784c:	ee10 2a10 	vmov	r2, s0
 8007850:	d10c      	bne.n	800786c <__ieee754_log+0x3c>
 8007852:	49cf      	ldr	r1, [pc, #828]	; (8007b90 <__ieee754_log+0x360>)
 8007854:	2200      	movs	r2, #0
 8007856:	2300      	movs	r3, #0
 8007858:	2000      	movs	r0, #0
 800785a:	f7f8 ffc3 	bl	80007e4 <__aeabi_ddiv>
 800785e:	ec41 0b10 	vmov	d0, r0, r1
 8007862:	b003      	add	sp, #12
 8007864:	ecbd 8b04 	vpop	{d8-d9}
 8007868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800786c:	2900      	cmp	r1, #0
 800786e:	da05      	bge.n	800787c <__ieee754_log+0x4c>
 8007870:	460b      	mov	r3, r1
 8007872:	f7f8 fcd5 	bl	8000220 <__aeabi_dsub>
 8007876:	2200      	movs	r2, #0
 8007878:	2300      	movs	r3, #0
 800787a:	e7ee      	b.n	800785a <__ieee754_log+0x2a>
 800787c:	4bc5      	ldr	r3, [pc, #788]	; (8007b94 <__ieee754_log+0x364>)
 800787e:	2200      	movs	r2, #0
 8007880:	f7f8 fe86 	bl	8000590 <__aeabi_dmul>
 8007884:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8007888:	460d      	mov	r5, r1
 800788a:	4ac3      	ldr	r2, [pc, #780]	; (8007b98 <__ieee754_log+0x368>)
 800788c:	4295      	cmp	r5, r2
 800788e:	dd06      	ble.n	800789e <__ieee754_log+0x6e>
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	f7f8 fcc6 	bl	8000224 <__adddf3>
 8007898:	e7e1      	b.n	800785e <__ieee754_log+0x2e>
 800789a:	2300      	movs	r3, #0
 800789c:	e7f5      	b.n	800788a <__ieee754_log+0x5a>
 800789e:	152c      	asrs	r4, r5, #20
 80078a0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80078a4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80078a8:	441c      	add	r4, r3
 80078aa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80078ae:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80078b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078b6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80078ba:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80078be:	ea42 0105 	orr.w	r1, r2, r5
 80078c2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80078c6:	2200      	movs	r2, #0
 80078c8:	4bb4      	ldr	r3, [pc, #720]	; (8007b9c <__ieee754_log+0x36c>)
 80078ca:	f7f8 fca9 	bl	8000220 <__aeabi_dsub>
 80078ce:	1cab      	adds	r3, r5, #2
 80078d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	4682      	mov	sl, r0
 80078d8:	468b      	mov	fp, r1
 80078da:	f04f 0200 	mov.w	r2, #0
 80078de:	dc53      	bgt.n	8007988 <__ieee754_log+0x158>
 80078e0:	2300      	movs	r3, #0
 80078e2:	f7f9 f8bd 	bl	8000a60 <__aeabi_dcmpeq>
 80078e6:	b1d0      	cbz	r0, 800791e <__ieee754_log+0xee>
 80078e8:	2c00      	cmp	r4, #0
 80078ea:	f000 8122 	beq.w	8007b32 <__ieee754_log+0x302>
 80078ee:	4620      	mov	r0, r4
 80078f0:	f7f8 fde4 	bl	80004bc <__aeabi_i2d>
 80078f4:	a390      	add	r3, pc, #576	; (adr r3, 8007b38 <__ieee754_log+0x308>)
 80078f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fa:	4606      	mov	r6, r0
 80078fc:	460f      	mov	r7, r1
 80078fe:	f7f8 fe47 	bl	8000590 <__aeabi_dmul>
 8007902:	a38f      	add	r3, pc, #572	; (adr r3, 8007b40 <__ieee754_log+0x310>)
 8007904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007908:	4604      	mov	r4, r0
 800790a:	460d      	mov	r5, r1
 800790c:	4630      	mov	r0, r6
 800790e:	4639      	mov	r1, r7
 8007910:	f7f8 fe3e 	bl	8000590 <__aeabi_dmul>
 8007914:	4602      	mov	r2, r0
 8007916:	460b      	mov	r3, r1
 8007918:	4620      	mov	r0, r4
 800791a:	4629      	mov	r1, r5
 800791c:	e7ba      	b.n	8007894 <__ieee754_log+0x64>
 800791e:	a38a      	add	r3, pc, #552	; (adr r3, 8007b48 <__ieee754_log+0x318>)
 8007920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007924:	4650      	mov	r0, sl
 8007926:	4659      	mov	r1, fp
 8007928:	f7f8 fe32 	bl	8000590 <__aeabi_dmul>
 800792c:	4602      	mov	r2, r0
 800792e:	460b      	mov	r3, r1
 8007930:	2000      	movs	r0, #0
 8007932:	499b      	ldr	r1, [pc, #620]	; (8007ba0 <__ieee754_log+0x370>)
 8007934:	f7f8 fc74 	bl	8000220 <__aeabi_dsub>
 8007938:	4652      	mov	r2, sl
 800793a:	4606      	mov	r6, r0
 800793c:	460f      	mov	r7, r1
 800793e:	465b      	mov	r3, fp
 8007940:	4650      	mov	r0, sl
 8007942:	4659      	mov	r1, fp
 8007944:	f7f8 fe24 	bl	8000590 <__aeabi_dmul>
 8007948:	4602      	mov	r2, r0
 800794a:	460b      	mov	r3, r1
 800794c:	4630      	mov	r0, r6
 800794e:	4639      	mov	r1, r7
 8007950:	f7f8 fe1e 	bl	8000590 <__aeabi_dmul>
 8007954:	4606      	mov	r6, r0
 8007956:	460f      	mov	r7, r1
 8007958:	b914      	cbnz	r4, 8007960 <__ieee754_log+0x130>
 800795a:	4632      	mov	r2, r6
 800795c:	463b      	mov	r3, r7
 800795e:	e0a2      	b.n	8007aa6 <__ieee754_log+0x276>
 8007960:	4620      	mov	r0, r4
 8007962:	f7f8 fdab 	bl	80004bc <__aeabi_i2d>
 8007966:	a374      	add	r3, pc, #464	; (adr r3, 8007b38 <__ieee754_log+0x308>)
 8007968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796c:	4680      	mov	r8, r0
 800796e:	4689      	mov	r9, r1
 8007970:	f7f8 fe0e 	bl	8000590 <__aeabi_dmul>
 8007974:	a372      	add	r3, pc, #456	; (adr r3, 8007b40 <__ieee754_log+0x310>)
 8007976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797a:	4604      	mov	r4, r0
 800797c:	460d      	mov	r5, r1
 800797e:	4640      	mov	r0, r8
 8007980:	4649      	mov	r1, r9
 8007982:	f7f8 fe05 	bl	8000590 <__aeabi_dmul>
 8007986:	e0a7      	b.n	8007ad8 <__ieee754_log+0x2a8>
 8007988:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800798c:	f7f8 fc4a 	bl	8000224 <__adddf3>
 8007990:	4602      	mov	r2, r0
 8007992:	460b      	mov	r3, r1
 8007994:	4650      	mov	r0, sl
 8007996:	4659      	mov	r1, fp
 8007998:	f7f8 ff24 	bl	80007e4 <__aeabi_ddiv>
 800799c:	ec41 0b18 	vmov	d8, r0, r1
 80079a0:	4620      	mov	r0, r4
 80079a2:	f7f8 fd8b 	bl	80004bc <__aeabi_i2d>
 80079a6:	ec53 2b18 	vmov	r2, r3, d8
 80079aa:	ec41 0b19 	vmov	d9, r0, r1
 80079ae:	ec51 0b18 	vmov	r0, r1, d8
 80079b2:	f7f8 fded 	bl	8000590 <__aeabi_dmul>
 80079b6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80079ba:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80079be:	9301      	str	r3, [sp, #4]
 80079c0:	4602      	mov	r2, r0
 80079c2:	460b      	mov	r3, r1
 80079c4:	4680      	mov	r8, r0
 80079c6:	4689      	mov	r9, r1
 80079c8:	f7f8 fde2 	bl	8000590 <__aeabi_dmul>
 80079cc:	a360      	add	r3, pc, #384	; (adr r3, 8007b50 <__ieee754_log+0x320>)
 80079ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d2:	4606      	mov	r6, r0
 80079d4:	460f      	mov	r7, r1
 80079d6:	f7f8 fddb 	bl	8000590 <__aeabi_dmul>
 80079da:	a35f      	add	r3, pc, #380	; (adr r3, 8007b58 <__ieee754_log+0x328>)
 80079dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e0:	f7f8 fc20 	bl	8000224 <__adddf3>
 80079e4:	4632      	mov	r2, r6
 80079e6:	463b      	mov	r3, r7
 80079e8:	f7f8 fdd2 	bl	8000590 <__aeabi_dmul>
 80079ec:	a35c      	add	r3, pc, #368	; (adr r3, 8007b60 <__ieee754_log+0x330>)
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	f7f8 fc17 	bl	8000224 <__adddf3>
 80079f6:	4632      	mov	r2, r6
 80079f8:	463b      	mov	r3, r7
 80079fa:	f7f8 fdc9 	bl	8000590 <__aeabi_dmul>
 80079fe:	a35a      	add	r3, pc, #360	; (adr r3, 8007b68 <__ieee754_log+0x338>)
 8007a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a04:	f7f8 fc0e 	bl	8000224 <__adddf3>
 8007a08:	4642      	mov	r2, r8
 8007a0a:	464b      	mov	r3, r9
 8007a0c:	f7f8 fdc0 	bl	8000590 <__aeabi_dmul>
 8007a10:	a357      	add	r3, pc, #348	; (adr r3, 8007b70 <__ieee754_log+0x340>)
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	4680      	mov	r8, r0
 8007a18:	4689      	mov	r9, r1
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	4639      	mov	r1, r7
 8007a1e:	f7f8 fdb7 	bl	8000590 <__aeabi_dmul>
 8007a22:	a355      	add	r3, pc, #340	; (adr r3, 8007b78 <__ieee754_log+0x348>)
 8007a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a28:	f7f8 fbfc 	bl	8000224 <__adddf3>
 8007a2c:	4632      	mov	r2, r6
 8007a2e:	463b      	mov	r3, r7
 8007a30:	f7f8 fdae 	bl	8000590 <__aeabi_dmul>
 8007a34:	a352      	add	r3, pc, #328	; (adr r3, 8007b80 <__ieee754_log+0x350>)
 8007a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3a:	f7f8 fbf3 	bl	8000224 <__adddf3>
 8007a3e:	4632      	mov	r2, r6
 8007a40:	463b      	mov	r3, r7
 8007a42:	f7f8 fda5 	bl	8000590 <__aeabi_dmul>
 8007a46:	460b      	mov	r3, r1
 8007a48:	4602      	mov	r2, r0
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	4640      	mov	r0, r8
 8007a4e:	f7f8 fbe9 	bl	8000224 <__adddf3>
 8007a52:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8007a56:	9b01      	ldr	r3, [sp, #4]
 8007a58:	3551      	adds	r5, #81	; 0x51
 8007a5a:	431d      	orrs	r5, r3
 8007a5c:	2d00      	cmp	r5, #0
 8007a5e:	4680      	mov	r8, r0
 8007a60:	4689      	mov	r9, r1
 8007a62:	dd48      	ble.n	8007af6 <__ieee754_log+0x2c6>
 8007a64:	4b4e      	ldr	r3, [pc, #312]	; (8007ba0 <__ieee754_log+0x370>)
 8007a66:	2200      	movs	r2, #0
 8007a68:	4650      	mov	r0, sl
 8007a6a:	4659      	mov	r1, fp
 8007a6c:	f7f8 fd90 	bl	8000590 <__aeabi_dmul>
 8007a70:	4652      	mov	r2, sl
 8007a72:	465b      	mov	r3, fp
 8007a74:	f7f8 fd8c 	bl	8000590 <__aeabi_dmul>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	4606      	mov	r6, r0
 8007a7e:	460f      	mov	r7, r1
 8007a80:	4640      	mov	r0, r8
 8007a82:	4649      	mov	r1, r9
 8007a84:	f7f8 fbce 	bl	8000224 <__adddf3>
 8007a88:	ec53 2b18 	vmov	r2, r3, d8
 8007a8c:	f7f8 fd80 	bl	8000590 <__aeabi_dmul>
 8007a90:	4680      	mov	r8, r0
 8007a92:	4689      	mov	r9, r1
 8007a94:	b964      	cbnz	r4, 8007ab0 <__ieee754_log+0x280>
 8007a96:	4602      	mov	r2, r0
 8007a98:	460b      	mov	r3, r1
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	4639      	mov	r1, r7
 8007a9e:	f7f8 fbbf 	bl	8000220 <__aeabi_dsub>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	4650      	mov	r0, sl
 8007aa8:	4659      	mov	r1, fp
 8007aaa:	f7f8 fbb9 	bl	8000220 <__aeabi_dsub>
 8007aae:	e6d6      	b.n	800785e <__ieee754_log+0x2e>
 8007ab0:	a321      	add	r3, pc, #132	; (adr r3, 8007b38 <__ieee754_log+0x308>)
 8007ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab6:	ec51 0b19 	vmov	r0, r1, d9
 8007aba:	f7f8 fd69 	bl	8000590 <__aeabi_dmul>
 8007abe:	a320      	add	r3, pc, #128	; (adr r3, 8007b40 <__ieee754_log+0x310>)
 8007ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	460d      	mov	r5, r1
 8007ac8:	ec51 0b19 	vmov	r0, r1, d9
 8007acc:	f7f8 fd60 	bl	8000590 <__aeabi_dmul>
 8007ad0:	4642      	mov	r2, r8
 8007ad2:	464b      	mov	r3, r9
 8007ad4:	f7f8 fba6 	bl	8000224 <__adddf3>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	460b      	mov	r3, r1
 8007adc:	4630      	mov	r0, r6
 8007ade:	4639      	mov	r1, r7
 8007ae0:	f7f8 fb9e 	bl	8000220 <__aeabi_dsub>
 8007ae4:	4652      	mov	r2, sl
 8007ae6:	465b      	mov	r3, fp
 8007ae8:	f7f8 fb9a 	bl	8000220 <__aeabi_dsub>
 8007aec:	4602      	mov	r2, r0
 8007aee:	460b      	mov	r3, r1
 8007af0:	4620      	mov	r0, r4
 8007af2:	4629      	mov	r1, r5
 8007af4:	e7d9      	b.n	8007aaa <__ieee754_log+0x27a>
 8007af6:	4602      	mov	r2, r0
 8007af8:	460b      	mov	r3, r1
 8007afa:	4650      	mov	r0, sl
 8007afc:	4659      	mov	r1, fp
 8007afe:	f7f8 fb8f 	bl	8000220 <__aeabi_dsub>
 8007b02:	ec53 2b18 	vmov	r2, r3, d8
 8007b06:	f7f8 fd43 	bl	8000590 <__aeabi_dmul>
 8007b0a:	4606      	mov	r6, r0
 8007b0c:	460f      	mov	r7, r1
 8007b0e:	2c00      	cmp	r4, #0
 8007b10:	f43f af23 	beq.w	800795a <__ieee754_log+0x12a>
 8007b14:	a308      	add	r3, pc, #32	; (adr r3, 8007b38 <__ieee754_log+0x308>)
 8007b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1a:	ec51 0b19 	vmov	r0, r1, d9
 8007b1e:	f7f8 fd37 	bl	8000590 <__aeabi_dmul>
 8007b22:	a307      	add	r3, pc, #28	; (adr r3, 8007b40 <__ieee754_log+0x310>)
 8007b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b28:	4604      	mov	r4, r0
 8007b2a:	460d      	mov	r5, r1
 8007b2c:	ec51 0b19 	vmov	r0, r1, d9
 8007b30:	e727      	b.n	8007982 <__ieee754_log+0x152>
 8007b32:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8007b88 <__ieee754_log+0x358>
 8007b36:	e694      	b.n	8007862 <__ieee754_log+0x32>
 8007b38:	fee00000 	.word	0xfee00000
 8007b3c:	3fe62e42 	.word	0x3fe62e42
 8007b40:	35793c76 	.word	0x35793c76
 8007b44:	3dea39ef 	.word	0x3dea39ef
 8007b48:	55555555 	.word	0x55555555
 8007b4c:	3fd55555 	.word	0x3fd55555
 8007b50:	df3e5244 	.word	0xdf3e5244
 8007b54:	3fc2f112 	.word	0x3fc2f112
 8007b58:	96cb03de 	.word	0x96cb03de
 8007b5c:	3fc74664 	.word	0x3fc74664
 8007b60:	94229359 	.word	0x94229359
 8007b64:	3fd24924 	.word	0x3fd24924
 8007b68:	55555593 	.word	0x55555593
 8007b6c:	3fe55555 	.word	0x3fe55555
 8007b70:	d078c69f 	.word	0xd078c69f
 8007b74:	3fc39a09 	.word	0x3fc39a09
 8007b78:	1d8e78af 	.word	0x1d8e78af
 8007b7c:	3fcc71c5 	.word	0x3fcc71c5
 8007b80:	9997fa04 	.word	0x9997fa04
 8007b84:	3fd99999 	.word	0x3fd99999
	...
 8007b90:	c3500000 	.word	0xc3500000
 8007b94:	43500000 	.word	0x43500000
 8007b98:	7fefffff 	.word	0x7fefffff
 8007b9c:	3ff00000 	.word	0x3ff00000
 8007ba0:	3fe00000 	.word	0x3fe00000
 8007ba4:	00000000 	.word	0x00000000

08007ba8 <nan>:
 8007ba8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007bb0 <nan+0x8>
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	00000000 	.word	0x00000000
 8007bb4:	7ff80000 	.word	0x7ff80000

08007bb8 <_init>:
 8007bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bba:	bf00      	nop
 8007bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bbe:	bc08      	pop	{r3}
 8007bc0:	469e      	mov	lr, r3
 8007bc2:	4770      	bx	lr

08007bc4 <_fini>:
 8007bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc6:	bf00      	nop
 8007bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bca:	bc08      	pop	{r3}
 8007bcc:	469e      	mov	lr, r3
 8007bce:	4770      	bx	lr
